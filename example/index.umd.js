/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["$"] = factory();
	else
		root["$"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/viewer/Style.css":
/*!********************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/viewer/Style.css ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/*Table Data Study*/\r\n#infoECG {\r\n  height: auto;\r\n}\r\n.divTableRow {\r\n  display: table-row;\r\n}\r\n.divTableHeading {\r\n  background-color: #eee;\r\n  display: table-header-group;\r\n}\r\n.divTableCell,\r\n.divTableHead {\r\n  display: table-cell;\r\n  font-size: 13px;\r\n  font-weight: 700;\r\n  color: #000000;\r\n}\r\n.divTableCell i {\r\n  font-weight: normal;\r\n}\r\n.divTableHeading {\r\n  background-color: #eee;\r\n  display: table-header-group;\r\n  font-weight: bold;\r\n}\r\n.divTableFoot {\r\n  background-color: #eee;\r\n  display: table-footer-group;\r\n  font-weight: bold;\r\n}\r\n#divTableBody {\r\n  height: auto;\r\n  background: #f9f8f2;\r\n  width: 100%;\r\n  display: table;\r\n  padding: 10px;\r\n}\r\n\r\n/** Buttons **/\r\n#toolsECG {\r\n  background: #f9f8f2;\r\n  width: 100%;\r\n  display: flow-root;\r\n  border-top: 2px solid rgb(0, 0, 0);\r\n}\r\n.divTools {\r\n  float: right;\r\n  font-size: 13px;\r\n  font-weight: 700;\r\n  margin-left: 1.5rem;\r\n}\r\n.divTools i {\r\n  font-weight: normal;\r\n}\r\n.divTools button {\r\n  background-color: #dadada;\r\n  color: black;\r\n  padding: 5px 15px;\r\n  margin: 4px 2px;\r\n  border-radius: 10%;\r\n}\r\n\r\n/*Zoom buttons*/\r\n#zoomButons {\r\n  position: absolute;\r\n  width: 30px;\r\n  top: 125px;\r\n  right: 2px;\r\n}\r\n\r\n#zoomButons button {\r\n  background-color: #dadada;\r\n  color: black;\r\n  padding: 5px;\r\n  width: 30px;\r\n  height: 30px;\r\n  margin: 0px 0px 2px 0px;\r\n  border-radius: 10%;\r\n}\r\n`, \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://$/./src/viewer/Style.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};\n\n//# sourceURL=webpack://$/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://$/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./node_modules/dcmjs/build/dcmjs.es.js":
/*!**********************************************!*\
  !*** ./node_modules/dcmjs/build/dcmjs.es.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DICOMWEB: () => (/* binding */ DICOMWEB),\n/* harmony export */   adapters: () => (/* binding */ adapters),\n/* harmony export */   anonymizer: () => (/* binding */ anonymizer),\n/* harmony export */   data: () => (/* binding */ data),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   derivations: () => (/* binding */ derivations),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   normalizers: () => (/* binding */ normalizers),\n/* harmony export */   sr: () => (/* binding */ sr),\n/* harmony export */   utilities: () => (/* binding */ utilities)\n/* harmony export */ });\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n/*\n  Copyright Â© 2018 Andrew Powell\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of this Source Code Form.\n*/\n\nconst noop = () => {};\nconst levels = Symbol('log-levels');\nconst instance = Symbol('log-instance');\n\nvar MethodFactory_1 = class MethodFactory {\n  constructor(logger) {\n    this[instance] = logger;\n    this[levels] = {\n      TRACE: 0,\n      DEBUG: 1,\n      INFO: 2,\n      WARN: 3,\n      ERROR: 4,\n      SILENT: 5\n    };\n  }\n\n  get levels() {\n    return this[levels];\n  }\n\n  get logger() {\n    return this[instance];\n  }\n\n  set logger(logger) {\n    this[instance] = logger;\n  }\n\n  get methods() {\n    return Object.keys(this.levels)\n      .map((key) => key.toLowerCase())\n      .filter((key) => key !== 'silent');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  bindMethod(obj, methodName) {\n    const method = obj[methodName];\n    if (typeof method.bind === 'function') {\n      return method.bind(obj);\n    }\n\n    try {\n      return Function.prototype.bind.call(method, obj);\n    } catch (e) {\n      // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n      return function result() {\n        // eslint-disable-next-line prefer-rest-params\n        return Function.prototype.apply.apply(method, [obj, arguments]);\n      };\n    }\n  }\n\n  distillLevel(level) {\n    let result = level;\n\n    if (typeof result === 'string' && typeof this.levels[result.toUpperCase()] !== 'undefined') {\n      result = this.levels[result.toUpperCase()];\n    }\n\n    if (this.levelValid(result)) {\n      return result;\n    }\n\n    return false;\n  }\n\n  levelValid(level) {\n    if (typeof level === 'number' && level >= 0 && level <= this.levels.SILENT) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Build the best logging method possible for this env\n   * Wherever possible we want to bind, not wrap, to preserve stack traces.\n   * Since we're targeting modern browsers, there's no need to wait for the\n   * console to become available.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  make(methodName) {\n    if (methodName === 'debug') {\n      // eslint-disable-next-line no-param-reassign\n      methodName = 'log';\n    }\n\n    /* eslint-disable no-console */\n    if (typeof console[methodName] !== 'undefined') {\n      return this.bindMethod(console, methodName);\n    } else if (typeof console.log !== 'undefined') {\n      return this.bindMethod(console, 'log');\n    }\n\n    /* eslint-enable no-console */\n    return noop;\n  }\n\n  replaceMethods(logLevel) {\n    const level = this.distillLevel(logLevel);\n\n    if (level == null) {\n      throw new Error(`loglevelnext: replaceMethods() called with invalid level: ${logLevel}`);\n    }\n\n    if (!this.logger || this.logger.type !== 'LogLevel') {\n      throw new TypeError(\n        'loglevelnext: Logger is undefined or invalid. Please specify a valid Logger instance.'\n      );\n    }\n\n    this.methods.forEach((methodName) => {\n      const { [methodName.toUpperCase()]: methodLevel } = this.levels;\n\n      this.logger[methodName] = methodLevel < level ? noop : this.make(methodName);\n    });\n\n    // Define log.log as an alias for log.debug\n    this.logger.log = this.logger.debug;\n  }\n};\n\n/*\n  Copyright Â© 2018 Andrew Powell\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of this Source Code Form.\n*/\n\n\n\nconst defaults = {\n  level: (opts) => `[${opts.level}]`,\n  name: (opts) => opts.logger.name,\n  template: '{{time}} {{level}} ',\n  time: () => new Date().toTimeString().split(' ')[0]\n};\n\nvar PrefixFactory_1 = class PrefixFactory extends MethodFactory_1 {\n  constructor(logger, options) {\n    super(logger);\n    this.options = Object.assign({}, defaults, options);\n  }\n\n  interpolate(level) {\n    return this.options.template.replace(/{{([^{}]*)}}/g, (stache, prop) => {\n      const fn = this.options[prop];\n\n      if (fn) {\n        return fn({ level, logger: this.logger });\n      }\n\n      return stache;\n    });\n  }\n\n  make(methodName) {\n    const og = super.make(methodName);\n\n    return (...args) => {\n      const output = this.interpolate(methodName);\n      const [first] = args;\n\n      if (typeof first === 'string') {\n        // eslint-disable-next-line no-param-reassign\n        args[0] = output + first;\n      } else {\n        args.unshift(output);\n      }\n\n      og(...args);\n    };\n  }\n};\n\n/*\n  Copyright Â© 2018 Andrew Powell\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of this Source Code Form.\n*/\n\n\n\n\n\nconst defaults$1 = {\n  factory: null,\n  level: 'warn',\n  name: +new Date(),\n  prefix: null\n};\n\nvar LogLevel_1 = class LogLevel {\n  constructor(options) {\n    // implement for some _very_ loose type checking. avoids getting into a\n    // circular require between MethodFactory and LogLevel\n    this.type = 'LogLevel';\n    this.options = Object.assign({}, defaults$1, options);\n    this.methodFactory = options.factory;\n\n    if (!this.methodFactory) {\n      const factory = options.prefix\n        ? new PrefixFactory_1(this, options.prefix)\n        : new MethodFactory_1(this);\n      this.methodFactory = factory;\n    }\n\n    if (!this.methodFactory.logger) {\n      this.methodFactory.logger = this;\n    }\n\n    this.name = options.name || '<unknown>';\n\n    // this.level is a setter, do this after setting up the factory\n    this.level = this.options.level;\n  }\n\n  get factory() {\n    return this.methodFactory;\n  }\n\n  set factory(factory) {\n    // eslint-disable-next-line no-param-reassign\n    factory.logger = this;\n    this.methodFactory = factory;\n    this.methodFactory.replaceMethods(this.level);\n  }\n\n  disable() {\n    this.level = this.levels.SILENT;\n  }\n\n  enable() {\n    this.level = this.levels.TRACE;\n  }\n\n  get level() {\n    return this.currentLevel;\n  }\n\n  set level(logLevel) {\n    const level = this.methodFactory.distillLevel(logLevel);\n\n    if (level === false || level == null) {\n      throw new RangeError(`loglevelnext: setLevel() called with invalid level: ${logLevel}`);\n    }\n\n    this.currentLevel = level;\n    this.methodFactory.replaceMethods(level);\n\n    if (typeof console === 'undefined' && level < this.levels.SILENT) {\n      // eslint-disable-next-line no-console\n      console.warn('loglevelnext: console is undefined. The log will produce no output.');\n    }\n  }\n\n  get levels() {\n    // eslint-disable-line class-methods-use-this\n    return this.methodFactory.levels;\n  }\n};\n\nvar lib = createCommonjsModule(function (module) {\n/*\n  Copyright Â© 2018 Andrew Powell\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of this Source Code Form.\n*/\n\n\n\n\n\nconst factories = Symbol('log-factories');\n\nclass DefaultLogger extends LogLevel_1 {\n  constructor() {\n    super({ name: 'default' });\n\n    this.cache = { default: this };\n    this[factories] = { MethodFactory: MethodFactory_1, PrefixFactory: PrefixFactory_1 };\n  }\n\n  get factories() {\n    return this[factories];\n  }\n\n  get loggers() {\n    return this.cache;\n  }\n\n  create(opts) {\n    let options;\n\n    if (typeof opts === 'string') {\n      options = { name: opts };\n    } else {\n      options = Object.assign({}, opts);\n    }\n\n    if (!options.id) {\n      options.id = options.name;\n    }\n\n    const { name, id } = options;\n    const defaults = { level: this.level };\n\n    if (typeof name !== 'string' || !name || !name.length) {\n      throw new TypeError('You must supply a name when creating a logger.');\n    }\n\n    let logger = this.cache[id];\n    if (!logger) {\n      logger = new LogLevel_1(Object.assign({}, defaults, options));\n      this.cache[id] = logger;\n    }\n    return logger;\n  }\n}\n\nmodule.exports = new DefaultLogger();\n\n// TypeScript fix\nmodule.exports.default = module.exports;\n});\n\nvar log = lib.create(\"dcmjs\");\n\n/* eslint no-bitwise: 0 */\nvar BitArray = {\n  getBytesForBinaryFrame: getBytesForBinaryFrame,\n  pack: pack,\n  unpack: unpack\n};\n\nfunction getBytesForBinaryFrame(numPixels) {\n  // Check whether the 1-bit pixels exactly fit into bytes\n  var remainder = numPixels % 8; // Number of bytes that work on an exact fit\n\n  var bytesRequired = Math.floor(numPixels / 8); // Add one byte if we have a remainder\n\n  if (remainder > 0) {\n    bytesRequired++;\n  }\n\n  return bytesRequired;\n}\n\nfunction pack(pixelData) {\n  var numPixels = pixelData.length;\n  log.log(\"numPixels: \" + numPixels);\n  var length = getBytesForBinaryFrame(numPixels); //log.log('getBytesForBinaryFrame: ' + length);\n\n  var bitPixelData = new Uint8Array(length);\n  var bytePos = 0;\n\n  for (var i = 0; i < numPixels; i++) {\n    // Compute byte position\n    bytePos = Math.floor(i / 8);\n    var pixValue = pixelData[i] !== 0; //log.log('i: ' + i);\n    //log.log('pixValue: ' + pixValue);\n    //log.log('bytePos: ' + bytePos);\n\n    var bitPixelValue = pixValue << i % 8; //log.log('current bitPixelData: ' + bitPixelData[bytePos]);\n    //log.log('this bitPixelValue: ' + bitPixelValue);\n\n    bitPixelData[bytePos] |= bitPixelValue; //log.log('new bitPixelValue: ' + bitPixelData[bytePos]);\n  }\n\n  return bitPixelData;\n} // convert a packed bitwise pixel array into a byte-per-pixel\n// array with 255 corresponding to each set bit in the bit array\n\n\nfunction unpack(bitPixelArray) {\n  var bitArray = new Uint8Array(bitPixelArray);\n  var byteArray = new Uint8Array(8 * bitArray.length);\n\n  for (var byteIndex = 0; byteIndex < byteArray.length; byteIndex++) {\n    var bitIndex = byteIndex % 8;\n    var bitByteIndex = Math.floor(byteIndex / 8);\n    byteArray[byteIndex] = 255 * ((bitArray[bitByteIndex] & 1 << bitIndex) >> bitIndex);\n  }\n\n  return byteArray;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\n/*! pako 2.0.4 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) =>\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nconst copy_block = (s, buf, len, header) =>\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);\n  s.pending += len;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) =>\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) =>\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let lx = 0;         /* running index in l_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) =>\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) =>\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) =>\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let black_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) =>\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) =>\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //let out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE = 42;\nconst EXTRA_STATE = 69;\nconst NAME_STATE = 73;\nconst COMMENT_STATE = 91;\nconst HCRC_STATE = 103;\nconst BUSY_STATE = 113;\nconst FINISH_STATE = 666;\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  let max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    const max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n};\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH$2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$2; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$2; }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\nconst deflate$2 = (strm, flush) => {\n\n  let beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  s.strm = strm; /* just in case */\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n      let level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 30;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n  let base_index = 0;\n//  let shoextra;    /* extra bits table to use */\n  let end;                    /* use base and extra for symbol > end */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n  let extra_index = 0;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 1;       /* i: waiting for magic header */\nconst    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 3;       /* i: waiting for modification time (gzip) */\nconst    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 7;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 9;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 10;    /* i: waiting for dictionary check value */\nconst    DICT = 11;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 14;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 18;   /* i: waiting for code length code lengths */\nconst        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nconst            LEN = 21;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 22;    /* i: waiting for length extra bits */\nconst            DIST = 23;      /* i: waiting for distance code */\nconst            DISTEXT = 24;   /* i: waiting for distance extra bits */\nconst            MATCH = 25;     /* o: waiting for output space to copy string */\nconst            LIT = 26;       /* o: waiting for output space to write literal */\nconst    CHECK = 27;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 29;      /* finished check, done -- remain here until reset */\nconst    BAD = 30;       /* got a data error -- remain here until reset */\nconst    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nfunction toInt(val) {\n  if (isNaN(val)) {\n    throw new Error(\"Not a number: \" + val);\n  } else if (typeof val == \"string\") {\n    return parseInt(val);\n  } else return val;\n}\n\nfunction toFloat(val) {\n  if (typeof val == \"string\") {\n    return parseFloat(val);\n  } else return val;\n}\n\nvar BufferStream = /*#__PURE__*/function () {\n  function BufferStream(sizeOrBuffer, littleEndian) {\n    _classCallCheck(this, BufferStream);\n\n    this.buffer = typeof sizeOrBuffer == \"number\" ? new ArrayBuffer(sizeOrBuffer) : sizeOrBuffer;\n\n    if (!this.buffer) {\n      this.buffer = new ArrayBuffer(0);\n    }\n\n    this.view = new DataView(this.buffer);\n    this.offset = 0;\n    this.isLittleEndian = littleEndian || false;\n    this.size = 0;\n    this.encoder = new TextEncoder(\"utf-8\");\n  }\n\n  _createClass(BufferStream, [{\n    key: \"setEndian\",\n    value: function setEndian(isLittle) {\n      this.isLittleEndian = isLittle;\n    }\n  }, {\n    key: \"writeUint8\",\n    value: function writeUint8(value) {\n      this.checkSize(1);\n      this.view.setUint8(this.offset, toInt(value));\n      return this.increment(1);\n    }\n  }, {\n    key: \"writeUint8Repeat\",\n    value: function writeUint8Repeat(value, count) {\n      var v = toInt(value);\n      this.checkSize(count);\n\n      for (var i = 0; i < count; i++) {\n        this.view.setUint8(this.offset + i, v);\n      }\n\n      return this.increment(count);\n    }\n  }, {\n    key: \"writeInt8\",\n    value: function writeInt8(value) {\n      this.checkSize(1);\n      this.view.setInt8(this.offset, toInt(value));\n      return this.increment(1);\n    }\n  }, {\n    key: \"writeUint16\",\n    value: function writeUint16(value) {\n      this.checkSize(2);\n      this.view.setUint16(this.offset, toInt(value), this.isLittleEndian);\n      return this.increment(2);\n    }\n  }, {\n    key: \"writeTwoUint16s\",\n    value: function writeTwoUint16s(value) {\n      this.checkSize(4);\n      var first = value >> 16;\n      var second = value & 0xffff;\n      this.view.setUint16(this.offset, toInt(first), this.isLittleEndian);\n      this.view.setUint16(this.offset + 2, toInt(second), this.isLittleEndian);\n      return this.increment(4);\n    }\n  }, {\n    key: \"writeInt16\",\n    value: function writeInt16(value) {\n      this.checkSize(2);\n      this.view.setInt16(this.offset, toInt(value), this.isLittleEndian);\n      return this.increment(2);\n    }\n  }, {\n    key: \"writeUint32\",\n    value: function writeUint32(value) {\n      this.checkSize(4);\n      this.view.setUint32(this.offset, toInt(value), this.isLittleEndian);\n      return this.increment(4);\n    }\n  }, {\n    key: \"writeInt32\",\n    value: function writeInt32(value) {\n      this.checkSize(4);\n      this.view.setInt32(this.offset, toInt(value), this.isLittleEndian);\n      return this.increment(4);\n    }\n  }, {\n    key: \"writeFloat\",\n    value: function writeFloat(value) {\n      this.checkSize(4);\n      this.view.setFloat32(this.offset, toFloat(value), this.isLittleEndian);\n      return this.increment(4);\n    }\n  }, {\n    key: \"writeDouble\",\n    value: function writeDouble(value) {\n      this.checkSize(8);\n      this.view.setFloat64(this.offset, toFloat(value), this.isLittleEndian);\n      return this.increment(8);\n    }\n  }, {\n    key: \"writeUTF8String\",\n    value: function writeUTF8String(value) {\n      var encodedString = this.encoder.encode(value);\n      this.checkSize(encodedString.byteLength);\n      new Uint8Array(this.buffer).set(encodedString, this.offset);\n      return this.increment(encodedString.byteLength);\n    }\n  }, {\n    key: \"writeAsciiString\",\n    value: function writeAsciiString(value) {\n      value = value || \"\";\n      var len = value.length;\n      this.checkSize(len);\n      var startOffset = this.offset;\n\n      for (var i = 0; i < len; i++) {\n        var charcode = value.charCodeAt(i);\n        this.view.setUint8(startOffset + i, charcode);\n      }\n\n      return this.increment(len);\n    }\n  }, {\n    key: \"readUint32\",\n    value: function readUint32() {\n      var val = this.view.getUint32(this.offset, this.isLittleEndian);\n      this.increment(4);\n      return val;\n    }\n  }, {\n    key: \"readUint16\",\n    value: function readUint16() {\n      var val = this.view.getUint16(this.offset, this.isLittleEndian);\n      this.increment(2);\n      return val;\n    }\n  }, {\n    key: \"readUint8\",\n    value: function readUint8() {\n      var val = this.view.getUint8(this.offset);\n      this.increment(1);\n      return val;\n    }\n  }, {\n    key: \"peekUint8\",\n    value: function peekUint8(offset) {\n      return this.view.getUint8(this.offset + offset);\n    }\n  }, {\n    key: \"readUint8Array\",\n    value: function readUint8Array(length) {\n      var arr = new Uint8Array(this.buffer, this.offset, length);\n      this.increment(length);\n      return arr;\n    }\n  }, {\n    key: \"readUint16Array\",\n    value: function readUint16Array(length) {\n      var sixlen = length / 2,\n          arr = new Uint16Array(sixlen),\n          i = 0;\n\n      while (i++ < sixlen) {\n        arr[i] = this.view.getUint16(this.offset, this.isLittleEndian);\n        this.offset += 2;\n      }\n\n      return arr;\n    }\n  }, {\n    key: \"readInt16\",\n    value: function readInt16() {\n      var val = this.view.getInt16(this.offset, this.isLittleEndian);\n      this.increment(2);\n      return val;\n    }\n  }, {\n    key: \"readInt32\",\n    value: function readInt32() {\n      var val = this.view.getInt32(this.offset, this.isLittleEndian);\n      this.increment(4);\n      return val;\n    }\n  }, {\n    key: \"readFloat\",\n    value: function readFloat() {\n      var val = this.view.getFloat32(this.offset, this.isLittleEndian);\n      this.increment(4);\n      return val;\n    }\n  }, {\n    key: \"readDouble\",\n    value: function readDouble() {\n      var val = this.view.getFloat64(this.offset, this.isLittleEndian);\n      this.increment(8);\n      return val;\n    }\n  }, {\n    key: \"readAsciiString\",\n    value: function readAsciiString(length) {\n      var result = \"\";\n      var start = this.offset;\n      var end = this.offset + length;\n\n      if (end >= this.buffer.byteLength) {\n        end = this.buffer.byteLength;\n      }\n\n      for (var i = start; i < end; ++i) {\n        result += String.fromCharCode(this.view.getUint8(i));\n      }\n\n      this.increment(end - start);\n      return result;\n    }\n  }, {\n    key: \"readVR\",\n    value: function readVR() {\n      var vr = String.fromCharCode(this.view.getUint8(this.offset)) + String.fromCharCode(this.view.getUint8(this.offset + 1));\n      this.increment(2);\n      return vr;\n    }\n  }, {\n    key: \"readEncodedString\",\n    value: function readEncodedString(length) {\n      if (this.offset + length >= this.buffer.byteLength) {\n        length = this.buffer.byteLength - this.offset;\n      }\n\n      var view = new DataView(this.buffer, this.offset, length);\n      var result = this.decoder.decode(view);\n      this.increment(length);\n      return result;\n    }\n  }, {\n    key: \"readHex\",\n    value: function readHex(length) {\n      var hexString = \"\";\n\n      for (var i = 0; i < length; i++) {\n        hexString += this.readUint8().toString(16);\n      }\n\n      return hexString;\n    }\n  }, {\n    key: \"checkSize\",\n    value: function checkSize(step) {\n      if (this.offset + step > this.buffer.byteLength) {\n        //throw new Error(\"Writing exceeded the size of buffer\");\n        //\n        // Resize the buffer.\n        // The idea is that when it is necessary to increase the buffer size,\n        // there will likely be more bytes which need to be written to the\n        // buffer in the future. Buffer allocation is costly.\n        // So we increase the buffer size right now\n        // by a larger amount than necessary, to reserve space for later\n        // writes which then can be done much faster. The current size of\n        // the buffer is the best estimate of the scale by which the size\n        // should increase.\n        // So approximately doubling the size of the buffer\n        // (while ensuring it fits the new data) is a simple but effective strategy.\n        var dstSize = this.offset + step + this.buffer.byteLength;\n        var dst = new ArrayBuffer(dstSize);\n        new Uint8Array(dst).set(new Uint8Array(this.buffer));\n        this.buffer = dst;\n        this.view = new DataView(this.buffer);\n      }\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(stream) {\n      var available = this.buffer.byteLength - this.offset;\n\n      if (stream.size > available) {\n        var newbuf = new ArrayBuffer(this.offset + stream.size);\n        var int8 = new Uint8Array(newbuf);\n        int8.set(new Uint8Array(this.getBuffer(0, this.offset)));\n        int8.set(new Uint8Array(stream.getBuffer(0, stream.size)), this.offset);\n        this.buffer = newbuf;\n        this.view = new DataView(this.buffer);\n      } else {\n        var _int = new Uint8Array(this.buffer);\n\n        _int.set(new Uint8Array(stream.getBuffer(0, stream.size)), this.offset);\n      }\n\n      this.offset += stream.size;\n      this.size = this.offset;\n      return this.buffer.byteLength;\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(step) {\n      this.offset += step;\n\n      if (this.offset > this.size) {\n        this.size = this.offset;\n      }\n\n      return step;\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(start, end) {\n      if (!start && !end) {\n        start = 0;\n        end = this.size;\n      }\n\n      return this.buffer.slice(start, end);\n    }\n  }, {\n    key: \"more\",\n    value: function more(length) {\n      if (this.offset + length > this.endOffset) {\n        throw new Error(\"Request more than currently allocated buffer\");\n      }\n\n      var newBuf = new ReadBufferStream(this.buffer, null, {\n        start: this.offset,\n        stop: this.offset + length\n      });\n      this.increment(length);\n      return newBuf;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.offset = 0;\n      return this;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      return this.offset >= this.buffer.byteLength;\n    }\n  }, {\n    key: \"toEnd\",\n    value: function toEnd() {\n      this.offset = this.buffer.byteLength;\n    }\n  }]);\n\n  return BufferStream;\n}();\n\nvar ReadBufferStream = /*#__PURE__*/function (_BufferStream) {\n  _inherits(ReadBufferStream, _BufferStream);\n\n  var _super = _createSuper(ReadBufferStream);\n\n  function ReadBufferStream(buffer, littleEndian) {\n    var _this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      start: null,\n      stop: null,\n      noCopy: false\n    };\n\n    _classCallCheck(this, ReadBufferStream);\n\n    _this = _super.call(this, buffer, littleEndian);\n    _this.offset = options.start || 0;\n    _this.size = options.stop || _this.buffer.byteLength;\n    _this.noCopy = options.noCopy;\n    _this.startOffset = _this.offset;\n    _this.endOffset = _this.size;\n    _this.decoder = new TextDecoder(\"latin1\");\n    return _this;\n  }\n\n  _createClass(ReadBufferStream, [{\n    key: \"setDecoder\",\n    value: function setDecoder(decoder) {\n      this.decoder = decoder;\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer(start, end) {\n      if (this.noCopy) {\n        return new Uint8Array(this.buffer, start, end - start);\n      }\n\n      if (!start && !end) {\n        start = 0;\n        end = this.size;\n      }\n\n      return this.buffer.slice(start, end);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.offset = this.startOffset;\n      return this;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      return this.offset >= this.endOffset;\n    }\n  }, {\n    key: \"toEnd\",\n    value: function toEnd() {\n      this.offset = this.endOffset;\n    }\n  }, {\n    key: \"writeUint8\",\n    value: function writeUint8(value) {\n      throw new Error(value, \"writeUint8 not implemented\");\n    }\n  }, {\n    key: \"writeUint8Repeat\",\n    value: function writeUint8Repeat(value, count) {\n      throw new Error(value, \"writeUint8Repeat not implemented\");\n    }\n  }, {\n    key: \"writeInt8\",\n    value: function writeInt8(value) {\n      throw new Error(value, \"writeInt8 not implemented\");\n    }\n  }, {\n    key: \"writeUint16\",\n    value: function writeUint16(value) {\n      throw new Error(value, \"writeUint16 not implemented\");\n    }\n  }, {\n    key: \"writeTwoUint16s\",\n    value: function writeTwoUint16s(value) {\n      throw new Error(value, \"writeTwoUint16s not implemented\");\n    }\n  }, {\n    key: \"writeInt16\",\n    value: function writeInt16(value) {\n      throw new Error(value, \"writeInt16 not implemented\");\n    }\n  }, {\n    key: \"writeUint32\",\n    value: function writeUint32(value) {\n      throw new Error(value, \"writeUint32 not implemented\");\n    }\n  }, {\n    key: \"writeInt32\",\n    value: function writeInt32(value) {\n      throw new Error(value, \"writeInt32 not implemented\");\n    }\n  }, {\n    key: \"writeFloat\",\n    value: function writeFloat(value) {\n      throw new Error(value, \"writeFloat not implemented\");\n    }\n  }, {\n    key: \"writeDouble\",\n    value: function writeDouble(value) {\n      throw new Error(value, \"writeDouble not implemented\");\n    }\n  }, {\n    key: \"writeAsciiString\",\n    value: function writeAsciiString(value) {\n      throw new Error(value, \"writeAsciiString not implemented\");\n    }\n  }, {\n    key: \"writeUTF8String\",\n    value: function writeUTF8String(value) {\n      throw new Error(value, \"writeUTF8String not implemented\");\n    }\n  }, {\n    key: \"checkSize\",\n    value: function checkSize(step) {\n      throw new Error(step, \"checkSize not implemented\");\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(stream) {\n      throw new Error(stream, \"concat not implemented\");\n    }\n  }]);\n\n  return ReadBufferStream;\n}(BufferStream);\n\nvar DeflatedReadBufferStream = /*#__PURE__*/function (_ReadBufferStream) {\n  _inherits(DeflatedReadBufferStream, _ReadBufferStream);\n\n  var _super2 = _createSuper(DeflatedReadBufferStream);\n\n  function DeflatedReadBufferStream(stream, options) {\n    _classCallCheck(this, DeflatedReadBufferStream);\n\n    var inflatedBuffer = pako.inflateRaw(stream.getBuffer(stream.offset, stream.size));\n    return _super2.call(this, inflatedBuffer.buffer, stream.littleEndian, options);\n  }\n\n  return _createClass(DeflatedReadBufferStream);\n}(ReadBufferStream);\n\nvar WriteBufferStream = /*#__PURE__*/function (_BufferStream2) {\n  _inherits(WriteBufferStream, _BufferStream2);\n\n  var _super3 = _createSuper(WriteBufferStream);\n\n  function WriteBufferStream(buffer, littleEndian) {\n    var _this2;\n\n    _classCallCheck(this, WriteBufferStream);\n\n    _this2 = _super3.call(this, buffer, littleEndian);\n    _this2.size = 0;\n    return _this2;\n  }\n\n  return _createClass(WriteBufferStream);\n}(BufferStream);\n\nfunction rtrim(str) {\n  return str.replace(/\\s*$/g, \"\");\n}\n\nfunction toWindows(inputArray, size) {\n  return Array.from({\n    length: inputArray.length - (size - 1)\n  }, //get the appropriate length\n  function (_, index) {\n    return inputArray.slice(index, index + size);\n  } //create the windows\n  );\n}\n\nvar binaryVRs = [\"FL\", \"FD\", \"SL\", \"SS\", \"UL\", \"US\", \"AT\"],\n    explicitVRs = [\"OB\", \"OW\", \"OF\", \"SQ\", \"UC\", \"UR\", \"UT\", \"UN\"],\n    singleVRs = [\"SQ\", \"OF\", \"OW\", \"OB\", \"UN\"];\n\nvar ValueRepresentation = /*#__PURE__*/function () {\n  function ValueRepresentation(type) {\n    _classCallCheck(this, ValueRepresentation);\n\n    this.type = type;\n    this.multi = false;\n    this._isBinary = binaryVRs.indexOf(this.type) != -1;\n    this._allowMultiple = !this._isBinary && singleVRs.indexOf(this.type) == -1;\n    this._isExplicit = explicitVRs.indexOf(this.type) != -1;\n  }\n\n  _createClass(ValueRepresentation, [{\n    key: \"isBinary\",\n    value: function isBinary() {\n      return this._isBinary;\n    }\n  }, {\n    key: \"allowMultiple\",\n    value: function allowMultiple() {\n      return this._allowMultiple;\n    }\n  }, {\n    key: \"isExplicit\",\n    value: function isExplicit() {\n      return this._isExplicit;\n    }\n  }, {\n    key: \"read\",\n    value: function read(stream, length, syntax) {\n      if (this.fixed && this.maxLength) {\n        if (!length) return this.defaultValue;\n        if (this.maxLength != length) log.error(\"Invalid length for fixed length tag, vr \" + this.type + \", length \" + this.maxLength + \" != \" + length);\n      }\n\n      return this.readBytes(stream, length, syntax);\n    }\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readAsciiString(length);\n    }\n  }, {\n    key: \"readNullPaddedString\",\n    value: function readNullPaddedString(stream, length) {\n      if (!length) return \"\";\n\n      if (stream.peekUint8(length - 1) !== 0) {\n        return stream.readAsciiString(length);\n      } else {\n        var val = stream.readAsciiString(length - 1);\n        stream.increment(1);\n        return val;\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write(stream, type) {\n      var args = Array.from(arguments);\n\n      if (args[2] === null || args[2] === \"\" || args[2] === undefined) {\n        return [stream.writeAsciiString(\"\")];\n      } else {\n        var written = [],\n            valueArgs = args.slice(2),\n            func = stream[\"write\" + type];\n\n        if (Array.isArray(valueArgs[0])) {\n          if (valueArgs[0].length < 1) {\n            written.push(0);\n          } else {\n            var self = this;\n            valueArgs[0].forEach(function (v, k) {\n              if (self.allowMultiple() && k > 0) {\n                stream.writeUint8(0x5c);\n              }\n\n              var singularArgs = [v].concat(valueArgs.slice(1));\n              var byteCount = func.apply(stream, singularArgs);\n              written.push(byteCount);\n            });\n          }\n        } else {\n          written.push(func.apply(stream, valueArgs));\n        }\n\n        return written;\n      }\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, lengths) {\n      var writeOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n        allowInvalidVRLength: false\n      };\n      var allowInvalidVRLength = writeOptions.allowInvalidVRLength;\n      var valid = true,\n          valarr = Array.isArray(value) ? value : [value],\n          total = 0;\n\n      for (var i = 0; i < valarr.length; i++) {\n        var checkValue = valarr[i],\n            checklen = lengths[i],\n            isString = false,\n            displaylen = checklen;\n\n        if (checkValue === null || allowInvalidVRLength) {\n          valid = true;\n        } else if (this.checkLength) {\n          valid = this.checkLength(checkValue);\n        } else if (this.maxCharLength) {\n          var check = this.maxCharLength; //, checklen = checkValue.length;\n\n          valid = checkValue.length <= check;\n          displaylen = checkValue.length;\n          isString = true;\n        } else if (this.maxLength) {\n          valid = checklen <= this.maxLength;\n        }\n\n        if (!valid) {\n          var errmsg = \"Value exceeds max length, vr: \" + this.type + \", value: \" + checkValue + \", length: \" + displaylen;\n          if (isString) log.log(errmsg);else throw new Error(errmsg);\n        }\n\n        total += checklen;\n      }\n\n      if (this.allowMultiple()) {\n        total += valarr.length ? valarr.length - 1 : 0;\n      } //check for odd\n\n\n      var written = total;\n\n      if (total & 1) {\n        stream.writeUint8(this.padByte);\n        written++;\n      }\n\n      return written;\n    }\n  }], [{\n    key: \"createByTypeString\",\n    value: function createByTypeString(type) {\n      var vr = VRinstances[type];\n\n      if (vr === undefined) {\n        if (type == \"ox\") {\n          // TODO: determine VR based on context (could be 1 byte pixel data)\n          // https://github.com/dgobbi/vtk-dicom/issues/38\n          log.error(\"Invalid vr type \" + type + \" - using OW\");\n          vr = VRinstances[\"OW\"];\n        } else if (type == \"xs\") {\n          log.error(\"Invalid vr type \" + type + \" - using US\");\n          vr = VRinstances[\"US\"];\n        } else {\n          log.error(\"Invalid vr type \" + type + \" - using UN\");\n          vr = VRinstances[\"UN\"];\n        }\n      }\n\n      return vr;\n    }\n  }]);\n\n  return ValueRepresentation;\n}();\n\nvar AsciiStringRepresentation = /*#__PURE__*/function (_ValueRepresentation) {\n  _inherits(AsciiStringRepresentation, _ValueRepresentation);\n\n  var _super = _createSuper(AsciiStringRepresentation);\n\n  function AsciiStringRepresentation(type) {\n    _classCallCheck(this, AsciiStringRepresentation);\n\n    return _super.call(this, type);\n  }\n\n  _createClass(AsciiStringRepresentation, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readAsciiString(length);\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      var written = _get(_getPrototypeOf(AsciiStringRepresentation.prototype), \"write\", this).call(this, stream, \"AsciiString\", value);\n\n      return _get(_getPrototypeOf(AsciiStringRepresentation.prototype), \"writeBytes\", this).call(this, stream, value, written, writeOptions);\n    }\n  }]);\n\n  return AsciiStringRepresentation;\n}(ValueRepresentation);\n\nvar EncodedStringRepresentation = /*#__PURE__*/function (_ValueRepresentation2) {\n  _inherits(EncodedStringRepresentation, _ValueRepresentation2);\n\n  var _super2 = _createSuper(EncodedStringRepresentation);\n\n  function EncodedStringRepresentation(type) {\n    _classCallCheck(this, EncodedStringRepresentation);\n\n    return _super2.call(this, type);\n  }\n\n  _createClass(EncodedStringRepresentation, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readEncodedString(length);\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      var written = _get(_getPrototypeOf(EncodedStringRepresentation.prototype), \"write\", this).call(this, stream, \"UTF8String\", value);\n\n      return _get(_getPrototypeOf(EncodedStringRepresentation.prototype), \"writeBytes\", this).call(this, stream, value, written, writeOptions);\n    }\n  }]);\n\n  return EncodedStringRepresentation;\n}(ValueRepresentation);\n\nvar BinaryRepresentation = /*#__PURE__*/function (_ValueRepresentation3) {\n  _inherits(BinaryRepresentation, _ValueRepresentation3);\n\n  var _super3 = _createSuper(BinaryRepresentation);\n\n  function BinaryRepresentation(type) {\n    _classCallCheck(this, BinaryRepresentation);\n\n    return _super3.call(this, type);\n  }\n\n  _createClass(BinaryRepresentation, [{\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, syntax, isEncapsulated) {\n      var writeOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      var i;\n      var binaryStream;\n      var _writeOptions$fragmen = writeOptions.fragmentMultiframe,\n          fragmentMultiframe = _writeOptions$fragmen === void 0 ? true : _writeOptions$fragmen;\n      value = value === null || value === undefined ? [] : value;\n\n      if (isEncapsulated) {\n        var fragmentSize = 1024 * 20,\n            frames = value.length,\n            startOffset = []; // Calculate a total length for storing binary stream\n\n        var bufferLength = 0;\n\n        for (i = 0; i < frames; i++) {\n          var needsPadding = Boolean(value[i].byteLength & 1);\n          bufferLength += value[i].byteLength + (needsPadding ? 1 : 0);\n          var _fragmentsLength = 1;\n\n          if (fragmentMultiframe) {\n            _fragmentsLength = Math.ceil(value[i].byteLength / fragmentSize);\n          } // 8 bytes per fragment are needed to store 0xffff (2 bytes), 0xe000 (2 bytes), and frageStream size (4 bytes)\n\n\n          bufferLength += _fragmentsLength * 8;\n        }\n\n        binaryStream = new WriteBufferStream(bufferLength, stream.isLittleEndian);\n\n        for (i = 0; i < frames; i++) {\n          var _needsPadding = Boolean(value[i].byteLength & 1);\n\n          startOffset.push(binaryStream.size);\n          var frameBuffer = value[i],\n              frameStream = new ReadBufferStream(frameBuffer);\n          var fragmentsLength = 1;\n\n          if (fragmentMultiframe) {\n            fragmentsLength = Math.ceil(frameStream.size / fragmentSize);\n          }\n\n          for (var j = 0, fragmentStart = 0; j < fragmentsLength; j++) {\n            var isFinalFragment = j === fragmentsLength - 1;\n            var fragmentEnd = fragmentStart + frameStream.size;\n\n            if (fragmentMultiframe) {\n              fragmentEnd = fragmentStart + fragmentSize;\n            }\n\n            if (isFinalFragment) {\n              fragmentEnd = frameStream.size;\n            }\n\n            var fragStream = new ReadBufferStream(frameStream.getBuffer(fragmentStart, fragmentEnd));\n            fragmentStart = fragmentEnd;\n            binaryStream.writeUint16(0xfffe);\n            binaryStream.writeUint16(0xe000);\n            var addPaddingByte = isFinalFragment && _needsPadding;\n            binaryStream.writeUint32(fragStream.size + (addPaddingByte ? 1 : 0));\n            binaryStream.concat(fragStream);\n\n            if (addPaddingByte) {\n              binaryStream.writeInt8(this.padByte);\n            }\n          }\n        }\n\n        stream.writeUint16(0xfffe);\n        stream.writeUint16(0xe000);\n        stream.writeUint32(startOffset.length * 4);\n\n        for (i = 0; i < startOffset.length; i++) {\n          stream.writeUint32(startOffset[i]);\n        }\n\n        stream.concat(binaryStream);\n        stream.writeUint16(0xfffe);\n        stream.writeUint16(0xe0dd);\n        stream.writeUint32(0x0);\n        return 0xffffffff;\n      } else {\n        var binaryData = value[0];\n        binaryStream = new ReadBufferStream(binaryData);\n        stream.concat(binaryStream);\n        return _get(_getPrototypeOf(BinaryRepresentation.prototype), \"writeBytes\", this).call(this, stream, binaryData, [binaryStream.size], writeOptions);\n      }\n    }\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      if (length == 0xffffffff) {\n        var itemTagValue = Tag.readTag(stream),\n            frames = [];\n\n        if (itemTagValue.is(0xfffee000)) {\n          var itemLength = stream.readUint32(),\n              numOfFrames = 1,\n              offsets = [];\n\n          if (itemLength > 0x0) {\n            //has frames\n            numOfFrames = itemLength / 4;\n            var i = 0;\n\n            while (i++ < numOfFrames) {\n              offsets.push(stream.readUint32());\n            }\n          } else {\n            offsets = [];\n          }\n\n          var SequenceItemTag = 0xfffee000;\n          var SequenceDelimiterTag = 0xfffee0dd;\n\n          var getNextSequenceItemData = function getNextSequenceItemData(stream) {\n            var nextTag = Tag.readTag(stream);\n\n            if (nextTag.is(SequenceItemTag)) {\n              var _itemLength = stream.readUint32();\n\n              var buffer = stream.getBuffer(stream.offset, stream.offset + _itemLength);\n              stream.increment(_itemLength);\n              return buffer;\n            } else if (nextTag.is(SequenceDelimiterTag)) {\n              // Read SequenceDelimiterItem value for the SequenceDelimiterTag\n              if (stream.readUint32() !== 0) {\n                throw Error(\"SequenceDelimiterItem tag value was not zero\");\n              }\n\n              return null;\n            }\n\n            throw Error(\"Invalid tag in sequence\");\n          }; // If there is an offset table, use that to loop through pixel data sequence\n\n\n          if (offsets.length > 0) {\n            // make offsets relative to the stream, not tag\n            offsets = offsets.map(function (e) {\n              return e + stream.offset;\n            });\n            offsets.push(stream.size); // window offsets to an array of [start,stop] locations\n\n            frames = toWindows(offsets, 2).map(function (range) {\n              var fragments = [];\n\n              var _range = _slicedToArray(range, 2),\n                  start = _range[0],\n                  stop = _range[1]; // create a new readable stream based on the range\n\n\n              var rangeStream = new ReadBufferStream(stream.buffer, stream.isLittleEndian, {\n                start: start,\n                stop: stop,\n                noCopy: stream.noCopy\n              });\n              var frameSize = 0;\n\n              while (!rangeStream.end()) {\n                var buf = getNextSequenceItemData(rangeStream);\n\n                if (buf === null) {\n                  break;\n                }\n\n                fragments.push(buf);\n                frameSize += buf.byteLength;\n              } // Ensure the parent stream's offset is kept up to date\n\n\n              stream.offset = rangeStream.offset; // If there's only one buffer thne just return it directly\n\n              if (fragments.length === 1) {\n                return fragments[0];\n              }\n\n              if (rangeStream.noCopy) {\n                // return the fragments for downstream application to process\n                return fragments;\n              } else {\n                // Allocate a final ArrayBuffer and concat all buffers into it\n                var mergedFrame = new ArrayBuffer(frameSize);\n                var u8Data = new Uint8Array(mergedFrame);\n                fragments.reduce(function (offset, buffer) {\n                  u8Data.set(new Uint8Array(buffer), offset);\n                  return offset + buffer.byteLength;\n                }, 0);\n                return mergedFrame;\n              }\n            });\n          } // If no offset table, loop through remainder of stream looking for termination tag\n          else {\n            while (!stream.end()) {\n              var buffer = getNextSequenceItemData(stream);\n\n              if (buffer === null) {\n                break;\n              }\n\n              frames.push(buffer);\n            }\n          }\n        } else {\n          throw new Error(\"Item tag not found after undefined binary length\");\n        }\n\n        return frames;\n      } else {\n        var bytes;\n        /*if (this.type == 'OW') {\n            bytes = stream.readUint16Array(length);\n        } else if (this.type == 'OB') {\n            bytes = stream.readUint8Array(length);\n        }*/\n\n        bytes = stream.getBuffer(stream.offset, stream.offset + length);\n        stream.increment(length);\n        return [bytes];\n      }\n    }\n  }]);\n\n  return BinaryRepresentation;\n}(ValueRepresentation);\n\nvar ApplicationEntity = /*#__PURE__*/function (_AsciiStringRepresent) {\n  _inherits(ApplicationEntity, _AsciiStringRepresent);\n\n  var _super4 = _createSuper(ApplicationEntity);\n\n  function ApplicationEntity() {\n    var _this;\n\n    _classCallCheck(this, ApplicationEntity);\n\n    _this = _super4.call(this, \"AE\");\n    _this.maxLength = 16;\n    _this.padByte = 0x20;\n    return _this;\n  }\n\n  _createClass(ApplicationEntity, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readAsciiString(length).trim();\n    }\n  }]);\n\n  return ApplicationEntity;\n}(AsciiStringRepresentation);\n\nvar CodeString = /*#__PURE__*/function (_AsciiStringRepresent2) {\n  _inherits(CodeString, _AsciiStringRepresent2);\n\n  var _super5 = _createSuper(CodeString);\n\n  function CodeString() {\n    var _this2;\n\n    _classCallCheck(this, CodeString);\n\n    _this2 = _super5.call(this, \"CS\");\n    _this2.maxLength = 16;\n    _this2.padByte = 0x20;\n    return _this2;\n  }\n\n  _createClass(CodeString, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readAsciiString(length).trim();\n    }\n  }]);\n\n  return CodeString;\n}(AsciiStringRepresentation);\n\nvar AgeString = /*#__PURE__*/function (_AsciiStringRepresent3) {\n  _inherits(AgeString, _AsciiStringRepresent3);\n\n  var _super6 = _createSuper(AgeString);\n\n  function AgeString() {\n    var _this3;\n\n    _classCallCheck(this, AgeString);\n\n    _this3 = _super6.call(this, \"AS\");\n    _this3.maxLength = 4;\n    _this3.padByte = 0x20;\n    _this3.fixed = true;\n    _this3.defaultValue = \"\";\n    return _this3;\n  }\n\n  return _createClass(AgeString);\n}(AsciiStringRepresentation);\n\nvar AttributeTag = /*#__PURE__*/function (_ValueRepresentation4) {\n  _inherits(AttributeTag, _ValueRepresentation4);\n\n  var _super7 = _createSuper(AttributeTag);\n\n  function AttributeTag() {\n    var _this4;\n\n    _classCallCheck(this, AttributeTag);\n\n    _this4 = _super7.call(this, \"AT\");\n    _this4.maxLength = 4;\n    _this4.valueLength = 4;\n    _this4.padByte = 0;\n    _this4.fixed = true;\n    return _this4;\n  }\n\n  _createClass(AttributeTag, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return Tag.readTag(stream).value;\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(AttributeTag.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(AttributeTag.prototype), \"write\", this).call(this, stream, \"TwoUint16s\", value), writeOptions);\n    }\n  }]);\n\n  return AttributeTag;\n}(ValueRepresentation);\n\nvar DateValue = /*#__PURE__*/function (_AsciiStringRepresent4) {\n  _inherits(DateValue, _AsciiStringRepresent4);\n\n  var _super8 = _createSuper(DateValue);\n\n  function DateValue(value) {\n    var _this5;\n\n    _classCallCheck(this, DateValue);\n\n    _this5 = _super8.call(this, \"DA\", value);\n    _this5.maxLength = 18;\n    _this5.padByte = 0x20; //this.fixed = true;\n\n    _this5.defaultValue = \"\";\n    return _this5;\n  }\n\n  return _createClass(DateValue);\n}(AsciiStringRepresentation);\n\nvar DecimalString = /*#__PURE__*/function (_AsciiStringRepresent5) {\n  _inherits(DecimalString, _AsciiStringRepresent5);\n\n  var _super9 = _createSuper(DecimalString);\n\n  function DecimalString() {\n    var _this6;\n\n    _classCallCheck(this, DecimalString);\n\n    _this6 = _super9.call(this, \"DS\");\n    _this6.maxLength = 16;\n    _this6.padByte = 0x20;\n    return _this6;\n  }\n\n  _createClass(DecimalString, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      var BACKSLASH = String.fromCharCode(0x5c);\n      var ds = stream.readAsciiString(length);\n      ds = ds.replace(/[^0-9.\\\\\\-+e]/gi, \"\");\n\n      if (ds.indexOf(BACKSLASH) !== -1) {\n        // handle decimal string with multiplicity\n        var dsArray = ds.split(BACKSLASH);\n        ds = dsArray.map(function (ds) {\n          return ds === \"\" ? null : Number(ds);\n        });\n      } else {\n        ds = [ds === \"\" ? null : Number(ds)];\n      }\n\n      return ds;\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      if (value === null) {\n        return \"\";\n      }\n\n      var str = String(value);\n\n      if (str.length > this.maxLength) {\n        return value.toExponential();\n      }\n\n      return str;\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      var _this7 = this;\n\n      var val = Array.isArray(value) ? value.map(function (ds) {\n        return _this7.formatValue(ds);\n      }) : [this.formatValue(value)];\n      return _get(_getPrototypeOf(DecimalString.prototype), \"writeBytes\", this).call(this, stream, val, writeOptions);\n    }\n  }]);\n\n  return DecimalString;\n}(AsciiStringRepresentation);\n\nvar DateTime = /*#__PURE__*/function (_AsciiStringRepresent6) {\n  _inherits(DateTime, _AsciiStringRepresent6);\n\n  var _super10 = _createSuper(DateTime);\n\n  function DateTime() {\n    var _this8;\n\n    _classCallCheck(this, DateTime);\n\n    _this8 = _super10.call(this, \"DT\");\n    _this8.maxLength = 26;\n    _this8.padByte = 0x20;\n    return _this8;\n  }\n\n  return _createClass(DateTime);\n}(AsciiStringRepresentation);\n\nvar FloatingPointSingle = /*#__PURE__*/function (_ValueRepresentation5) {\n  _inherits(FloatingPointSingle, _ValueRepresentation5);\n\n  var _super11 = _createSuper(FloatingPointSingle);\n\n  function FloatingPointSingle() {\n    var _this9;\n\n    _classCallCheck(this, FloatingPointSingle);\n\n    _this9 = _super11.call(this, \"FL\");\n    _this9.maxLength = 4;\n    _this9.padByte = 0;\n    _this9.fixed = true;\n    _this9.defaultValue = 0.0;\n    return _this9;\n  }\n\n  _createClass(FloatingPointSingle, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return Number(stream.readFloat());\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(FloatingPointSingle.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(FloatingPointSingle.prototype), \"write\", this).call(this, stream, \"Float\", value), writeOptions);\n    }\n  }]);\n\n  return FloatingPointSingle;\n}(ValueRepresentation);\n\nvar FloatingPointDouble = /*#__PURE__*/function (_ValueRepresentation6) {\n  _inherits(FloatingPointDouble, _ValueRepresentation6);\n\n  var _super12 = _createSuper(FloatingPointDouble);\n\n  function FloatingPointDouble() {\n    var _this10;\n\n    _classCallCheck(this, FloatingPointDouble);\n\n    _this10 = _super12.call(this, \"FD\");\n    _this10.maxLength = 8;\n    _this10.padByte = 0;\n    _this10.fixed = true;\n    _this10.defaultValue = 0.0;\n    return _this10;\n  }\n\n  _createClass(FloatingPointDouble, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return Number(stream.readDouble());\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(FloatingPointDouble.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(FloatingPointDouble.prototype), \"write\", this).call(this, stream, \"Double\", value), writeOptions);\n    }\n  }]);\n\n  return FloatingPointDouble;\n}(ValueRepresentation);\n\nvar IntegerString = /*#__PURE__*/function (_AsciiStringRepresent7) {\n  _inherits(IntegerString, _AsciiStringRepresent7);\n\n  var _super13 = _createSuper(IntegerString);\n\n  function IntegerString() {\n    var _this11;\n\n    _classCallCheck(this, IntegerString);\n\n    _this11 = _super13.call(this, \"IS\");\n    _this11.maxLength = 12;\n    _this11.padByte = 0x20;\n    return _this11;\n  }\n\n  _createClass(IntegerString, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      var BACKSLASH = String.fromCharCode(0x5c);\n      var is = stream.readAsciiString(length).trim();\n      is = is.replace(/[^0-9.\\\\\\-+e]/gi, \"\");\n\n      if (is.indexOf(BACKSLASH) !== -1) {\n        // handle integer string with multiplicity\n        var integerStringArray = is.split(BACKSLASH);\n        is = integerStringArray.map(function (is) {\n          return is === \"\" ? null : Number(is);\n        });\n      } else {\n        is = [is === \"\" ? null : Number(is)];\n      }\n\n      return is;\n    }\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value) {\n      return value === null ? \"\" : String(value);\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      var _this12 = this;\n\n      var val = Array.isArray(value) ? value.map(function (is) {\n        return _this12.formatValue(is);\n      }) : [this.formatValue(value)];\n      return _get(_getPrototypeOf(IntegerString.prototype), \"writeBytes\", this).call(this, stream, val, writeOptions);\n    }\n  }]);\n\n  return IntegerString;\n}(AsciiStringRepresentation);\n\nvar LongString = /*#__PURE__*/function (_EncodedStringReprese) {\n  _inherits(LongString, _EncodedStringReprese);\n\n  var _super14 = _createSuper(LongString);\n\n  function LongString() {\n    var _this13;\n\n    _classCallCheck(this, LongString);\n\n    _this13 = _super14.call(this, \"LO\");\n    _this13.maxCharLength = 64;\n    _this13.padByte = 0x20;\n    return _this13;\n  }\n\n  _createClass(LongString, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readEncodedString(length).trim();\n    }\n  }]);\n\n  return LongString;\n}(EncodedStringRepresentation);\n\nvar LongText = /*#__PURE__*/function (_EncodedStringReprese2) {\n  _inherits(LongText, _EncodedStringReprese2);\n\n  var _super15 = _createSuper(LongText);\n\n  function LongText() {\n    var _this14;\n\n    _classCallCheck(this, LongText);\n\n    _this14 = _super15.call(this, \"LT\");\n    _this14.maxCharLength = 10240;\n    _this14.padByte = 0x20;\n    return _this14;\n  }\n\n  _createClass(LongText, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return rtrim(stream.readEncodedString(length));\n    }\n  }]);\n\n  return LongText;\n}(EncodedStringRepresentation);\n\nvar PersonName = /*#__PURE__*/function (_EncodedStringReprese3) {\n  _inherits(PersonName, _EncodedStringReprese3);\n\n  var _super16 = _createSuper(PersonName);\n\n  function PersonName() {\n    var _this15;\n\n    _classCallCheck(this, PersonName);\n\n    _this15 = _super16.call(this, \"PN\");\n    _this15.maxLength = null;\n    _this15.padByte = 0x20;\n    return _this15;\n  }\n\n  _createClass(PersonName, [{\n    key: \"checkLength\",\n    value: function checkLength(value) {\n      var components = [];\n\n      if (_typeof(value) === \"object\" && value !== null) {\n        // In DICOM JSON, components are encoded as a mapping (object),\n        // where the keys are one or more of the following: \"Alphabetic\",\n        // \"Ideographic\", \"Phonetic\".\n        // http://dicom.nema.org/medical/dicom/current/output/chtml/part18/sect_F.2.2.html\n        components = Object.keys(value).forEach(function (key) {\n          return value[key];\n        });\n      } else if (typeof value === \"string\" || value instanceof String) {\n        // In DICOM Part10, components are encoded as a string,\n        // where components (\"Alphabetic\", \"Ideographic\", \"Phonetic\")\n        // are separated by the \"=\" delimeter.\n        // http://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_6.2.html\n        components = value.split(/\\=/);\n      }\n\n      for (var i in components) {\n        var cmp = components[i];\n        if (cmp.length > 64) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return rtrim(stream.readEncodedString(length));\n    }\n  }]);\n\n  return PersonName;\n}(EncodedStringRepresentation);\n\nvar ShortString = /*#__PURE__*/function (_EncodedStringReprese4) {\n  _inherits(ShortString, _EncodedStringReprese4);\n\n  var _super17 = _createSuper(ShortString);\n\n  function ShortString() {\n    var _this16;\n\n    _classCallCheck(this, ShortString);\n\n    _this16 = _super17.call(this, \"SH\");\n    _this16.maxCharLength = 16;\n    _this16.padByte = 0x20;\n    return _this16;\n  }\n\n  _createClass(ShortString, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readEncodedString(length).trim();\n    }\n  }]);\n\n  return ShortString;\n}(EncodedStringRepresentation);\n\nvar SignedLong = /*#__PURE__*/function (_ValueRepresentation7) {\n  _inherits(SignedLong, _ValueRepresentation7);\n\n  var _super18 = _createSuper(SignedLong);\n\n  function SignedLong() {\n    var _this17;\n\n    _classCallCheck(this, SignedLong);\n\n    _this17 = _super18.call(this, \"SL\");\n    _this17.maxLength = 4;\n    _this17.padByte = 0;\n    _this17.fixed = true;\n    _this17.defaultValue = 0;\n    return _this17;\n  }\n\n  _createClass(SignedLong, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return stream.readInt32();\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(SignedLong.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(SignedLong.prototype), \"write\", this).call(this, stream, \"Int32\", value), writeOptions);\n    }\n  }]);\n\n  return SignedLong;\n}(ValueRepresentation);\n\nvar SequenceOfItems = /*#__PURE__*/function (_ValueRepresentation8) {\n  _inherits(SequenceOfItems, _ValueRepresentation8);\n\n  var _super19 = _createSuper(SequenceOfItems);\n\n  function SequenceOfItems() {\n    var _this18;\n\n    _classCallCheck(this, SequenceOfItems);\n\n    _this18 = _super19.call(this, \"SQ\");\n    _this18.maxLength = null;\n    _this18.padByte = 0;\n    _this18.noMultiple = true;\n    return _this18;\n  }\n\n  _createClass(SequenceOfItems, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, sqlength, syntax) {\n      if (sqlength == 0x0) {\n        return []; //contains no dataset\n      } else {\n        var undefLength = sqlength == 0xffffffff,\n            elements = [],\n            read = 0;\n        /* eslint-disable-next-line no-constant-condition */\n\n        while (true) {\n          var tag = Tag.readTag(stream),\n              length = null;\n          read += 4;\n\n          if (tag.is(0xfffee0dd)) {\n            stream.readUint32();\n            break;\n          } else if (!undefLength && read == sqlength) {\n            break;\n          } else if (tag.is(0xfffee000)) {\n            length = stream.readUint32();\n            read += 4;\n            var itemStream = null,\n                toRead = 0,\n                undef = length == 0xffffffff;\n\n            if (undef) {\n              var stack = 0;\n              /* eslint-disable-next-line no-constant-condition */\n\n              while (1) {\n                var g = stream.readUint16();\n\n                if (g == 0xfffe) {\n                  // some control tag is about to be read\n                  var ge = stream.readUint16();\n                  var itemLength = stream.readUint32();\n                  stream.increment(-4);\n\n                  if (ge == 0xe00d) {\n                    if (itemLength === 0) {\n                      // item delimitation tag (0xfffee00d) + item length (0x00000000) has been read\n                      stack--;\n\n                      if (stack < 0) {\n                        // if we are outside every stack, then we are finished reading the sequence of items\n                        stream.increment(4);\n                        read += 8;\n                        break;\n                      } else {\n                        // otherwise, we were in a nested sequence of items\n                        toRead += 4;\n                      }\n                    } else {\n                      // anything else has been read\n                      toRead += 2;\n                    }\n                  } else if (ge == 0xe000) {\n                    // a new item has been found\n                    toRead += 4;\n\n                    if (itemLength == 0xffffffff) {\n                      // a new item with undefined length has been found\n                      stack++;\n                    }\n                  } else {\n                    // some control tag that does not concern sequence of items has been read\n                    toRead += 2;\n                    stream.increment(-2);\n                  }\n                } else {\n                  // anything else has been read\n                  toRead += 2;\n                }\n              }\n            } else {\n              toRead = length;\n            }\n\n            if (toRead) {\n              stream.increment(undef ? -toRead - 8 : 0);\n              itemStream = stream.more(toRead); //parseElements\n\n              read += toRead;\n              if (undef) stream.increment(8);\n\n              var items = DicomMessage._read(itemStream, syntax);\n\n              elements.push(items);\n            }\n\n            if (!undefLength && read == sqlength) {\n              break;\n            }\n          }\n        }\n\n        return elements;\n      }\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, syntax, writeOptions) {\n      var written = 0;\n\n      if (value) {\n        for (var i = 0; i < value.length; i++) {\n          var item = value[i];\n\n          _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint16\", 0xfffe);\n\n          _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint16\", 0xe000);\n\n          _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint32\", 0xffffffff);\n\n          written += DicomMessage.write(item, stream, syntax, writeOptions);\n\n          _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint16\", 0xfffe);\n\n          _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint16\", 0xe00d);\n\n          _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint32\", 0x00000000);\n\n          written += 16;\n        }\n      }\n\n      _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint16\", 0xfffe);\n\n      _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint16\", 0xe0dd);\n\n      _get(_getPrototypeOf(SequenceOfItems.prototype), \"write\", this).call(this, stream, \"Uint32\", 0x00000000);\n\n      written += 8;\n      return _get(_getPrototypeOf(SequenceOfItems.prototype), \"writeBytes\", this).call(this, stream, value, [written], writeOptions);\n    }\n  }]);\n\n  return SequenceOfItems;\n}(ValueRepresentation);\n\nvar SignedShort = /*#__PURE__*/function (_ValueRepresentation9) {\n  _inherits(SignedShort, _ValueRepresentation9);\n\n  var _super20 = _createSuper(SignedShort);\n\n  function SignedShort() {\n    var _this19;\n\n    _classCallCheck(this, SignedShort);\n\n    _this19 = _super20.call(this, \"SS\");\n    _this19.maxLength = 2;\n    _this19.valueLength = 2;\n    _this19.padByte = 0;\n    _this19.fixed = true;\n    _this19.defaultValue = 0;\n    return _this19;\n  }\n\n  _createClass(SignedShort, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return stream.readInt16();\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(SignedShort.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(SignedShort.prototype), \"write\", this).call(this, stream, \"Int16\", value), writeOptions);\n    }\n  }]);\n\n  return SignedShort;\n}(ValueRepresentation);\n\nvar ShortText = /*#__PURE__*/function (_EncodedStringReprese5) {\n  _inherits(ShortText, _EncodedStringReprese5);\n\n  var _super21 = _createSuper(ShortText);\n\n  function ShortText() {\n    var _this20;\n\n    _classCallCheck(this, ShortText);\n\n    _this20 = _super21.call(this, \"ST\");\n    _this20.maxCharLength = 1024;\n    _this20.padByte = 0x20;\n    return _this20;\n  }\n\n  _createClass(ShortText, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return rtrim(stream.readEncodedString(length));\n    }\n  }]);\n\n  return ShortText;\n}(EncodedStringRepresentation);\n\nvar TimeValue = /*#__PURE__*/function (_AsciiStringRepresent8) {\n  _inherits(TimeValue, _AsciiStringRepresent8);\n\n  var _super22 = _createSuper(TimeValue);\n\n  function TimeValue() {\n    var _this21;\n\n    _classCallCheck(this, TimeValue);\n\n    _this21 = _super22.call(this, \"TM\");\n    _this21.maxLength = 14;\n    _this21.padByte = 0x20;\n    return _this21;\n  }\n\n  _createClass(TimeValue, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return rtrim(stream.readAsciiString(length));\n    }\n  }]);\n\n  return TimeValue;\n}(AsciiStringRepresentation);\n\nvar UnlimitedCharacters = /*#__PURE__*/function (_EncodedStringReprese6) {\n  _inherits(UnlimitedCharacters, _EncodedStringReprese6);\n\n  var _super23 = _createSuper(UnlimitedCharacters);\n\n  function UnlimitedCharacters() {\n    var _this22;\n\n    _classCallCheck(this, UnlimitedCharacters);\n\n    _this22 = _super23.call(this, \"UC\");\n    _this22.maxLength = null;\n    _this22.multi = true;\n    _this22.padByte = 0x20;\n    return _this22;\n  }\n\n  _createClass(UnlimitedCharacters, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return rtrim(stream.readEncodedString(length));\n    }\n  }]);\n\n  return UnlimitedCharacters;\n}(EncodedStringRepresentation);\n\nvar UnlimitedText = /*#__PURE__*/function (_EncodedStringReprese7) {\n  _inherits(UnlimitedText, _EncodedStringReprese7);\n\n  var _super24 = _createSuper(UnlimitedText);\n\n  function UnlimitedText() {\n    var _this23;\n\n    _classCallCheck(this, UnlimitedText);\n\n    _this23 = _super24.call(this, \"UT\");\n    _this23.maxLength = null;\n    _this23.padByte = 0x20;\n    return _this23;\n  }\n\n  _createClass(UnlimitedText, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return rtrim(stream.readEncodedString(length));\n    }\n  }]);\n\n  return UnlimitedText;\n}(EncodedStringRepresentation);\n\nvar UnsignedShort = /*#__PURE__*/function (_ValueRepresentation10) {\n  _inherits(UnsignedShort, _ValueRepresentation10);\n\n  var _super25 = _createSuper(UnsignedShort);\n\n  function UnsignedShort() {\n    var _this24;\n\n    _classCallCheck(this, UnsignedShort);\n\n    _this24 = _super25.call(this, \"US\");\n    _this24.maxLength = 2;\n    _this24.padByte = 0;\n    _this24.fixed = true;\n    _this24.defaultValue = 0;\n    return _this24;\n  }\n\n  _createClass(UnsignedShort, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return stream.readUint16();\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(UnsignedShort.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(UnsignedShort.prototype), \"write\", this).call(this, stream, \"Uint16\", value), writeOptions);\n    }\n  }]);\n\n  return UnsignedShort;\n}(ValueRepresentation);\n\nvar UnsignedLong = /*#__PURE__*/function (_ValueRepresentation11) {\n  _inherits(UnsignedLong, _ValueRepresentation11);\n\n  var _super26 = _createSuper(UnsignedLong);\n\n  function UnsignedLong() {\n    var _this25;\n\n    _classCallCheck(this, UnsignedLong);\n\n    _this25 = _super26.call(this, \"UL\");\n    _this25.maxLength = 4;\n    _this25.padByte = 0;\n    _this25.fixed = true;\n    _this25.defaultValue = 0;\n    return _this25;\n  }\n\n  _createClass(UnsignedLong, [{\n    key: \"readBytes\",\n    value: function readBytes(stream) {\n      return stream.readUint32();\n    }\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(stream, value, writeOptions) {\n      return _get(_getPrototypeOf(UnsignedLong.prototype), \"writeBytes\", this).call(this, stream, value, _get(_getPrototypeOf(UnsignedLong.prototype), \"write\", this).call(this, stream, \"Uint32\", value), writeOptions);\n    }\n  }]);\n\n  return UnsignedLong;\n}(ValueRepresentation);\n\nvar UniqueIdentifier = /*#__PURE__*/function (_AsciiStringRepresent9) {\n  _inherits(UniqueIdentifier, _AsciiStringRepresent9);\n\n  var _super27 = _createSuper(UniqueIdentifier);\n\n  function UniqueIdentifier() {\n    var _this26;\n\n    _classCallCheck(this, UniqueIdentifier);\n\n    _this26 = _super27.call(this, \"UI\");\n    _this26.maxLength = 64;\n    _this26.padByte = 0;\n    return _this26;\n  }\n\n  _createClass(UniqueIdentifier, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      var result = this.readNullPaddedString(stream, length);\n      var BACKSLASH = String.fromCharCode(0x5c);\n      var uidRegExp = /[^0-9.]/g; // Treat backslashes as a delimiter for multiple UIDs, in which case an\n      // array of UIDs is returned. This is used by DICOM Q&R to support\n      // querying and matching multiple items on a UID field in a single\n      // query. For more details see:\n      //\n      // https://dicom.nema.org/medical/dicom/current/output/chtml/part04/sect_C.2.2.2.2.html\n      // https://dicom.nema.org/medical/dicom/current/output/chtml/part05/sect_6.4.html\n\n      if (result.indexOf(BACKSLASH) === -1) {\n        return result.replace(uidRegExp, \"\");\n      } else {\n        return result.split(BACKSLASH).map(function (uid) {\n          return uid.replace(uidRegExp, \"\");\n        });\n      }\n    }\n  }]);\n\n  return UniqueIdentifier;\n}(AsciiStringRepresentation);\n\nvar UniversalResource = /*#__PURE__*/function (_AsciiStringRepresent10) {\n  _inherits(UniversalResource, _AsciiStringRepresent10);\n\n  var _super28 = _createSuper(UniversalResource);\n\n  function UniversalResource() {\n    var _this27;\n\n    _classCallCheck(this, UniversalResource);\n\n    _this27 = _super28.call(this, \"UR\");\n    _this27.maxLength = null;\n    _this27.padByte = 0x20;\n    return _this27;\n  }\n\n  _createClass(UniversalResource, [{\n    key: \"readBytes\",\n    value: function readBytes(stream, length) {\n      return stream.readAsciiString(length);\n    }\n  }]);\n\n  return UniversalResource;\n}(AsciiStringRepresentation);\n\nvar UnknownValue = /*#__PURE__*/function (_BinaryRepresentation) {\n  _inherits(UnknownValue, _BinaryRepresentation);\n\n  var _super29 = _createSuper(UnknownValue);\n\n  function UnknownValue() {\n    var _this28;\n\n    _classCallCheck(this, UnknownValue);\n\n    _this28 = _super29.call(this, \"UN\");\n    _this28.maxLength = null;\n    _this28.padByte = 0;\n    _this28.noMultiple = true;\n    return _this28;\n  }\n\n  return _createClass(UnknownValue);\n}(BinaryRepresentation);\n\nvar OtherWordString = /*#__PURE__*/function (_BinaryRepresentation2) {\n  _inherits(OtherWordString, _BinaryRepresentation2);\n\n  var _super30 = _createSuper(OtherWordString);\n\n  function OtherWordString() {\n    var _this29;\n\n    _classCallCheck(this, OtherWordString);\n\n    _this29 = _super30.call(this, \"OW\");\n    _this29.maxLength = null;\n    _this29.padByte = 0;\n    _this29.noMultiple = true;\n    return _this29;\n  }\n\n  return _createClass(OtherWordString);\n}(BinaryRepresentation);\n\nvar OtherByteString = /*#__PURE__*/function (_BinaryRepresentation3) {\n  _inherits(OtherByteString, _BinaryRepresentation3);\n\n  var _super31 = _createSuper(OtherByteString);\n\n  function OtherByteString() {\n    var _this30;\n\n    _classCallCheck(this, OtherByteString);\n\n    _this30 = _super31.call(this, \"OB\");\n    _this30.maxLength = null;\n    _this30.padByte = 0;\n    _this30.noMultiple = true;\n    return _this30;\n  }\n\n  return _createClass(OtherByteString);\n}(BinaryRepresentation);\n\nvar OtherDoubleString = /*#__PURE__*/function (_BinaryRepresentation4) {\n  _inherits(OtherDoubleString, _BinaryRepresentation4);\n\n  var _super32 = _createSuper(OtherDoubleString);\n\n  function OtherDoubleString() {\n    var _this31;\n\n    _classCallCheck(this, OtherDoubleString);\n\n    _this31 = _super32.call(this, \"OD\");\n    _this31.maxLength = null;\n    _this31.padByte = 0;\n    _this31.noMultiple = true;\n    return _this31;\n  }\n\n  return _createClass(OtherDoubleString);\n}(BinaryRepresentation);\n\nvar OtherFloatString = /*#__PURE__*/function (_BinaryRepresentation5) {\n  _inherits(OtherFloatString, _BinaryRepresentation5);\n\n  var _super33 = _createSuper(OtherFloatString);\n\n  function OtherFloatString() {\n    var _this32;\n\n    _classCallCheck(this, OtherFloatString);\n\n    _this32 = _super33.call(this, \"OF\");\n    _this32.maxLength = null;\n    _this32.padByte = 0;\n    _this32.noMultiple = true;\n    return _this32;\n  }\n\n  return _createClass(OtherFloatString);\n}(BinaryRepresentation); // these VR instances are precreate and are reused for each requested vr/tag\n\n\nvar VRinstances = {\n  AE: new ApplicationEntity(),\n  AS: new AgeString(),\n  AT: new AttributeTag(),\n  CS: new CodeString(),\n  DA: new DateValue(),\n  DS: new DecimalString(),\n  DT: new DateTime(),\n  FL: new FloatingPointSingle(),\n  FD: new FloatingPointDouble(),\n  IS: new IntegerString(),\n  LO: new LongString(),\n  LT: new LongText(),\n  OB: new OtherByteString(),\n  OD: new OtherDoubleString(),\n  OF: new OtherFloatString(),\n  OW: new OtherWordString(),\n  PN: new PersonName(),\n  SH: new ShortString(),\n  SL: new SignedLong(),\n  SQ: new SequenceOfItems(),\n  SS: new SignedShort(),\n  ST: new ShortText(),\n  TM: new TimeValue(),\n  UC: new UnlimitedCharacters(),\n  UI: new UniqueIdentifier(),\n  UL: new UnsignedLong(),\n  UN: new UnknownValue(),\n  UR: new UniversalResource(),\n  US: new UnsignedShort(),\n  UT: new UnlimitedText()\n};\n\nvar IMPLICIT_LITTLE_ENDIAN = \"1.2.840.10008.1.2\";\nvar EXPLICIT_LITTLE_ENDIAN = \"1.2.840.10008.1.2.1\";\n\nfunction paddingLeft(paddingValue, string) {\n  return String(paddingValue + string).slice(-paddingValue.length);\n}\n\nvar Tag = /*#__PURE__*/function () {\n  function Tag(value) {\n    _classCallCheck(this, Tag);\n\n    this.value = value;\n  }\n\n  _createClass(Tag, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"(\" + paddingLeft(\"0000\", this.group().toString(16).toUpperCase()) + \",\" + paddingLeft(\"0000\", this.element().toString(16).toUpperCase()) + \")\";\n    }\n  }, {\n    key: \"toCleanString\",\n    value: function toCleanString() {\n      return paddingLeft(\"0000\", this.group().toString(16).toUpperCase()) + paddingLeft(\"0000\", this.element().toString(16).toUpperCase());\n    }\n  }, {\n    key: \"is\",\n    value: function is(t) {\n      return this.value == t;\n    }\n  }, {\n    key: \"group\",\n    value: function group() {\n      return this.value >>> 16;\n    }\n  }, {\n    key: \"element\",\n    value: function element() {\n      return this.value & 0xffff;\n    }\n  }, {\n    key: \"isPixelDataTag\",\n    value: function isPixelDataTag() {\n      return this.is(0x7fe00010);\n    }\n  }, {\n    key: \"isPrivateCreator\",\n    value: function isPrivateCreator() {\n      var group = this.group();\n      var element = this.element();\n      return group % 2 === 1 && element < 0x100 && element > 0x00;\n    }\n  }, {\n    key: \"write\",\n    value: function write(stream, vrType, values, syntax, writeOptions) {\n      var vr = ValueRepresentation.createByTypeString(vrType),\n          useSyntax = DicomMessage._normalizeSyntax(syntax);\n\n      var implicit = useSyntax == IMPLICIT_LITTLE_ENDIAN ? true : false,\n          isLittleEndian = useSyntax == IMPLICIT_LITTLE_ENDIAN || useSyntax == EXPLICIT_LITTLE_ENDIAN ? true : false,\n          isEncapsulated = this.isPixelDataTag() && DicomMessage.isEncapsulated(syntax);\n      var oldEndian = stream.isLittleEndian;\n      stream.setEndian(isLittleEndian);\n      stream.writeUint16(this.group());\n      stream.writeUint16(this.element());\n      var tagStream = new WriteBufferStream(256),\n          valueLength;\n      tagStream.setEndian(isLittleEndian);\n\n      if (vrType == \"OW\" || vrType == \"OB\" || vrType == \"UN\") {\n        valueLength = vr.writeBytes(tagStream, values, useSyntax, isEncapsulated, writeOptions);\n      } else if (vrType == \"SQ\") {\n        valueLength = vr.writeBytes(tagStream, values, useSyntax, writeOptions);\n      } else {\n        valueLength = vr.writeBytes(tagStream, values, writeOptions);\n      }\n\n      if (vrType == \"SQ\") {\n        valueLength = 0xffffffff;\n      }\n\n      var written = tagStream.size + 4;\n\n      if (implicit) {\n        stream.writeUint32(valueLength);\n        written += 4;\n      } else {\n        if (vr.isExplicit()) {\n          stream.writeAsciiString(vr.type);\n          stream.writeUint16(0);\n          stream.writeUint32(valueLength);\n          written += 8;\n        } else {\n          stream.writeAsciiString(vr.type);\n          stream.writeUint16(valueLength);\n          written += 4;\n        }\n      }\n\n      stream.concat(tagStream);\n      stream.setEndian(oldEndian);\n      return written;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(str) {\n      var group = parseInt(str.substring(0, 4), 16),\n          element = parseInt(str.substring(4), 16);\n      return Tag.fromNumbers(group, element);\n    }\n  }, {\n    key: \"fromPString\",\n    value: function fromPString(str) {\n      var group = parseInt(str.substring(1, 5), 16),\n          element = parseInt(str.substring(6, 10), 16);\n      return Tag.fromNumbers(group, element);\n    }\n  }, {\n    key: \"fromNumbers\",\n    value: function fromNumbers(group, element) {\n      return new Tag((group << 16 | element) >>> 0);\n    }\n  }, {\n    key: \"readTag\",\n    value: function readTag(stream) {\n      var group = stream.readUint16(),\n          element = stream.readUint16();\n      return Tag.fromNumbers(group, element);\n    }\n  }]);\n\n  return Tag;\n}();\n\nvar dictionary={\"(0000,0000)\":{tag:\"(0000,0000)\",vr:\"UL\",name:\"CommandGroupLength\",vm:\"1\",version:\"DICOM\"},\"(0000,0002)\":{tag:\"(0000,0002)\",vr:\"UI\",name:\"AffectedSOPClassUID\",vm:\"1\",version:\"DICOM\"},\"(0000,0003)\":{tag:\"(0000,0003)\",vr:\"UI\",name:\"RequestedSOPClassUID\",vm:\"1\",version:\"DICOM\"},\"(0000,0100)\":{tag:\"(0000,0100)\",vr:\"US\",name:\"CommandField\",vm:\"1\",version:\"DICOM\"},\"(0000,0110)\":{tag:\"(0000,0110)\",vr:\"US\",name:\"MessageID\",vm:\"1\",version:\"DICOM\"},\"(0000,0120)\":{tag:\"(0000,0120)\",vr:\"US\",name:\"MessageIDBeingRespondedTo\",vm:\"1\",version:\"DICOM\"},\"(0000,0600)\":{tag:\"(0000,0600)\",vr:\"AE\",name:\"MoveDestination\",vm:\"1\",version:\"DICOM\"},\"(0000,0700)\":{tag:\"(0000,0700)\",vr:\"US\",name:\"Priority\",vm:\"1\",version:\"DICOM\"},\"(0000,0800)\":{tag:\"(0000,0800)\",vr:\"US\",name:\"CommandDataSetType\",vm:\"1\",version:\"DICOM\"},\"(0000,0900)\":{tag:\"(0000,0900)\",vr:\"US\",name:\"Status\",vm:\"1\",version:\"DICOM\"},\"(0000,0901)\":{tag:\"(0000,0901)\",vr:\"AT\",name:\"OffendingElement\",vm:\"1-n\",version:\"DICOM\"},\"(0000,0902)\":{tag:\"(0000,0902)\",vr:\"LO\",name:\"ErrorComment\",vm:\"1\",version:\"DICOM\"},\"(0000,0903)\":{tag:\"(0000,0903)\",vr:\"US\",name:\"ErrorID\",vm:\"1\",version:\"DICOM\"},\"(0000,1000)\":{tag:\"(0000,1000)\",vr:\"UI\",name:\"AffectedSOPInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0000,1001)\":{tag:\"(0000,1001)\",vr:\"UI\",name:\"RequestedSOPInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0000,1002)\":{tag:\"(0000,1002)\",vr:\"US\",name:\"EventTypeID\",vm:\"1\",version:\"DICOM\"},\"(0000,1005)\":{tag:\"(0000,1005)\",vr:\"AT\",name:\"AttributeIdentifierList\",vm:\"1-n\",version:\"DICOM\"},\"(0000,1008)\":{tag:\"(0000,1008)\",vr:\"US\",name:\"ActionTypeID\",vm:\"1\",version:\"DICOM\"},\"(0000,1020)\":{tag:\"(0000,1020)\",vr:\"US\",name:\"NumberOfRemainingSuboperations\",vm:\"1\",version:\"DICOM\"},\"(0000,1021)\":{tag:\"(0000,1021)\",vr:\"US\",name:\"NumberOfCompletedSuboperations\",vm:\"1\",version:\"DICOM\"},\"(0000,1022)\":{tag:\"(0000,1022)\",vr:\"US\",name:\"NumberOfFailedSuboperations\",vm:\"1\",version:\"DICOM\"},\"(0000,1023)\":{tag:\"(0000,1023)\",vr:\"US\",name:\"NumberOfWarningSuboperations\",vm:\"1\",version:\"DICOM\"},\"(0000,1030)\":{tag:\"(0000,1030)\",vr:\"AE\",name:\"MoveOriginatorApplicationEntityTitle\",vm:\"1\",version:\"DICOM\"},\"(0000,1031)\":{tag:\"(0000,1031)\",vr:\"US\",name:\"MoveOriginatorMessageID\",vm:\"1\",version:\"DICOM\"},\"(0002,0000)\":{tag:\"(0002,0000)\",vr:\"UL\",name:\"FileMetaInformationGroupLength\",vm:\"1\",version:\"DICOM\"},\"(0002,0001)\":{tag:\"(0002,0001)\",vr:\"OB\",name:\"FileMetaInformationVersion\",vm:\"1\",version:\"DICOM\"},\"(0002,0002)\":{tag:\"(0002,0002)\",vr:\"UI\",name:\"MediaStorageSOPClassUID\",vm:\"1\",version:\"DICOM\"},\"(0002,0003)\":{tag:\"(0002,0003)\",vr:\"UI\",name:\"MediaStorageSOPInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0002,0010)\":{tag:\"(0002,0010)\",vr:\"UI\",name:\"TransferSyntaxUID\",vm:\"1\",version:\"DICOM\"},\"(0002,0012)\":{tag:\"(0002,0012)\",vr:\"UI\",name:\"ImplementationClassUID\",vm:\"1\",version:\"DICOM\"},\"(0002,0013)\":{tag:\"(0002,0013)\",vr:\"SH\",name:\"ImplementationVersionName\",vm:\"1\",version:\"DICOM\"},\"(0002,0016)\":{tag:\"(0002,0016)\",vr:\"AE\",name:\"SourceApplicationEntityTitle\",vm:\"1\",version:\"DICOM\"},\"(0002,0017)\":{tag:\"(0002,0017)\",vr:\"AE\",name:\"SendingApplicationEntityTitle\",vm:\"1\",version:\"DICOM\"},\"(0002,0018)\":{tag:\"(0002,0018)\",vr:\"AE\",name:\"ReceivingApplicationEntityTitle\",vm:\"1\",version:\"DICOM\"},\"(0002,0100)\":{tag:\"(0002,0100)\",vr:\"UI\",name:\"PrivateInformationCreatorUID\",vm:\"1\",version:\"DICOM\"},\"(0002,0102)\":{tag:\"(0002,0102)\",vr:\"OB\",name:\"PrivateInformation\",vm:\"1\",version:\"DICOM\"},\"(0004,1130)\":{tag:\"(0004,1130)\",vr:\"CS\",name:\"FileSetID\",vm:\"1\",version:\"DICOM\"},\"(0004,1141)\":{tag:\"(0004,1141)\",vr:\"CS\",name:\"FileSetDescriptorFileID\",vm:\"1-8\",version:\"DICOM\"},\"(0004,1142)\":{tag:\"(0004,1142)\",vr:\"CS\",name:\"SpecificCharacterSetOfFileSetDescriptorFile\",vm:\"1\",version:\"DICOM\"},\"(0004,1200)\":{tag:\"(0004,1200)\",vr:\"up\",name:\"OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity\",vm:\"1\",version:\"DICOM\"},\"(0004,1202)\":{tag:\"(0004,1202)\",vr:\"up\",name:\"OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity\",vm:\"1\",version:\"DICOM\"},\"(0004,1212)\":{tag:\"(0004,1212)\",vr:\"US\",name:\"FileSetConsistencyFlag\",vm:\"1\",version:\"DICOM\"},\"(0004,1220)\":{tag:\"(0004,1220)\",vr:\"SQ\",name:\"DirectoryRecordSequence\",vm:\"1\",version:\"DICOM\"},\"(0004,1400)\":{tag:\"(0004,1400)\",vr:\"up\",name:\"OffsetOfTheNextDirectoryRecord\",vm:\"1\",version:\"DICOM\"},\"(0004,1410)\":{tag:\"(0004,1410)\",vr:\"US\",name:\"RecordInUseFlag\",vm:\"1\",version:\"DICOM\"},\"(0004,1420)\":{tag:\"(0004,1420)\",vr:\"up\",name:\"OffsetOfReferencedLowerLevelDirectoryEntity\",vm:\"1\",version:\"DICOM\"},\"(0004,1430)\":{tag:\"(0004,1430)\",vr:\"CS\",name:\"DirectoryRecordType\",vm:\"1\",version:\"DICOM\"},\"(0004,1432)\":{tag:\"(0004,1432)\",vr:\"UI\",name:\"PrivateRecordUID\",vm:\"1\",version:\"DICOM\"},\"(0004,1500)\":{tag:\"(0004,1500)\",vr:\"CS\",name:\"ReferencedFileID\",vm:\"1-8\",version:\"DICOM\"},\"(0004,1510)\":{tag:\"(0004,1510)\",vr:\"UI\",name:\"ReferencedSOPClassUIDInFile\",vm:\"1\",version:\"DICOM\"},\"(0004,1511)\":{tag:\"(0004,1511)\",vr:\"UI\",name:\"ReferencedSOPInstanceUIDInFile\",vm:\"1\",version:\"DICOM\"},\"(0004,1512)\":{tag:\"(0004,1512)\",vr:\"UI\",name:\"ReferencedTransferSyntaxUIDInFile\",vm:\"1\",version:\"DICOM\"},\"(0004,151A)\":{tag:\"(0004,151A)\",vr:\"UI\",name:\"ReferencedRelatedGeneralSOPClassUIDInFile\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0005)\":{tag:\"(0008,0005)\",vr:\"CS\",name:\"SpecificCharacterSet\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0006)\":{tag:\"(0008,0006)\",vr:\"SQ\",name:\"LanguageCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0008)\":{tag:\"(0008,0008)\",vr:\"CS\",name:\"ImageType\",vm:\"2-n\",version:\"DICOM\"},\"(0008,0012)\":{tag:\"(0008,0012)\",vr:\"DA\",name:\"InstanceCreationDate\",vm:\"1\",version:\"DICOM\"},\"(0008,0013)\":{tag:\"(0008,0013)\",vr:\"TM\",name:\"InstanceCreationTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0014)\":{tag:\"(0008,0014)\",vr:\"UI\",name:\"InstanceCreatorUID\",vm:\"1\",version:\"DICOM\"},\"(0008,0015)\":{tag:\"(0008,0015)\",vr:\"DT\",name:\"InstanceCoercionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0016)\":{tag:\"(0008,0016)\",vr:\"UI\",name:\"SOPClassUID\",vm:\"1\",version:\"DICOM\"},\"(0008,0018)\":{tag:\"(0008,0018)\",vr:\"UI\",name:\"SOPInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0008,001A)\":{tag:\"(0008,001A)\",vr:\"UI\",name:\"RelatedGeneralSOPClassUID\",vm:\"1-n\",version:\"DICOM\"},\"(0008,001B)\":{tag:\"(0008,001B)\",vr:\"UI\",name:\"OriginalSpecializedSOPClassUID\",vm:\"1\",version:\"DICOM\"},\"(0008,0020)\":{tag:\"(0008,0020)\",vr:\"DA\",name:\"StudyDate\",vm:\"1\",version:\"DICOM\"},\"(0008,0021)\":{tag:\"(0008,0021)\",vr:\"DA\",name:\"SeriesDate\",vm:\"1\",version:\"DICOM\"},\"(0008,0022)\":{tag:\"(0008,0022)\",vr:\"DA\",name:\"AcquisitionDate\",vm:\"1\",version:\"DICOM\"},\"(0008,0023)\":{tag:\"(0008,0023)\",vr:\"DA\",name:\"ContentDate\",vm:\"1\",version:\"DICOM\"},\"(0008,002A)\":{tag:\"(0008,002A)\",vr:\"DT\",name:\"AcquisitionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0030)\":{tag:\"(0008,0030)\",vr:\"TM\",name:\"StudyTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0031)\":{tag:\"(0008,0031)\",vr:\"TM\",name:\"SeriesTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0032)\":{tag:\"(0008,0032)\",vr:\"TM\",name:\"AcquisitionTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0033)\":{tag:\"(0008,0033)\",vr:\"TM\",name:\"ContentTime\",vm:\"1\",version:\"DICOM\"},\"(0008,0050)\":{tag:\"(0008,0050)\",vr:\"SH\",name:\"AccessionNumber\",vm:\"1\",version:\"DICOM\"},\"(0008,0051)\":{tag:\"(0008,0051)\",vr:\"SQ\",name:\"IssuerOfAccessionNumberSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0052)\":{tag:\"(0008,0052)\",vr:\"CS\",name:\"QueryRetrieveLevel\",vm:\"1\",version:\"DICOM\"},\"(0008,0053)\":{tag:\"(0008,0053)\",vr:\"CS\",name:\"QueryRetrieveView\",vm:\"1\",version:\"DICOM\"},\"(0008,0054)\":{tag:\"(0008,0054)\",vr:\"AE\",name:\"RetrieveAETitle\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0055)\":{tag:\"(0008,0055)\",vr:\"AE\",name:\"StationAETitle\",vm:\"1\",version:\"DICOM\"},\"(0008,0056)\":{tag:\"(0008,0056)\",vr:\"CS\",name:\"InstanceAvailability\",vm:\"1\",version:\"DICOM\"},\"(0008,0058)\":{tag:\"(0008,0058)\",vr:\"UI\",name:\"FailedSOPInstanceUIDList\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0060)\":{tag:\"(0008,0060)\",vr:\"CS\",name:\"Modality\",vm:\"1\",version:\"DICOM\"},\"(0008,0061)\":{tag:\"(0008,0061)\",vr:\"CS\",name:\"ModalitiesInStudy\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0062)\":{tag:\"(0008,0062)\",vr:\"UI\",name:\"SOPClassesInStudy\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0063)\":{tag:\"(0008,0063)\",vr:\"SQ\",name:\"AnatomicRegionsInStudyCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0064)\":{tag:\"(0008,0064)\",vr:\"CS\",name:\"ConversionType\",vm:\"1\",version:\"DICOM\"},\"(0008,0068)\":{tag:\"(0008,0068)\",vr:\"CS\",name:\"PresentationIntentType\",vm:\"1\",version:\"DICOM\"},\"(0008,0070)\":{tag:\"(0008,0070)\",vr:\"LO\",name:\"Manufacturer\",vm:\"1\",version:\"DICOM\"},\"(0008,0080)\":{tag:\"(0008,0080)\",vr:\"LO\",name:\"InstitutionName\",vm:\"1\",version:\"DICOM\"},\"(0008,0081)\":{tag:\"(0008,0081)\",vr:\"ST\",name:\"InstitutionAddress\",vm:\"1\",version:\"DICOM\"},\"(0008,0082)\":{tag:\"(0008,0082)\",vr:\"SQ\",name:\"InstitutionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0090)\":{tag:\"(0008,0090)\",vr:\"PN\",name:\"ReferringPhysicianName\",vm:\"1\",version:\"DICOM\"},\"(0008,0092)\":{tag:\"(0008,0092)\",vr:\"ST\",name:\"ReferringPhysicianAddress\",vm:\"1\",version:\"DICOM\"},\"(0008,0094)\":{tag:\"(0008,0094)\",vr:\"SH\",name:\"ReferringPhysicianTelephoneNumbers\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0096)\":{tag:\"(0008,0096)\",vr:\"SQ\",name:\"ReferringPhysicianIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,009C)\":{tag:\"(0008,009C)\",vr:\"PN\",name:\"ConsultingPhysicianName\",vm:\"1-n\",version:\"DICOM\"},\"(0008,009D)\":{tag:\"(0008,009D)\",vr:\"SQ\",name:\"ConsultingPhysicianIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0100)\":{tag:\"(0008,0100)\",vr:\"SH\",name:\"CodeValue\",vm:\"1\",version:\"DICOM\"},\"(0008,0101)\":{tag:\"(0008,0101)\",vr:\"LO\",name:\"ExtendedCodeValue\",vm:\"1\",version:\"DICOM/DICOS\"},\"(0008,0102)\":{tag:\"(0008,0102)\",vr:\"SH\",name:\"CodingSchemeDesignator\",vm:\"1\",version:\"DICOM\"},\"(0008,0103)\":{tag:\"(0008,0103)\",vr:\"SH\",name:\"CodingSchemeVersion\",vm:\"1\",version:\"DICOM\"},\"(0008,0104)\":{tag:\"(0008,0104)\",vr:\"LO\",name:\"CodeMeaning\",vm:\"1\",version:\"DICOM\"},\"(0008,0105)\":{tag:\"(0008,0105)\",vr:\"CS\",name:\"MappingResource\",vm:\"1\",version:\"DICOM\"},\"(0008,0106)\":{tag:\"(0008,0106)\",vr:\"DT\",name:\"ContextGroupVersion\",vm:\"1\",version:\"DICOM\"},\"(0008,0107)\":{tag:\"(0008,0107)\",vr:\"DT\",name:\"ContextGroupLocalVersion\",vm:\"1\",version:\"DICOM\"},\"(0008,0108)\":{tag:\"(0008,0108)\",vr:\"LT\",name:\"ExtendedCodeMeaning\",vm:\"1\",version:\"DICOM/DICOS\"},\"(0008,0109)\":{tag:\"(0008,0109)\",vr:\"SQ\",name:\"CodingSchemeResourcesSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,010A)\":{tag:\"(0008,010A)\",vr:\"CS\",name:\"CodingSchemeURLType\",vm:\"1\",version:\"DICOM\"},\"(0008,010B)\":{tag:\"(0008,010B)\",vr:\"CS\",name:\"ContextGroupExtensionFlag\",vm:\"1\",version:\"DICOM\"},\"(0008,010C)\":{tag:\"(0008,010C)\",vr:\"UI\",name:\"CodingSchemeUID\",vm:\"1\",version:\"DICOM\"},\"(0008,010D)\":{tag:\"(0008,010D)\",vr:\"UI\",name:\"ContextGroupExtensionCreatorUID\",vm:\"1\",version:\"DICOM\"},\"(0008,010E)\":{tag:\"(0008,010E)\",vr:\"UR\",name:\"CodingSchemeURL\",vm:\"1\",version:\"DICOM\"},\"(0008,010F)\":{tag:\"(0008,010F)\",vr:\"CS\",name:\"ContextIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0008,0110)\":{tag:\"(0008,0110)\",vr:\"SQ\",name:\"CodingSchemeIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0112)\":{tag:\"(0008,0112)\",vr:\"LO\",name:\"CodingSchemeRegistry\",vm:\"1\",version:\"DICOM\"},\"(0008,0114)\":{tag:\"(0008,0114)\",vr:\"ST\",name:\"CodingSchemeExternalID\",vm:\"1\",version:\"DICOM\"},\"(0008,0115)\":{tag:\"(0008,0115)\",vr:\"ST\",name:\"CodingSchemeName\",vm:\"1\",version:\"DICOM\"},\"(0008,0116)\":{tag:\"(0008,0116)\",vr:\"ST\",name:\"CodingSchemeResponsibleOrganization\",vm:\"1\",version:\"DICOM\"},\"(0008,0117)\":{tag:\"(0008,0117)\",vr:\"UI\",name:\"ContextUID\",vm:\"1\",version:\"DICOM\"},\"(0008,0118)\":{tag:\"(0008,0118)\",vr:\"UI\",name:\"MappingResourceUID\",vm:\"1\",version:\"DICOM\"},\"(0008,0119)\":{tag:\"(0008,0119)\",vr:\"UC\",name:\"LongCodeValue\",vm:\"1\",version:\"DICOM\"},\"(0008,0120)\":{tag:\"(0008,0120)\",vr:\"UR\",name:\"URNCodeValue\",vm:\"1\",version:\"DICOM\"},\"(0008,0121)\":{tag:\"(0008,0121)\",vr:\"SQ\",name:\"EquivalentCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0122)\":{tag:\"(0008,0122)\",vr:\"LO\",name:\"MappingResourceName\",vm:\"1\",version:\"DICOM\"},\"(0008,0123)\":{tag:\"(0008,0123)\",vr:\"SQ\",name:\"ContextGroupIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0124)\":{tag:\"(0008,0124)\",vr:\"SQ\",name:\"MappingResourceIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0201)\":{tag:\"(0008,0201)\",vr:\"SH\",name:\"TimezoneOffsetFromUTC\",vm:\"1\",version:\"DICOM\"},\"(0008,0220)\":{tag:\"(0008,0220)\",vr:\"SQ\",name:\"ResponsibleGroupCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0221)\":{tag:\"(0008,0221)\",vr:\"CS\",name:\"EquipmentModality\",vm:\"1\",version:\"DICOM\"},\"(0008,0222)\":{tag:\"(0008,0222)\",vr:\"LO\",name:\"ManufacturerRelatedModelGroup\",vm:\"1\",version:\"DICOM\"},\"(0008,0300)\":{tag:\"(0008,0300)\",vr:\"SQ\",name:\"PrivateDataElementCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0301)\":{tag:\"(0008,0301)\",vr:\"US\",name:\"PrivateGroupReference\",vm:\"1\",version:\"DICOM\"},\"(0008,0302)\":{tag:\"(0008,0302)\",vr:\"LO\",name:\"PrivateCreatorReference\",vm:\"1\",version:\"DICOM\"},\"(0008,0303)\":{tag:\"(0008,0303)\",vr:\"CS\",name:\"BlockIdentifyingInformationStatus\",vm:\"1\",version:\"DICOM\"},\"(0008,0304)\":{tag:\"(0008,0304)\",vr:\"US\",name:\"NonidentifyingPrivateElements\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0305)\":{tag:\"(0008,0305)\",vr:\"SQ\",name:\"DeidentificationActionSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,0306)\":{tag:\"(0008,0306)\",vr:\"US\",name:\"IdentifyingPrivateElements\",vm:\"1-n\",version:\"DICOM\"},\"(0008,0307)\":{tag:\"(0008,0307)\",vr:\"CS\",name:\"DeidentificationAction\",vm:\"1\",version:\"DICOM\"},\"(0008,0308)\":{tag:\"(0008,0308)\",vr:\"US\",name:\"PrivateDataElement\",vm:\"1\",version:\"DICOM\"},\"(0008,0309)\":{tag:\"(0008,0309)\",vr:\"UL\",name:\"PrivateDataElementValueMultiplicity\",vm:\"1-3\",version:\"DICOM\"},\"(0008,030A)\":{tag:\"(0008,030A)\",vr:\"CS\",name:\"PrivateDataElementValueRepresentation\",vm:\"1\",version:\"DICOM\"},\"(0008,030B)\":{tag:\"(0008,030B)\",vr:\"UL\",name:\"PrivateDataElementNumberOfItems\",vm:\"1-2\",version:\"DICOM\"},\"(0008,030C)\":{tag:\"(0008,030C)\",vr:\"UC\",name:\"PrivateDataElementName\",vm:\"1\",version:\"DICOM\"},\"(0008,030D)\":{tag:\"(0008,030D)\",vr:\"UC\",name:\"PrivateDataElementKeyword\",vm:\"1\",version:\"DICOM\"},\"(0008,030E)\":{tag:\"(0008,030E)\",vr:\"UT\",name:\"PrivateDataElementDescription\",vm:\"1\",version:\"DICOM\"},\"(0008,030F)\":{tag:\"(0008,030F)\",vr:\"UT\",name:\"PrivateDataElementEncoding\",vm:\"1\",version:\"DICOM\"},\"(0008,0310)\":{tag:\"(0008,0310)\",vr:\"SQ\",name:\"PrivateDataElementDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1010)\":{tag:\"(0008,1010)\",vr:\"SH\",name:\"StationName\",vm:\"1\",version:\"DICOM\"},\"(0008,1030)\":{tag:\"(0008,1030)\",vr:\"LO\",name:\"StudyDescription\",vm:\"1\",version:\"DICOM\"},\"(0008,1032)\":{tag:\"(0008,1032)\",vr:\"SQ\",name:\"ProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,103E)\":{tag:\"(0008,103E)\",vr:\"LO\",name:\"SeriesDescription\",vm:\"1\",version:\"DICOM\"},\"(0008,103F)\":{tag:\"(0008,103F)\",vr:\"SQ\",name:\"SeriesDescriptionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1040)\":{tag:\"(0008,1040)\",vr:\"LO\",name:\"InstitutionalDepartmentName\",vm:\"1\",version:\"DICOM\"},\"(0008,1041)\":{tag:\"(0008,1041)\",vr:\"SQ\",name:\"InstitutionalDepartmentTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1048)\":{tag:\"(0008,1048)\",vr:\"PN\",name:\"PhysiciansOfRecord\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1049)\":{tag:\"(0008,1049)\",vr:\"SQ\",name:\"PhysiciansOfRecordIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1050)\":{tag:\"(0008,1050)\",vr:\"PN\",name:\"PerformingPhysicianName\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1052)\":{tag:\"(0008,1052)\",vr:\"SQ\",name:\"PerformingPhysicianIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1060)\":{tag:\"(0008,1060)\",vr:\"PN\",name:\"NameOfPhysiciansReadingStudy\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1062)\":{tag:\"(0008,1062)\",vr:\"SQ\",name:\"PhysiciansReadingStudyIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1070)\":{tag:\"(0008,1070)\",vr:\"PN\",name:\"OperatorsName\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1072)\":{tag:\"(0008,1072)\",vr:\"SQ\",name:\"OperatorIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1080)\":{tag:\"(0008,1080)\",vr:\"LO\",name:\"AdmittingDiagnosesDescription\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1084)\":{tag:\"(0008,1084)\",vr:\"SQ\",name:\"AdmittingDiagnosesCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1090)\":{tag:\"(0008,1090)\",vr:\"LO\",name:\"ManufacturerModelName\",vm:\"1\",version:\"DICOM\"},\"(0008,1110)\":{tag:\"(0008,1110)\",vr:\"SQ\",name:\"ReferencedStudySequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1111)\":{tag:\"(0008,1111)\",vr:\"SQ\",name:\"ReferencedPerformedProcedureStepSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1115)\":{tag:\"(0008,1115)\",vr:\"SQ\",name:\"ReferencedSeriesSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1120)\":{tag:\"(0008,1120)\",vr:\"SQ\",name:\"ReferencedPatientSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1125)\":{tag:\"(0008,1125)\",vr:\"SQ\",name:\"ReferencedVisitSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1134)\":{tag:\"(0008,1134)\",vr:\"SQ\",name:\"ReferencedStereometricInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,113A)\":{tag:\"(0008,113A)\",vr:\"SQ\",name:\"ReferencedWaveformSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1140)\":{tag:\"(0008,1140)\",vr:\"SQ\",name:\"ReferencedImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,114A)\":{tag:\"(0008,114A)\",vr:\"SQ\",name:\"ReferencedInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,114B)\":{tag:\"(0008,114B)\",vr:\"SQ\",name:\"ReferencedRealWorldValueMappingInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1150)\":{tag:\"(0008,1150)\",vr:\"UI\",name:\"ReferencedSOPClassUID\",vm:\"1\",version:\"DICOM\"},\"(0008,1155)\":{tag:\"(0008,1155)\",vr:\"UI\",name:\"ReferencedSOPInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0008,1156)\":{tag:\"(0008,1156)\",vr:\"SQ\",name:\"DefinitionSourceSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,115A)\":{tag:\"(0008,115A)\",vr:\"UI\",name:\"SOPClassesSupported\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1160)\":{tag:\"(0008,1160)\",vr:\"IS\",name:\"ReferencedFrameNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1161)\":{tag:\"(0008,1161)\",vr:\"UL\",name:\"SimpleFrameList\",vm:\"1-n\",version:\"DICOM\"},\"(0008,1162)\":{tag:\"(0008,1162)\",vr:\"UL\",name:\"CalculatedFrameList\",vm:\"3-3n\",version:\"DICOM\"},\"(0008,1163)\":{tag:\"(0008,1163)\",vr:\"FD\",name:\"TimeRange\",vm:\"2\",version:\"DICOM\"},\"(0008,1164)\":{tag:\"(0008,1164)\",vr:\"SQ\",name:\"FrameExtractionSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1167)\":{tag:\"(0008,1167)\",vr:\"UI\",name:\"MultiFrameSourceSOPInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0008,1190)\":{tag:\"(0008,1190)\",vr:\"UR\",name:\"RetrieveURL\",vm:\"1\",version:\"DICOM\"},\"(0008,1195)\":{tag:\"(0008,1195)\",vr:\"UI\",name:\"TransactionUID\",vm:\"1\",version:\"DICOM\"},\"(0008,1196)\":{tag:\"(0008,1196)\",vr:\"US\",name:\"WarningReason\",vm:\"1\",version:\"DICOM\"},\"(0008,1197)\":{tag:\"(0008,1197)\",vr:\"US\",name:\"FailureReason\",vm:\"1\",version:\"DICOM\"},\"(0008,1198)\":{tag:\"(0008,1198)\",vr:\"SQ\",name:\"FailedSOPSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1199)\":{tag:\"(0008,1199)\",vr:\"SQ\",name:\"ReferencedSOPSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,119A)\":{tag:\"(0008,119A)\",vr:\"SQ\",name:\"OtherFailuresSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1200)\":{tag:\"(0008,1200)\",vr:\"SQ\",name:\"StudiesContainingOtherReferencedInstancesSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,1250)\":{tag:\"(0008,1250)\",vr:\"SQ\",name:\"RelatedSeriesSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2111)\":{tag:\"(0008,2111)\",vr:\"ST\",name:\"DerivationDescription\",vm:\"1\",version:\"DICOM\"},\"(0008,2112)\":{tag:\"(0008,2112)\",vr:\"SQ\",name:\"SourceImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2120)\":{tag:\"(0008,2120)\",vr:\"SH\",name:\"StageName\",vm:\"1\",version:\"DICOM\"},\"(0008,2122)\":{tag:\"(0008,2122)\",vr:\"IS\",name:\"StageNumber\",vm:\"1\",version:\"DICOM\"},\"(0008,2124)\":{tag:\"(0008,2124)\",vr:\"IS\",name:\"NumberOfStages\",vm:\"1\",version:\"DICOM\"},\"(0008,2127)\":{tag:\"(0008,2127)\",vr:\"SH\",name:\"ViewName\",vm:\"1\",version:\"DICOM\"},\"(0008,2128)\":{tag:\"(0008,2128)\",vr:\"IS\",name:\"ViewNumber\",vm:\"1\",version:\"DICOM\"},\"(0008,2129)\":{tag:\"(0008,2129)\",vr:\"IS\",name:\"NumberOfEventTimers\",vm:\"1\",version:\"DICOM\"},\"(0008,212A)\":{tag:\"(0008,212A)\",vr:\"IS\",name:\"NumberOfViewsInStage\",vm:\"1\",version:\"DICOM\"},\"(0008,2130)\":{tag:\"(0008,2130)\",vr:\"DS\",name:\"EventElapsedTimes\",vm:\"1-n\",version:\"DICOM\"},\"(0008,2132)\":{tag:\"(0008,2132)\",vr:\"LO\",name:\"EventTimerNames\",vm:\"1-n\",version:\"DICOM\"},\"(0008,2133)\":{tag:\"(0008,2133)\",vr:\"SQ\",name:\"EventTimerSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2134)\":{tag:\"(0008,2134)\",vr:\"FD\",name:\"EventTimeOffset\",vm:\"1\",version:\"DICOM\"},\"(0008,2135)\":{tag:\"(0008,2135)\",vr:\"SQ\",name:\"EventCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2142)\":{tag:\"(0008,2142)\",vr:\"IS\",name:\"StartTrim\",vm:\"1\",version:\"DICOM\"},\"(0008,2143)\":{tag:\"(0008,2143)\",vr:\"IS\",name:\"StopTrim\",vm:\"1\",version:\"DICOM\"},\"(0008,2144)\":{tag:\"(0008,2144)\",vr:\"IS\",name:\"RecommendedDisplayFrameRate\",vm:\"1\",version:\"DICOM\"},\"(0008,2218)\":{tag:\"(0008,2218)\",vr:\"SQ\",name:\"AnatomicRegionSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2220)\":{tag:\"(0008,2220)\",vr:\"SQ\",name:\"AnatomicRegionModifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2228)\":{tag:\"(0008,2228)\",vr:\"SQ\",name:\"PrimaryAnatomicStructureSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2229)\":{tag:\"(0008,2229)\",vr:\"SQ\",name:\"AnatomicStructureSpaceOrRegionSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,2230)\":{tag:\"(0008,2230)\",vr:\"SQ\",name:\"PrimaryAnatomicStructureModifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,3001)\":{tag:\"(0008,3001)\",vr:\"SQ\",name:\"AlternateRepresentationSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,3002)\":{tag:\"(0008,3002)\",vr:\"UI\",name:\"AvailableTransferSyntaxUID\",vm:\"1-n\",version:\"DICOM\"},\"(0008,3010)\":{tag:\"(0008,3010)\",vr:\"UI\",name:\"IrradiationEventUID\",vm:\"1-n\",version:\"DICOM\"},\"(0008,3011)\":{tag:\"(0008,3011)\",vr:\"SQ\",name:\"SourceIrradiationEventSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,3012)\":{tag:\"(0008,3012)\",vr:\"UI\",name:\"RadiopharmaceuticalAdministrationEventUID\",vm:\"1\",version:\"DICOM\"},\"(0008,9007)\":{tag:\"(0008,9007)\",vr:\"CS\",name:\"FrameType\",vm:\"4\",version:\"DICOM\"},\"(0008,9092)\":{tag:\"(0008,9092)\",vr:\"SQ\",name:\"ReferencedImageEvidenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9121)\":{tag:\"(0008,9121)\",vr:\"SQ\",name:\"ReferencedRawDataSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9123)\":{tag:\"(0008,9123)\",vr:\"UI\",name:\"CreatorVersionUID\",vm:\"1\",version:\"DICOM\"},\"(0008,9124)\":{tag:\"(0008,9124)\",vr:\"SQ\",name:\"DerivationImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9154)\":{tag:\"(0008,9154)\",vr:\"SQ\",name:\"SourceImageEvidenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9205)\":{tag:\"(0008,9205)\",vr:\"CS\",name:\"PixelPresentation\",vm:\"1\",version:\"DICOM\"},\"(0008,9206)\":{tag:\"(0008,9206)\",vr:\"CS\",name:\"VolumetricProperties\",vm:\"1\",version:\"DICOM\"},\"(0008,9207)\":{tag:\"(0008,9207)\",vr:\"CS\",name:\"VolumeBasedCalculationTechnique\",vm:\"1\",version:\"DICOM\"},\"(0008,9208)\":{tag:\"(0008,9208)\",vr:\"CS\",name:\"ComplexImageComponent\",vm:\"1\",version:\"DICOM\"},\"(0008,9209)\":{tag:\"(0008,9209)\",vr:\"CS\",name:\"AcquisitionContrast\",vm:\"1\",version:\"DICOM\"},\"(0008,9215)\":{tag:\"(0008,9215)\",vr:\"SQ\",name:\"DerivationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9237)\":{tag:\"(0008,9237)\",vr:\"SQ\",name:\"ReferencedPresentationStateSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9410)\":{tag:\"(0008,9410)\",vr:\"SQ\",name:\"ReferencedOtherPlaneSequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9458)\":{tag:\"(0008,9458)\",vr:\"SQ\",name:\"FrameDisplaySequence\",vm:\"1\",version:\"DICOM\"},\"(0008,9459)\":{tag:\"(0008,9459)\",vr:\"FL\",name:\"RecommendedDisplayFrameRateInFloat\",vm:\"1\",version:\"DICOM\"},\"(0008,9460)\":{tag:\"(0008,9460)\",vr:\"CS\",name:\"SkipFrameRangeFlag\",vm:\"1\",version:\"DICOM\"},\"(0010,0010)\":{tag:\"(0010,0010)\",vr:\"PN\",name:\"PatientName\",vm:\"1\",version:\"DICOM\"},\"(0010,0020)\":{tag:\"(0010,0020)\",vr:\"LO\",name:\"PatientID\",vm:\"1\",version:\"DICOM\"},\"(0010,0021)\":{tag:\"(0010,0021)\",vr:\"LO\",name:\"IssuerOfPatientID\",vm:\"1\",version:\"DICOM\"},\"(0010,0022)\":{tag:\"(0010,0022)\",vr:\"CS\",name:\"TypeOfPatientID\",vm:\"1\",version:\"DICOM\"},\"(0010,0024)\":{tag:\"(0010,0024)\",vr:\"SQ\",name:\"IssuerOfPatientIDQualifiersSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0026)\":{tag:\"(0010,0026)\",vr:\"SQ\",name:\"SourcePatientGroupIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0027)\":{tag:\"(0010,0027)\",vr:\"SQ\",name:\"GroupOfPatientsIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0028)\":{tag:\"(0010,0028)\",vr:\"US\",name:\"SubjectRelativePositionInImage\",vm:\"3\",version:\"DICOM\"},\"(0010,0030)\":{tag:\"(0010,0030)\",vr:\"DA\",name:\"PatientBirthDate\",vm:\"1\",version:\"DICOM\"},\"(0010,0032)\":{tag:\"(0010,0032)\",vr:\"TM\",name:\"PatientBirthTime\",vm:\"1\",version:\"DICOM\"},\"(0010,0033)\":{tag:\"(0010,0033)\",vr:\"LO\",name:\"PatientBirthDateInAlternativeCalendar\",vm:\"1\",version:\"DICOM\"},\"(0010,0034)\":{tag:\"(0010,0034)\",vr:\"LO\",name:\"PatientDeathDateInAlternativeCalendar\",vm:\"1\",version:\"DICOM\"},\"(0010,0035)\":{tag:\"(0010,0035)\",vr:\"CS\",name:\"PatientAlternativeCalendar\",vm:\"1\",version:\"DICOM\"},\"(0010,0040)\":{tag:\"(0010,0040)\",vr:\"CS\",name:\"PatientSex\",vm:\"1\",version:\"DICOM\"},\"(0010,0050)\":{tag:\"(0010,0050)\",vr:\"SQ\",name:\"PatientInsurancePlanCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0101)\":{tag:\"(0010,0101)\",vr:\"SQ\",name:\"PatientPrimaryLanguageCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0102)\":{tag:\"(0010,0102)\",vr:\"SQ\",name:\"PatientPrimaryLanguageModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0200)\":{tag:\"(0010,0200)\",vr:\"CS\",name:\"QualityControlSubject\",vm:\"1\",version:\"DICOM\"},\"(0010,0201)\":{tag:\"(0010,0201)\",vr:\"SQ\",name:\"QualityControlSubjectTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0212)\":{tag:\"(0010,0212)\",vr:\"UC\",name:\"StrainDescription\",vm:\"1\",version:\"DICOM\"},\"(0010,0213)\":{tag:\"(0010,0213)\",vr:\"LO\",name:\"StrainNomenclature\",vm:\"1\",version:\"DICOM\"},\"(0010,0214)\":{tag:\"(0010,0214)\",vr:\"LO\",name:\"StrainStockNumber\",vm:\"1\",version:\"DICOM\"},\"(0010,0215)\":{tag:\"(0010,0215)\",vr:\"SQ\",name:\"StrainSourceRegistryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0216)\":{tag:\"(0010,0216)\",vr:\"SQ\",name:\"StrainStockSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0217)\":{tag:\"(0010,0217)\",vr:\"LO\",name:\"StrainSource\",vm:\"1\",version:\"DICOM\"},\"(0010,0218)\":{tag:\"(0010,0218)\",vr:\"UT\",name:\"StrainAdditionalInformation\",vm:\"1\",version:\"DICOM\"},\"(0010,0219)\":{tag:\"(0010,0219)\",vr:\"SQ\",name:\"StrainCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0221)\":{tag:\"(0010,0221)\",vr:\"SQ\",name:\"GeneticModificationsSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,0222)\":{tag:\"(0010,0222)\",vr:\"UC\",name:\"GeneticModificationsDescription\",vm:\"1\",version:\"DICOM\"},\"(0010,0223)\":{tag:\"(0010,0223)\",vr:\"LO\",name:\"GeneticModificationsNomenclature\",vm:\"1\",version:\"DICOM\"},\"(0010,0229)\":{tag:\"(0010,0229)\",vr:\"SQ\",name:\"GeneticModificationsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,1000)\":{tag:\"(0010,1000)\",vr:\"LO\",name:\"OtherPatientIDs\",vm:\"1-n\",version:\"DICOM\"},\"(0010,1001)\":{tag:\"(0010,1001)\",vr:\"PN\",name:\"OtherPatientNames\",vm:\"1-n\",version:\"DICOM\"},\"(0010,1002)\":{tag:\"(0010,1002)\",vr:\"SQ\",name:\"OtherPatientIDsSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,1005)\":{tag:\"(0010,1005)\",vr:\"PN\",name:\"PatientBirthName\",vm:\"1\",version:\"DICOM\"},\"(0010,1010)\":{tag:\"(0010,1010)\",vr:\"AS\",name:\"PatientAge\",vm:\"1\",version:\"DICOM\"},\"(0010,1020)\":{tag:\"(0010,1020)\",vr:\"DS\",name:\"PatientSize\",vm:\"1\",version:\"DICOM\"},\"(0010,1021)\":{tag:\"(0010,1021)\",vr:\"SQ\",name:\"PatientSizeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,1022)\":{tag:\"(0010,1022)\",vr:\"DS\",name:\"PatientBodyMassIndex\",vm:\"1\",version:\"DICOM\"},\"(0010,1023)\":{tag:\"(0010,1023)\",vr:\"DS\",name:\"MeasuredAPDimension\",vm:\"1\",version:\"DICOM\"},\"(0010,1024)\":{tag:\"(0010,1024)\",vr:\"DS\",name:\"MeasuredLateralDimension\",vm:\"1\",version:\"DICOM\"},\"(0010,1030)\":{tag:\"(0010,1030)\",vr:\"DS\",name:\"PatientWeight\",vm:\"1\",version:\"DICOM\"},\"(0010,1040)\":{tag:\"(0010,1040)\",vr:\"LO\",name:\"PatientAddress\",vm:\"1\",version:\"DICOM\"},\"(0010,1060)\":{tag:\"(0010,1060)\",vr:\"PN\",name:\"PatientMotherBirthName\",vm:\"1\",version:\"DICOM\"},\"(0010,1080)\":{tag:\"(0010,1080)\",vr:\"LO\",name:\"MilitaryRank\",vm:\"1\",version:\"DICOM\"},\"(0010,1081)\":{tag:\"(0010,1081)\",vr:\"LO\",name:\"BranchOfService\",vm:\"1\",version:\"DICOM\"},\"(0010,1090)\":{tag:\"(0010,1090)\",vr:\"LO\",name:\"MedicalRecordLocator\",vm:\"1\",version:\"DICOM\"},\"(0010,1100)\":{tag:\"(0010,1100)\",vr:\"SQ\",name:\"ReferencedPatientPhotoSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,2000)\":{tag:\"(0010,2000)\",vr:\"LO\",name:\"MedicalAlerts\",vm:\"1-n\",version:\"DICOM\"},\"(0010,2110)\":{tag:\"(0010,2110)\",vr:\"LO\",name:\"Allergies\",vm:\"1-n\",version:\"DICOM\"},\"(0010,2150)\":{tag:\"(0010,2150)\",vr:\"LO\",name:\"CountryOfResidence\",vm:\"1\",version:\"DICOM\"},\"(0010,2152)\":{tag:\"(0010,2152)\",vr:\"LO\",name:\"RegionOfResidence\",vm:\"1\",version:\"DICOM\"},\"(0010,2154)\":{tag:\"(0010,2154)\",vr:\"SH\",name:\"PatientTelephoneNumbers\",vm:\"1-n\",version:\"DICOM\"},\"(0010,2155)\":{tag:\"(0010,2155)\",vr:\"LT\",name:\"PatientTelecomInformation\",vm:\"1\",version:\"DICOM\"},\"(0010,2160)\":{tag:\"(0010,2160)\",vr:\"SH\",name:\"EthnicGroup\",vm:\"1\",version:\"DICOM\"},\"(0010,2180)\":{tag:\"(0010,2180)\",vr:\"SH\",name:\"Occupation\",vm:\"1\",version:\"DICOM\"},\"(0010,21A0)\":{tag:\"(0010,21A0)\",vr:\"CS\",name:\"SmokingStatus\",vm:\"1\",version:\"DICOM\"},\"(0010,21B0)\":{tag:\"(0010,21B0)\",vr:\"LT\",name:\"AdditionalPatientHistory\",vm:\"1\",version:\"DICOM\"},\"(0010,21C0)\":{tag:\"(0010,21C0)\",vr:\"US\",name:\"PregnancyStatus\",vm:\"1\",version:\"DICOM\"},\"(0010,21D0)\":{tag:\"(0010,21D0)\",vr:\"DA\",name:\"LastMenstrualDate\",vm:\"1\",version:\"DICOM\"},\"(0010,21F0)\":{tag:\"(0010,21F0)\",vr:\"LO\",name:\"PatientReligiousPreference\",vm:\"1\",version:\"DICOM\"},\"(0010,2201)\":{tag:\"(0010,2201)\",vr:\"LO\",name:\"PatientSpeciesDescription\",vm:\"1\",version:\"DICOM\"},\"(0010,2202)\":{tag:\"(0010,2202)\",vr:\"SQ\",name:\"PatientSpeciesCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,2203)\":{tag:\"(0010,2203)\",vr:\"CS\",name:\"PatientSexNeutered\",vm:\"1\",version:\"DICOM\"},\"(0010,2210)\":{tag:\"(0010,2210)\",vr:\"CS\",name:\"AnatomicalOrientationType\",vm:\"1\",version:\"DICOM\"},\"(0010,2292)\":{tag:\"(0010,2292)\",vr:\"LO\",name:\"PatientBreedDescription\",vm:\"1\",version:\"DICOM\"},\"(0010,2293)\":{tag:\"(0010,2293)\",vr:\"SQ\",name:\"PatientBreedCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,2294)\":{tag:\"(0010,2294)\",vr:\"SQ\",name:\"BreedRegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,2295)\":{tag:\"(0010,2295)\",vr:\"LO\",name:\"BreedRegistrationNumber\",vm:\"1\",version:\"DICOM\"},\"(0010,2296)\":{tag:\"(0010,2296)\",vr:\"SQ\",name:\"BreedRegistryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0010,2297)\":{tag:\"(0010,2297)\",vr:\"PN\",name:\"ResponsiblePerson\",vm:\"1\",version:\"DICOM\"},\"(0010,2298)\":{tag:\"(0010,2298)\",vr:\"CS\",name:\"ResponsiblePersonRole\",vm:\"1\",version:\"DICOM\"},\"(0010,2299)\":{tag:\"(0010,2299)\",vr:\"LO\",name:\"ResponsibleOrganization\",vm:\"1\",version:\"DICOM\"},\"(0010,4000)\":{tag:\"(0010,4000)\",vr:\"LT\",name:\"PatientComments\",vm:\"1\",version:\"DICOM\"},\"(0010,9431)\":{tag:\"(0010,9431)\",vr:\"FL\",name:\"ExaminedBodyThickness\",vm:\"1\",version:\"DICOM\"},\"(0012,0010)\":{tag:\"(0012,0010)\",vr:\"LO\",name:\"ClinicalTrialSponsorName\",vm:\"1\",version:\"DICOM\"},\"(0012,0020)\":{tag:\"(0012,0020)\",vr:\"LO\",name:\"ClinicalTrialProtocolID\",vm:\"1\",version:\"DICOM\"},\"(0012,0021)\":{tag:\"(0012,0021)\",vr:\"LO\",name:\"ClinicalTrialProtocolName\",vm:\"1\",version:\"DICOM\"},\"(0012,0030)\":{tag:\"(0012,0030)\",vr:\"LO\",name:\"ClinicalTrialSiteID\",vm:\"1\",version:\"DICOM\"},\"(0012,0031)\":{tag:\"(0012,0031)\",vr:\"LO\",name:\"ClinicalTrialSiteName\",vm:\"1\",version:\"DICOM\"},\"(0012,0040)\":{tag:\"(0012,0040)\",vr:\"LO\",name:\"ClinicalTrialSubjectID\",vm:\"1\",version:\"DICOM\"},\"(0012,0042)\":{tag:\"(0012,0042)\",vr:\"LO\",name:\"ClinicalTrialSubjectReadingID\",vm:\"1\",version:\"DICOM\"},\"(0012,0050)\":{tag:\"(0012,0050)\",vr:\"LO\",name:\"ClinicalTrialTimePointID\",vm:\"1\",version:\"DICOM\"},\"(0012,0051)\":{tag:\"(0012,0051)\",vr:\"ST\",name:\"ClinicalTrialTimePointDescription\",vm:\"1\",version:\"DICOM\"},\"(0012,0052)\":{tag:\"(0012,0052)\",vr:\"FD\",name:\"LongitudinalTemporalOffsetFromEvent\",vm:\"1\",version:\"DICOM\"},\"(0012,0053)\":{tag:\"(0012,0053)\",vr:\"CS\",name:\"LongitudinalTemporalEventType\",vm:\"1\",version:\"DICOM\"},\"(0012,0060)\":{tag:\"(0012,0060)\",vr:\"LO\",name:\"ClinicalTrialCoordinatingCenterName\",vm:\"1\",version:\"DICOM\"},\"(0012,0062)\":{tag:\"(0012,0062)\",vr:\"CS\",name:\"PatientIdentityRemoved\",vm:\"1\",version:\"DICOM\"},\"(0012,0063)\":{tag:\"(0012,0063)\",vr:\"LO\",name:\"DeidentificationMethod\",vm:\"1-n\",version:\"DICOM\"},\"(0012,0064)\":{tag:\"(0012,0064)\",vr:\"SQ\",name:\"DeidentificationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0012,0071)\":{tag:\"(0012,0071)\",vr:\"LO\",name:\"ClinicalTrialSeriesID\",vm:\"1\",version:\"DICOM\"},\"(0012,0072)\":{tag:\"(0012,0072)\",vr:\"LO\",name:\"ClinicalTrialSeriesDescription\",vm:\"1\",version:\"DICOM\"},\"(0012,0081)\":{tag:\"(0012,0081)\",vr:\"LO\",name:\"ClinicalTrialProtocolEthicsCommitteeName\",vm:\"1\",version:\"DICOM\"},\"(0012,0082)\":{tag:\"(0012,0082)\",vr:\"LO\",name:\"ClinicalTrialProtocolEthicsCommitteeApprovalNumber\",vm:\"1\",version:\"DICOM\"},\"(0012,0083)\":{tag:\"(0012,0083)\",vr:\"SQ\",name:\"ConsentForClinicalTrialUseSequence\",vm:\"1\",version:\"DICOM\"},\"(0012,0084)\":{tag:\"(0012,0084)\",vr:\"CS\",name:\"DistributionType\",vm:\"1\",version:\"DICOM\"},\"(0012,0085)\":{tag:\"(0012,0085)\",vr:\"CS\",name:\"ConsentForDistributionFlag\",vm:\"1\",version:\"DICOM\"},\"(0014,0025)\":{tag:\"(0014,0025)\",vr:\"ST\",name:\"ComponentManufacturingProcedure\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0028)\":{tag:\"(0014,0028)\",vr:\"ST\",name:\"ComponentManufacturer\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0030)\":{tag:\"(0014,0030)\",vr:\"DS\",name:\"MaterialThickness\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0032)\":{tag:\"(0014,0032)\",vr:\"DS\",name:\"MaterialPipeDiameter\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0034)\":{tag:\"(0014,0034)\",vr:\"DS\",name:\"MaterialIsolationDiameter\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0042)\":{tag:\"(0014,0042)\",vr:\"ST\",name:\"MaterialGrade\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0044)\":{tag:\"(0014,0044)\",vr:\"ST\",name:\"MaterialPropertiesDescription\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,0046)\":{tag:\"(0014,0046)\",vr:\"LT\",name:\"MaterialNotes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,0050)\":{tag:\"(0014,0050)\",vr:\"CS\",name:\"ComponentShape\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,0052)\":{tag:\"(0014,0052)\",vr:\"CS\",name:\"CurvatureType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,0054)\":{tag:\"(0014,0054)\",vr:\"DS\",name:\"OuterDiameter\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,0056)\":{tag:\"(0014,0056)\",vr:\"DS\",name:\"InnerDiameter\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,1010)\":{tag:\"(0014,1010)\",vr:\"ST\",name:\"ActualEnvironmentalConditions\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,1020)\":{tag:\"(0014,1020)\",vr:\"DA\",name:\"ExpiryDate\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,1040)\":{tag:\"(0014,1040)\",vr:\"ST\",name:\"EnvironmentalConditions\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2002)\":{tag:\"(0014,2002)\",vr:\"SQ\",name:\"EvaluatorSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2004)\":{tag:\"(0014,2004)\",vr:\"IS\",name:\"EvaluatorNumber\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2006)\":{tag:\"(0014,2006)\",vr:\"PN\",name:\"EvaluatorName\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2008)\":{tag:\"(0014,2008)\",vr:\"IS\",name:\"EvaluationAttempt\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2012)\":{tag:\"(0014,2012)\",vr:\"SQ\",name:\"IndicationSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2014)\":{tag:\"(0014,2014)\",vr:\"IS\",name:\"IndicationNumber\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2016)\":{tag:\"(0014,2016)\",vr:\"SH\",name:\"IndicationLabel\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2018)\":{tag:\"(0014,2018)\",vr:\"ST\",name:\"IndicationDescription\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,201A)\":{tag:\"(0014,201A)\",vr:\"CS\",name:\"IndicationType\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,201C)\":{tag:\"(0014,201C)\",vr:\"CS\",name:\"IndicationDisposition\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,201E)\":{tag:\"(0014,201E)\",vr:\"SQ\",name:\"IndicationROISequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2030)\":{tag:\"(0014,2030)\",vr:\"SQ\",name:\"IndicationPhysicalPropertySequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2032)\":{tag:\"(0014,2032)\",vr:\"SH\",name:\"PropertyLabel\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2202)\":{tag:\"(0014,2202)\",vr:\"IS\",name:\"CoordinateSystemNumberOfAxes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2204)\":{tag:\"(0014,2204)\",vr:\"SQ\",name:\"CoordinateSystemAxesSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2206)\":{tag:\"(0014,2206)\",vr:\"ST\",name:\"CoordinateSystemAxisDescription\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2208)\":{tag:\"(0014,2208)\",vr:\"CS\",name:\"CoordinateSystemDataSetMapping\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,220A)\":{tag:\"(0014,220A)\",vr:\"IS\",name:\"CoordinateSystemAxisNumber\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,220C)\":{tag:\"(0014,220C)\",vr:\"CS\",name:\"CoordinateSystemAxisType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,220E)\":{tag:\"(0014,220E)\",vr:\"CS\",name:\"CoordinateSystemAxisUnits\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2210)\":{tag:\"(0014,2210)\",vr:\"OB\",name:\"CoordinateSystemAxisValues\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2220)\":{tag:\"(0014,2220)\",vr:\"SQ\",name:\"CoordinateSystemTransformSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2222)\":{tag:\"(0014,2222)\",vr:\"ST\",name:\"TransformDescription\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2224)\":{tag:\"(0014,2224)\",vr:\"IS\",name:\"TransformNumberOfAxes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,2226)\":{tag:\"(0014,2226)\",vr:\"IS\",name:\"TransformOrderOfAxes\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,2228)\":{tag:\"(0014,2228)\",vr:\"CS\",name:\"TransformedAxisUnits\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,222A)\":{tag:\"(0014,222A)\",vr:\"DS\",name:\"CoordinateSystemTransformRotationAndScaleMatrix\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,222C)\":{tag:\"(0014,222C)\",vr:\"DS\",name:\"CoordinateSystemTransformTranslationMatrix\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,3011)\":{tag:\"(0014,3011)\",vr:\"DS\",name:\"InternalDetectorFrameTime\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3012)\":{tag:\"(0014,3012)\",vr:\"DS\",name:\"NumberOfFramesIntegrated\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3020)\":{tag:\"(0014,3020)\",vr:\"SQ\",name:\"DetectorTemperatureSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3022)\":{tag:\"(0014,3022)\",vr:\"ST\",name:\"SensorName\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3024)\":{tag:\"(0014,3024)\",vr:\"DS\",name:\"HorizontalOffsetOfSensor\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3026)\":{tag:\"(0014,3026)\",vr:\"DS\",name:\"VerticalOffsetOfSensor\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3028)\":{tag:\"(0014,3028)\",vr:\"DS\",name:\"SensorTemperature\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3040)\":{tag:\"(0014,3040)\",vr:\"SQ\",name:\"DarkCurrentSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3050)\":{tag:\"(0014,3050)\",vr:\"ox\",name:\"DarkCurrentCounts\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3060)\":{tag:\"(0014,3060)\",vr:\"SQ\",name:\"GainCorrectionReferenceSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3070)\":{tag:\"(0014,3070)\",vr:\"ox\",name:\"AirCounts\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3071)\":{tag:\"(0014,3071)\",vr:\"DS\",name:\"KVUsedInGainCalibration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3072)\":{tag:\"(0014,3072)\",vr:\"DS\",name:\"MAUsedInGainCalibration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3073)\":{tag:\"(0014,3073)\",vr:\"DS\",name:\"NumberOfFramesUsedForIntegration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3074)\":{tag:\"(0014,3074)\",vr:\"LO\",name:\"FilterMaterialUsedInGainCalibration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3075)\":{tag:\"(0014,3075)\",vr:\"DS\",name:\"FilterThicknessUsedInGainCalibration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3076)\":{tag:\"(0014,3076)\",vr:\"DA\",name:\"DateOfGainCalibration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3077)\":{tag:\"(0014,3077)\",vr:\"TM\",name:\"TimeOfGainCalibration\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3080)\":{tag:\"(0014,3080)\",vr:\"OB\",name:\"BadPixelImage\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,3099)\":{tag:\"(0014,3099)\",vr:\"LT\",name:\"CalibrationNotes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4002)\":{tag:\"(0014,4002)\",vr:\"SQ\",name:\"PulserEquipmentSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4004)\":{tag:\"(0014,4004)\",vr:\"CS\",name:\"PulserType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4006)\":{tag:\"(0014,4006)\",vr:\"LT\",name:\"PulserNotes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4008)\":{tag:\"(0014,4008)\",vr:\"SQ\",name:\"ReceiverEquipmentSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,400A)\":{tag:\"(0014,400A)\",vr:\"CS\",name:\"AmplifierType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,400C)\":{tag:\"(0014,400C)\",vr:\"LT\",name:\"ReceiverNotes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,400E)\":{tag:\"(0014,400E)\",vr:\"SQ\",name:\"PreAmplifierEquipmentSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,400F)\":{tag:\"(0014,400F)\",vr:\"LT\",name:\"PreAmplifierNotes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4010)\":{tag:\"(0014,4010)\",vr:\"SQ\",name:\"TransmitTransducerSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4011)\":{tag:\"(0014,4011)\",vr:\"SQ\",name:\"ReceiveTransducerSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4012)\":{tag:\"(0014,4012)\",vr:\"US\",name:\"NumberOfElements\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4013)\":{tag:\"(0014,4013)\",vr:\"CS\",name:\"ElementShape\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4014)\":{tag:\"(0014,4014)\",vr:\"DS\",name:\"ElementDimensionA\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4015)\":{tag:\"(0014,4015)\",vr:\"DS\",name:\"ElementDimensionB\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4016)\":{tag:\"(0014,4016)\",vr:\"DS\",name:\"ElementPitchA\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4017)\":{tag:\"(0014,4017)\",vr:\"DS\",name:\"MeasuredBeamDimensionA\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4018)\":{tag:\"(0014,4018)\",vr:\"DS\",name:\"MeasuredBeamDimensionB\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4019)\":{tag:\"(0014,4019)\",vr:\"DS\",name:\"LocationOfMeasuredBeamDiameter\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,401A)\":{tag:\"(0014,401A)\",vr:\"DS\",name:\"NominalFrequency\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,401B)\":{tag:\"(0014,401B)\",vr:\"DS\",name:\"MeasuredCenterFrequency\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,401C)\":{tag:\"(0014,401C)\",vr:\"DS\",name:\"MeasuredBandwidth\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,401D)\":{tag:\"(0014,401D)\",vr:\"DS\",name:\"ElementPitchB\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4020)\":{tag:\"(0014,4020)\",vr:\"SQ\",name:\"PulserSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4022)\":{tag:\"(0014,4022)\",vr:\"DS\",name:\"PulseWidth\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4024)\":{tag:\"(0014,4024)\",vr:\"DS\",name:\"ExcitationFrequency\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4026)\":{tag:\"(0014,4026)\",vr:\"CS\",name:\"ModulationType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4028)\":{tag:\"(0014,4028)\",vr:\"DS\",name:\"Damping\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4030)\":{tag:\"(0014,4030)\",vr:\"SQ\",name:\"ReceiverSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4031)\":{tag:\"(0014,4031)\",vr:\"DS\",name:\"AcquiredSoundpathLength\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4032)\":{tag:\"(0014,4032)\",vr:\"CS\",name:\"AcquisitionCompressionType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4033)\":{tag:\"(0014,4033)\",vr:\"IS\",name:\"AcquisitionSampleSize\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4034)\":{tag:\"(0014,4034)\",vr:\"DS\",name:\"RectifierSmoothing\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4035)\":{tag:\"(0014,4035)\",vr:\"SQ\",name:\"DACSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4036)\":{tag:\"(0014,4036)\",vr:\"CS\",name:\"DACType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4038)\":{tag:\"(0014,4038)\",vr:\"DS\",name:\"DACGainPoints\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,403A)\":{tag:\"(0014,403A)\",vr:\"DS\",name:\"DACTimePoints\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,403C)\":{tag:\"(0014,403C)\",vr:\"DS\",name:\"DACAmplitude\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,4040)\":{tag:\"(0014,4040)\",vr:\"SQ\",name:\"PreAmplifierSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4050)\":{tag:\"(0014,4050)\",vr:\"SQ\",name:\"TransmitTransducerSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4051)\":{tag:\"(0014,4051)\",vr:\"SQ\",name:\"ReceiveTransducerSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4052)\":{tag:\"(0014,4052)\",vr:\"DS\",name:\"IncidentAngle\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4054)\":{tag:\"(0014,4054)\",vr:\"ST\",name:\"CouplingTechnique\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4056)\":{tag:\"(0014,4056)\",vr:\"ST\",name:\"CouplingMedium\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4057)\":{tag:\"(0014,4057)\",vr:\"DS\",name:\"CouplingVelocity\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4058)\":{tag:\"(0014,4058)\",vr:\"DS\",name:\"ProbeCenterLocationX\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4059)\":{tag:\"(0014,4059)\",vr:\"DS\",name:\"ProbeCenterLocationZ\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,405A)\":{tag:\"(0014,405A)\",vr:\"DS\",name:\"SoundPathLength\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,405C)\":{tag:\"(0014,405C)\",vr:\"ST\",name:\"DelayLawIdentifier\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4060)\":{tag:\"(0014,4060)\",vr:\"SQ\",name:\"GateSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4062)\":{tag:\"(0014,4062)\",vr:\"DS\",name:\"GateThreshold\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4064)\":{tag:\"(0014,4064)\",vr:\"DS\",name:\"VelocityOfSound\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4070)\":{tag:\"(0014,4070)\",vr:\"SQ\",name:\"CalibrationSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4072)\":{tag:\"(0014,4072)\",vr:\"ST\",name:\"CalibrationProcedure\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4074)\":{tag:\"(0014,4074)\",vr:\"SH\",name:\"ProcedureVersion\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4076)\":{tag:\"(0014,4076)\",vr:\"DA\",name:\"ProcedureCreationDate\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4078)\":{tag:\"(0014,4078)\",vr:\"DA\",name:\"ProcedureExpirationDate\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,407A)\":{tag:\"(0014,407A)\",vr:\"DA\",name:\"ProcedureLastModifiedDate\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,407C)\":{tag:\"(0014,407C)\",vr:\"TM\",name:\"CalibrationTime\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,407E)\":{tag:\"(0014,407E)\",vr:\"DA\",name:\"CalibrationDate\",vm:\"1-n\",version:\"DICOM/DICONDE\"},\"(0014,4080)\":{tag:\"(0014,4080)\",vr:\"SQ\",name:\"ProbeDriveEquipmentSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4081)\":{tag:\"(0014,4081)\",vr:\"CS\",name:\"DriveType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4082)\":{tag:\"(0014,4082)\",vr:\"LT\",name:\"ProbeDriveNotes\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4083)\":{tag:\"(0014,4083)\",vr:\"SQ\",name:\"DriveProbeSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4084)\":{tag:\"(0014,4084)\",vr:\"DS\",name:\"ProbeInductance\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4085)\":{tag:\"(0014,4085)\",vr:\"DS\",name:\"ProbeResistance\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4086)\":{tag:\"(0014,4086)\",vr:\"SQ\",name:\"ReceiveProbeSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4087)\":{tag:\"(0014,4087)\",vr:\"SQ\",name:\"ProbeDriveSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4088)\":{tag:\"(0014,4088)\",vr:\"DS\",name:\"BridgeResistors\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4089)\":{tag:\"(0014,4089)\",vr:\"DS\",name:\"ProbeOrientationAngle\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,408B)\":{tag:\"(0014,408B)\",vr:\"DS\",name:\"UserSelectedGainY\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,408C)\":{tag:\"(0014,408C)\",vr:\"DS\",name:\"UserSelectedPhase\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,408D)\":{tag:\"(0014,408D)\",vr:\"DS\",name:\"UserSelectedOffsetX\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,408E)\":{tag:\"(0014,408E)\",vr:\"DS\",name:\"UserSelectedOffsetY\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4091)\":{tag:\"(0014,4091)\",vr:\"SQ\",name:\"ChannelSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,4092)\":{tag:\"(0014,4092)\",vr:\"DS\",name:\"ChannelThreshold\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,409A)\":{tag:\"(0014,409A)\",vr:\"SQ\",name:\"ScannerSettingsSequence\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,409B)\":{tag:\"(0014,409B)\",vr:\"ST\",name:\"ScanProcedure\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,409C)\":{tag:\"(0014,409C)\",vr:\"DS\",name:\"TranslationRateX\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,409D)\":{tag:\"(0014,409D)\",vr:\"DS\",name:\"TranslationRateY\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,409F)\":{tag:\"(0014,409F)\",vr:\"DS\",name:\"ChannelOverlap\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,40A0)\":{tag:\"(0014,40A0)\",vr:\"LO\",name:\"ImageQualityIndicatorType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,40A1)\":{tag:\"(0014,40A1)\",vr:\"LO\",name:\"ImageQualityIndicatorMaterial\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,40A2)\":{tag:\"(0014,40A2)\",vr:\"LO\",name:\"ImageQualityIndicatorSize\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5002)\":{tag:\"(0014,5002)\",vr:\"IS\",name:\"LINACEnergy\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5004)\":{tag:\"(0014,5004)\",vr:\"IS\",name:\"LINACOutput\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5100)\":{tag:\"(0014,5100)\",vr:\"US\",name:\"ActiveAperture\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5101)\":{tag:\"(0014,5101)\",vr:\"DS\",name:\"TotalAperture\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5102)\":{tag:\"(0014,5102)\",vr:\"DS\",name:\"ApertureElevation\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5103)\":{tag:\"(0014,5103)\",vr:\"DS\",name:\"MainLobeAngle\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5104)\":{tag:\"(0014,5104)\",vr:\"DS\",name:\"MainRoofAngle\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5105)\":{tag:\"(0014,5105)\",vr:\"CS\",name:\"ConnectorType\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5106)\":{tag:\"(0014,5106)\",vr:\"SH\",name:\"WedgeModelNumber\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5107)\":{tag:\"(0014,5107)\",vr:\"DS\",name:\"WedgeAngleFloat\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5108)\":{tag:\"(0014,5108)\",vr:\"DS\",name:\"WedgeRoofAngle\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5109)\":{tag:\"(0014,5109)\",vr:\"CS\",name:\"WedgeElement1Position\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,510A)\":{tag:\"(0014,510A)\",vr:\"DS\",name:\"WedgeMaterialVelocity\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,510B)\":{tag:\"(0014,510B)\",vr:\"SH\",name:\"WedgeMaterial\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,510C)\":{tag:\"(0014,510C)\",vr:\"DS\",name:\"WedgeOffsetZ\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,510D)\":{tag:\"(0014,510D)\",vr:\"DS\",name:\"WedgeOriginOffsetX\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,510E)\":{tag:\"(0014,510E)\",vr:\"DS\",name:\"WedgeTimeDelay\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,510F)\":{tag:\"(0014,510F)\",vr:\"SH\",name:\"WedgeName\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5110)\":{tag:\"(0014,5110)\",vr:\"SH\",name:\"WedgeManufacturerName\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5111)\":{tag:\"(0014,5111)\",vr:\"LO\",name:\"WedgeDescription\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5112)\":{tag:\"(0014,5112)\",vr:\"DS\",name:\"NominalBeamAngle\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5113)\":{tag:\"(0014,5113)\",vr:\"DS\",name:\"WedgeOffsetX\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5114)\":{tag:\"(0014,5114)\",vr:\"DS\",name:\"WedgeOffsetY\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5115)\":{tag:\"(0014,5115)\",vr:\"DS\",name:\"WedgeTotalLength\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5116)\":{tag:\"(0014,5116)\",vr:\"DS\",name:\"WedgeInContactLength\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5117)\":{tag:\"(0014,5117)\",vr:\"DS\",name:\"WedgeFrontGap\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5118)\":{tag:\"(0014,5118)\",vr:\"DS\",name:\"WedgeTotalHeight\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,5119)\":{tag:\"(0014,5119)\",vr:\"DS\",name:\"WedgeFrontHeight\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,511A)\":{tag:\"(0014,511A)\",vr:\"DS\",name:\"WedgeRearHeight\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,511B)\":{tag:\"(0014,511B)\",vr:\"DS\",name:\"WedgeTotalWidth\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,511C)\":{tag:\"(0014,511C)\",vr:\"DS\",name:\"WedgeInContactWidth\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,511D)\":{tag:\"(0014,511D)\",vr:\"DS\",name:\"WedgeChamferHeight\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,511E)\":{tag:\"(0014,511E)\",vr:\"CS\",name:\"WedgeCurve\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0014,511F)\":{tag:\"(0014,511F)\",vr:\"DS\",name:\"RadiusAlongWedge\",vm:\"1\",version:\"DICOM/DICONDE\"},\"(0012,0086)\":{tag:\"(0012,0086)\",vr:\"DA\",name:\"EthicsCommitteeApprovalEffectivenessStartDate\",vm:\"1\",version:\"DICOM\"},\"(0012,0087)\":{tag:\"(0012,0087)\",vr:\"DA\",name:\"EthicsCommitteeApprovalEffectivenessEndDate\",vm:\"1\",version:\"DICOM\"},\"(0014,0100)\":{tag:\"(0014,0100)\",vr:\"LO\",name:\"ComponentWelderIDs\",vm:\"1-n\",version:\"DICOM\"},\"(0014,0101)\":{tag:\"(0014,0101)\",vr:\"CS\",name:\"SecondaryApprovalStatus\",vm:\"1\",version:\"DICOM\"},\"(0014,0102)\":{tag:\"(0014,0102)\",vr:\"DA\",name:\"SecondaryReviewDate\",vm:\"1\",version:\"DICOM\"},\"(0014,0103)\":{tag:\"(0014,0103)\",vr:\"TM\",name:\"SecondaryReviewTime\",vm:\"1\",version:\"DICOM\"},\"(0014,0104)\":{tag:\"(0014,0104)\",vr:\"PN\",name:\"SecondaryReviewerName\",vm:\"1\",version:\"DICOM\"},\"(0014,0105)\":{tag:\"(0014,0105)\",vr:\"ST\",name:\"RepairID\",vm:\"1\",version:\"DICOM\"},\"(0014,0106)\":{tag:\"(0014,0106)\",vr:\"SQ\",name:\"MultipleComponentApprovalSequence\",vm:\"1\",version:\"DICOM\"},\"(0014,0107)\":{tag:\"(0014,0107)\",vr:\"CS\",name:\"OtherApprovalStatus\",vm:\"1-n\",version:\"DICOM\"},\"(0014,0108)\":{tag:\"(0014,0108)\",vr:\"CS\",name:\"OtherSecondaryApprovalStatus\",vm:\"1-n\",version:\"DICOM\"},\"(0016,0001)\":{tag:\"(0016,0001)\",vr:\"DS\",name:\"WhitePoint\",vm:\"1\",version:\"DICOM\"},\"(0016,0002)\":{tag:\"(0016,0002)\",vr:\"DS\",name:\"PrimaryChromaticities\",vm:\"3\",version:\"DICOM\"},\"(0016,0003)\":{tag:\"(0016,0003)\",vr:\"UT\",name:\"BatteryLevel\",vm:\"1\",version:\"DICOM\"},\"(0016,0004)\":{tag:\"(0016,0004)\",vr:\"DS\",name:\"ExposureTimeInSeconds\",vm:\"1\",version:\"DICOM\"},\"(0016,0005)\":{tag:\"(0016,0005)\",vr:\"DS\",name:\"FNumber\",vm:\"1\",version:\"DICOM\"},\"(0016,0006)\":{tag:\"(0016,0006)\",vr:\"IS\",name:\"OECFRows\",vm:\"1\",version:\"DICOM\"},\"(0016,0007)\":{tag:\"(0016,0007)\",vr:\"IS\",name:\"OECFColumns\",vm:\"1\",version:\"DICOM\"},\"(0016,0008)\":{tag:\"(0016,0008)\",vr:\"UC\",name:\"OECFColumnNames\",vm:\"1-n\",version:\"DICOM\"},\"(0016,0009)\":{tag:\"(0016,0009)\",vr:\"DS\",name:\"OECFValues\",vm:\"1-n\",version:\"DICOM\"},\"(0016,000A)\":{tag:\"(0016,000A)\",vr:\"IS\",name:\"SpatialFrequencyResponseRows\",vm:\"1\",version:\"DICOM\"},\"(0016,000B)\":{tag:\"(0016,000B)\",vr:\"IS\",name:\"SpatialFrequencyResponseColumns\",vm:\"1\",version:\"DICOM\"},\"(0016,000C)\":{tag:\"(0016,000C)\",vr:\"UC\",name:\"SpatialFrequencyResponseColumnNames\",vm:\"1-n\",version:\"DICOM\"},\"(0016,000D)\":{tag:\"(0016,000D)\",vr:\"DS\",name:\"SpatialFrequencyResponseValues\",vm:\"1-n\",version:\"DICOM\"},\"(0016,000E)\":{tag:\"(0016,000E)\",vr:\"IS\",name:\"ColorFilterArrayPatternRows\",vm:\"1\",version:\"DICOM\"},\"(0016,000F)\":{tag:\"(0016,000F)\",vr:\"IS\",name:\"ColorFilterArrayPatternColumns\",vm:\"1\",version:\"DICOM\"},\"(0016,0010)\":{tag:\"(0016,0010)\",vr:\"DS\",name:\"ColorFilterArrayPatternValues\",vm:\"1-n\",version:\"DICOM\"},\"(0016,0011)\":{tag:\"(0016,0011)\",vr:\"US\",name:\"FlashFiringStatus\",vm:\"1\",version:\"DICOM\"},\"(0016,0012)\":{tag:\"(0016,0012)\",vr:\"US\",name:\"FlashReturnStatus\",vm:\"1\",version:\"DICOM\"},\"(0016,0013)\":{tag:\"(0016,0013)\",vr:\"US\",name:\"FlashMode\",vm:\"1\",version:\"DICOM\"},\"(0016,0014)\":{tag:\"(0016,0014)\",vr:\"US\",name:\"FlashFunctionPresent\",vm:\"1\",version:\"DICOM\"},\"(0016,0015)\":{tag:\"(0016,0015)\",vr:\"US\",name:\"FlashRedEyeMode\",vm:\"1\",version:\"DICOM\"},\"(0016,0016)\":{tag:\"(0016,0016)\",vr:\"US\",name:\"ExposureProgram\",vm:\"1\",version:\"DICOM\"},\"(0016,0017)\":{tag:\"(0016,0017)\",vr:\"UT\",name:\"SpectralSensitivity\",vm:\"1\",version:\"DICOM\"},\"(0016,0018)\":{tag:\"(0016,0018)\",vr:\"IS\",name:\"PhotographicSensitivity\",vm:\"1\",version:\"DICOM\"},\"(0016,0019)\":{tag:\"(0016,0019)\",vr:\"IS\",name:\"SelfTimerMode\",vm:\"1\",version:\"DICOM\"},\"(0016,001A)\":{tag:\"(0016,001A)\",vr:\"US\",name:\"SensitivityType\",vm:\"1\",version:\"DICOM\"},\"(0016,001B)\":{tag:\"(0016,001B)\",vr:\"IS\",name:\"StandardOutputSensitivity\",vm:\"1\",version:\"DICOM\"},\"(0016,001C)\":{tag:\"(0016,001C)\",vr:\"IS\",name:\"RecommendedExposureIndex\",vm:\"1\",version:\"DICOM\"},\"(0016,001D)\":{tag:\"(0016,001D)\",vr:\"IS\",name:\"ISOSpeed\",vm:\"1\",version:\"DICOM\"},\"(0016,001E)\":{tag:\"(0016,001E)\",vr:\"IS\",name:\"ISOSpeedLatitudeyyy\",vm:\"1\",version:\"DICOM\"},\"(0016,001F)\":{tag:\"(0016,001F)\",vr:\"IS\",name:\"ISOSpeedLatitudezzz\",vm:\"1\",version:\"DICOM\"},\"(0016,0020)\":{tag:\"(0016,0020)\",vr:\"UT\",name:\"EXIFVersion\",vm:\"1\",version:\"DICOM\"},\"(0016,0021)\":{tag:\"(0016,0021)\",vr:\"DS\",name:\"ShutterSpeedValue\",vm:\"1\",version:\"DICOM\"},\"(0016,0022)\":{tag:\"(0016,0022)\",vr:\"DS\",name:\"ApertureValue\",vm:\"1\",version:\"DICOM\"},\"(0016,0023)\":{tag:\"(0016,0023)\",vr:\"DS\",name:\"BrightnessValue\",vm:\"1\",version:\"DICOM\"},\"(0016,0024)\":{tag:\"(0016,0024)\",vr:\"DS\",name:\"ExposureBiasValue\",vm:\"1\",version:\"DICOM\"},\"(0016,0025)\":{tag:\"(0016,0025)\",vr:\"DS\",name:\"MaxApertureValue\",vm:\"1\",version:\"DICOM\"},\"(0016,0026)\":{tag:\"(0016,0026)\",vr:\"DS\",name:\"SubjectDistance\",vm:\"1\",version:\"DICOM\"},\"(0016,0027)\":{tag:\"(0016,0027)\",vr:\"US\",name:\"MeteringMode\",vm:\"1\",version:\"DICOM\"},\"(0016,0028)\":{tag:\"(0016,0028)\",vr:\"US\",name:\"LightSource\",vm:\"1\",version:\"DICOM\"},\"(0016,0029)\":{tag:\"(0016,0029)\",vr:\"DS\",name:\"FocalLength\",vm:\"1\",version:\"DICOM\"},\"(0016,002A)\":{tag:\"(0016,002A)\",vr:\"IS\",name:\"SubjectArea\",vm:\"2-4\",version:\"DICOM\"},\"(0016,002B)\":{tag:\"(0016,002B)\",vr:\"OB\",name:\"MakerNote\",vm:\"1\",version:\"DICOM\"},\"(0016,0030)\":{tag:\"(0016,0030)\",vr:\"DS\",name:\"Temperature\",vm:\"1\",version:\"DICOM\"},\"(0016,0031)\":{tag:\"(0016,0031)\",vr:\"DS\",name:\"Humidity\",vm:\"1\",version:\"DICOM\"},\"(0016,0032)\":{tag:\"(0016,0032)\",vr:\"DS\",name:\"Pressure\",vm:\"1\",version:\"DICOM\"},\"(0016,0033)\":{tag:\"(0016,0033)\",vr:\"DS\",name:\"WaterDepth\",vm:\"1\",version:\"DICOM\"},\"(0016,0034)\":{tag:\"(0016,0034)\",vr:\"DS\",name:\"Acceleration\",vm:\"1\",version:\"DICOM\"},\"(0016,0035)\":{tag:\"(0016,0035)\",vr:\"DS\",name:\"CameraElevationAngle\",vm:\"1\",version:\"DICOM\"},\"(0016,0036)\":{tag:\"(0016,0036)\",vr:\"DS\",name:\"FlashEnergy\",vm:\"1-2\",version:\"DICOM\"},\"(0016,0037)\":{tag:\"(0016,0037)\",vr:\"IS\",name:\"SubjectLocation\",vm:\"2\",version:\"DICOM\"},\"(0016,0038)\":{tag:\"(0016,0038)\",vr:\"DS\",name:\"PhotographicExposureIndex\",vm:\"1\",version:\"DICOM\"},\"(0016,0039)\":{tag:\"(0016,0039)\",vr:\"US\",name:\"SensingMethod\",vm:\"1\",version:\"DICOM\"},\"(0016,003A)\":{tag:\"(0016,003A)\",vr:\"US\",name:\"FileSource\",vm:\"1\",version:\"DICOM\"},\"(0016,003B)\":{tag:\"(0016,003B)\",vr:\"US\",name:\"SceneType\",vm:\"1\",version:\"DICOM\"},\"(0016,0041)\":{tag:\"(0016,0041)\",vr:\"US\",name:\"CustomRendered\",vm:\"1\",version:\"DICOM\"},\"(0016,0042)\":{tag:\"(0016,0042)\",vr:\"US\",name:\"ExposureMode\",vm:\"1\",version:\"DICOM\"},\"(0016,0043)\":{tag:\"(0016,0043)\",vr:\"US\",name:\"WhiteBalance\",vm:\"1\",version:\"DICOM\"},\"(0016,0044)\":{tag:\"(0016,0044)\",vr:\"DS\",name:\"DigitalZoomRatio\",vm:\"1\",version:\"DICOM\"},\"(0016,0045)\":{tag:\"(0016,0045)\",vr:\"IS\",name:\"FocalLengthIn35mmFilm\",vm:\"1\",version:\"DICOM\"},\"(0016,0046)\":{tag:\"(0016,0046)\",vr:\"US\",name:\"SceneCaptureType\",vm:\"1\",version:\"DICOM\"},\"(0016,0047)\":{tag:\"(0016,0047)\",vr:\"US\",name:\"GainControl\",vm:\"1\",version:\"DICOM\"},\"(0016,0048)\":{tag:\"(0016,0048)\",vr:\"US\",name:\"Contrast\",vm:\"1\",version:\"DICOM\"},\"(0016,0049)\":{tag:\"(0016,0049)\",vr:\"US\",name:\"Saturation\",vm:\"1\",version:\"DICOM\"},\"(0016,004A)\":{tag:\"(0016,004A)\",vr:\"US\",name:\"Sharpness\",vm:\"1\",version:\"DICOM\"},\"(0016,004B)\":{tag:\"(0016,004B)\",vr:\"OB\",name:\"DeviceSettingDescription\",vm:\"1\",version:\"DICOM\"},\"(0016,004C)\":{tag:\"(0016,004C)\",vr:\"US\",name:\"SubjectDistanceRange\",vm:\"1\",version:\"DICOM\"},\"(0016,004D)\":{tag:\"(0016,004D)\",vr:\"UT\",name:\"CameraOwnerName\",vm:\"1\",version:\"DICOM\"},\"(0016,004E)\":{tag:\"(0016,004E)\",vr:\"DS\",name:\"LensSpecification\",vm:\"4\",version:\"DICOM\"},\"(0016,004F)\":{tag:\"(0016,004F)\",vr:\"UT\",name:\"LensMake\",vm:\"1\",version:\"DICOM\"},\"(0016,0050)\":{tag:\"(0016,0050)\",vr:\"UT\",name:\"LensModel\",vm:\"1\",version:\"DICOM\"},\"(0016,0051)\":{tag:\"(0016,0051)\",vr:\"UT\",name:\"LensSerialNumber\",vm:\"1\",version:\"DICOM\"},\"(0016,0061)\":{tag:\"(0016,0061)\",vr:\"CS\",name:\"InteroperabilityIndex\",vm:\"1\",version:\"DICOM\"},\"(0016,0062)\":{tag:\"(0016,0062)\",vr:\"OB\",name:\"InteroperabilityVersion\",vm:\"1\",version:\"DICOM\"},\"(0016,0070)\":{tag:\"(0016,0070)\",vr:\"OB\",name:\"GPSVersionID\",vm:\"1\",version:\"DICOM\"},\"(0016,0071)\":{tag:\"(0016,0071)\",vr:\"CS\",name:\"GPSLatitudeRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0072)\":{tag:\"(0016,0072)\",vr:\"DS\",name:\"GPSLatitude\",vm:\"3\",version:\"DICOM\"},\"(0016,0073)\":{tag:\"(0016,0073)\",vr:\"CS\",name:\"GPSLongitudeRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0074)\":{tag:\"(0016,0074)\",vr:\"DS\",name:\"GPSLongitude\",vm:\"3\",version:\"DICOM\"},\"(0016,0075)\":{tag:\"(0016,0075)\",vr:\"US\",name:\"GPSAltitudeRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0076)\":{tag:\"(0016,0076)\",vr:\"DS\",name:\"GPSAltitude\",vm:\"1\",version:\"DICOM\"},\"(0016,0077)\":{tag:\"(0016,0077)\",vr:\"DT\",name:\"GPSTimeStamp\",vm:\"1\",version:\"DICOM\"},\"(0016,0078)\":{tag:\"(0016,0078)\",vr:\"UT\",name:\"GPSSatellites\",vm:\"1\",version:\"DICOM\"},\"(0016,0079)\":{tag:\"(0016,0079)\",vr:\"CS\",name:\"GPSStatus\",vm:\"1\",version:\"DICOM\"},\"(0016,007A)\":{tag:\"(0016,007A)\",vr:\"CS\",name:\"GPSMeasureMode\",vm:\"1\",version:\"DICOM\"},\"(0016,007B)\":{tag:\"(0016,007B)\",vr:\"DS\",name:\"GPSDOP\",vm:\"1\",version:\"DICOM\"},\"(0016,007C)\":{tag:\"(0016,007C)\",vr:\"CS\",name:\"GPSSpeedRef\",vm:\"1\",version:\"DICOM\"},\"(0016,007D)\":{tag:\"(0016,007D)\",vr:\"DS\",name:\"GPSSpeed\",vm:\"1\",version:\"DICOM\"},\"(0016,007E)\":{tag:\"(0016,007E)\",vr:\"CS\",name:\"GPSTrackRef\",vm:\"1\",version:\"DICOM\"},\"(0016,007F)\":{tag:\"(0016,007F)\",vr:\"DS\",name:\"GPSTrack\",vm:\"1\",version:\"DICOM\"},\"(0016,0080)\":{tag:\"(0016,0080)\",vr:\"CS\",name:\"GPSImgDirectionRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0081)\":{tag:\"(0016,0081)\",vr:\"DS\",name:\"GPSImgDirection\",vm:\"1\",version:\"DICOM\"},\"(0016,0082)\":{tag:\"(0016,0082)\",vr:\"UT\",name:\"GPSMapDatum\",vm:\"1\",version:\"DICOM\"},\"(0016,0083)\":{tag:\"(0016,0083)\",vr:\"CS\",name:\"GPSDestLatitudeRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0084)\":{tag:\"(0016,0084)\",vr:\"DS\",name:\"GPSDestLatitude\",vm:\"3\",version:\"DICOM\"},\"(0016,0085)\":{tag:\"(0016,0085)\",vr:\"CS\",name:\"GPSDestLongitudeRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0086)\":{tag:\"(0016,0086)\",vr:\"DS\",name:\"GPSDestLongitude\",vm:\"3\",version:\"DICOM\"},\"(0016,0087)\":{tag:\"(0016,0087)\",vr:\"CS\",name:\"GPSDestBearingRef\",vm:\"1\",version:\"DICOM\"},\"(0016,0088)\":{tag:\"(0016,0088)\",vr:\"DS\",name:\"GPSDestBearing\",vm:\"1\",version:\"DICOM\"},\"(0016,0089)\":{tag:\"(0016,0089)\",vr:\"CS\",name:\"GPSDestDistanceRef\",vm:\"1\",version:\"DICOM\"},\"(0016,008A)\":{tag:\"(0016,008A)\",vr:\"DS\",name:\"GPSDestDistance\",vm:\"1\",version:\"DICOM\"},\"(0016,008B)\":{tag:\"(0016,008B)\",vr:\"OB\",name:\"GPSProcessingMethod\",vm:\"1\",version:\"DICOM\"},\"(0016,008C)\":{tag:\"(0016,008C)\",vr:\"OB\",name:\"GPSAreaInformation\",vm:\"1\",version:\"DICOM\"},\"(0016,008D)\":{tag:\"(0016,008D)\",vr:\"DT\",name:\"GPSDateStamp\",vm:\"1\",version:\"DICOM\"},\"(0016,008E)\":{tag:\"(0016,008E)\",vr:\"IS\",name:\"GPSDifferential\",vm:\"1\",version:\"DICOM\"},\"(0016,1001)\":{tag:\"(0016,1001)\",vr:\"CS\",name:\"LightSourcePolarization\",vm:\"1\",version:\"DICOM\"},\"(0016,1002)\":{tag:\"(0016,1002)\",vr:\"DS\",name:\"EmitterColorTemperature\",vm:\"1\",version:\"DICOM\"},\"(0016,1003)\":{tag:\"(0016,1003)\",vr:\"CS\",name:\"ContactMethod\",vm:\"1\",version:\"DICOM\"},\"(0016,1004)\":{tag:\"(0016,1004)\",vr:\"CS\",name:\"ImmersionMedia\",vm:\"1-n\",version:\"DICOM\"},\"(0016,1005)\":{tag:\"(0016,1005)\",vr:\"DS\",name:\"OpticalMagnificationFactor\",vm:\"1\",version:\"DICOM\"},\"(0018,0010)\":{tag:\"(0018,0010)\",vr:\"LO\",name:\"ContrastBolusAgent\",vm:\"1\",version:\"DICOM\"},\"(0018,0012)\":{tag:\"(0018,0012)\",vr:\"SQ\",name:\"ContrastBolusAgentSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,0013)\":{tag:\"(0018,0013)\",vr:\"FL\",name:\"ContrastBolusT1Relaxivity\",vm:\"1\",version:\"DICOM\"},\"(0018,0014)\":{tag:\"(0018,0014)\",vr:\"SQ\",name:\"ContrastBolusAdministrationRouteSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,0015)\":{tag:\"(0018,0015)\",vr:\"CS\",name:\"BodyPartExamined\",vm:\"1\",version:\"DICOM\"},\"(0018,0020)\":{tag:\"(0018,0020)\",vr:\"CS\",name:\"ScanningSequence\",vm:\"1-n\",version:\"DICOM\"},\"(0018,0021)\":{tag:\"(0018,0021)\",vr:\"CS\",name:\"SequenceVariant\",vm:\"1-n\",version:\"DICOM\"},\"(0018,0022)\":{tag:\"(0018,0022)\",vr:\"CS\",name:\"ScanOptions\",vm:\"1-n\",version:\"DICOM\"},\"(0018,0023)\":{tag:\"(0018,0023)\",vr:\"CS\",name:\"MRAcquisitionType\",vm:\"1\",version:\"DICOM\"},\"(0018,0024)\":{tag:\"(0018,0024)\",vr:\"SH\",name:\"SequenceName\",vm:\"1\",version:\"DICOM\"},\"(0018,0025)\":{tag:\"(0018,0025)\",vr:\"CS\",name:\"AngioFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,0026)\":{tag:\"(0018,0026)\",vr:\"SQ\",name:\"InterventionDrugInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,0027)\":{tag:\"(0018,0027)\",vr:\"TM\",name:\"InterventionDrugStopTime\",vm:\"1\",version:\"DICOM\"},\"(0018,0028)\":{tag:\"(0018,0028)\",vr:\"DS\",name:\"InterventionDrugDose\",vm:\"1\",version:\"DICOM\"},\"(0018,0029)\":{tag:\"(0018,0029)\",vr:\"SQ\",name:\"InterventionDrugCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,002A)\":{tag:\"(0018,002A)\",vr:\"SQ\",name:\"AdditionalDrugSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,0031)\":{tag:\"(0018,0031)\",vr:\"LO\",name:\"Radiopharmaceutical\",vm:\"1\",version:\"DICOM\"},\"(0018,0034)\":{tag:\"(0018,0034)\",vr:\"LO\",name:\"InterventionDrugName\",vm:\"1\",version:\"DICOM\"},\"(0018,0035)\":{tag:\"(0018,0035)\",vr:\"TM\",name:\"InterventionDrugStartTime\",vm:\"1\",version:\"DICOM\"},\"(0018,0036)\":{tag:\"(0018,0036)\",vr:\"SQ\",name:\"InterventionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,0038)\":{tag:\"(0018,0038)\",vr:\"CS\",name:\"InterventionStatus\",vm:\"1\",version:\"DICOM\"},\"(0018,003A)\":{tag:\"(0018,003A)\",vr:\"ST\",name:\"InterventionDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,0040)\":{tag:\"(0018,0040)\",vr:\"IS\",name:\"CineRate\",vm:\"1\",version:\"DICOM\"},\"(0018,0042)\":{tag:\"(0018,0042)\",vr:\"CS\",name:\"InitialCineRunState\",vm:\"1\",version:\"DICOM\"},\"(0018,0050)\":{tag:\"(0018,0050)\",vr:\"DS\",name:\"SliceThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,0060)\":{tag:\"(0018,0060)\",vr:\"DS\",name:\"KVP\",vm:\"1\",version:\"DICOM\"},\"(0018,0070)\":{tag:\"(0018,0070)\",vr:\"IS\",name:\"CountsAccumulated\",vm:\"1\",version:\"DICOM\"},\"(0018,0071)\":{tag:\"(0018,0071)\",vr:\"CS\",name:\"AcquisitionTerminationCondition\",vm:\"1\",version:\"DICOM\"},\"(0018,0072)\":{tag:\"(0018,0072)\",vr:\"DS\",name:\"EffectiveDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,0073)\":{tag:\"(0018,0073)\",vr:\"CS\",name:\"AcquisitionStartCondition\",vm:\"1\",version:\"DICOM\"},\"(0018,0074)\":{tag:\"(0018,0074)\",vr:\"IS\",name:\"AcquisitionStartConditionData\",vm:\"1\",version:\"DICOM\"},\"(0018,0075)\":{tag:\"(0018,0075)\",vr:\"IS\",name:\"AcquisitionTerminationConditionData\",vm:\"1\",version:\"DICOM\"},\"(0018,0080)\":{tag:\"(0018,0080)\",vr:\"DS\",name:\"RepetitionTime\",vm:\"1\",version:\"DICOM\"},\"(0018,0081)\":{tag:\"(0018,0081)\",vr:\"DS\",name:\"EchoTime\",vm:\"1\",version:\"DICOM\"},\"(0018,0082)\":{tag:\"(0018,0082)\",vr:\"DS\",name:\"InversionTime\",vm:\"1\",version:\"DICOM\"},\"(0018,0083)\":{tag:\"(0018,0083)\",vr:\"DS\",name:\"NumberOfAverages\",vm:\"1\",version:\"DICOM\"},\"(0018,0084)\":{tag:\"(0018,0084)\",vr:\"DS\",name:\"ImagingFrequency\",vm:\"1\",version:\"DICOM\"},\"(0018,0085)\":{tag:\"(0018,0085)\",vr:\"SH\",name:\"ImagedNucleus\",vm:\"1\",version:\"DICOM\"},\"(0018,0086)\":{tag:\"(0018,0086)\",vr:\"IS\",name:\"EchoNumbers\",vm:\"1-n\",version:\"DICOM\"},\"(0018,0087)\":{tag:\"(0018,0087)\",vr:\"DS\",name:\"MagneticFieldStrength\",vm:\"1\",version:\"DICOM\"},\"(0018,0088)\":{tag:\"(0018,0088)\",vr:\"DS\",name:\"SpacingBetweenSlices\",vm:\"1\",version:\"DICOM\"},\"(0018,0089)\":{tag:\"(0018,0089)\",vr:\"IS\",name:\"NumberOfPhaseEncodingSteps\",vm:\"1\",version:\"DICOM\"},\"(0018,0090)\":{tag:\"(0018,0090)\",vr:\"DS\",name:\"DataCollectionDiameter\",vm:\"1\",version:\"DICOM\"},\"(0018,0091)\":{tag:\"(0018,0091)\",vr:\"IS\",name:\"EchoTrainLength\",vm:\"1\",version:\"DICOM\"},\"(0018,0093)\":{tag:\"(0018,0093)\",vr:\"DS\",name:\"PercentSampling\",vm:\"1\",version:\"DICOM\"},\"(0018,0094)\":{tag:\"(0018,0094)\",vr:\"DS\",name:\"PercentPhaseFieldOfView\",vm:\"1\",version:\"DICOM\"},\"(0018,0095)\":{tag:\"(0018,0095)\",vr:\"DS\",name:\"PixelBandwidth\",vm:\"1\",version:\"DICOM\"},\"(0018,1000)\":{tag:\"(0018,1000)\",vr:\"LO\",name:\"DeviceSerialNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,1002)\":{tag:\"(0018,1002)\",vr:\"UI\",name:\"DeviceUID\",vm:\"1\",version:\"DICOM\"},\"(0018,1003)\":{tag:\"(0018,1003)\",vr:\"LO\",name:\"DeviceID\",vm:\"1\",version:\"DICOM\"},\"(0018,1004)\":{tag:\"(0018,1004)\",vr:\"LO\",name:\"PlateID\",vm:\"1\",version:\"DICOM\"},\"(0018,1005)\":{tag:\"(0018,1005)\",vr:\"LO\",name:\"GeneratorID\",vm:\"1\",version:\"DICOM\"},\"(0018,1006)\":{tag:\"(0018,1006)\",vr:\"LO\",name:\"GridID\",vm:\"1\",version:\"DICOM\"},\"(0018,1007)\":{tag:\"(0018,1007)\",vr:\"LO\",name:\"CassetteID\",vm:\"1\",version:\"DICOM\"},\"(0018,1008)\":{tag:\"(0018,1008)\",vr:\"LO\",name:\"GantryID\",vm:\"1\",version:\"DICOM\"},\"(0018,1009)\":{tag:\"(0018,1009)\",vr:\"UT\",name:\"UniqueDeviceIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0018,100A)\":{tag:\"(0018,100A)\",vr:\"SQ\",name:\"UDISequence\",vm:\"1\",version:\"DICOM\"},\"(0018,100B)\":{tag:\"(0018,100B)\",vr:\"UI\",name:\"ManufacturerDeviceClassUID\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1010)\":{tag:\"(0018,1010)\",vr:\"LO\",name:\"SecondaryCaptureDeviceID\",vm:\"1\",version:\"DICOM\"},\"(0018,1012)\":{tag:\"(0018,1012)\",vr:\"DA\",name:\"DateOfSecondaryCapture\",vm:\"1\",version:\"DICOM\"},\"(0018,1014)\":{tag:\"(0018,1014)\",vr:\"TM\",name:\"TimeOfSecondaryCapture\",vm:\"1\",version:\"DICOM\"},\"(0018,1016)\":{tag:\"(0018,1016)\",vr:\"LO\",name:\"SecondaryCaptureDeviceManufacturer\",vm:\"1\",version:\"DICOM\"},\"(0018,1018)\":{tag:\"(0018,1018)\",vr:\"LO\",name:\"SecondaryCaptureDeviceManufacturerModelName\",vm:\"1\",version:\"DICOM\"},\"(0018,1019)\":{tag:\"(0018,1019)\",vr:\"LO\",name:\"SecondaryCaptureDeviceSoftwareVersions\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1020)\":{tag:\"(0018,1020)\",vr:\"LO\",name:\"SoftwareVersions\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1022)\":{tag:\"(0018,1022)\",vr:\"SH\",name:\"VideoImageFormatAcquired\",vm:\"1\",version:\"DICOM\"},\"(0018,1023)\":{tag:\"(0018,1023)\",vr:\"LO\",name:\"DigitalImageFormatAcquired\",vm:\"1\",version:\"DICOM\"},\"(0018,1030)\":{tag:\"(0018,1030)\",vr:\"LO\",name:\"ProtocolName\",vm:\"1\",version:\"DICOM\"},\"(0018,1040)\":{tag:\"(0018,1040)\",vr:\"LO\",name:\"ContrastBolusRoute\",vm:\"1\",version:\"DICOM\"},\"(0018,1041)\":{tag:\"(0018,1041)\",vr:\"DS\",name:\"ContrastBolusVolume\",vm:\"1\",version:\"DICOM\"},\"(0018,1042)\":{tag:\"(0018,1042)\",vr:\"TM\",name:\"ContrastBolusStartTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1043)\":{tag:\"(0018,1043)\",vr:\"TM\",name:\"ContrastBolusStopTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1044)\":{tag:\"(0018,1044)\",vr:\"DS\",name:\"ContrastBolusTotalDose\",vm:\"1\",version:\"DICOM\"},\"(0018,1045)\":{tag:\"(0018,1045)\",vr:\"IS\",name:\"SyringeCounts\",vm:\"1\",version:\"DICOM\"},\"(0018,1046)\":{tag:\"(0018,1046)\",vr:\"DS\",name:\"ContrastFlowRate\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1047)\":{tag:\"(0018,1047)\",vr:\"DS\",name:\"ContrastFlowDuration\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1048)\":{tag:\"(0018,1048)\",vr:\"CS\",name:\"ContrastBolusIngredient\",vm:\"1\",version:\"DICOM\"},\"(0018,1049)\":{tag:\"(0018,1049)\",vr:\"DS\",name:\"ContrastBolusIngredientConcentration\",vm:\"1\",version:\"DICOM\"},\"(0018,1050)\":{tag:\"(0018,1050)\",vr:\"DS\",name:\"SpatialResolution\",vm:\"1\",version:\"DICOM\"},\"(0018,1060)\":{tag:\"(0018,1060)\",vr:\"DS\",name:\"TriggerTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1061)\":{tag:\"(0018,1061)\",vr:\"LO\",name:\"TriggerSourceOrType\",vm:\"1\",version:\"DICOM\"},\"(0018,1062)\":{tag:\"(0018,1062)\",vr:\"IS\",name:\"NominalInterval\",vm:\"1\",version:\"DICOM\"},\"(0018,1063)\":{tag:\"(0018,1063)\",vr:\"DS\",name:\"FrameTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1064)\":{tag:\"(0018,1064)\",vr:\"LO\",name:\"CardiacFramingType\",vm:\"1\",version:\"DICOM\"},\"(0018,1065)\":{tag:\"(0018,1065)\",vr:\"DS\",name:\"FrameTimeVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1066)\":{tag:\"(0018,1066)\",vr:\"DS\",name:\"FrameDelay\",vm:\"1\",version:\"DICOM\"},\"(0018,1067)\":{tag:\"(0018,1067)\",vr:\"DS\",name:\"ImageTriggerDelay\",vm:\"1\",version:\"DICOM\"},\"(0018,1068)\":{tag:\"(0018,1068)\",vr:\"DS\",name:\"MultiplexGroupTimeOffset\",vm:\"1\",version:\"DICOM\"},\"(0018,1069)\":{tag:\"(0018,1069)\",vr:\"DS\",name:\"TriggerTimeOffset\",vm:\"1\",version:\"DICOM\"},\"(0018,106A)\":{tag:\"(0018,106A)\",vr:\"CS\",name:\"SynchronizationTrigger\",vm:\"1\",version:\"DICOM\"},\"(0018,106C)\":{tag:\"(0018,106C)\",vr:\"US\",name:\"SynchronizationChannel\",vm:\"2\",version:\"DICOM\"},\"(0018,106E)\":{tag:\"(0018,106E)\",vr:\"UL\",name:\"TriggerSamplePosition\",vm:\"1\",version:\"DICOM\"},\"(0018,1070)\":{tag:\"(0018,1070)\",vr:\"LO\",name:\"RadiopharmaceuticalRoute\",vm:\"1\",version:\"DICOM\"},\"(0018,1071)\":{tag:\"(0018,1071)\",vr:\"DS\",name:\"RadiopharmaceuticalVolume\",vm:\"1\",version:\"DICOM\"},\"(0018,1072)\":{tag:\"(0018,1072)\",vr:\"TM\",name:\"RadiopharmaceuticalStartTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1073)\":{tag:\"(0018,1073)\",vr:\"TM\",name:\"RadiopharmaceuticalStopTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1074)\":{tag:\"(0018,1074)\",vr:\"DS\",name:\"RadionuclideTotalDose\",vm:\"1\",version:\"DICOM\"},\"(0018,1075)\":{tag:\"(0018,1075)\",vr:\"DS\",name:\"RadionuclideHalfLife\",vm:\"1\",version:\"DICOM\"},\"(0018,1076)\":{tag:\"(0018,1076)\",vr:\"DS\",name:\"RadionuclidePositronFraction\",vm:\"1\",version:\"DICOM\"},\"(0018,1077)\":{tag:\"(0018,1077)\",vr:\"DS\",name:\"RadiopharmaceuticalSpecificActivity\",vm:\"1\",version:\"DICOM\"},\"(0018,1078)\":{tag:\"(0018,1078)\",vr:\"DT\",name:\"RadiopharmaceuticalStartDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1079)\":{tag:\"(0018,1079)\",vr:\"DT\",name:\"RadiopharmaceuticalStopDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1080)\":{tag:\"(0018,1080)\",vr:\"CS\",name:\"BeatRejectionFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,1081)\":{tag:\"(0018,1081)\",vr:\"IS\",name:\"LowRRValue\",vm:\"1\",version:\"DICOM\"},\"(0018,1082)\":{tag:\"(0018,1082)\",vr:\"IS\",name:\"HighRRValue\",vm:\"1\",version:\"DICOM\"},\"(0018,1083)\":{tag:\"(0018,1083)\",vr:\"IS\",name:\"IntervalsAcquired\",vm:\"1\",version:\"DICOM\"},\"(0018,1084)\":{tag:\"(0018,1084)\",vr:\"IS\",name:\"IntervalsRejected\",vm:\"1\",version:\"DICOM\"},\"(0018,1085)\":{tag:\"(0018,1085)\",vr:\"LO\",name:\"PVCRejection\",vm:\"1\",version:\"DICOM\"},\"(0018,1086)\":{tag:\"(0018,1086)\",vr:\"IS\",name:\"SkipBeats\",vm:\"1\",version:\"DICOM\"},\"(0018,1088)\":{tag:\"(0018,1088)\",vr:\"IS\",name:\"HeartRate\",vm:\"1\",version:\"DICOM\"},\"(0018,1090)\":{tag:\"(0018,1090)\",vr:\"IS\",name:\"CardiacNumberOfImages\",vm:\"1\",version:\"DICOM\"},\"(0018,1094)\":{tag:\"(0018,1094)\",vr:\"IS\",name:\"TriggerWindow\",vm:\"1\",version:\"DICOM\"},\"(0018,1100)\":{tag:\"(0018,1100)\",vr:\"DS\",name:\"ReconstructionDiameter\",vm:\"1\",version:\"DICOM\"},\"(0018,1110)\":{tag:\"(0018,1110)\",vr:\"DS\",name:\"DistanceSourceToDetector\",vm:\"1\",version:\"DICOM\"},\"(0018,1111)\":{tag:\"(0018,1111)\",vr:\"DS\",name:\"DistanceSourceToPatient\",vm:\"1\",version:\"DICOM\"},\"(0018,1114)\":{tag:\"(0018,1114)\",vr:\"DS\",name:\"EstimatedRadiographicMagnificationFactor\",vm:\"1\",version:\"DICOM\"},\"(0018,1120)\":{tag:\"(0018,1120)\",vr:\"DS\",name:\"GantryDetectorTilt\",vm:\"1\",version:\"DICOM\"},\"(0018,1121)\":{tag:\"(0018,1121)\",vr:\"DS\",name:\"GantryDetectorSlew\",vm:\"1\",version:\"DICOM\"},\"(0018,1130)\":{tag:\"(0018,1130)\",vr:\"DS\",name:\"TableHeight\",vm:\"1\",version:\"DICOM\"},\"(0018,1131)\":{tag:\"(0018,1131)\",vr:\"DS\",name:\"TableTraverse\",vm:\"1\",version:\"DICOM\"},\"(0018,1134)\":{tag:\"(0018,1134)\",vr:\"CS\",name:\"TableMotion\",vm:\"1\",version:\"DICOM\"},\"(0018,1135)\":{tag:\"(0018,1135)\",vr:\"DS\",name:\"TableVerticalIncrement\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1136)\":{tag:\"(0018,1136)\",vr:\"DS\",name:\"TableLateralIncrement\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1137)\":{tag:\"(0018,1137)\",vr:\"DS\",name:\"TableLongitudinalIncrement\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1138)\":{tag:\"(0018,1138)\",vr:\"DS\",name:\"TableAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,113A)\":{tag:\"(0018,113A)\",vr:\"CS\",name:\"TableType\",vm:\"1\",version:\"DICOM\"},\"(0018,1140)\":{tag:\"(0018,1140)\",vr:\"CS\",name:\"RotationDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,1142)\":{tag:\"(0018,1142)\",vr:\"DS\",name:\"RadialPosition\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1143)\":{tag:\"(0018,1143)\",vr:\"DS\",name:\"ScanArc\",vm:\"1\",version:\"DICOM\"},\"(0018,1144)\":{tag:\"(0018,1144)\",vr:\"DS\",name:\"AngularStep\",vm:\"1\",version:\"DICOM\"},\"(0018,1145)\":{tag:\"(0018,1145)\",vr:\"DS\",name:\"CenterOfRotationOffset\",vm:\"1\",version:\"DICOM\"},\"(0018,1147)\":{tag:\"(0018,1147)\",vr:\"CS\",name:\"FieldOfViewShape\",vm:\"1\",version:\"DICOM\"},\"(0018,1149)\":{tag:\"(0018,1149)\",vr:\"IS\",name:\"FieldOfViewDimensions\",vm:\"1-2\",version:\"DICOM\"},\"(0018,1150)\":{tag:\"(0018,1150)\",vr:\"IS\",name:\"ExposureTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1151)\":{tag:\"(0018,1151)\",vr:\"IS\",name:\"XRayTubeCurrent\",vm:\"1\",version:\"DICOM\"},\"(0018,1152)\":{tag:\"(0018,1152)\",vr:\"IS\",name:\"Exposure\",vm:\"1\",version:\"DICOM\"},\"(0018,1153)\":{tag:\"(0018,1153)\",vr:\"IS\",name:\"ExposureInuAs\",vm:\"1\",version:\"DICOM\"},\"(0018,1154)\":{tag:\"(0018,1154)\",vr:\"DS\",name:\"AveragePulseWidth\",vm:\"1\",version:\"DICOM\"},\"(0018,1155)\":{tag:\"(0018,1155)\",vr:\"CS\",name:\"RadiationSetting\",vm:\"1\",version:\"DICOM\"},\"(0018,1156)\":{tag:\"(0018,1156)\",vr:\"CS\",name:\"RectificationType\",vm:\"1\",version:\"DICOM\"},\"(0018,115A)\":{tag:\"(0018,115A)\",vr:\"CS\",name:\"RadiationMode\",vm:\"1\",version:\"DICOM\"},\"(0018,115E)\":{tag:\"(0018,115E)\",vr:\"DS\",name:\"ImageAndFluoroscopyAreaDoseProduct\",vm:\"1\",version:\"DICOM\"},\"(0018,1160)\":{tag:\"(0018,1160)\",vr:\"SH\",name:\"FilterType\",vm:\"1\",version:\"DICOM\"},\"(0018,1161)\":{tag:\"(0018,1161)\",vr:\"LO\",name:\"TypeOfFilters\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1162)\":{tag:\"(0018,1162)\",vr:\"DS\",name:\"IntensifierSize\",vm:\"1\",version:\"DICOM\"},\"(0018,1164)\":{tag:\"(0018,1164)\",vr:\"DS\",name:\"ImagerPixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(0018,1166)\":{tag:\"(0018,1166)\",vr:\"CS\",name:\"Grid\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1170)\":{tag:\"(0018,1170)\",vr:\"IS\",name:\"GeneratorPower\",vm:\"1\",version:\"DICOM\"},\"(0018,1180)\":{tag:\"(0018,1180)\",vr:\"SH\",name:\"CollimatorGridName\",vm:\"1\",version:\"DICOM\"},\"(0018,1181)\":{tag:\"(0018,1181)\",vr:\"CS\",name:\"CollimatorType\",vm:\"1\",version:\"DICOM\"},\"(0018,1182)\":{tag:\"(0018,1182)\",vr:\"IS\",name:\"FocalDistance\",vm:\"1-2\",version:\"DICOM\"},\"(0018,1183)\":{tag:\"(0018,1183)\",vr:\"DS\",name:\"XFocusCenter\",vm:\"1-2\",version:\"DICOM\"},\"(0018,1184)\":{tag:\"(0018,1184)\",vr:\"DS\",name:\"YFocusCenter\",vm:\"1-2\",version:\"DICOM\"},\"(0018,1190)\":{tag:\"(0018,1190)\",vr:\"DS\",name:\"FocalSpots\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1191)\":{tag:\"(0018,1191)\",vr:\"CS\",name:\"AnodeTargetMaterial\",vm:\"1\",version:\"DICOM\"},\"(0018,11A0)\":{tag:\"(0018,11A0)\",vr:\"DS\",name:\"BodyPartThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,11A2)\":{tag:\"(0018,11A2)\",vr:\"DS\",name:\"CompressionForce\",vm:\"1\",version:\"DICOM\"},\"(0018,11A3)\":{tag:\"(0018,11A3)\",vr:\"DS\",name:\"CompressionPressure\",vm:\"1\",version:\"DICOM\"},\"(0018,11A4)\":{tag:\"(0018,11A4)\",vr:\"LO\",name:\"PaddleDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,11A5)\":{tag:\"(0018,11A5)\",vr:\"DS\",name:\"CompressionContactArea\",vm:\"1\",version:\"DICOM\"},\"(0018,11B0)\":{tag:\"(0018,11B0)\",vr:\"LO\",name:\"AcquisitionMode\",vm:\"1\",version:\"DICOM\"},\"(0018,11B1)\":{tag:\"(0018,11B1)\",vr:\"LO\",name:\"DoseModeName\",vm:\"1\",version:\"DICOM\"},\"(0018,11B2)\":{tag:\"(0018,11B2)\",vr:\"CS\",name:\"AcquiredSubtractionMaskFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,11B3)\":{tag:\"(0018,11B3)\",vr:\"CS\",name:\"FluoroscopyPersistenceFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,11B4)\":{tag:\"(0018,11B4)\",vr:\"CS\",name:\"FluoroscopyLastImageHoldPersistenceFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,11B5)\":{tag:\"(0018,11B5)\",vr:\"IS\",name:\"UpperLimitNumberOfPersistentFluoroscopyFrames\",vm:\"1\",version:\"DICOM\"},\"(0018,11B6)\":{tag:\"(0018,11B6)\",vr:\"CS\",name:\"ContrastBolusAutoInjectionTriggerFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,11B7)\":{tag:\"(0018,11B7)\",vr:\"FD\",name:\"ContrastBolusInjectionDelay\",vm:\"1\",version:\"DICOM\"},\"(0018,11B8)\":{tag:\"(0018,11B8)\",vr:\"SQ\",name:\"XAAcquisitionPhaseDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,11B9)\":{tag:\"(0018,11B9)\",vr:\"FD\",name:\"XAAcquisitionFrameRate\",vm:\"1\",version:\"DICOM\"},\"(0018,11BA)\":{tag:\"(0018,11BA)\",vr:\"SQ\",name:\"XAPlaneDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,11BB)\":{tag:\"(0018,11BB)\",vr:\"LO\",name:\"AcquisitionFieldOfViewLabel\",vm:\"1\",version:\"DICOM\"},\"(0018,11BC)\":{tag:\"(0018,11BC)\",vr:\"SQ\",name:\"XRayFilterDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,11BD)\":{tag:\"(0018,11BD)\",vr:\"FD\",name:\"XAAcquisitionDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,11BE)\":{tag:\"(0018,11BE)\",vr:\"CS\",name:\"ReconstructionPipelineType\",vm:\"1\",version:\"DICOM\"},\"(0018,11BF)\":{tag:\"(0018,11BF)\",vr:\"SQ\",name:\"ImageFilterDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,11C0)\":{tag:\"(0018,11C0)\",vr:\"CS\",name:\"AppliedMaskSubtractionFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,11C1)\":{tag:\"(0018,11C1)\",vr:\"SQ\",name:\"RequestedSeriesDescriptionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,1200)\":{tag:\"(0018,1200)\",vr:\"DA\",name:\"DateOfLastCalibration\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1201)\":{tag:\"(0018,1201)\",vr:\"TM\",name:\"TimeOfLastCalibration\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1202)\":{tag:\"(0018,1202)\",vr:\"DT\",name:\"DateTimeOfLastCalibration\",vm:\"1\",version:\"DICOM\"},\"(0018,1210)\":{tag:\"(0018,1210)\",vr:\"SH\",name:\"ConvolutionKernel\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1242)\":{tag:\"(0018,1242)\",vr:\"IS\",name:\"ActualFrameDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,1243)\":{tag:\"(0018,1243)\",vr:\"IS\",name:\"CountRate\",vm:\"1\",version:\"DICOM\"},\"(0018,1244)\":{tag:\"(0018,1244)\",vr:\"US\",name:\"PreferredPlaybackSequencing\",vm:\"1\",version:\"DICOM\"},\"(0018,1250)\":{tag:\"(0018,1250)\",vr:\"SH\",name:\"ReceiveCoilName\",vm:\"1\",version:\"DICOM\"},\"(0018,1251)\":{tag:\"(0018,1251)\",vr:\"SH\",name:\"TransmitCoilName\",vm:\"1\",version:\"DICOM\"},\"(0018,1260)\":{tag:\"(0018,1260)\",vr:\"SH\",name:\"PlateType\",vm:\"1\",version:\"DICOM\"},\"(0018,1261)\":{tag:\"(0018,1261)\",vr:\"LO\",name:\"PhosphorType\",vm:\"1\",version:\"DICOM\"},\"(0018,1271)\":{tag:\"(0018,1271)\",vr:\"FD\",name:\"WaterEquivalentDiameter\",vm:\"1\",version:\"DICOM\"},\"(0018,1272)\":{tag:\"(0018,1272)\",vr:\"SQ\",name:\"WaterEquivalentDiameterCalculationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,1300)\":{tag:\"(0018,1300)\",vr:\"DS\",name:\"ScanVelocity\",vm:\"1\",version:\"DICOM\"},\"(0018,1301)\":{tag:\"(0018,1301)\",vr:\"CS\",name:\"WholeBodyTechnique\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1302)\":{tag:\"(0018,1302)\",vr:\"IS\",name:\"ScanLength\",vm:\"1\",version:\"DICOM\"},\"(0018,1310)\":{tag:\"(0018,1310)\",vr:\"US\",name:\"AcquisitionMatrix\",vm:\"4\",version:\"DICOM\"},\"(0018,1312)\":{tag:\"(0018,1312)\",vr:\"CS\",name:\"InPlanePhaseEncodingDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,1314)\":{tag:\"(0018,1314)\",vr:\"DS\",name:\"FlipAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,1315)\":{tag:\"(0018,1315)\",vr:\"CS\",name:\"VariableFlipAngleFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,1316)\":{tag:\"(0018,1316)\",vr:\"DS\",name:\"SAR\",vm:\"1\",version:\"DICOM\"},\"(0018,1318)\":{tag:\"(0018,1318)\",vr:\"DS\",name:\"dBdt\",vm:\"1\",version:\"DICOM\"},\"(0018,1400)\":{tag:\"(0018,1400)\",vr:\"LO\",name:\"AcquisitionDeviceProcessingDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,1401)\":{tag:\"(0018,1401)\",vr:\"LO\",name:\"AcquisitionDeviceProcessingCode\",vm:\"1\",version:\"DICOM\"},\"(0018,1402)\":{tag:\"(0018,1402)\",vr:\"CS\",name:\"CassetteOrientation\",vm:\"1\",version:\"DICOM\"},\"(0018,1403)\":{tag:\"(0018,1403)\",vr:\"CS\",name:\"CassetteSize\",vm:\"1\",version:\"DICOM\"},\"(0018,1404)\":{tag:\"(0018,1404)\",vr:\"US\",name:\"ExposuresOnPlate\",vm:\"1\",version:\"DICOM\"},\"(0018,1405)\":{tag:\"(0018,1405)\",vr:\"IS\",name:\"RelativeXRayExposure\",vm:\"1\",version:\"DICOM\"},\"(0018,1411)\":{tag:\"(0018,1411)\",vr:\"DS\",name:\"ExposureIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,1412)\":{tag:\"(0018,1412)\",vr:\"DS\",name:\"TargetExposureIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,1413)\":{tag:\"(0018,1413)\",vr:\"DS\",name:\"DeviationIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,1450)\":{tag:\"(0018,1450)\",vr:\"DS\",name:\"ColumnAngulation\",vm:\"1\",version:\"DICOM\"},\"(0018,1460)\":{tag:\"(0018,1460)\",vr:\"DS\",name:\"TomoLayerHeight\",vm:\"1\",version:\"DICOM\"},\"(0018,1470)\":{tag:\"(0018,1470)\",vr:\"DS\",name:\"TomoAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,1480)\":{tag:\"(0018,1480)\",vr:\"DS\",name:\"TomoTime\",vm:\"1\",version:\"DICOM\"},\"(0018,1490)\":{tag:\"(0018,1490)\",vr:\"CS\",name:\"TomoType\",vm:\"1\",version:\"DICOM\"},\"(0018,1491)\":{tag:\"(0018,1491)\",vr:\"CS\",name:\"TomoClass\",vm:\"1\",version:\"DICOM\"},\"(0018,1495)\":{tag:\"(0018,1495)\",vr:\"IS\",name:\"NumberOfTomosynthesisSourceImages\",vm:\"1\",version:\"DICOM\"},\"(0018,1500)\":{tag:\"(0018,1500)\",vr:\"CS\",name:\"PositionerMotion\",vm:\"1\",version:\"DICOM\"},\"(0018,1508)\":{tag:\"(0018,1508)\",vr:\"CS\",name:\"PositionerType\",vm:\"1\",version:\"DICOM\"},\"(0018,1510)\":{tag:\"(0018,1510)\",vr:\"DS\",name:\"PositionerPrimaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,1511)\":{tag:\"(0018,1511)\",vr:\"DS\",name:\"PositionerSecondaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,1520)\":{tag:\"(0018,1520)\",vr:\"DS\",name:\"PositionerPrimaryAngleIncrement\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1521)\":{tag:\"(0018,1521)\",vr:\"DS\",name:\"PositionerSecondaryAngleIncrement\",vm:\"1-n\",version:\"DICOM\"},\"(0018,1530)\":{tag:\"(0018,1530)\",vr:\"DS\",name:\"DetectorPrimaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,1531)\":{tag:\"(0018,1531)\",vr:\"DS\",name:\"DetectorSecondaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,1600)\":{tag:\"(0018,1600)\",vr:\"CS\",name:\"ShutterShape\",vm:\"1-3\",version:\"DICOM\"},\"(0018,1602)\":{tag:\"(0018,1602)\",vr:\"IS\",name:\"ShutterLeftVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1604)\":{tag:\"(0018,1604)\",vr:\"IS\",name:\"ShutterRightVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1606)\":{tag:\"(0018,1606)\",vr:\"IS\",name:\"ShutterUpperHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1608)\":{tag:\"(0018,1608)\",vr:\"IS\",name:\"ShutterLowerHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1610)\":{tag:\"(0018,1610)\",vr:\"IS\",name:\"CenterOfCircularShutter\",vm:\"2\",version:\"DICOM\"},\"(0018,1612)\":{tag:\"(0018,1612)\",vr:\"IS\",name:\"RadiusOfCircularShutter\",vm:\"1\",version:\"DICOM\"},\"(0018,1620)\":{tag:\"(0018,1620)\",vr:\"IS\",name:\"VerticesOfThePolygonalShutter\",vm:\"2-2n\",version:\"DICOM\"},\"(0018,1622)\":{tag:\"(0018,1622)\",vr:\"US\",name:\"ShutterPresentationValue\",vm:\"1\",version:\"DICOM\"},\"(0018,1623)\":{tag:\"(0018,1623)\",vr:\"US\",name:\"ShutterOverlayGroup\",vm:\"1\",version:\"DICOM\"},\"(0018,1624)\":{tag:\"(0018,1624)\",vr:\"US\",name:\"ShutterPresentationColorCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0018,1630)\":{tag:\"(0018,1630)\",vr:\"CS\",name:\"OutlineShapeType\",vm:\"1\",version:\"DICOM\"},\"(0018,1631)\":{tag:\"(0018,1631)\",vr:\"FD\",name:\"OutlineLeftVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1632)\":{tag:\"(0018,1632)\",vr:\"FD\",name:\"OutlineRightVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1633)\":{tag:\"(0018,1633)\",vr:\"FD\",name:\"OutlineUpperHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1634)\":{tag:\"(0018,1634)\",vr:\"FD\",name:\"OutlineLowerHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1635)\":{tag:\"(0018,1635)\",vr:\"FD\",name:\"CenterOfCircularOutline\",vm:\"2\",version:\"DICOM\"},\"(0018,1636)\":{tag:\"(0018,1636)\",vr:\"FD\",name:\"DiameterOfCircularOutline\",vm:\"1\",version:\"DICOM\"},\"(0018,1637)\":{tag:\"(0018,1637)\",vr:\"UL\",name:\"NumberOfPolygonalVertices\",vm:\"1\",version:\"DICOM\"},\"(0018,1638)\":{tag:\"(0018,1638)\",vr:\"OF\",name:\"VerticesOfThePolygonalOutline\",vm:\"1\",version:\"DICOM\"},\"(0018,1700)\":{tag:\"(0018,1700)\",vr:\"CS\",name:\"CollimatorShape\",vm:\"1-3\",version:\"DICOM\"},\"(0018,1702)\":{tag:\"(0018,1702)\",vr:\"IS\",name:\"CollimatorLeftVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1704)\":{tag:\"(0018,1704)\",vr:\"IS\",name:\"CollimatorRightVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1706)\":{tag:\"(0018,1706)\",vr:\"IS\",name:\"CollimatorUpperHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1708)\":{tag:\"(0018,1708)\",vr:\"IS\",name:\"CollimatorLowerHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,1710)\":{tag:\"(0018,1710)\",vr:\"IS\",name:\"CenterOfCircularCollimator\",vm:\"2\",version:\"DICOM\"},\"(0018,1712)\":{tag:\"(0018,1712)\",vr:\"IS\",name:\"RadiusOfCircularCollimator\",vm:\"1\",version:\"DICOM\"},\"(0018,1720)\":{tag:\"(0018,1720)\",vr:\"IS\",name:\"VerticesOfThePolygonalCollimator\",vm:\"2-2n\",version:\"DICOM\"},\"(0018,1800)\":{tag:\"(0018,1800)\",vr:\"CS\",name:\"AcquisitionTimeSynchronized\",vm:\"1\",version:\"DICOM\"},\"(0018,1801)\":{tag:\"(0018,1801)\",vr:\"SH\",name:\"TimeSource\",vm:\"1\",version:\"DICOM\"},\"(0018,1802)\":{tag:\"(0018,1802)\",vr:\"CS\",name:\"TimeDistributionProtocol\",vm:\"1\",version:\"DICOM\"},\"(0018,1803)\":{tag:\"(0018,1803)\",vr:\"LO\",name:\"NTPSourceAddress\",vm:\"1\",version:\"DICOM\"},\"(0018,2001)\":{tag:\"(0018,2001)\",vr:\"IS\",name:\"PageNumberVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,2002)\":{tag:\"(0018,2002)\",vr:\"SH\",name:\"FrameLabelVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,2003)\":{tag:\"(0018,2003)\",vr:\"DS\",name:\"FramePrimaryAngleVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,2004)\":{tag:\"(0018,2004)\",vr:\"DS\",name:\"FrameSecondaryAngleVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,2005)\":{tag:\"(0018,2005)\",vr:\"DS\",name:\"SliceLocationVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,2006)\":{tag:\"(0018,2006)\",vr:\"SH\",name:\"DisplayWindowLabelVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,2010)\":{tag:\"(0018,2010)\",vr:\"DS\",name:\"NominalScannedPixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(0018,2020)\":{tag:\"(0018,2020)\",vr:\"CS\",name:\"DigitizingDeviceTransportDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,2030)\":{tag:\"(0018,2030)\",vr:\"DS\",name:\"RotationOfScannedFilm\",vm:\"1\",version:\"DICOM\"},\"(0018,2041)\":{tag:\"(0018,2041)\",vr:\"SQ\",name:\"BiopsyTargetSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,2042)\":{tag:\"(0018,2042)\",vr:\"UI\",name:\"TargetUID\",vm:\"1\",version:\"DICOM\"},\"(0018,2043)\":{tag:\"(0018,2043)\",vr:\"FL\",name:\"LocalizingCursorPosition\",vm:\"2\",version:\"DICOM\"},\"(0018,2044)\":{tag:\"(0018,2044)\",vr:\"FL\",name:\"CalculatedTargetPosition\",vm:\"3\",version:\"DICOM\"},\"(0018,2045)\":{tag:\"(0018,2045)\",vr:\"SH\",name:\"TargetLabel\",vm:\"1\",version:\"DICOM\"},\"(0018,2046)\":{tag:\"(0018,2046)\",vr:\"FL\",name:\"DisplayedZValue\",vm:\"1\",version:\"DICOM\"},\"(0018,3100)\":{tag:\"(0018,3100)\",vr:\"CS\",name:\"IVUSAcquisition\",vm:\"1\",version:\"DICOM\"},\"(0018,3101)\":{tag:\"(0018,3101)\",vr:\"DS\",name:\"IVUSPullbackRate\",vm:\"1\",version:\"DICOM\"},\"(0018,3102)\":{tag:\"(0018,3102)\",vr:\"DS\",name:\"IVUSGatedRate\",vm:\"1\",version:\"DICOM\"},\"(0018,3103)\":{tag:\"(0018,3103)\",vr:\"IS\",name:\"IVUSPullbackStartFrameNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,3104)\":{tag:\"(0018,3104)\",vr:\"IS\",name:\"IVUSPullbackStopFrameNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,3105)\":{tag:\"(0018,3105)\",vr:\"IS\",name:\"LesionNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0018,5000)\":{tag:\"(0018,5000)\",vr:\"SH\",name:\"OutputPower\",vm:\"1-n\",version:\"DICOM\"},\"(0018,5010)\":{tag:\"(0018,5010)\",vr:\"LO\",name:\"TransducerData\",vm:\"1-n\",version:\"DICOM\"},\"(0018,5011)\":{tag:\"(0018,5011)\",vr:\"SQ\",name:\"TransducerIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,5012)\":{tag:\"(0018,5012)\",vr:\"DS\",name:\"FocusDepth\",vm:\"1\",version:\"DICOM\"},\"(0018,5020)\":{tag:\"(0018,5020)\",vr:\"LO\",name:\"ProcessingFunction\",vm:\"1\",version:\"DICOM\"},\"(0018,5022)\":{tag:\"(0018,5022)\",vr:\"DS\",name:\"MechanicalIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,5024)\":{tag:\"(0018,5024)\",vr:\"DS\",name:\"BoneThermalIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,5026)\":{tag:\"(0018,5026)\",vr:\"DS\",name:\"CranialThermalIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,5027)\":{tag:\"(0018,5027)\",vr:\"DS\",name:\"SoftTissueThermalIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,5028)\":{tag:\"(0018,5028)\",vr:\"DS\",name:\"SoftTissueFocusThermalIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,5029)\":{tag:\"(0018,5029)\",vr:\"DS\",name:\"SoftTissueSurfaceThermalIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,5050)\":{tag:\"(0018,5050)\",vr:\"IS\",name:\"DepthOfScanField\",vm:\"1\",version:\"DICOM\"},\"(0018,5100)\":{tag:\"(0018,5100)\",vr:\"CS\",name:\"PatientPosition\",vm:\"1\",version:\"DICOM\"},\"(0018,5101)\":{tag:\"(0018,5101)\",vr:\"CS\",name:\"ViewPosition\",vm:\"1\",version:\"DICOM\"},\"(0018,5104)\":{tag:\"(0018,5104)\",vr:\"SQ\",name:\"ProjectionEponymousNameCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,6000)\":{tag:\"(0018,6000)\",vr:\"DS\",name:\"Sensitivity\",vm:\"1\",version:\"DICOM\"},\"(0018,6011)\":{tag:\"(0018,6011)\",vr:\"SQ\",name:\"SequenceOfUltrasoundRegions\",vm:\"1\",version:\"DICOM\"},\"(0018,6012)\":{tag:\"(0018,6012)\",vr:\"US\",name:\"RegionSpatialFormat\",vm:\"1\",version:\"DICOM\"},\"(0018,6014)\":{tag:\"(0018,6014)\",vr:\"US\",name:\"RegionDataType\",vm:\"1\",version:\"DICOM\"},\"(0018,6016)\":{tag:\"(0018,6016)\",vr:\"UL\",name:\"RegionFlags\",vm:\"1\",version:\"DICOM\"},\"(0018,6018)\":{tag:\"(0018,6018)\",vr:\"UL\",name:\"RegionLocationMinX0\",vm:\"1\",version:\"DICOM\"},\"(0018,601A)\":{tag:\"(0018,601A)\",vr:\"UL\",name:\"RegionLocationMinY0\",vm:\"1\",version:\"DICOM\"},\"(0018,601C)\":{tag:\"(0018,601C)\",vr:\"UL\",name:\"RegionLocationMaxX1\",vm:\"1\",version:\"DICOM\"},\"(0018,601E)\":{tag:\"(0018,601E)\",vr:\"UL\",name:\"RegionLocationMaxY1\",vm:\"1\",version:\"DICOM\"},\"(0018,6020)\":{tag:\"(0018,6020)\",vr:\"SL\",name:\"ReferencePixelX0\",vm:\"1\",version:\"DICOM\"},\"(0018,6022)\":{tag:\"(0018,6022)\",vr:\"SL\",name:\"ReferencePixelY0\",vm:\"1\",version:\"DICOM\"},\"(0018,6024)\":{tag:\"(0018,6024)\",vr:\"US\",name:\"PhysicalUnitsXDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,6026)\":{tag:\"(0018,6026)\",vr:\"US\",name:\"PhysicalUnitsYDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,6028)\":{tag:\"(0018,6028)\",vr:\"FD\",name:\"ReferencePixelPhysicalValueX\",vm:\"1\",version:\"DICOM\"},\"(0018,602A)\":{tag:\"(0018,602A)\",vr:\"FD\",name:\"ReferencePixelPhysicalValueY\",vm:\"1\",version:\"DICOM\"},\"(0018,602C)\":{tag:\"(0018,602C)\",vr:\"FD\",name:\"PhysicalDeltaX\",vm:\"1\",version:\"DICOM\"},\"(0018,602E)\":{tag:\"(0018,602E)\",vr:\"FD\",name:\"PhysicalDeltaY\",vm:\"1\",version:\"DICOM\"},\"(0018,6030)\":{tag:\"(0018,6030)\",vr:\"UL\",name:\"TransducerFrequency\",vm:\"1\",version:\"DICOM\"},\"(0018,6031)\":{tag:\"(0018,6031)\",vr:\"CS\",name:\"TransducerType\",vm:\"1\",version:\"DICOM\"},\"(0018,6032)\":{tag:\"(0018,6032)\",vr:\"UL\",name:\"PulseRepetitionFrequency\",vm:\"1\",version:\"DICOM\"},\"(0018,6034)\":{tag:\"(0018,6034)\",vr:\"FD\",name:\"DopplerCorrectionAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,6036)\":{tag:\"(0018,6036)\",vr:\"FD\",name:\"SteeringAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,6039)\":{tag:\"(0018,6039)\",vr:\"SL\",name:\"DopplerSampleVolumeXPosition\",vm:\"1\",version:\"DICOM\"},\"(0018,603B)\":{tag:\"(0018,603B)\",vr:\"SL\",name:\"DopplerSampleVolumeYPosition\",vm:\"1\",version:\"DICOM\"},\"(0018,603D)\":{tag:\"(0018,603D)\",vr:\"SL\",name:\"TMLinePositionX0\",vm:\"1\",version:\"DICOM\"},\"(0018,603F)\":{tag:\"(0018,603F)\",vr:\"SL\",name:\"TMLinePositionY0\",vm:\"1\",version:\"DICOM\"},\"(0018,6041)\":{tag:\"(0018,6041)\",vr:\"SL\",name:\"TMLinePositionX1\",vm:\"1\",version:\"DICOM\"},\"(0018,6043)\":{tag:\"(0018,6043)\",vr:\"SL\",name:\"TMLinePositionY1\",vm:\"1\",version:\"DICOM\"},\"(0018,6044)\":{tag:\"(0018,6044)\",vr:\"US\",name:\"PixelComponentOrganization\",vm:\"1\",version:\"DICOM\"},\"(0018,6046)\":{tag:\"(0018,6046)\",vr:\"UL\",name:\"PixelComponentMask\",vm:\"1\",version:\"DICOM\"},\"(0018,6048)\":{tag:\"(0018,6048)\",vr:\"UL\",name:\"PixelComponentRangeStart\",vm:\"1\",version:\"DICOM\"},\"(0018,604A)\":{tag:\"(0018,604A)\",vr:\"UL\",name:\"PixelComponentRangeStop\",vm:\"1\",version:\"DICOM\"},\"(0018,604C)\":{tag:\"(0018,604C)\",vr:\"US\",name:\"PixelComponentPhysicalUnits\",vm:\"1\",version:\"DICOM\"},\"(0018,604E)\":{tag:\"(0018,604E)\",vr:\"US\",name:\"PixelComponentDataType\",vm:\"1\",version:\"DICOM\"},\"(0018,6050)\":{tag:\"(0018,6050)\",vr:\"UL\",name:\"NumberOfTableBreakPoints\",vm:\"1\",version:\"DICOM\"},\"(0018,6052)\":{tag:\"(0018,6052)\",vr:\"UL\",name:\"TableOfXBreakPoints\",vm:\"1-n\",version:\"DICOM\"},\"(0018,6054)\":{tag:\"(0018,6054)\",vr:\"FD\",name:\"TableOfYBreakPoints\",vm:\"1-n\",version:\"DICOM\"},\"(0018,6056)\":{tag:\"(0018,6056)\",vr:\"UL\",name:\"NumberOfTableEntries\",vm:\"1\",version:\"DICOM\"},\"(0018,6058)\":{tag:\"(0018,6058)\",vr:\"UL\",name:\"TableOfPixelValues\",vm:\"1-n\",version:\"DICOM\"},\"(0018,605A)\":{tag:\"(0018,605A)\",vr:\"FL\",name:\"TableOfParameterValues\",vm:\"1-n\",version:\"DICOM\"},\"(0018,6060)\":{tag:\"(0018,6060)\",vr:\"FL\",name:\"RWaveTimeVector\",vm:\"1-n\",version:\"DICOM\"},\"(0018,6070)\":{tag:\"(0018,6070)\",vr:\"US\",name:\"ActiveImageAreaOverlayGroup\",vm:\"1\",version:\"DICOM\"},\"(0018,7000)\":{tag:\"(0018,7000)\",vr:\"CS\",name:\"DetectorConditionsNominalFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,7001)\":{tag:\"(0018,7001)\",vr:\"DS\",name:\"DetectorTemperature\",vm:\"1\",version:\"DICOM\"},\"(0018,7004)\":{tag:\"(0018,7004)\",vr:\"CS\",name:\"DetectorType\",vm:\"1\",version:\"DICOM\"},\"(0018,7005)\":{tag:\"(0018,7005)\",vr:\"CS\",name:\"DetectorConfiguration\",vm:\"1\",version:\"DICOM\"},\"(0018,7006)\":{tag:\"(0018,7006)\",vr:\"LT\",name:\"DetectorDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,7008)\":{tag:\"(0018,7008)\",vr:\"LT\",name:\"DetectorMode\",vm:\"1\",version:\"DICOM\"},\"(0018,700A)\":{tag:\"(0018,700A)\",vr:\"SH\",name:\"DetectorID\",vm:\"1\",version:\"DICOM\"},\"(0018,700C)\":{tag:\"(0018,700C)\",vr:\"DA\",name:\"DateOfLastDetectorCalibration\",vm:\"1\",version:\"DICOM\"},\"(0018,700E)\":{tag:\"(0018,700E)\",vr:\"TM\",name:\"TimeOfLastDetectorCalibration\",vm:\"1\",version:\"DICOM\"},\"(0018,7010)\":{tag:\"(0018,7010)\",vr:\"IS\",name:\"ExposuresOnDetectorSinceLastCalibration\",vm:\"1\",version:\"DICOM\"},\"(0018,7011)\":{tag:\"(0018,7011)\",vr:\"IS\",name:\"ExposuresOnDetectorSinceManufactured\",vm:\"1\",version:\"DICOM\"},\"(0018,7012)\":{tag:\"(0018,7012)\",vr:\"DS\",name:\"DetectorTimeSinceLastExposure\",vm:\"1\",version:\"DICOM\"},\"(0018,7014)\":{tag:\"(0018,7014)\",vr:\"DS\",name:\"DetectorActiveTime\",vm:\"1\",version:\"DICOM\"},\"(0018,7016)\":{tag:\"(0018,7016)\",vr:\"DS\",name:\"DetectorActivationOffsetFromExposure\",vm:\"1\",version:\"DICOM\"},\"(0018,701A)\":{tag:\"(0018,701A)\",vr:\"DS\",name:\"DetectorBinning\",vm:\"2\",version:\"DICOM\"},\"(0018,7020)\":{tag:\"(0018,7020)\",vr:\"DS\",name:\"DetectorElementPhysicalSize\",vm:\"2\",version:\"DICOM\"},\"(0018,7022)\":{tag:\"(0018,7022)\",vr:\"DS\",name:\"DetectorElementSpacing\",vm:\"2\",version:\"DICOM\"},\"(0018,7024)\":{tag:\"(0018,7024)\",vr:\"CS\",name:\"DetectorActiveShape\",vm:\"1\",version:\"DICOM\"},\"(0018,7026)\":{tag:\"(0018,7026)\",vr:\"DS\",name:\"DetectorActiveDimensions\",vm:\"1-2\",version:\"DICOM\"},\"(0018,7028)\":{tag:\"(0018,7028)\",vr:\"DS\",name:\"DetectorActiveOrigin\",vm:\"2\",version:\"DICOM\"},\"(0018,702A)\":{tag:\"(0018,702A)\",vr:\"LO\",name:\"DetectorManufacturerName\",vm:\"1\",version:\"DICOM\"},\"(0018,702B)\":{tag:\"(0018,702B)\",vr:\"LO\",name:\"DetectorManufacturerModelName\",vm:\"1\",version:\"DICOM\"},\"(0018,7030)\":{tag:\"(0018,7030)\",vr:\"DS\",name:\"FieldOfViewOrigin\",vm:\"2\",version:\"DICOM\"},\"(0018,7032)\":{tag:\"(0018,7032)\",vr:\"DS\",name:\"FieldOfViewRotation\",vm:\"1\",version:\"DICOM\"},\"(0018,7034)\":{tag:\"(0018,7034)\",vr:\"CS\",name:\"FieldOfViewHorizontalFlip\",vm:\"1\",version:\"DICOM\"},\"(0018,7036)\":{tag:\"(0018,7036)\",vr:\"FL\",name:\"PixelDataAreaOriginRelativeToFOV\",vm:\"2\",version:\"DICOM\"},\"(0018,7038)\":{tag:\"(0018,7038)\",vr:\"FL\",name:\"PixelDataAreaRotationAngleRelativeToFOV\",vm:\"1\",version:\"DICOM\"},\"(0018,7040)\":{tag:\"(0018,7040)\",vr:\"LT\",name:\"GridAbsorbingMaterial\",vm:\"1\",version:\"DICOM\"},\"(0018,7041)\":{tag:\"(0018,7041)\",vr:\"LT\",name:\"GridSpacingMaterial\",vm:\"1\",version:\"DICOM\"},\"(0018,7042)\":{tag:\"(0018,7042)\",vr:\"DS\",name:\"GridThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,7044)\":{tag:\"(0018,7044)\",vr:\"DS\",name:\"GridPitch\",vm:\"1\",version:\"DICOM\"},\"(0018,7046)\":{tag:\"(0018,7046)\",vr:\"IS\",name:\"GridAspectRatio\",vm:\"2\",version:\"DICOM\"},\"(0018,7048)\":{tag:\"(0018,7048)\",vr:\"DS\",name:\"GridPeriod\",vm:\"1\",version:\"DICOM\"},\"(0018,704C)\":{tag:\"(0018,704C)\",vr:\"DS\",name:\"GridFocalDistance\",vm:\"1\",version:\"DICOM\"},\"(0018,7050)\":{tag:\"(0018,7050)\",vr:\"CS\",name:\"FilterMaterial\",vm:\"1-n\",version:\"DICOM\"},\"(0018,7052)\":{tag:\"(0018,7052)\",vr:\"DS\",name:\"FilterThicknessMinimum\",vm:\"1-n\",version:\"DICOM\"},\"(0018,7054)\":{tag:\"(0018,7054)\",vr:\"DS\",name:\"FilterThicknessMaximum\",vm:\"1-n\",version:\"DICOM\"},\"(0018,7056)\":{tag:\"(0018,7056)\",vr:\"FL\",name:\"FilterBeamPathLengthMinimum\",vm:\"1-n\",version:\"DICOM\"},\"(0018,7058)\":{tag:\"(0018,7058)\",vr:\"FL\",name:\"FilterBeamPathLengthMaximum\",vm:\"1-n\",version:\"DICOM\"},\"(0018,7060)\":{tag:\"(0018,7060)\",vr:\"CS\",name:\"ExposureControlMode\",vm:\"1\",version:\"DICOM\"},\"(0018,7062)\":{tag:\"(0018,7062)\",vr:\"LT\",name:\"ExposureControlModeDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,7064)\":{tag:\"(0018,7064)\",vr:\"CS\",name:\"ExposureStatus\",vm:\"1\",version:\"DICOM\"},\"(0018,7065)\":{tag:\"(0018,7065)\",vr:\"DS\",name:\"PhototimerSetting\",vm:\"1\",version:\"DICOM\"},\"(0018,8150)\":{tag:\"(0018,8150)\",vr:\"DS\",name:\"ExposureTimeInuS\",vm:\"1\",version:\"DICOM\"},\"(0018,8151)\":{tag:\"(0018,8151)\",vr:\"DS\",name:\"XRayTubeCurrentInuA\",vm:\"1\",version:\"DICOM\"},\"(0018,9004)\":{tag:\"(0018,9004)\",vr:\"CS\",name:\"ContentQualification\",vm:\"1\",version:\"DICOM\"},\"(0018,9005)\":{tag:\"(0018,9005)\",vr:\"SH\",name:\"PulseSequenceName\",vm:\"1\",version:\"DICOM\"},\"(0018,9006)\":{tag:\"(0018,9006)\",vr:\"SQ\",name:\"MRImagingModifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9008)\":{tag:\"(0018,9008)\",vr:\"CS\",name:\"EchoPulseSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9009)\":{tag:\"(0018,9009)\",vr:\"CS\",name:\"InversionRecovery\",vm:\"1\",version:\"DICOM\"},\"(0018,9010)\":{tag:\"(0018,9010)\",vr:\"CS\",name:\"FlowCompensation\",vm:\"1\",version:\"DICOM\"},\"(0018,9011)\":{tag:\"(0018,9011)\",vr:\"CS\",name:\"MultipleSpinEcho\",vm:\"1\",version:\"DICOM\"},\"(0018,9012)\":{tag:\"(0018,9012)\",vr:\"CS\",name:\"MultiPlanarExcitation\",vm:\"1\",version:\"DICOM\"},\"(0018,9014)\":{tag:\"(0018,9014)\",vr:\"CS\",name:\"PhaseContrast\",vm:\"1\",version:\"DICOM\"},\"(0018,9015)\":{tag:\"(0018,9015)\",vr:\"CS\",name:\"TimeOfFlightContrast\",vm:\"1\",version:\"DICOM\"},\"(0018,9016)\":{tag:\"(0018,9016)\",vr:\"CS\",name:\"Spoiling\",vm:\"1\",version:\"DICOM\"},\"(0018,9017)\":{tag:\"(0018,9017)\",vr:\"CS\",name:\"SteadyStatePulseSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9018)\":{tag:\"(0018,9018)\",vr:\"CS\",name:\"EchoPlanarPulseSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9019)\":{tag:\"(0018,9019)\",vr:\"FD\",name:\"TagAngleFirstAxis\",vm:\"1\",version:\"DICOM\"},\"(0018,9020)\":{tag:\"(0018,9020)\",vr:\"CS\",name:\"MagnetizationTransfer\",vm:\"1\",version:\"DICOM\"},\"(0018,9021)\":{tag:\"(0018,9021)\",vr:\"CS\",name:\"T2Preparation\",vm:\"1\",version:\"DICOM\"},\"(0018,9022)\":{tag:\"(0018,9022)\",vr:\"CS\",name:\"BloodSignalNulling\",vm:\"1\",version:\"DICOM\"},\"(0018,9024)\":{tag:\"(0018,9024)\",vr:\"CS\",name:\"SaturationRecovery\",vm:\"1\",version:\"DICOM\"},\"(0018,9025)\":{tag:\"(0018,9025)\",vr:\"CS\",name:\"SpectrallySelectedSuppression\",vm:\"1\",version:\"DICOM\"},\"(0018,9026)\":{tag:\"(0018,9026)\",vr:\"CS\",name:\"SpectrallySelectedExcitation\",vm:\"1\",version:\"DICOM\"},\"(0018,9027)\":{tag:\"(0018,9027)\",vr:\"CS\",name:\"SpatialPresaturation\",vm:\"1\",version:\"DICOM\"},\"(0018,9028)\":{tag:\"(0018,9028)\",vr:\"CS\",name:\"Tagging\",vm:\"1\",version:\"DICOM\"},\"(0018,9029)\":{tag:\"(0018,9029)\",vr:\"CS\",name:\"OversamplingPhase\",vm:\"1\",version:\"DICOM\"},\"(0018,9030)\":{tag:\"(0018,9030)\",vr:\"FD\",name:\"TagSpacingFirstDimension\",vm:\"1\",version:\"DICOM\"},\"(0018,9032)\":{tag:\"(0018,9032)\",vr:\"CS\",name:\"GeometryOfKSpaceTraversal\",vm:\"1\",version:\"DICOM\"},\"(0018,9033)\":{tag:\"(0018,9033)\",vr:\"CS\",name:\"SegmentedKSpaceTraversal\",vm:\"1\",version:\"DICOM\"},\"(0018,9034)\":{tag:\"(0018,9034)\",vr:\"CS\",name:\"RectilinearPhaseEncodeReordering\",vm:\"1\",version:\"DICOM\"},\"(0018,9035)\":{tag:\"(0018,9035)\",vr:\"FD\",name:\"TagThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,9036)\":{tag:\"(0018,9036)\",vr:\"CS\",name:\"PartialFourierDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,9037)\":{tag:\"(0018,9037)\",vr:\"CS\",name:\"CardiacSynchronizationTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9041)\":{tag:\"(0018,9041)\",vr:\"LO\",name:\"ReceiveCoilManufacturerName\",vm:\"1\",version:\"DICOM\"},\"(0018,9042)\":{tag:\"(0018,9042)\",vr:\"SQ\",name:\"MRReceiveCoilSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9043)\":{tag:\"(0018,9043)\",vr:\"CS\",name:\"ReceiveCoilType\",vm:\"1\",version:\"DICOM\"},\"(0018,9044)\":{tag:\"(0018,9044)\",vr:\"CS\",name:\"QuadratureReceiveCoil\",vm:\"1\",version:\"DICOM\"},\"(0018,9045)\":{tag:\"(0018,9045)\",vr:\"SQ\",name:\"MultiCoilDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9046)\":{tag:\"(0018,9046)\",vr:\"LO\",name:\"MultiCoilConfiguration\",vm:\"1\",version:\"DICOM\"},\"(0018,9047)\":{tag:\"(0018,9047)\",vr:\"SH\",name:\"MultiCoilElementName\",vm:\"1\",version:\"DICOM\"},\"(0018,9048)\":{tag:\"(0018,9048)\",vr:\"CS\",name:\"MultiCoilElementUsed\",vm:\"1\",version:\"DICOM\"},\"(0018,9049)\":{tag:\"(0018,9049)\",vr:\"SQ\",name:\"MRTransmitCoilSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9050)\":{tag:\"(0018,9050)\",vr:\"LO\",name:\"TransmitCoilManufacturerName\",vm:\"1\",version:\"DICOM\"},\"(0018,9051)\":{tag:\"(0018,9051)\",vr:\"CS\",name:\"TransmitCoilType\",vm:\"1\",version:\"DICOM\"},\"(0018,9052)\":{tag:\"(0018,9052)\",vr:\"FD\",name:\"SpectralWidth\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9053)\":{tag:\"(0018,9053)\",vr:\"FD\",name:\"ChemicalShiftReference\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9054)\":{tag:\"(0018,9054)\",vr:\"CS\",name:\"VolumeLocalizationTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9058)\":{tag:\"(0018,9058)\",vr:\"US\",name:\"MRAcquisitionFrequencyEncodingSteps\",vm:\"1\",version:\"DICOM\"},\"(0018,9059)\":{tag:\"(0018,9059)\",vr:\"CS\",name:\"Decoupling\",vm:\"1\",version:\"DICOM\"},\"(0018,9060)\":{tag:\"(0018,9060)\",vr:\"CS\",name:\"DecoupledNucleus\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9061)\":{tag:\"(0018,9061)\",vr:\"FD\",name:\"DecouplingFrequency\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9062)\":{tag:\"(0018,9062)\",vr:\"CS\",name:\"DecouplingMethod\",vm:\"1\",version:\"DICOM\"},\"(0018,9063)\":{tag:\"(0018,9063)\",vr:\"FD\",name:\"DecouplingChemicalShiftReference\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9064)\":{tag:\"(0018,9064)\",vr:\"CS\",name:\"KSpaceFiltering\",vm:\"1\",version:\"DICOM\"},\"(0018,9065)\":{tag:\"(0018,9065)\",vr:\"CS\",name:\"TimeDomainFiltering\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9066)\":{tag:\"(0018,9066)\",vr:\"US\",name:\"NumberOfZeroFills\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9067)\":{tag:\"(0018,9067)\",vr:\"CS\",name:\"BaselineCorrection\",vm:\"1\",version:\"DICOM\"},\"(0018,9069)\":{tag:\"(0018,9069)\",vr:\"FD\",name:\"ParallelReductionFactorInPlane\",vm:\"1\",version:\"DICOM\"},\"(0018,9070)\":{tag:\"(0018,9070)\",vr:\"FD\",name:\"CardiacRRIntervalSpecified\",vm:\"1\",version:\"DICOM\"},\"(0018,9073)\":{tag:\"(0018,9073)\",vr:\"FD\",name:\"AcquisitionDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,9074)\":{tag:\"(0018,9074)\",vr:\"DT\",name:\"FrameAcquisitionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9075)\":{tag:\"(0018,9075)\",vr:\"CS\",name:\"DiffusionDirectionality\",vm:\"1\",version:\"DICOM\"},\"(0018,9076)\":{tag:\"(0018,9076)\",vr:\"SQ\",name:\"DiffusionGradientDirectionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9077)\":{tag:\"(0018,9077)\",vr:\"CS\",name:\"ParallelAcquisition\",vm:\"1\",version:\"DICOM\"},\"(0018,9078)\":{tag:\"(0018,9078)\",vr:\"CS\",name:\"ParallelAcquisitionTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9079)\":{tag:\"(0018,9079)\",vr:\"FD\",name:\"InversionTimes\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9080)\":{tag:\"(0018,9080)\",vr:\"ST\",name:\"MetaboliteMapDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9081)\":{tag:\"(0018,9081)\",vr:\"CS\",name:\"PartialFourier\",vm:\"1\",version:\"DICOM\"},\"(0018,9082)\":{tag:\"(0018,9082)\",vr:\"FD\",name:\"EffectiveEchoTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9083)\":{tag:\"(0018,9083)\",vr:\"SQ\",name:\"MetaboliteMapCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9084)\":{tag:\"(0018,9084)\",vr:\"SQ\",name:\"ChemicalShiftSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9085)\":{tag:\"(0018,9085)\",vr:\"CS\",name:\"CardiacSignalSource\",vm:\"1\",version:\"DICOM\"},\"(0018,9087)\":{tag:\"(0018,9087)\",vr:\"FD\",name:\"DiffusionBValue\",vm:\"1\",version:\"DICOM\"},\"(0018,9089)\":{tag:\"(0018,9089)\",vr:\"FD\",name:\"DiffusionGradientOrientation\",vm:\"3\",version:\"DICOM\"},\"(0018,9090)\":{tag:\"(0018,9090)\",vr:\"FD\",name:\"VelocityEncodingDirection\",vm:\"3\",version:\"DICOM\"},\"(0018,9091)\":{tag:\"(0018,9091)\",vr:\"FD\",name:\"VelocityEncodingMinimumValue\",vm:\"1\",version:\"DICOM\"},\"(0018,9092)\":{tag:\"(0018,9092)\",vr:\"SQ\",name:\"VelocityEncodingAcquisitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9093)\":{tag:\"(0018,9093)\",vr:\"US\",name:\"NumberOfKSpaceTrajectories\",vm:\"1\",version:\"DICOM\"},\"(0018,9094)\":{tag:\"(0018,9094)\",vr:\"CS\",name:\"CoverageOfKSpace\",vm:\"1\",version:\"DICOM\"},\"(0018,9095)\":{tag:\"(0018,9095)\",vr:\"UL\",name:\"SpectroscopyAcquisitionPhaseRows\",vm:\"1\",version:\"DICOM\"},\"(0018,9098)\":{tag:\"(0018,9098)\",vr:\"FD\",name:\"TransmitterFrequency\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9100)\":{tag:\"(0018,9100)\",vr:\"CS\",name:\"ResonantNucleus\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9101)\":{tag:\"(0018,9101)\",vr:\"CS\",name:\"FrequencyCorrection\",vm:\"1\",version:\"DICOM\"},\"(0018,9103)\":{tag:\"(0018,9103)\",vr:\"SQ\",name:\"MRSpectroscopyFOVGeometrySequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9104)\":{tag:\"(0018,9104)\",vr:\"FD\",name:\"SlabThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,9105)\":{tag:\"(0018,9105)\",vr:\"FD\",name:\"SlabOrientation\",vm:\"3\",version:\"DICOM\"},\"(0018,9106)\":{tag:\"(0018,9106)\",vr:\"FD\",name:\"MidSlabPosition\",vm:\"3\",version:\"DICOM\"},\"(0018,9107)\":{tag:\"(0018,9107)\",vr:\"SQ\",name:\"MRSpatialSaturationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9112)\":{tag:\"(0018,9112)\",vr:\"SQ\",name:\"MRTimingAndRelatedParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9114)\":{tag:\"(0018,9114)\",vr:\"SQ\",name:\"MREchoSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9115)\":{tag:\"(0018,9115)\",vr:\"SQ\",name:\"MRModifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9117)\":{tag:\"(0018,9117)\",vr:\"SQ\",name:\"MRDiffusionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9118)\":{tag:\"(0018,9118)\",vr:\"SQ\",name:\"CardiacSynchronizationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9119)\":{tag:\"(0018,9119)\",vr:\"SQ\",name:\"MRAveragesSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9125)\":{tag:\"(0018,9125)\",vr:\"SQ\",name:\"MRFOVGeometrySequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9126)\":{tag:\"(0018,9126)\",vr:\"SQ\",name:\"VolumeLocalizationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9127)\":{tag:\"(0018,9127)\",vr:\"UL\",name:\"SpectroscopyAcquisitionDataColumns\",vm:\"1\",version:\"DICOM\"},\"(0018,9147)\":{tag:\"(0018,9147)\",vr:\"CS\",name:\"DiffusionAnisotropyType\",vm:\"1\",version:\"DICOM\"},\"(0018,9151)\":{tag:\"(0018,9151)\",vr:\"DT\",name:\"FrameReferenceDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9152)\":{tag:\"(0018,9152)\",vr:\"SQ\",name:\"MRMetaboliteMapSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9155)\":{tag:\"(0018,9155)\",vr:\"FD\",name:\"ParallelReductionFactorOutOfPlane\",vm:\"1\",version:\"DICOM\"},\"(0018,9159)\":{tag:\"(0018,9159)\",vr:\"UL\",name:\"SpectroscopyAcquisitionOutOfPlanePhaseSteps\",vm:\"1\",version:\"DICOM\"},\"(0018,9168)\":{tag:\"(0018,9168)\",vr:\"FD\",name:\"ParallelReductionFactorSecondInPlane\",vm:\"1\",version:\"DICOM\"},\"(0018,9169)\":{tag:\"(0018,9169)\",vr:\"CS\",name:\"CardiacBeatRejectionTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9170)\":{tag:\"(0018,9170)\",vr:\"CS\",name:\"RespiratoryMotionCompensationTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9171)\":{tag:\"(0018,9171)\",vr:\"CS\",name:\"RespiratorySignalSource\",vm:\"1\",version:\"DICOM\"},\"(0018,9172)\":{tag:\"(0018,9172)\",vr:\"CS\",name:\"BulkMotionCompensationTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9173)\":{tag:\"(0018,9173)\",vr:\"CS\",name:\"BulkMotionSignalSource\",vm:\"1\",version:\"DICOM\"},\"(0018,9174)\":{tag:\"(0018,9174)\",vr:\"CS\",name:\"ApplicableSafetyStandardAgency\",vm:\"1\",version:\"DICOM\"},\"(0018,9175)\":{tag:\"(0018,9175)\",vr:\"LO\",name:\"ApplicableSafetyStandardDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9176)\":{tag:\"(0018,9176)\",vr:\"SQ\",name:\"OperatingModeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9177)\":{tag:\"(0018,9177)\",vr:\"CS\",name:\"OperatingModeType\",vm:\"1\",version:\"DICOM\"},\"(0018,9178)\":{tag:\"(0018,9178)\",vr:\"CS\",name:\"OperatingMode\",vm:\"1\",version:\"DICOM\"},\"(0018,9179)\":{tag:\"(0018,9179)\",vr:\"CS\",name:\"SpecificAbsorptionRateDefinition\",vm:\"1\",version:\"DICOM\"},\"(0018,9180)\":{tag:\"(0018,9180)\",vr:\"CS\",name:\"GradientOutputType\",vm:\"1\",version:\"DICOM\"},\"(0018,9181)\":{tag:\"(0018,9181)\",vr:\"FD\",name:\"SpecificAbsorptionRateValue\",vm:\"1\",version:\"DICOM\"},\"(0018,9182)\":{tag:\"(0018,9182)\",vr:\"FD\",name:\"GradientOutput\",vm:\"1\",version:\"DICOM\"},\"(0018,9183)\":{tag:\"(0018,9183)\",vr:\"CS\",name:\"FlowCompensationDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,9184)\":{tag:\"(0018,9184)\",vr:\"FD\",name:\"TaggingDelay\",vm:\"1\",version:\"DICOM\"},\"(0018,9185)\":{tag:\"(0018,9185)\",vr:\"ST\",name:\"RespiratoryMotionCompensationTechniqueDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9186)\":{tag:\"(0018,9186)\",vr:\"SH\",name:\"RespiratorySignalSourceID\",vm:\"1\",version:\"DICOM\"},\"(0018,9197)\":{tag:\"(0018,9197)\",vr:\"SQ\",name:\"MRVelocityEncodingSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9198)\":{tag:\"(0018,9198)\",vr:\"CS\",name:\"FirstOrderPhaseCorrection\",vm:\"1\",version:\"DICOM\"},\"(0018,9199)\":{tag:\"(0018,9199)\",vr:\"CS\",name:\"WaterReferencedPhaseCorrection\",vm:\"1\",version:\"DICOM\"},\"(0018,9200)\":{tag:\"(0018,9200)\",vr:\"CS\",name:\"MRSpectroscopyAcquisitionType\",vm:\"1\",version:\"DICOM\"},\"(0018,9214)\":{tag:\"(0018,9214)\",vr:\"CS\",name:\"RespiratoryCyclePosition\",vm:\"1\",version:\"DICOM\"},\"(0018,9217)\":{tag:\"(0018,9217)\",vr:\"FD\",name:\"VelocityEncodingMaximumValue\",vm:\"1\",version:\"DICOM\"},\"(0018,9218)\":{tag:\"(0018,9218)\",vr:\"FD\",name:\"TagSpacingSecondDimension\",vm:\"1\",version:\"DICOM\"},\"(0018,9219)\":{tag:\"(0018,9219)\",vr:\"SS\",name:\"TagAngleSecondAxis\",vm:\"1\",version:\"DICOM\"},\"(0018,9220)\":{tag:\"(0018,9220)\",vr:\"FD\",name:\"FrameAcquisitionDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,9226)\":{tag:\"(0018,9226)\",vr:\"SQ\",name:\"MRImageFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9227)\":{tag:\"(0018,9227)\",vr:\"SQ\",name:\"MRSpectroscopyFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9231)\":{tag:\"(0018,9231)\",vr:\"US\",name:\"MRAcquisitionPhaseEncodingStepsInPlane\",vm:\"1\",version:\"DICOM\"},\"(0018,9232)\":{tag:\"(0018,9232)\",vr:\"US\",name:\"MRAcquisitionPhaseEncodingStepsOutOfPlane\",vm:\"1\",version:\"DICOM\"},\"(0018,9234)\":{tag:\"(0018,9234)\",vr:\"UL\",name:\"SpectroscopyAcquisitionPhaseColumns\",vm:\"1\",version:\"DICOM\"},\"(0018,9236)\":{tag:\"(0018,9236)\",vr:\"CS\",name:\"CardiacCyclePosition\",vm:\"1\",version:\"DICOM\"},\"(0018,9239)\":{tag:\"(0018,9239)\",vr:\"SQ\",name:\"SpecificAbsorptionRateSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9240)\":{tag:\"(0018,9240)\",vr:\"US\",name:\"RFEchoTrainLength\",vm:\"1\",version:\"DICOM\"},\"(0018,9241)\":{tag:\"(0018,9241)\",vr:\"US\",name:\"GradientEchoTrainLength\",vm:\"1\",version:\"DICOM\"},\"(0018,9250)\":{tag:\"(0018,9250)\",vr:\"CS\",name:\"ArterialSpinLabelingContrast\",vm:\"1\",version:\"DICOM\"},\"(0018,9251)\":{tag:\"(0018,9251)\",vr:\"SQ\",name:\"MRArterialSpinLabelingSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9252)\":{tag:\"(0018,9252)\",vr:\"LO\",name:\"ASLTechniqueDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9253)\":{tag:\"(0018,9253)\",vr:\"US\",name:\"ASLSlabNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,9254)\":{tag:\"(0018,9254)\",vr:\"FD\",name:\"ASLSlabThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,9255)\":{tag:\"(0018,9255)\",vr:\"FD\",name:\"ASLSlabOrientation\",vm:\"3\",version:\"DICOM\"},\"(0018,9256)\":{tag:\"(0018,9256)\",vr:\"FD\",name:\"ASLMidSlabPosition\",vm:\"3\",version:\"DICOM\"},\"(0018,9257)\":{tag:\"(0018,9257)\",vr:\"CS\",name:\"ASLContext\",vm:\"1\",version:\"DICOM\"},\"(0018,9258)\":{tag:\"(0018,9258)\",vr:\"UL\",name:\"ASLPulseTrainDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,9259)\":{tag:\"(0018,9259)\",vr:\"CS\",name:\"ASLCrusherFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,925A)\":{tag:\"(0018,925A)\",vr:\"FD\",name:\"ASLCrusherFlowLimit\",vm:\"1\",version:\"DICOM\"},\"(0018,925B)\":{tag:\"(0018,925B)\",vr:\"LO\",name:\"ASLCrusherDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,925C)\":{tag:\"(0018,925C)\",vr:\"CS\",name:\"ASLBolusCutoffFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,925D)\":{tag:\"(0018,925D)\",vr:\"SQ\",name:\"ASLBolusCutoffTimingSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,925E)\":{tag:\"(0018,925E)\",vr:\"LO\",name:\"ASLBolusCutoffTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,925F)\":{tag:\"(0018,925F)\",vr:\"UL\",name:\"ASLBolusCutoffDelayTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9260)\":{tag:\"(0018,9260)\",vr:\"SQ\",name:\"ASLSlabSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9295)\":{tag:\"(0018,9295)\",vr:\"FD\",name:\"ChemicalShiftMinimumIntegrationLimitInppm\",vm:\"1\",version:\"DICOM\"},\"(0018,9296)\":{tag:\"(0018,9296)\",vr:\"FD\",name:\"ChemicalShiftMaximumIntegrationLimitInppm\",vm:\"1\",version:\"DICOM\"},\"(0018,9297)\":{tag:\"(0018,9297)\",vr:\"CS\",name:\"WaterReferenceAcquisition\",vm:\"1\",version:\"DICOM\"},\"(0018,9298)\":{tag:\"(0018,9298)\",vr:\"IS\",name:\"EchoPeakPosition\",vm:\"1\",version:\"DICOM\"},\"(0018,9301)\":{tag:\"(0018,9301)\",vr:\"SQ\",name:\"CTAcquisitionTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9302)\":{tag:\"(0018,9302)\",vr:\"CS\",name:\"AcquisitionType\",vm:\"1\",version:\"DICOM\"},\"(0018,9303)\":{tag:\"(0018,9303)\",vr:\"FD\",name:\"TubeAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9304)\":{tag:\"(0018,9304)\",vr:\"SQ\",name:\"CTAcquisitionDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9305)\":{tag:\"(0018,9305)\",vr:\"FD\",name:\"RevolutionTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9306)\":{tag:\"(0018,9306)\",vr:\"FD\",name:\"SingleCollimationWidth\",vm:\"1\",version:\"DICOM\"},\"(0018,9307)\":{tag:\"(0018,9307)\",vr:\"FD\",name:\"TotalCollimationWidth\",vm:\"1\",version:\"DICOM\"},\"(0018,9308)\":{tag:\"(0018,9308)\",vr:\"SQ\",name:\"CTTableDynamicsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9309)\":{tag:\"(0018,9309)\",vr:\"FD\",name:\"TableSpeed\",vm:\"1\",version:\"DICOM\"},\"(0018,9310)\":{tag:\"(0018,9310)\",vr:\"FD\",name:\"TableFeedPerRotation\",vm:\"1\",version:\"DICOM\"},\"(0018,9311)\":{tag:\"(0018,9311)\",vr:\"FD\",name:\"SpiralPitchFactor\",vm:\"1\",version:\"DICOM\"},\"(0018,9312)\":{tag:\"(0018,9312)\",vr:\"SQ\",name:\"CTGeometrySequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9313)\":{tag:\"(0018,9313)\",vr:\"FD\",name:\"DataCollectionCenterPatient\",vm:\"3\",version:\"DICOM\"},\"(0018,9314)\":{tag:\"(0018,9314)\",vr:\"SQ\",name:\"CTReconstructionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9315)\":{tag:\"(0018,9315)\",vr:\"CS\",name:\"ReconstructionAlgorithm\",vm:\"1\",version:\"DICOM\"},\"(0018,9316)\":{tag:\"(0018,9316)\",vr:\"CS\",name:\"ConvolutionKernelGroup\",vm:\"1\",version:\"DICOM\"},\"(0018,9317)\":{tag:\"(0018,9317)\",vr:\"FD\",name:\"ReconstructionFieldOfView\",vm:\"2\",version:\"DICOM\"},\"(0018,9318)\":{tag:\"(0018,9318)\",vr:\"FD\",name:\"ReconstructionTargetCenterPatient\",vm:\"3\",version:\"DICOM\"},\"(0018,9319)\":{tag:\"(0018,9319)\",vr:\"FD\",name:\"ReconstructionAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9320)\":{tag:\"(0018,9320)\",vr:\"SH\",name:\"ImageFilter\",vm:\"1\",version:\"DICOM\"},\"(0018,9321)\":{tag:\"(0018,9321)\",vr:\"SQ\",name:\"CTExposureSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9322)\":{tag:\"(0018,9322)\",vr:\"FD\",name:\"ReconstructionPixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(0018,9323)\":{tag:\"(0018,9323)\",vr:\"CS\",name:\"ExposureModulationType\",vm:\"1\",version:\"DICOM\"},\"(0018,9324)\":{tag:\"(0018,9324)\",vr:\"FD\",name:\"EstimatedDoseSaving\",vm:\"1\",version:\"DICOM\"},\"(0018,9325)\":{tag:\"(0018,9325)\",vr:\"SQ\",name:\"CTXRayDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9326)\":{tag:\"(0018,9326)\",vr:\"SQ\",name:\"CTPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9327)\":{tag:\"(0018,9327)\",vr:\"FD\",name:\"TablePosition\",vm:\"1\",version:\"DICOM\"},\"(0018,9328)\":{tag:\"(0018,9328)\",vr:\"FD\",name:\"ExposureTimeInms\",vm:\"1\",version:\"DICOM\"},\"(0018,9329)\":{tag:\"(0018,9329)\",vr:\"SQ\",name:\"CTImageFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9330)\":{tag:\"(0018,9330)\",vr:\"FD\",name:\"XRayTubeCurrentInmA\",vm:\"1\",version:\"DICOM\"},\"(0018,9332)\":{tag:\"(0018,9332)\",vr:\"FD\",name:\"ExposureInmAs\",vm:\"1\",version:\"DICOM\"},\"(0018,9333)\":{tag:\"(0018,9333)\",vr:\"CS\",name:\"ConstantVolumeFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,9334)\":{tag:\"(0018,9334)\",vr:\"CS\",name:\"FluoroscopyFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,9335)\":{tag:\"(0018,9335)\",vr:\"FD\",name:\"DistanceSourceToDataCollectionCenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9337)\":{tag:\"(0018,9337)\",vr:\"US\",name:\"ContrastBolusAgentNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,9338)\":{tag:\"(0018,9338)\",vr:\"SQ\",name:\"ContrastBolusIngredientCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9340)\":{tag:\"(0018,9340)\",vr:\"SQ\",name:\"ContrastAdministrationProfileSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9341)\":{tag:\"(0018,9341)\",vr:\"SQ\",name:\"ContrastBolusUsageSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9342)\":{tag:\"(0018,9342)\",vr:\"CS\",name:\"ContrastBolusAgentAdministered\",vm:\"1\",version:\"DICOM\"},\"(0018,9343)\":{tag:\"(0018,9343)\",vr:\"CS\",name:\"ContrastBolusAgentDetected\",vm:\"1\",version:\"DICOM\"},\"(0018,9344)\":{tag:\"(0018,9344)\",vr:\"CS\",name:\"ContrastBolusAgentPhase\",vm:\"1\",version:\"DICOM\"},\"(0018,9345)\":{tag:\"(0018,9345)\",vr:\"FD\",name:\"CTDIvol\",vm:\"1\",version:\"DICOM\"},\"(0018,9346)\":{tag:\"(0018,9346)\",vr:\"SQ\",name:\"CTDIPhantomTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9351)\":{tag:\"(0018,9351)\",vr:\"FL\",name:\"CalciumScoringMassFactorPatient\",vm:\"1\",version:\"DICOM\"},\"(0018,9352)\":{tag:\"(0018,9352)\",vr:\"FL\",name:\"CalciumScoringMassFactorDevice\",vm:\"3\",version:\"DICOM\"},\"(0018,9353)\":{tag:\"(0018,9353)\",vr:\"FL\",name:\"EnergyWeightingFactor\",vm:\"1\",version:\"DICOM\"},\"(0018,9360)\":{tag:\"(0018,9360)\",vr:\"SQ\",name:\"CTAdditionalXRaySourceSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9361)\":{tag:\"(0018,9361)\",vr:\"CS\",name:\"MultienergyCTAcquisition\",vm:\"1\",version:\"DICOM\"},\"(0018,9362)\":{tag:\"(0018,9362)\",vr:\"SQ\",name:\"MultienergyCTAcquisitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9363)\":{tag:\"(0018,9363)\",vr:\"SQ\",name:\"MultienergyCTProcessingSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9364)\":{tag:\"(0018,9364)\",vr:\"SQ\",name:\"MultienergyCTCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9365)\":{tag:\"(0018,9365)\",vr:\"SQ\",name:\"MultienergyCTXRaySourceSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9366)\":{tag:\"(0018,9366)\",vr:\"US\",name:\"XRaySourceIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,9367)\":{tag:\"(0018,9367)\",vr:\"UC\",name:\"XRaySourceID\",vm:\"1\",version:\"DICOM\"},\"(0018,9368)\":{tag:\"(0018,9368)\",vr:\"CS\",name:\"MultienergySourceTechnique\",vm:\"1\",version:\"DICOM\"},\"(0018,9369)\":{tag:\"(0018,9369)\",vr:\"DT\",name:\"SourceStartDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,936A)\":{tag:\"(0018,936A)\",vr:\"DT\",name:\"SourceEndDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,936B)\":{tag:\"(0018,936B)\",vr:\"US\",name:\"SwitchingPhaseNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,936C)\":{tag:\"(0018,936C)\",vr:\"DS\",name:\"SwitchingPhaseNominalDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,936D)\":{tag:\"(0018,936D)\",vr:\"DS\",name:\"SwitchingPhaseTransitionDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,936E)\":{tag:\"(0018,936E)\",vr:\"DS\",name:\"EffectiveBinEnergy\",vm:\"1\",version:\"DICOM\"},\"(0018,936F)\":{tag:\"(0018,936F)\",vr:\"SQ\",name:\"MultienergyCTXRayDetectorSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9370)\":{tag:\"(0018,9370)\",vr:\"US\",name:\"XRayDetectorIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,9371)\":{tag:\"(0018,9371)\",vr:\"UC\",name:\"XRayDetectorID\",vm:\"1\",version:\"DICOM\"},\"(0018,9372)\":{tag:\"(0018,9372)\",vr:\"CS\",name:\"MultienergyDetectorType\",vm:\"1\",version:\"DICOM\"},\"(0018,9373)\":{tag:\"(0018,9373)\",vr:\"ST\",name:\"XRayDetectorLabel\",vm:\"1\",version:\"DICOM\"},\"(0018,9374)\":{tag:\"(0018,9374)\",vr:\"DS\",name:\"NominalMaxEnergy\",vm:\"1\",version:\"DICOM\"},\"(0018,9375)\":{tag:\"(0018,9375)\",vr:\"DS\",name:\"NominalMinEnergy\",vm:\"1\",version:\"DICOM\"},\"(0018,9376)\":{tag:\"(0018,9376)\",vr:\"US\",name:\"ReferencedXRayDetectorIndex\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9377)\":{tag:\"(0018,9377)\",vr:\"US\",name:\"ReferencedXRaySourceIndex\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9378)\":{tag:\"(0018,9378)\",vr:\"US\",name:\"ReferencedPathIndex\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9379)\":{tag:\"(0018,9379)\",vr:\"SQ\",name:\"MultienergyCTPathSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,937A)\":{tag:\"(0018,937A)\",vr:\"US\",name:\"MultienergyCTPathIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,937B)\":{tag:\"(0018,937B)\",vr:\"UT\",name:\"MultienergyAcquisitionDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,937C)\":{tag:\"(0018,937C)\",vr:\"FD\",name:\"MonoenergeticEnergyEquivalent\",vm:\"1\",version:\"DICOM\"},\"(0018,937D)\":{tag:\"(0018,937D)\",vr:\"SQ\",name:\"MaterialCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,937E)\":{tag:\"(0018,937E)\",vr:\"CS\",name:\"DecompositionMethod\",vm:\"1\",version:\"DICOM\"},\"(0018,937F)\":{tag:\"(0018,937F)\",vr:\"UT\",name:\"DecompositionDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9380)\":{tag:\"(0018,9380)\",vr:\"SQ\",name:\"DecompositionAlgorithmIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9381)\":{tag:\"(0018,9381)\",vr:\"SQ\",name:\"DecompositionMaterialSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9382)\":{tag:\"(0018,9382)\",vr:\"SQ\",name:\"MaterialAttenuationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9383)\":{tag:\"(0018,9383)\",vr:\"DS\",name:\"PhotonEnergy\",vm:\"1\",version:\"DICOM\"},\"(0018,9384)\":{tag:\"(0018,9384)\",vr:\"DS\",name:\"XRayMassAttenuationCoefficient\",vm:\"1\",version:\"DICOM\"},\"(0018,9401)\":{tag:\"(0018,9401)\",vr:\"SQ\",name:\"ProjectionPixelCalibrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9402)\":{tag:\"(0018,9402)\",vr:\"FL\",name:\"DistanceSourceToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9403)\":{tag:\"(0018,9403)\",vr:\"FL\",name:\"DistanceObjectToTableTop\",vm:\"1\",version:\"DICOM\"},\"(0018,9404)\":{tag:\"(0018,9404)\",vr:\"FL\",name:\"ObjectPixelSpacingInCenterOfBeam\",vm:\"2\",version:\"DICOM\"},\"(0018,9405)\":{tag:\"(0018,9405)\",vr:\"SQ\",name:\"PositionerPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9406)\":{tag:\"(0018,9406)\",vr:\"SQ\",name:\"TablePositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9407)\":{tag:\"(0018,9407)\",vr:\"SQ\",name:\"CollimatorShapeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9410)\":{tag:\"(0018,9410)\",vr:\"CS\",name:\"PlanesInAcquisition\",vm:\"1\",version:\"DICOM\"},\"(0018,9412)\":{tag:\"(0018,9412)\",vr:\"SQ\",name:\"XAXRFFrameCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9417)\":{tag:\"(0018,9417)\",vr:\"SQ\",name:\"FrameAcquisitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9420)\":{tag:\"(0018,9420)\",vr:\"CS\",name:\"XRayReceptorType\",vm:\"1\",version:\"DICOM\"},\"(0018,9423)\":{tag:\"(0018,9423)\",vr:\"LO\",name:\"AcquisitionProtocolName\",vm:\"1\",version:\"DICOM\"},\"(0018,9424)\":{tag:\"(0018,9424)\",vr:\"LT\",name:\"AcquisitionProtocolDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9425)\":{tag:\"(0018,9425)\",vr:\"CS\",name:\"ContrastBolusIngredientOpaque\",vm:\"1\",version:\"DICOM\"},\"(0018,9426)\":{tag:\"(0018,9426)\",vr:\"FL\",name:\"DistanceReceptorPlaneToDetectorHousing\",vm:\"1\",version:\"DICOM\"},\"(0018,9427)\":{tag:\"(0018,9427)\",vr:\"CS\",name:\"IntensifierActiveShape\",vm:\"1\",version:\"DICOM\"},\"(0018,9428)\":{tag:\"(0018,9428)\",vr:\"FL\",name:\"IntensifierActiveDimensions\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9429)\":{tag:\"(0018,9429)\",vr:\"FL\",name:\"PhysicalDetectorSize\",vm:\"2\",version:\"DICOM\"},\"(0018,9430)\":{tag:\"(0018,9430)\",vr:\"FL\",name:\"PositionOfIsocenterProjection\",vm:\"2\",version:\"DICOM\"},\"(0018,9432)\":{tag:\"(0018,9432)\",vr:\"SQ\",name:\"FieldOfViewSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9433)\":{tag:\"(0018,9433)\",vr:\"LO\",name:\"FieldOfViewDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9434)\":{tag:\"(0018,9434)\",vr:\"SQ\",name:\"ExposureControlSensingRegionsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9435)\":{tag:\"(0018,9435)\",vr:\"CS\",name:\"ExposureControlSensingRegionShape\",vm:\"1\",version:\"DICOM\"},\"(0018,9436)\":{tag:\"(0018,9436)\",vr:\"SS\",name:\"ExposureControlSensingRegionLeftVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,9437)\":{tag:\"(0018,9437)\",vr:\"SS\",name:\"ExposureControlSensingRegionRightVerticalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,9438)\":{tag:\"(0018,9438)\",vr:\"SS\",name:\"ExposureControlSensingRegionUpperHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,9439)\":{tag:\"(0018,9439)\",vr:\"SS\",name:\"ExposureControlSensingRegionLowerHorizontalEdge\",vm:\"1\",version:\"DICOM\"},\"(0018,9440)\":{tag:\"(0018,9440)\",vr:\"SS\",name:\"CenterOfCircularExposureControlSensingRegion\",vm:\"2\",version:\"DICOM\"},\"(0018,9441)\":{tag:\"(0018,9441)\",vr:\"US\",name:\"RadiusOfCircularExposureControlSensingRegion\",vm:\"1\",version:\"DICOM\"},\"(0018,9442)\":{tag:\"(0018,9442)\",vr:\"SS\",name:\"VerticesOfThePolygonalExposureControlSensingRegion\",vm:\"2-n\",version:\"DICOM\"},\"(0018,9447)\":{tag:\"(0018,9447)\",vr:\"FL\",name:\"ColumnAngulationPatient\",vm:\"1\",version:\"DICOM\"},\"(0018,9449)\":{tag:\"(0018,9449)\",vr:\"FL\",name:\"BeamAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9451)\":{tag:\"(0018,9451)\",vr:\"SQ\",name:\"FrameDetectorParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9452)\":{tag:\"(0018,9452)\",vr:\"FL\",name:\"CalculatedAnatomyThickness\",vm:\"1\",version:\"DICOM\"},\"(0018,9455)\":{tag:\"(0018,9455)\",vr:\"SQ\",name:\"CalibrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9456)\":{tag:\"(0018,9456)\",vr:\"SQ\",name:\"ObjectThicknessSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9457)\":{tag:\"(0018,9457)\",vr:\"CS\",name:\"PlaneIdentification\",vm:\"1\",version:\"DICOM\"},\"(0018,9461)\":{tag:\"(0018,9461)\",vr:\"FL\",name:\"FieldOfViewDimensionsInFloat\",vm:\"1-2\",version:\"DICOM\"},\"(0018,9462)\":{tag:\"(0018,9462)\",vr:\"SQ\",name:\"IsocenterReferenceSystemSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9463)\":{tag:\"(0018,9463)\",vr:\"FL\",name:\"PositionerIsocenterPrimaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9464)\":{tag:\"(0018,9464)\",vr:\"FL\",name:\"PositionerIsocenterSecondaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9465)\":{tag:\"(0018,9465)\",vr:\"FL\",name:\"PositionerIsocenterDetectorRotationAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9466)\":{tag:\"(0018,9466)\",vr:\"FL\",name:\"TableXPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9467)\":{tag:\"(0018,9467)\",vr:\"FL\",name:\"TableYPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9468)\":{tag:\"(0018,9468)\",vr:\"FL\",name:\"TableZPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9469)\":{tag:\"(0018,9469)\",vr:\"FL\",name:\"TableHorizontalRotationAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9470)\":{tag:\"(0018,9470)\",vr:\"FL\",name:\"TableHeadTiltAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9471)\":{tag:\"(0018,9471)\",vr:\"FL\",name:\"TableCradleTiltAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9472)\":{tag:\"(0018,9472)\",vr:\"SQ\",name:\"FrameDisplayShutterSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9473)\":{tag:\"(0018,9473)\",vr:\"FL\",name:\"AcquiredImageAreaDoseProduct\",vm:\"1\",version:\"DICOM\"},\"(0018,9474)\":{tag:\"(0018,9474)\",vr:\"CS\",name:\"CArmPositionerTabletopRelationship\",vm:\"1\",version:\"DICOM\"},\"(0018,9476)\":{tag:\"(0018,9476)\",vr:\"SQ\",name:\"XRayGeometrySequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9477)\":{tag:\"(0018,9477)\",vr:\"SQ\",name:\"IrradiationEventIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9504)\":{tag:\"(0018,9504)\",vr:\"SQ\",name:\"XRay3DFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9506)\":{tag:\"(0018,9506)\",vr:\"SQ\",name:\"ContributingSourcesSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9507)\":{tag:\"(0018,9507)\",vr:\"SQ\",name:\"XRay3DAcquisitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9508)\":{tag:\"(0018,9508)\",vr:\"FL\",name:\"PrimaryPositionerScanArc\",vm:\"1\",version:\"DICOM\"},\"(0018,9509)\":{tag:\"(0018,9509)\",vr:\"FL\",name:\"SecondaryPositionerScanArc\",vm:\"1\",version:\"DICOM\"},\"(0018,9510)\":{tag:\"(0018,9510)\",vr:\"FL\",name:\"PrimaryPositionerScanStartAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9511)\":{tag:\"(0018,9511)\",vr:\"FL\",name:\"SecondaryPositionerScanStartAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9514)\":{tag:\"(0018,9514)\",vr:\"FL\",name:\"PrimaryPositionerIncrement\",vm:\"1\",version:\"DICOM\"},\"(0018,9515)\":{tag:\"(0018,9515)\",vr:\"FL\",name:\"SecondaryPositionerIncrement\",vm:\"1\",version:\"DICOM\"},\"(0018,9516)\":{tag:\"(0018,9516)\",vr:\"DT\",name:\"StartAcquisitionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9517)\":{tag:\"(0018,9517)\",vr:\"DT\",name:\"EndAcquisitionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9518)\":{tag:\"(0018,9518)\",vr:\"SS\",name:\"PrimaryPositionerIncrementSign\",vm:\"1\",version:\"DICOM\"},\"(0018,9519)\":{tag:\"(0018,9519)\",vr:\"SS\",name:\"SecondaryPositionerIncrementSign\",vm:\"1\",version:\"DICOM\"},\"(0018,9524)\":{tag:\"(0018,9524)\",vr:\"LO\",name:\"ApplicationName\",vm:\"1\",version:\"DICOM\"},\"(0018,9525)\":{tag:\"(0018,9525)\",vr:\"LO\",name:\"ApplicationVersion\",vm:\"1\",version:\"DICOM\"},\"(0018,9526)\":{tag:\"(0018,9526)\",vr:\"LO\",name:\"ApplicationManufacturer\",vm:\"1\",version:\"DICOM\"},\"(0018,9527)\":{tag:\"(0018,9527)\",vr:\"CS\",name:\"AlgorithmType\",vm:\"1\",version:\"DICOM\"},\"(0018,9528)\":{tag:\"(0018,9528)\",vr:\"LO\",name:\"AlgorithmDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9530)\":{tag:\"(0018,9530)\",vr:\"SQ\",name:\"XRay3DReconstructionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9531)\":{tag:\"(0018,9531)\",vr:\"LO\",name:\"ReconstructionDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9538)\":{tag:\"(0018,9538)\",vr:\"SQ\",name:\"PerProjectionAcquisitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9541)\":{tag:\"(0018,9541)\",vr:\"SQ\",name:\"DetectorPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9542)\":{tag:\"(0018,9542)\",vr:\"SQ\",name:\"XRayAcquisitionDoseSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9543)\":{tag:\"(0018,9543)\",vr:\"FD\",name:\"XRaySourceIsocenterPrimaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9544)\":{tag:\"(0018,9544)\",vr:\"FD\",name:\"XRaySourceIsocenterSecondaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9545)\":{tag:\"(0018,9545)\",vr:\"FD\",name:\"BreastSupportIsocenterPrimaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9546)\":{tag:\"(0018,9546)\",vr:\"FD\",name:\"BreastSupportIsocenterSecondaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9547)\":{tag:\"(0018,9547)\",vr:\"FD\",name:\"BreastSupportXPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9548)\":{tag:\"(0018,9548)\",vr:\"FD\",name:\"BreastSupportYPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9549)\":{tag:\"(0018,9549)\",vr:\"FD\",name:\"BreastSupportZPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9550)\":{tag:\"(0018,9550)\",vr:\"FD\",name:\"DetectorIsocenterPrimaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9551)\":{tag:\"(0018,9551)\",vr:\"FD\",name:\"DetectorIsocenterSecondaryAngle\",vm:\"1\",version:\"DICOM\"},\"(0018,9552)\":{tag:\"(0018,9552)\",vr:\"FD\",name:\"DetectorXPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9553)\":{tag:\"(0018,9553)\",vr:\"FD\",name:\"DetectorYPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9554)\":{tag:\"(0018,9554)\",vr:\"FD\",name:\"DetectorZPositionToIsocenter\",vm:\"1\",version:\"DICOM\"},\"(0018,9555)\":{tag:\"(0018,9555)\",vr:\"SQ\",name:\"XRayGridSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9556)\":{tag:\"(0018,9556)\",vr:\"SQ\",name:\"XRayFilterSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9557)\":{tag:\"(0018,9557)\",vr:\"FD\",name:\"DetectorActiveAreaTLHCPosition\",vm:\"3\",version:\"DICOM\"},\"(0018,9558)\":{tag:\"(0018,9558)\",vr:\"FD\",name:\"DetectorActiveAreaOrientation\",vm:\"6\",version:\"DICOM\"},\"(0018,9559)\":{tag:\"(0018,9559)\",vr:\"CS\",name:\"PositionerPrimaryAngleDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,9601)\":{tag:\"(0018,9601)\",vr:\"SQ\",name:\"DiffusionBMatrixSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9602)\":{tag:\"(0018,9602)\",vr:\"FD\",name:\"DiffusionBValueXX\",vm:\"1\",version:\"DICOM\"},\"(0018,9603)\":{tag:\"(0018,9603)\",vr:\"FD\",name:\"DiffusionBValueXY\",vm:\"1\",version:\"DICOM\"},\"(0018,9604)\":{tag:\"(0018,9604)\",vr:\"FD\",name:\"DiffusionBValueXZ\",vm:\"1\",version:\"DICOM\"},\"(0018,9605)\":{tag:\"(0018,9605)\",vr:\"FD\",name:\"DiffusionBValueYY\",vm:\"1\",version:\"DICOM\"},\"(0018,9606)\":{tag:\"(0018,9606)\",vr:\"FD\",name:\"DiffusionBValueYZ\",vm:\"1\",version:\"DICOM\"},\"(0018,9607)\":{tag:\"(0018,9607)\",vr:\"FD\",name:\"DiffusionBValueZZ\",vm:\"1\",version:\"DICOM\"},\"(0018,9621)\":{tag:\"(0018,9621)\",vr:\"SQ\",name:\"FunctionalMRSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9622)\":{tag:\"(0018,9622)\",vr:\"CS\",name:\"FunctionalSettlingPhaseFramesPresent\",vm:\"1\",version:\"DICOM\"},\"(0018,9623)\":{tag:\"(0018,9623)\",vr:\"DT\",name:\"FunctionalSyncPulse\",vm:\"1\",version:\"DICOM\"},\"(0018,9624)\":{tag:\"(0018,9624)\",vr:\"CS\",name:\"SettlingPhaseFrame\",vm:\"1\",version:\"DICOM\"},\"(0018,9701)\":{tag:\"(0018,9701)\",vr:\"DT\",name:\"DecayCorrectionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9715)\":{tag:\"(0018,9715)\",vr:\"FD\",name:\"StartDensityThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9716)\":{tag:\"(0018,9716)\",vr:\"FD\",name:\"StartRelativeDensityDifferenceThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9717)\":{tag:\"(0018,9717)\",vr:\"FD\",name:\"StartCardiacTriggerCountThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9718)\":{tag:\"(0018,9718)\",vr:\"FD\",name:\"StartRespiratoryTriggerCountThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9719)\":{tag:\"(0018,9719)\",vr:\"FD\",name:\"TerminationCountsThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9720)\":{tag:\"(0018,9720)\",vr:\"FD\",name:\"TerminationDensityThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9721)\":{tag:\"(0018,9721)\",vr:\"FD\",name:\"TerminationRelativeDensityThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9722)\":{tag:\"(0018,9722)\",vr:\"FD\",name:\"TerminationTimeThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9723)\":{tag:\"(0018,9723)\",vr:\"FD\",name:\"TerminationCardiacTriggerCountThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9724)\":{tag:\"(0018,9724)\",vr:\"FD\",name:\"TerminationRespiratoryTriggerCountThreshold\",vm:\"1\",version:\"DICOM\"},\"(0018,9725)\":{tag:\"(0018,9725)\",vr:\"CS\",name:\"DetectorGeometry\",vm:\"1\",version:\"DICOM\"},\"(0018,9726)\":{tag:\"(0018,9726)\",vr:\"FD\",name:\"TransverseDetectorSeparation\",vm:\"1\",version:\"DICOM\"},\"(0018,9727)\":{tag:\"(0018,9727)\",vr:\"FD\",name:\"AxialDetectorDimension\",vm:\"1\",version:\"DICOM\"},\"(0018,9729)\":{tag:\"(0018,9729)\",vr:\"US\",name:\"RadiopharmaceuticalAgentNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,9732)\":{tag:\"(0018,9732)\",vr:\"SQ\",name:\"PETFrameAcquisitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9733)\":{tag:\"(0018,9733)\",vr:\"SQ\",name:\"PETDetectorMotionDetailsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9734)\":{tag:\"(0018,9734)\",vr:\"SQ\",name:\"PETTableDynamicsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9735)\":{tag:\"(0018,9735)\",vr:\"SQ\",name:\"PETPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9736)\":{tag:\"(0018,9736)\",vr:\"SQ\",name:\"PETFrameCorrectionFactorsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9737)\":{tag:\"(0018,9737)\",vr:\"SQ\",name:\"RadiopharmaceuticalUsageSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9738)\":{tag:\"(0018,9738)\",vr:\"CS\",name:\"AttenuationCorrectionSource\",vm:\"1\",version:\"DICOM\"},\"(0018,9739)\":{tag:\"(0018,9739)\",vr:\"US\",name:\"NumberOfIterations\",vm:\"1\",version:\"DICOM\"},\"(0018,9740)\":{tag:\"(0018,9740)\",vr:\"US\",name:\"NumberOfSubsets\",vm:\"1\",version:\"DICOM\"},\"(0018,9749)\":{tag:\"(0018,9749)\",vr:\"SQ\",name:\"PETReconstructionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9751)\":{tag:\"(0018,9751)\",vr:\"SQ\",name:\"PETFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9755)\":{tag:\"(0018,9755)\",vr:\"CS\",name:\"TimeOfFlightInformationUsed\",vm:\"1\",version:\"DICOM\"},\"(0018,9756)\":{tag:\"(0018,9756)\",vr:\"CS\",name:\"ReconstructionType\",vm:\"1\",version:\"DICOM\"},\"(0018,9758)\":{tag:\"(0018,9758)\",vr:\"CS\",name:\"DecayCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9759)\":{tag:\"(0018,9759)\",vr:\"CS\",name:\"AttenuationCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9760)\":{tag:\"(0018,9760)\",vr:\"CS\",name:\"ScatterCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9761)\":{tag:\"(0018,9761)\",vr:\"CS\",name:\"DeadTimeCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9762)\":{tag:\"(0018,9762)\",vr:\"CS\",name:\"GantryMotionCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9763)\":{tag:\"(0018,9763)\",vr:\"CS\",name:\"PatientMotionCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9764)\":{tag:\"(0018,9764)\",vr:\"CS\",name:\"CountLossNormalizationCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9765)\":{tag:\"(0018,9765)\",vr:\"CS\",name:\"RandomsCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9766)\":{tag:\"(0018,9766)\",vr:\"CS\",name:\"NonUniformRadialSamplingCorrected\",vm:\"1\",version:\"DICOM\"},\"(0018,9767)\":{tag:\"(0018,9767)\",vr:\"CS\",name:\"SensitivityCalibrated\",vm:\"1\",version:\"DICOM\"},\"(0018,9768)\":{tag:\"(0018,9768)\",vr:\"CS\",name:\"DetectorNormalizationCorrection\",vm:\"1\",version:\"DICOM\"},\"(0018,9769)\":{tag:\"(0018,9769)\",vr:\"CS\",name:\"IterativeReconstructionMethod\",vm:\"1\",version:\"DICOM\"},\"(0018,9770)\":{tag:\"(0018,9770)\",vr:\"CS\",name:\"AttenuationCorrectionTemporalRelationship\",vm:\"1\",version:\"DICOM\"},\"(0018,9771)\":{tag:\"(0018,9771)\",vr:\"SQ\",name:\"PatientPhysiologicalStateSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9772)\":{tag:\"(0018,9772)\",vr:\"SQ\",name:\"PatientPhysiologicalStateCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9801)\":{tag:\"(0018,9801)\",vr:\"FD\",name:\"DepthsOfFocus\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9803)\":{tag:\"(0018,9803)\",vr:\"SQ\",name:\"ExcludedIntervalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9804)\":{tag:\"(0018,9804)\",vr:\"DT\",name:\"ExclusionStartDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,9805)\":{tag:\"(0018,9805)\",vr:\"FD\",name:\"ExclusionDuration\",vm:\"1\",version:\"DICOM\"},\"(0018,9806)\":{tag:\"(0018,9806)\",vr:\"SQ\",name:\"USImageDescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9807)\":{tag:\"(0018,9807)\",vr:\"SQ\",name:\"ImageDataTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9808)\":{tag:\"(0018,9808)\",vr:\"CS\",name:\"DataType\",vm:\"1\",version:\"DICOM\"},\"(0018,9809)\":{tag:\"(0018,9809)\",vr:\"SQ\",name:\"TransducerScanPatternCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,980B)\":{tag:\"(0018,980B)\",vr:\"CS\",name:\"AliasedDataType\",vm:\"1\",version:\"DICOM\"},\"(0018,980C)\":{tag:\"(0018,980C)\",vr:\"CS\",name:\"PositionMeasuringDeviceUsed\",vm:\"1\",version:\"DICOM\"},\"(0018,980D)\":{tag:\"(0018,980D)\",vr:\"SQ\",name:\"TransducerGeometryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,980E)\":{tag:\"(0018,980E)\",vr:\"SQ\",name:\"TransducerBeamSteeringCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,980F)\":{tag:\"(0018,980F)\",vr:\"SQ\",name:\"TransducerApplicationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9810)\":{tag:\"(0018,9810)\",vr:\"xs\",name:\"ZeroVelocityPixelValue\",vm:\"1\",version:\"DICOM\"},\"(0018,9900)\":{tag:\"(0018,9900)\",vr:\"LO\",name:\"ReferenceLocationLabel\",vm:\"1\",version:\"DICOM\"},\"(0018,9901)\":{tag:\"(0018,9901)\",vr:\"UT\",name:\"ReferenceLocationDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9902)\":{tag:\"(0018,9902)\",vr:\"SQ\",name:\"ReferenceBasisCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9903)\":{tag:\"(0018,9903)\",vr:\"SQ\",name:\"ReferenceGeometryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9904)\":{tag:\"(0018,9904)\",vr:\"DS\",name:\"OffsetDistance\",vm:\"1\",version:\"DICOM\"},\"(0018,9905)\":{tag:\"(0018,9905)\",vr:\"CS\",name:\"OffsetDirection\",vm:\"1\",version:\"DICOM\"},\"(0018,9906)\":{tag:\"(0018,9906)\",vr:\"SQ\",name:\"PotentialScheduledProtocolCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9907)\":{tag:\"(0018,9907)\",vr:\"SQ\",name:\"PotentialRequestedProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9908)\":{tag:\"(0018,9908)\",vr:\"UC\",name:\"PotentialReasonsForProcedure\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9909)\":{tag:\"(0018,9909)\",vr:\"SQ\",name:\"PotentialReasonsForProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,990A)\":{tag:\"(0018,990A)\",vr:\"UC\",name:\"PotentialDiagnosticTasks\",vm:\"1-n\",version:\"DICOM\"},\"(0018,990B)\":{tag:\"(0018,990B)\",vr:\"SQ\",name:\"ContraindicationsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,990C)\":{tag:\"(0018,990C)\",vr:\"SQ\",name:\"ReferencedDefinedProtocolSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,990D)\":{tag:\"(0018,990D)\",vr:\"SQ\",name:\"ReferencedPerformedProtocolSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,990E)\":{tag:\"(0018,990E)\",vr:\"SQ\",name:\"PredecessorProtocolSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,990F)\":{tag:\"(0018,990F)\",vr:\"UT\",name:\"ProtocolPlanningInformation\",vm:\"1\",version:\"DICOM\"},\"(0018,9910)\":{tag:\"(0018,9910)\",vr:\"UT\",name:\"ProtocolDesignRationale\",vm:\"1\",version:\"DICOM\"},\"(0018,9911)\":{tag:\"(0018,9911)\",vr:\"SQ\",name:\"PatientSpecificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9912)\":{tag:\"(0018,9912)\",vr:\"SQ\",name:\"ModelSpecificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9913)\":{tag:\"(0018,9913)\",vr:\"SQ\",name:\"ParametersSpecificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9914)\":{tag:\"(0018,9914)\",vr:\"SQ\",name:\"InstructionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9915)\":{tag:\"(0018,9915)\",vr:\"US\",name:\"InstructionIndex\",vm:\"1\",version:\"DICOM\"},\"(0018,9916)\":{tag:\"(0018,9916)\",vr:\"LO\",name:\"InstructionText\",vm:\"1\",version:\"DICOM\"},\"(0018,9917)\":{tag:\"(0018,9917)\",vr:\"UT\",name:\"InstructionDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9918)\":{tag:\"(0018,9918)\",vr:\"CS\",name:\"InstructionPerformedFlag\",vm:\"1\",version:\"DICOM\"},\"(0018,9919)\":{tag:\"(0018,9919)\",vr:\"DT\",name:\"InstructionPerformedDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,991A)\":{tag:\"(0018,991A)\",vr:\"UT\",name:\"InstructionPerformanceComment\",vm:\"1\",version:\"DICOM\"},\"(0018,991B)\":{tag:\"(0018,991B)\",vr:\"SQ\",name:\"PatientPositioningInstructionSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,991C)\":{tag:\"(0018,991C)\",vr:\"SQ\",name:\"PositioningMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,991D)\":{tag:\"(0018,991D)\",vr:\"SQ\",name:\"PositioningLandmarkSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,991E)\":{tag:\"(0018,991E)\",vr:\"UI\",name:\"TargetFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(0018,991F)\":{tag:\"(0018,991F)\",vr:\"SQ\",name:\"AcquisitionProtocolElementSpecificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9920)\":{tag:\"(0018,9920)\",vr:\"SQ\",name:\"AcquisitionProtocolElementSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9921)\":{tag:\"(0018,9921)\",vr:\"US\",name:\"ProtocolElementNumber\",vm:\"1\",version:\"DICOM\"},\"(0018,9922)\":{tag:\"(0018,9922)\",vr:\"LO\",name:\"ProtocolElementName\",vm:\"1\",version:\"DICOM\"},\"(0018,9923)\":{tag:\"(0018,9923)\",vr:\"UT\",name:\"ProtocolElementCharacteristicsSummary\",vm:\"1\",version:\"DICOM\"},\"(0018,9924)\":{tag:\"(0018,9924)\",vr:\"UT\",name:\"ProtocolElementPurpose\",vm:\"1\",version:\"DICOM\"},\"(0018,9930)\":{tag:\"(0018,9930)\",vr:\"CS\",name:\"AcquisitionMotion\",vm:\"1\",version:\"DICOM\"},\"(0018,9931)\":{tag:\"(0018,9931)\",vr:\"SQ\",name:\"AcquisitionStartLocationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9932)\":{tag:\"(0018,9932)\",vr:\"SQ\",name:\"AcquisitionEndLocationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9933)\":{tag:\"(0018,9933)\",vr:\"SQ\",name:\"ReconstructionProtocolElementSpecificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9934)\":{tag:\"(0018,9934)\",vr:\"SQ\",name:\"ReconstructionProtocolElementSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9935)\":{tag:\"(0018,9935)\",vr:\"SQ\",name:\"StorageProtocolElementSpecificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9936)\":{tag:\"(0018,9936)\",vr:\"SQ\",name:\"StorageProtocolElementSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9937)\":{tag:\"(0018,9937)\",vr:\"LO\",name:\"RequestedSeriesDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9938)\":{tag:\"(0018,9938)\",vr:\"US\",name:\"SourceAcquisitionProtocolElementNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0018,9939)\":{tag:\"(0018,9939)\",vr:\"US\",name:\"SourceAcquisitionBeamNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0018,993A)\":{tag:\"(0018,993A)\",vr:\"US\",name:\"SourceReconstructionProtocolElementNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0018,993B)\":{tag:\"(0018,993B)\",vr:\"SQ\",name:\"ReconstructionStartLocationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,993C)\":{tag:\"(0018,993C)\",vr:\"SQ\",name:\"ReconstructionEndLocationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,993D)\":{tag:\"(0018,993D)\",vr:\"SQ\",name:\"ReconstructionAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,993E)\":{tag:\"(0018,993E)\",vr:\"SQ\",name:\"ReconstructionTargetCenterLocationSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,9941)\":{tag:\"(0018,9941)\",vr:\"UT\",name:\"ImageFilterDescription\",vm:\"1\",version:\"DICOM\"},\"(0018,9942)\":{tag:\"(0018,9942)\",vr:\"FD\",name:\"CTDIvolNotificationTrigger\",vm:\"1\",version:\"DICOM\"},\"(0018,9943)\":{tag:\"(0018,9943)\",vr:\"FD\",name:\"DLPNotificationTrigger\",vm:\"1\",version:\"DICOM\"},\"(0018,9944)\":{tag:\"(0018,9944)\",vr:\"CS\",name:\"AutoKVPSelectionType\",vm:\"1\",version:\"DICOM\"},\"(0018,9945)\":{tag:\"(0018,9945)\",vr:\"FD\",name:\"AutoKVPUpperBound\",vm:\"1\",version:\"DICOM\"},\"(0018,9946)\":{tag:\"(0018,9946)\",vr:\"FD\",name:\"AutoKVPLowerBound\",vm:\"1\",version:\"DICOM\"},\"(0018,9947)\":{tag:\"(0018,9947)\",vr:\"CS\",name:\"ProtocolDefinedPatientPosition\",vm:\"1\",version:\"DICOM\"},\"(0018,A001)\":{tag:\"(0018,A001)\",vr:\"SQ\",name:\"ContributingEquipmentSequence\",vm:\"1\",version:\"DICOM\"},\"(0018,A002)\":{tag:\"(0018,A002)\",vr:\"DT\",name:\"ContributionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0018,A003)\":{tag:\"(0018,A003)\",vr:\"ST\",name:\"ContributionDescription\",vm:\"1\",version:\"DICOM\"},\"(0020,000D)\":{tag:\"(0020,000D)\",vr:\"UI\",name:\"StudyInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0020,000E)\":{tag:\"(0020,000E)\",vr:\"UI\",name:\"SeriesInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0020,0010)\":{tag:\"(0020,0010)\",vr:\"SH\",name:\"StudyID\",vm:\"1\",version:\"DICOM\"},\"(0020,0011)\":{tag:\"(0020,0011)\",vr:\"IS\",name:\"SeriesNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,0012)\":{tag:\"(0020,0012)\",vr:\"IS\",name:\"AcquisitionNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,0013)\":{tag:\"(0020,0013)\",vr:\"IS\",name:\"InstanceNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,0019)\":{tag:\"(0020,0019)\",vr:\"IS\",name:\"ItemNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,0020)\":{tag:\"(0020,0020)\",vr:\"CS\",name:\"PatientOrientation\",vm:\"2\",version:\"DICOM\"},\"(0020,0032)\":{tag:\"(0020,0032)\",vr:\"DS\",name:\"ImagePositionPatient\",vm:\"3\",version:\"DICOM\"},\"(0020,0037)\":{tag:\"(0020,0037)\",vr:\"DS\",name:\"ImageOrientationPatient\",vm:\"6\",version:\"DICOM\"},\"(0020,0052)\":{tag:\"(0020,0052)\",vr:\"UI\",name:\"FrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(0020,0060)\":{tag:\"(0020,0060)\",vr:\"CS\",name:\"Laterality\",vm:\"1\",version:\"DICOM\"},\"(0020,0062)\":{tag:\"(0020,0062)\",vr:\"CS\",name:\"ImageLaterality\",vm:\"1\",version:\"DICOM\"},\"(0020,0100)\":{tag:\"(0020,0100)\",vr:\"IS\",name:\"TemporalPositionIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0020,0105)\":{tag:\"(0020,0105)\",vr:\"IS\",name:\"NumberOfTemporalPositions\",vm:\"1\",version:\"DICOM\"},\"(0020,0110)\":{tag:\"(0020,0110)\",vr:\"DS\",name:\"TemporalResolution\",vm:\"1\",version:\"DICOM\"},\"(0020,0200)\":{tag:\"(0020,0200)\",vr:\"UI\",name:\"SynchronizationFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(0020,0242)\":{tag:\"(0020,0242)\",vr:\"UI\",name:\"SOPInstanceUIDOfConcatenationSource\",vm:\"1\",version:\"DICOM\"},\"(0020,1002)\":{tag:\"(0020,1002)\",vr:\"IS\",name:\"ImagesInAcquisition\",vm:\"1\",version:\"DICOM\"},\"(0020,103F)\":{tag:\"(0020,103F)\",vr:\"LO\",name:\"TargetPositionReferenceIndicator\",vm:\"1\",version:\"DICOM\"},\"(0020,1040)\":{tag:\"(0020,1040)\",vr:\"LO\",name:\"PositionReferenceIndicator\",vm:\"1\",version:\"DICOM\"},\"(0020,1041)\":{tag:\"(0020,1041)\",vr:\"DS\",name:\"SliceLocation\",vm:\"1\",version:\"DICOM\"},\"(0020,1200)\":{tag:\"(0020,1200)\",vr:\"IS\",name:\"NumberOfPatientRelatedStudies\",vm:\"1\",version:\"DICOM\"},\"(0020,1202)\":{tag:\"(0020,1202)\",vr:\"IS\",name:\"NumberOfPatientRelatedSeries\",vm:\"1\",version:\"DICOM\"},\"(0020,1204)\":{tag:\"(0020,1204)\",vr:\"IS\",name:\"NumberOfPatientRelatedInstances\",vm:\"1\",version:\"DICOM\"},\"(0020,1206)\":{tag:\"(0020,1206)\",vr:\"IS\",name:\"NumberOfStudyRelatedSeries\",vm:\"1\",version:\"DICOM\"},\"(0020,1208)\":{tag:\"(0020,1208)\",vr:\"IS\",name:\"NumberOfStudyRelatedInstances\",vm:\"1\",version:\"DICOM\"},\"(0020,1209)\":{tag:\"(0020,1209)\",vr:\"IS\",name:\"NumberOfSeriesRelatedInstances\",vm:\"1\",version:\"DICOM\"},\"(0020,4000)\":{tag:\"(0020,4000)\",vr:\"LT\",name:\"ImageComments\",vm:\"1\",version:\"DICOM\"},\"(0020,9056)\":{tag:\"(0020,9056)\",vr:\"SH\",name:\"StackID\",vm:\"1\",version:\"DICOM\"},\"(0020,9057)\":{tag:\"(0020,9057)\",vr:\"UL\",name:\"InStackPositionNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,9071)\":{tag:\"(0020,9071)\",vr:\"SQ\",name:\"FrameAnatomySequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9072)\":{tag:\"(0020,9072)\",vr:\"CS\",name:\"FrameLaterality\",vm:\"1\",version:\"DICOM\"},\"(0020,9111)\":{tag:\"(0020,9111)\",vr:\"SQ\",name:\"FrameContentSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9113)\":{tag:\"(0020,9113)\",vr:\"SQ\",name:\"PlanePositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9116)\":{tag:\"(0020,9116)\",vr:\"SQ\",name:\"PlaneOrientationSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9128)\":{tag:\"(0020,9128)\",vr:\"UL\",name:\"TemporalPositionIndex\",vm:\"1\",version:\"DICOM\"},\"(0020,9153)\":{tag:\"(0020,9153)\",vr:\"FD\",name:\"NominalCardiacTriggerDelayTime\",vm:\"1\",version:\"DICOM\"},\"(0020,9154)\":{tag:\"(0020,9154)\",vr:\"FL\",name:\"NominalCardiacTriggerTimePriorToRPeak\",vm:\"1\",version:\"DICOM\"},\"(0020,9155)\":{tag:\"(0020,9155)\",vr:\"FL\",name:\"ActualCardiacTriggerTimePriorToRPeak\",vm:\"1\",version:\"DICOM\"},\"(0020,9156)\":{tag:\"(0020,9156)\",vr:\"US\",name:\"FrameAcquisitionNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,9157)\":{tag:\"(0020,9157)\",vr:\"UL\",name:\"DimensionIndexValues\",vm:\"1-n\",version:\"DICOM\"},\"(0020,9158)\":{tag:\"(0020,9158)\",vr:\"LT\",name:\"FrameComments\",vm:\"1\",version:\"DICOM\"},\"(0020,9161)\":{tag:\"(0020,9161)\",vr:\"UI\",name:\"ConcatenationUID\",vm:\"1\",version:\"DICOM\"},\"(0020,9162)\":{tag:\"(0020,9162)\",vr:\"US\",name:\"InConcatenationNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,9163)\":{tag:\"(0020,9163)\",vr:\"US\",name:\"InConcatenationTotalNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,9164)\":{tag:\"(0020,9164)\",vr:\"UI\",name:\"DimensionOrganizationUID\",vm:\"1\",version:\"DICOM\"},\"(0020,9165)\":{tag:\"(0020,9165)\",vr:\"AT\",name:\"DimensionIndexPointer\",vm:\"1\",version:\"DICOM\"},\"(0020,9167)\":{tag:\"(0020,9167)\",vr:\"AT\",name:\"FunctionalGroupPointer\",vm:\"1\",version:\"DICOM\"},\"(0020,9170)\":{tag:\"(0020,9170)\",vr:\"SQ\",name:\"UnassignedSharedConvertedAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9171)\":{tag:\"(0020,9171)\",vr:\"SQ\",name:\"UnassignedPerFrameConvertedAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9172)\":{tag:\"(0020,9172)\",vr:\"SQ\",name:\"ConversionSourceAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9213)\":{tag:\"(0020,9213)\",vr:\"LO\",name:\"DimensionIndexPrivateCreator\",vm:\"1\",version:\"DICOM\"},\"(0020,9221)\":{tag:\"(0020,9221)\",vr:\"SQ\",name:\"DimensionOrganizationSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9222)\":{tag:\"(0020,9222)\",vr:\"SQ\",name:\"DimensionIndexSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9228)\":{tag:\"(0020,9228)\",vr:\"UL\",name:\"ConcatenationFrameOffsetNumber\",vm:\"1\",version:\"DICOM\"},\"(0020,9238)\":{tag:\"(0020,9238)\",vr:\"LO\",name:\"FunctionalGroupPrivateCreator\",vm:\"1\",version:\"DICOM\"},\"(0020,9241)\":{tag:\"(0020,9241)\",vr:\"FL\",name:\"NominalPercentageOfCardiacPhase\",vm:\"1\",version:\"DICOM\"},\"(0020,9245)\":{tag:\"(0020,9245)\",vr:\"FL\",name:\"NominalPercentageOfRespiratoryPhase\",vm:\"1\",version:\"DICOM\"},\"(0020,9246)\":{tag:\"(0020,9246)\",vr:\"FL\",name:\"StartingRespiratoryAmplitude\",vm:\"1\",version:\"DICOM\"},\"(0020,9247)\":{tag:\"(0020,9247)\",vr:\"CS\",name:\"StartingRespiratoryPhase\",vm:\"1\",version:\"DICOM\"},\"(0020,9248)\":{tag:\"(0020,9248)\",vr:\"FL\",name:\"EndingRespiratoryAmplitude\",vm:\"1\",version:\"DICOM\"},\"(0020,9249)\":{tag:\"(0020,9249)\",vr:\"CS\",name:\"EndingRespiratoryPhase\",vm:\"1\",version:\"DICOM\"},\"(0020,9250)\":{tag:\"(0020,9250)\",vr:\"CS\",name:\"RespiratoryTriggerType\",vm:\"1\",version:\"DICOM\"},\"(0020,9251)\":{tag:\"(0020,9251)\",vr:\"FD\",name:\"RRIntervalTimeNominal\",vm:\"1\",version:\"DICOM\"},\"(0020,9252)\":{tag:\"(0020,9252)\",vr:\"FD\",name:\"ActualCardiacTriggerDelayTime\",vm:\"1\",version:\"DICOM\"},\"(0020,9253)\":{tag:\"(0020,9253)\",vr:\"SQ\",name:\"RespiratorySynchronizationSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9254)\":{tag:\"(0020,9254)\",vr:\"FD\",name:\"RespiratoryIntervalTime\",vm:\"1\",version:\"DICOM\"},\"(0020,9255)\":{tag:\"(0020,9255)\",vr:\"FD\",name:\"NominalRespiratoryTriggerDelayTime\",vm:\"1\",version:\"DICOM\"},\"(0020,9256)\":{tag:\"(0020,9256)\",vr:\"FD\",name:\"RespiratoryTriggerDelayThreshold\",vm:\"1\",version:\"DICOM\"},\"(0020,9257)\":{tag:\"(0020,9257)\",vr:\"FD\",name:\"ActualRespiratoryTriggerDelayTime\",vm:\"1\",version:\"DICOM\"},\"(0020,9301)\":{tag:\"(0020,9301)\",vr:\"FD\",name:\"ImagePositionVolume\",vm:\"3\",version:\"DICOM\"},\"(0020,9302)\":{tag:\"(0020,9302)\",vr:\"FD\",name:\"ImageOrientationVolume\",vm:\"6\",version:\"DICOM\"},\"(0020,9307)\":{tag:\"(0020,9307)\",vr:\"CS\",name:\"UltrasoundAcquisitionGeometry\",vm:\"1\",version:\"DICOM\"},\"(0020,9308)\":{tag:\"(0020,9308)\",vr:\"FD\",name:\"ApexPosition\",vm:\"3\",version:\"DICOM\"},\"(0020,9309)\":{tag:\"(0020,9309)\",vr:\"FD\",name:\"VolumeToTransducerMappingMatrix\",vm:\"16\",version:\"DICOM\"},\"(0020,930A)\":{tag:\"(0020,930A)\",vr:\"FD\",name:\"VolumeToTableMappingMatrix\",vm:\"16\",version:\"DICOM\"},\"(0020,930B)\":{tag:\"(0020,930B)\",vr:\"CS\",name:\"VolumeToTransducerRelationship\",vm:\"1\",version:\"DICOM\"},\"(0020,930C)\":{tag:\"(0020,930C)\",vr:\"CS\",name:\"PatientFrameOfReferenceSource\",vm:\"1\",version:\"DICOM\"},\"(0020,930D)\":{tag:\"(0020,930D)\",vr:\"FD\",name:\"TemporalPositionTimeOffset\",vm:\"1\",version:\"DICOM\"},\"(0020,930E)\":{tag:\"(0020,930E)\",vr:\"SQ\",name:\"PlanePositionVolumeSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,930F)\":{tag:\"(0020,930F)\",vr:\"SQ\",name:\"PlaneOrientationVolumeSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9310)\":{tag:\"(0020,9310)\",vr:\"SQ\",name:\"TemporalPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9311)\":{tag:\"(0020,9311)\",vr:\"CS\",name:\"DimensionOrganizationType\",vm:\"1\",version:\"DICOM\"},\"(0020,9312)\":{tag:\"(0020,9312)\",vr:\"UI\",name:\"VolumeFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(0020,9313)\":{tag:\"(0020,9313)\",vr:\"UI\",name:\"TableFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(0020,9421)\":{tag:\"(0020,9421)\",vr:\"LO\",name:\"DimensionDescriptionLabel\",vm:\"1\",version:\"DICOM\"},\"(0020,9450)\":{tag:\"(0020,9450)\",vr:\"SQ\",name:\"PatientOrientationInFrameSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9453)\":{tag:\"(0020,9453)\",vr:\"LO\",name:\"FrameLabel\",vm:\"1\",version:\"DICOM\"},\"(0020,9518)\":{tag:\"(0020,9518)\",vr:\"US\",name:\"AcquisitionIndex\",vm:\"1-n\",version:\"DICOM\"},\"(0020,9529)\":{tag:\"(0020,9529)\",vr:\"SQ\",name:\"ContributingSOPInstancesReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0020,9536)\":{tag:\"(0020,9536)\",vr:\"US\",name:\"ReconstructionIndex\",vm:\"1\",version:\"DICOM\"},\"(0022,0001)\":{tag:\"(0022,0001)\",vr:\"US\",name:\"LightPathFilterPassThroughWavelength\",vm:\"1\",version:\"DICOM\"},\"(0022,0002)\":{tag:\"(0022,0002)\",vr:\"US\",name:\"LightPathFilterPassBand\",vm:\"2\",version:\"DICOM\"},\"(0022,0003)\":{tag:\"(0022,0003)\",vr:\"US\",name:\"ImagePathFilterPassThroughWavelength\",vm:\"1\",version:\"DICOM\"},\"(0022,0004)\":{tag:\"(0022,0004)\",vr:\"US\",name:\"ImagePathFilterPassBand\",vm:\"2\",version:\"DICOM\"},\"(0022,0005)\":{tag:\"(0022,0005)\",vr:\"CS\",name:\"PatientEyeMovementCommanded\",vm:\"1\",version:\"DICOM\"},\"(0022,0006)\":{tag:\"(0022,0006)\",vr:\"SQ\",name:\"PatientEyeMovementCommandCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0007)\":{tag:\"(0022,0007)\",vr:\"FL\",name:\"SphericalLensPower\",vm:\"1\",version:\"DICOM\"},\"(0022,0008)\":{tag:\"(0022,0008)\",vr:\"FL\",name:\"CylinderLensPower\",vm:\"1\",version:\"DICOM\"},\"(0022,0009)\":{tag:\"(0022,0009)\",vr:\"FL\",name:\"CylinderAxis\",vm:\"1\",version:\"DICOM\"},\"(0022,000A)\":{tag:\"(0022,000A)\",vr:\"FL\",name:\"EmmetropicMagnification\",vm:\"1\",version:\"DICOM\"},\"(0022,000B)\":{tag:\"(0022,000B)\",vr:\"FL\",name:\"IntraOcularPressure\",vm:\"1\",version:\"DICOM\"},\"(0022,000C)\":{tag:\"(0022,000C)\",vr:\"FL\",name:\"HorizontalFieldOfView\",vm:\"1\",version:\"DICOM\"},\"(0022,000D)\":{tag:\"(0022,000D)\",vr:\"CS\",name:\"PupilDilated\",vm:\"1\",version:\"DICOM\"},\"(0022,000E)\":{tag:\"(0022,000E)\",vr:\"FL\",name:\"DegreeOfDilation\",vm:\"1\",version:\"DICOM\"},\"(0022,0010)\":{tag:\"(0022,0010)\",vr:\"FL\",name:\"StereoBaselineAngle\",vm:\"1\",version:\"DICOM\"},\"(0022,0011)\":{tag:\"(0022,0011)\",vr:\"FL\",name:\"StereoBaselineDisplacement\",vm:\"1\",version:\"DICOM\"},\"(0022,0012)\":{tag:\"(0022,0012)\",vr:\"FL\",name:\"StereoHorizontalPixelOffset\",vm:\"1\",version:\"DICOM\"},\"(0022,0013)\":{tag:\"(0022,0013)\",vr:\"FL\",name:\"StereoVerticalPixelOffset\",vm:\"1\",version:\"DICOM\"},\"(0022,0014)\":{tag:\"(0022,0014)\",vr:\"FL\",name:\"StereoRotation\",vm:\"1\",version:\"DICOM\"},\"(0022,0015)\":{tag:\"(0022,0015)\",vr:\"SQ\",name:\"AcquisitionDeviceTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0016)\":{tag:\"(0022,0016)\",vr:\"SQ\",name:\"IlluminationTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0017)\":{tag:\"(0022,0017)\",vr:\"SQ\",name:\"LightPathFilterTypeStackCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0018)\":{tag:\"(0022,0018)\",vr:\"SQ\",name:\"ImagePathFilterTypeStackCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0019)\":{tag:\"(0022,0019)\",vr:\"SQ\",name:\"LensesCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,001A)\":{tag:\"(0022,001A)\",vr:\"SQ\",name:\"ChannelDescriptionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,001B)\":{tag:\"(0022,001B)\",vr:\"SQ\",name:\"RefractiveStateSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,001C)\":{tag:\"(0022,001C)\",vr:\"SQ\",name:\"MydriaticAgentCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,001D)\":{tag:\"(0022,001D)\",vr:\"SQ\",name:\"RelativeImagePositionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,001E)\":{tag:\"(0022,001E)\",vr:\"FL\",name:\"CameraAngleOfView\",vm:\"1\",version:\"DICOM\"},\"(0022,0020)\":{tag:\"(0022,0020)\",vr:\"SQ\",name:\"StereoPairsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0021)\":{tag:\"(0022,0021)\",vr:\"SQ\",name:\"LeftImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0022)\":{tag:\"(0022,0022)\",vr:\"SQ\",name:\"RightImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0028)\":{tag:\"(0022,0028)\",vr:\"CS\",name:\"StereoPairsPresent\",vm:\"1\",version:\"DICOM\"},\"(0022,0030)\":{tag:\"(0022,0030)\",vr:\"FL\",name:\"AxialLengthOfTheEye\",vm:\"1\",version:\"DICOM\"},\"(0022,0031)\":{tag:\"(0022,0031)\",vr:\"SQ\",name:\"OphthalmicFrameLocationSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0032)\":{tag:\"(0022,0032)\",vr:\"FL\",name:\"ReferenceCoordinates\",vm:\"2-2n\",version:\"DICOM\"},\"(0022,0035)\":{tag:\"(0022,0035)\",vr:\"FL\",name:\"DepthSpatialResolution\",vm:\"1\",version:\"DICOM\"},\"(0022,0036)\":{tag:\"(0022,0036)\",vr:\"FL\",name:\"MaximumDepthDistortion\",vm:\"1\",version:\"DICOM\"},\"(0022,0037)\":{tag:\"(0022,0037)\",vr:\"FL\",name:\"AlongScanSpatialResolution\",vm:\"1\",version:\"DICOM\"},\"(0022,0038)\":{tag:\"(0022,0038)\",vr:\"FL\",name:\"MaximumAlongScanDistortion\",vm:\"1\",version:\"DICOM\"},\"(0022,0039)\":{tag:\"(0022,0039)\",vr:\"CS\",name:\"OphthalmicImageOrientation\",vm:\"1\",version:\"DICOM\"},\"(0022,0041)\":{tag:\"(0022,0041)\",vr:\"FL\",name:\"DepthOfTransverseImage\",vm:\"1\",version:\"DICOM\"},\"(0022,0042)\":{tag:\"(0022,0042)\",vr:\"SQ\",name:\"MydriaticAgentConcentrationUnitsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,0048)\":{tag:\"(0022,0048)\",vr:\"FL\",name:\"AcrossScanSpatialResolution\",vm:\"1\",version:\"DICOM\"},\"(0022,0049)\":{tag:\"(0022,0049)\",vr:\"FL\",name:\"MaximumAcrossScanDistortion\",vm:\"1\",version:\"DICOM\"},\"(0022,004E)\":{tag:\"(0022,004E)\",vr:\"DS\",name:\"MydriaticAgentConcentration\",vm:\"1\",version:\"DICOM\"},\"(0022,0055)\":{tag:\"(0022,0055)\",vr:\"FL\",name:\"IlluminationWaveLength\",vm:\"1\",version:\"DICOM\"},\"(0022,0056)\":{tag:\"(0022,0056)\",vr:\"FL\",name:\"IlluminationPower\",vm:\"1\",version:\"DICOM\"},\"(0022,0057)\":{tag:\"(0022,0057)\",vr:\"FL\",name:\"IlluminationBandwidth\",vm:\"1\",version:\"DICOM\"},\"(0022,0058)\":{tag:\"(0022,0058)\",vr:\"SQ\",name:\"MydriaticAgentSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1007)\":{tag:\"(0022,1007)\",vr:\"SQ\",name:\"OphthalmicAxialMeasurementsRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1008)\":{tag:\"(0022,1008)\",vr:\"SQ\",name:\"OphthalmicAxialMeasurementsLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1009)\":{tag:\"(0022,1009)\",vr:\"CS\",name:\"OphthalmicAxialMeasurementsDeviceType\",vm:\"1\",version:\"DICOM\"},\"(0022,1010)\":{tag:\"(0022,1010)\",vr:\"CS\",name:\"OphthalmicAxialLengthMeasurementsType\",vm:\"1\",version:\"DICOM\"},\"(0022,1012)\":{tag:\"(0022,1012)\",vr:\"SQ\",name:\"OphthalmicAxialLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1019)\":{tag:\"(0022,1019)\",vr:\"FL\",name:\"OphthalmicAxialLength\",vm:\"1\",version:\"DICOM\"},\"(0022,1024)\":{tag:\"(0022,1024)\",vr:\"SQ\",name:\"LensStatusCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1025)\":{tag:\"(0022,1025)\",vr:\"SQ\",name:\"VitreousStatusCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1028)\":{tag:\"(0022,1028)\",vr:\"SQ\",name:\"IOLFormulaCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1029)\":{tag:\"(0022,1029)\",vr:\"LO\",name:\"IOLFormulaDetail\",vm:\"1\",version:\"DICOM\"},\"(0022,1033)\":{tag:\"(0022,1033)\",vr:\"FL\",name:\"KeratometerIndex\",vm:\"1\",version:\"DICOM\"},\"(0022,1035)\":{tag:\"(0022,1035)\",vr:\"SQ\",name:\"SourceOfOphthalmicAxialLengthCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1036)\":{tag:\"(0022,1036)\",vr:\"SQ\",name:\"SourceOfCornealSizeDataCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1037)\":{tag:\"(0022,1037)\",vr:\"FL\",name:\"TargetRefraction\",vm:\"1\",version:\"DICOM\"},\"(0022,1039)\":{tag:\"(0022,1039)\",vr:\"CS\",name:\"RefractiveProcedureOccurred\",vm:\"1\",version:\"DICOM\"},\"(0022,1040)\":{tag:\"(0022,1040)\",vr:\"SQ\",name:\"RefractiveSurgeryTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1044)\":{tag:\"(0022,1044)\",vr:\"SQ\",name:\"OphthalmicUltrasoundMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1045)\":{tag:\"(0022,1045)\",vr:\"SQ\",name:\"SurgicallyInducedAstigmatismSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1046)\":{tag:\"(0022,1046)\",vr:\"CS\",name:\"TypeOfOpticalCorrection\",vm:\"1\",version:\"DICOM\"},\"(0022,1047)\":{tag:\"(0022,1047)\",vr:\"SQ\",name:\"ToricIOLPowerSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1048)\":{tag:\"(0022,1048)\",vr:\"SQ\",name:\"PredictedToricErrorSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1049)\":{tag:\"(0022,1049)\",vr:\"CS\",name:\"PreSelectedForImplantation\",vm:\"1\",version:\"DICOM\"},\"(0022,104A)\":{tag:\"(0022,104A)\",vr:\"SQ\",name:\"ToricIOLPowerForExactEmmetropiaSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,104B)\":{tag:\"(0022,104B)\",vr:\"SQ\",name:\"ToricIOLPowerForExactTargetRefractionSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1050)\":{tag:\"(0022,1050)\",vr:\"SQ\",name:\"OphthalmicAxialLengthMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1053)\":{tag:\"(0022,1053)\",vr:\"FL\",name:\"IOLPower\",vm:\"1\",version:\"DICOM\"},\"(0022,1054)\":{tag:\"(0022,1054)\",vr:\"FL\",name:\"PredictedRefractiveError\",vm:\"1\",version:\"DICOM\"},\"(0022,1059)\":{tag:\"(0022,1059)\",vr:\"FL\",name:\"OphthalmicAxialLengthVelocity\",vm:\"1\",version:\"DICOM\"},\"(0022,1065)\":{tag:\"(0022,1065)\",vr:\"LO\",name:\"LensStatusDescription\",vm:\"1\",version:\"DICOM\"},\"(0022,1066)\":{tag:\"(0022,1066)\",vr:\"LO\",name:\"VitreousStatusDescription\",vm:\"1\",version:\"DICOM\"},\"(0022,1090)\":{tag:\"(0022,1090)\",vr:\"SQ\",name:\"IOLPowerSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1092)\":{tag:\"(0022,1092)\",vr:\"SQ\",name:\"LensConstantSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1093)\":{tag:\"(0022,1093)\",vr:\"LO\",name:\"IOLManufacturer\",vm:\"1\",version:\"DICOM\"},\"(0022,1095)\":{tag:\"(0022,1095)\",vr:\"LO\",name:\"ImplantName\",vm:\"1\",version:\"DICOM\"},\"(0022,1096)\":{tag:\"(0022,1096)\",vr:\"SQ\",name:\"KeratometryMeasurementTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1097)\":{tag:\"(0022,1097)\",vr:\"LO\",name:\"ImplantPartNumber\",vm:\"1\",version:\"DICOM\"},\"(0022,1100)\":{tag:\"(0022,1100)\",vr:\"SQ\",name:\"ReferencedOphthalmicAxialMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1101)\":{tag:\"(0022,1101)\",vr:\"SQ\",name:\"OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1103)\":{tag:\"(0022,1103)\",vr:\"SQ\",name:\"RefractiveErrorBeforeRefractiveSurgeryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1121)\":{tag:\"(0022,1121)\",vr:\"FL\",name:\"IOLPowerForExactEmmetropia\",vm:\"1\",version:\"DICOM\"},\"(0022,1122)\":{tag:\"(0022,1122)\",vr:\"FL\",name:\"IOLPowerForExactTargetRefraction\",vm:\"1\",version:\"DICOM\"},\"(0022,1125)\":{tag:\"(0022,1125)\",vr:\"SQ\",name:\"AnteriorChamberDepthDefinitionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1127)\":{tag:\"(0022,1127)\",vr:\"SQ\",name:\"LensThicknessSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1128)\":{tag:\"(0022,1128)\",vr:\"SQ\",name:\"AnteriorChamberDepthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,112A)\":{tag:\"(0022,112A)\",vr:\"SQ\",name:\"CalculationCommentSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,112B)\":{tag:\"(0022,112B)\",vr:\"CS\",name:\"CalculationCommentType\",vm:\"1\",version:\"DICOM\"},\"(0022,112C)\":{tag:\"(0022,112C)\",vr:\"LT\",name:\"CalculationComment\",vm:\"1\",version:\"DICOM\"},\"(0022,1130)\":{tag:\"(0022,1130)\",vr:\"FL\",name:\"LensThickness\",vm:\"1\",version:\"DICOM\"},\"(0022,1131)\":{tag:\"(0022,1131)\",vr:\"FL\",name:\"AnteriorChamberDepth\",vm:\"1\",version:\"DICOM\"},\"(0022,1132)\":{tag:\"(0022,1132)\",vr:\"SQ\",name:\"SourceOfLensThicknessDataCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1133)\":{tag:\"(0022,1133)\",vr:\"SQ\",name:\"SourceOfAnteriorChamberDepthDataCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1134)\":{tag:\"(0022,1134)\",vr:\"SQ\",name:\"SourceOfRefractiveMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1135)\":{tag:\"(0022,1135)\",vr:\"SQ\",name:\"SourceOfRefractiveMeasurementsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1140)\":{tag:\"(0022,1140)\",vr:\"CS\",name:\"OphthalmicAxialLengthMeasurementModified\",vm:\"1\",version:\"DICOM\"},\"(0022,1150)\":{tag:\"(0022,1150)\",vr:\"SQ\",name:\"OphthalmicAxialLengthDataSourceCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1155)\":{tag:\"(0022,1155)\",vr:\"FL\",name:\"SignalToNoiseRatio\",vm:\"1\",version:\"DICOM\"},\"(0022,1159)\":{tag:\"(0022,1159)\",vr:\"LO\",name:\"OphthalmicAxialLengthDataSourceDescription\",vm:\"1\",version:\"DICOM\"},\"(0022,1210)\":{tag:\"(0022,1210)\",vr:\"SQ\",name:\"OphthalmicAxialLengthMeasurementsTotalLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1211)\":{tag:\"(0022,1211)\",vr:\"SQ\",name:\"OphthalmicAxialLengthMeasurementsSegmentalLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1212)\":{tag:\"(0022,1212)\",vr:\"SQ\",name:\"OphthalmicAxialLengthMeasurementsLengthSummationSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1220)\":{tag:\"(0022,1220)\",vr:\"SQ\",name:\"UltrasoundOphthalmicAxialLengthMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1225)\":{tag:\"(0022,1225)\",vr:\"SQ\",name:\"OpticalOphthalmicAxialLengthMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1230)\":{tag:\"(0022,1230)\",vr:\"SQ\",name:\"UltrasoundSelectedOphthalmicAxialLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1250)\":{tag:\"(0022,1250)\",vr:\"SQ\",name:\"OphthalmicAxialLengthSelectionMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1255)\":{tag:\"(0022,1255)\",vr:\"SQ\",name:\"OpticalSelectedOphthalmicAxialLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1257)\":{tag:\"(0022,1257)\",vr:\"SQ\",name:\"SelectedSegmentalOphthalmicAxialLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1260)\":{tag:\"(0022,1260)\",vr:\"SQ\",name:\"SelectedTotalOphthalmicAxialLengthSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1262)\":{tag:\"(0022,1262)\",vr:\"SQ\",name:\"OphthalmicAxialLengthQualityMetricSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1300)\":{tag:\"(0022,1300)\",vr:\"SQ\",name:\"IntraocularLensCalculationsRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1310)\":{tag:\"(0022,1310)\",vr:\"SQ\",name:\"IntraocularLensCalculationsLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1330)\":{tag:\"(0022,1330)\",vr:\"SQ\",name:\"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1415)\":{tag:\"(0022,1415)\",vr:\"CS\",name:\"OphthalmicMappingDeviceType\",vm:\"1\",version:\"DICOM\"},\"(0022,1420)\":{tag:\"(0022,1420)\",vr:\"SQ\",name:\"AcquisitionMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1423)\":{tag:\"(0022,1423)\",vr:\"SQ\",name:\"AcquisitionMethodAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1436)\":{tag:\"(0022,1436)\",vr:\"SQ\",name:\"OphthalmicThicknessMapTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1443)\":{tag:\"(0022,1443)\",vr:\"SQ\",name:\"OphthalmicThicknessMappingNormalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1445)\":{tag:\"(0022,1445)\",vr:\"SQ\",name:\"RetinalThicknessDefinitionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1450)\":{tag:\"(0022,1450)\",vr:\"SQ\",name:\"PixelValueMappingToCodedConceptSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1452)\":{tag:\"(0022,1452)\",vr:\"xs\",name:\"MappedPixelValue\",vm:\"1\",version:\"DICOM\"},\"(0022,1454)\":{tag:\"(0022,1454)\",vr:\"LO\",name:\"PixelValueMappingExplanation\",vm:\"1\",version:\"DICOM\"},\"(0022,1458)\":{tag:\"(0022,1458)\",vr:\"SQ\",name:\"OphthalmicThicknessMapQualityThresholdSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1460)\":{tag:\"(0022,1460)\",vr:\"FL\",name:\"OphthalmicThicknessMapThresholdQualityRating\",vm:\"1\",version:\"DICOM\"},\"(0022,1463)\":{tag:\"(0022,1463)\",vr:\"FL\",name:\"AnatomicStructureReferencePoint\",vm:\"2\",version:\"DICOM\"},\"(0022,1465)\":{tag:\"(0022,1465)\",vr:\"SQ\",name:\"RegistrationToLocalizerSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1466)\":{tag:\"(0022,1466)\",vr:\"CS\",name:\"RegisteredLocalizerUnits\",vm:\"1\",version:\"DICOM\"},\"(0022,1467)\":{tag:\"(0022,1467)\",vr:\"FL\",name:\"RegisteredLocalizerTopLeftHandCorner\",vm:\"2\",version:\"DICOM\"},\"(0022,1468)\":{tag:\"(0022,1468)\",vr:\"FL\",name:\"RegisteredLocalizerBottomRightHandCorner\",vm:\"2\",version:\"DICOM\"},\"(0022,1470)\":{tag:\"(0022,1470)\",vr:\"SQ\",name:\"OphthalmicThicknessMapQualityRatingSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1472)\":{tag:\"(0022,1472)\",vr:\"SQ\",name:\"RelevantOPTAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1512)\":{tag:\"(0022,1512)\",vr:\"SQ\",name:\"TransformationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1513)\":{tag:\"(0022,1513)\",vr:\"SQ\",name:\"TransformationAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1515)\":{tag:\"(0022,1515)\",vr:\"CS\",name:\"OphthalmicAxialLengthMethod\",vm:\"1\",version:\"DICOM\"},\"(0022,1517)\":{tag:\"(0022,1517)\",vr:\"FL\",name:\"OphthalmicFOV\",vm:\"1\",version:\"DICOM\"},\"(0022,1518)\":{tag:\"(0022,1518)\",vr:\"SQ\",name:\"TwoDimensionalToThreeDimensionalMapSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1525)\":{tag:\"(0022,1525)\",vr:\"SQ\",name:\"WideFieldOphthalmicPhotographyQualityRatingSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1526)\":{tag:\"(0022,1526)\",vr:\"SQ\",name:\"WideFieldOphthalmicPhotographyQualityThresholdSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1527)\":{tag:\"(0022,1527)\",vr:\"FL\",name:\"WideFieldOphthalmicPhotographyThresholdQualityRating\",vm:\"1\",version:\"DICOM\"},\"(0022,1528)\":{tag:\"(0022,1528)\",vr:\"FL\",name:\"XCoordinatesCenterPixelViewAngle\",vm:\"1\",version:\"DICOM\"},\"(0022,1529)\":{tag:\"(0022,1529)\",vr:\"FL\",name:\"YCoordinatesCenterPixelViewAngle\",vm:\"1\",version:\"DICOM\"},\"(0022,1530)\":{tag:\"(0022,1530)\",vr:\"UL\",name:\"NumberOfMapPoints\",vm:\"1\",version:\"DICOM\"},\"(0022,1531)\":{tag:\"(0022,1531)\",vr:\"OF\",name:\"TwoDimensionalToThreeDimensionalMapData\",vm:\"1\",version:\"DICOM\"},\"(0022,1612)\":{tag:\"(0022,1612)\",vr:\"SQ\",name:\"DerivationAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1615)\":{tag:\"(0022,1615)\",vr:\"SQ\",name:\"OphthalmicImageTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1616)\":{tag:\"(0022,1616)\",vr:\"LO\",name:\"OphthalmicImageTypeDescription\",vm:\"1\",version:\"DICOM\"},\"(0022,1618)\":{tag:\"(0022,1618)\",vr:\"SQ\",name:\"ScanPatternTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1620)\":{tag:\"(0022,1620)\",vr:\"SQ\",name:\"ReferencedSurfaceMeshIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1622)\":{tag:\"(0022,1622)\",vr:\"CS\",name:\"OphthalmicVolumetricPropertiesFlag\",vm:\"1\",version:\"DICOM\"},\"(0022,1624)\":{tag:\"(0022,1624)\",vr:\"FL\",name:\"OphthalmicAnatomicReferencePointXCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0022,1626)\":{tag:\"(0022,1626)\",vr:\"FL\",name:\"OphthalmicAnatomicReferencePointYCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0022,1628)\":{tag:\"(0022,1628)\",vr:\"SQ\",name:\"OphthalmicEnFaceImageQualityRatingSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1630)\":{tag:\"(0022,1630)\",vr:\"DS\",name:\"QualityThreshold\",vm:\"1\",version:\"DICOM\"},\"(0022,1640)\":{tag:\"(0022,1640)\",vr:\"SQ\",name:\"OCTBscanAnalysisAcquisitionParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(0022,1642)\":{tag:\"(0022,1642)\",vr:\"UL\",name:\"NumberofBscansPerFrame\",vm:\"1\",version:\"DICOM\"},\"(0022,1643)\":{tag:\"(0022,1643)\",vr:\"FL\",name:\"BscanSlabThickness\",vm:\"1\",version:\"DICOM\"},\"(0022,1644)\":{tag:\"(0022,1644)\",vr:\"FL\",name:\"DistanceBetweenBscanSlabs\",vm:\"1\",version:\"DICOM\"},\"(0022,1645)\":{tag:\"(0022,1645)\",vr:\"FL\",name:\"BscanCycleTime\",vm:\"1\",version:\"DICOM\"},\"(0022,1646)\":{tag:\"(0022,1646)\",vr:\"FL\",name:\"BscanCycleTimeVector\",vm:\"1-n\",version:\"DICOM\"},\"(0022,1649)\":{tag:\"(0022,1649)\",vr:\"FL\",name:\"AscanRate\",vm:\"1\",version:\"DICOM\"},\"(0022,1650)\":{tag:\"(0022,1650)\",vr:\"FL\",name:\"BscanRate\",vm:\"1\",version:\"DICOM\"},\"(0022,1658)\":{tag:\"(0022,1658)\",vr:\"UL\",name:\"SurfaceMeshZPixelOffset\",vm:\"1\",version:\"DICOM\"},\"(0024,0010)\":{tag:\"(0024,0010)\",vr:\"FL\",name:\"VisualFieldHorizontalExtent\",vm:\"1\",version:\"DICOM\"},\"(0024,0011)\":{tag:\"(0024,0011)\",vr:\"FL\",name:\"VisualFieldVerticalExtent\",vm:\"1\",version:\"DICOM\"},\"(0024,0012)\":{tag:\"(0024,0012)\",vr:\"CS\",name:\"VisualFieldShape\",vm:\"1\",version:\"DICOM\"},\"(0024,0016)\":{tag:\"(0024,0016)\",vr:\"SQ\",name:\"ScreeningTestModeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0018)\":{tag:\"(0024,0018)\",vr:\"FL\",name:\"MaximumStimulusLuminance\",vm:\"1\",version:\"DICOM\"},\"(0024,0020)\":{tag:\"(0024,0020)\",vr:\"FL\",name:\"BackgroundLuminance\",vm:\"1\",version:\"DICOM\"},\"(0024,0021)\":{tag:\"(0024,0021)\",vr:\"SQ\",name:\"StimulusColorCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0024)\":{tag:\"(0024,0024)\",vr:\"SQ\",name:\"BackgroundIlluminationColorCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0025)\":{tag:\"(0024,0025)\",vr:\"FL\",name:\"StimulusArea\",vm:\"1\",version:\"DICOM\"},\"(0024,0028)\":{tag:\"(0024,0028)\",vr:\"FL\",name:\"StimulusPresentationTime\",vm:\"1\",version:\"DICOM\"},\"(0024,0032)\":{tag:\"(0024,0032)\",vr:\"SQ\",name:\"FixationSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0033)\":{tag:\"(0024,0033)\",vr:\"SQ\",name:\"FixationMonitoringCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0034)\":{tag:\"(0024,0034)\",vr:\"SQ\",name:\"VisualFieldCatchTrialSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0035)\":{tag:\"(0024,0035)\",vr:\"US\",name:\"FixationCheckedQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0036)\":{tag:\"(0024,0036)\",vr:\"US\",name:\"PatientNotProperlyFixatedQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0037)\":{tag:\"(0024,0037)\",vr:\"CS\",name:\"PresentedVisualStimuliDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0038)\":{tag:\"(0024,0038)\",vr:\"US\",name:\"NumberOfVisualStimuli\",vm:\"1\",version:\"DICOM\"},\"(0024,0039)\":{tag:\"(0024,0039)\",vr:\"CS\",name:\"ExcessiveFixationLossesDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0040)\":{tag:\"(0024,0040)\",vr:\"CS\",name:\"ExcessiveFixationLosses\",vm:\"1\",version:\"DICOM\"},\"(0024,0042)\":{tag:\"(0024,0042)\",vr:\"US\",name:\"StimuliRetestingQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0044)\":{tag:\"(0024,0044)\",vr:\"LT\",name:\"CommentsOnPatientPerformanceOfVisualField\",vm:\"1\",version:\"DICOM\"},\"(0024,0045)\":{tag:\"(0024,0045)\",vr:\"CS\",name:\"FalseNegativesEstimateFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0046)\":{tag:\"(0024,0046)\",vr:\"FL\",name:\"FalseNegativesEstimate\",vm:\"1\",version:\"DICOM\"},\"(0024,0048)\":{tag:\"(0024,0048)\",vr:\"US\",name:\"NegativeCatchTrialsQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0050)\":{tag:\"(0024,0050)\",vr:\"US\",name:\"FalseNegativesQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0051)\":{tag:\"(0024,0051)\",vr:\"CS\",name:\"ExcessiveFalseNegativesDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0052)\":{tag:\"(0024,0052)\",vr:\"CS\",name:\"ExcessiveFalseNegatives\",vm:\"1\",version:\"DICOM\"},\"(0024,0053)\":{tag:\"(0024,0053)\",vr:\"CS\",name:\"FalsePositivesEstimateFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0054)\":{tag:\"(0024,0054)\",vr:\"FL\",name:\"FalsePositivesEstimate\",vm:\"1\",version:\"DICOM\"},\"(0024,0055)\":{tag:\"(0024,0055)\",vr:\"CS\",name:\"CatchTrialsDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0056)\":{tag:\"(0024,0056)\",vr:\"US\",name:\"PositiveCatchTrialsQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0057)\":{tag:\"(0024,0057)\",vr:\"CS\",name:\"TestPointNormalsDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0058)\":{tag:\"(0024,0058)\",vr:\"SQ\",name:\"TestPointNormalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0059)\":{tag:\"(0024,0059)\",vr:\"CS\",name:\"GlobalDeviationProbabilityNormalsFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0060)\":{tag:\"(0024,0060)\",vr:\"US\",name:\"FalsePositivesQuantity\",vm:\"1\",version:\"DICOM\"},\"(0024,0061)\":{tag:\"(0024,0061)\",vr:\"CS\",name:\"ExcessiveFalsePositivesDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0062)\":{tag:\"(0024,0062)\",vr:\"CS\",name:\"ExcessiveFalsePositives\",vm:\"1\",version:\"DICOM\"},\"(0024,0063)\":{tag:\"(0024,0063)\",vr:\"CS\",name:\"VisualFieldTestNormalsFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0064)\":{tag:\"(0024,0064)\",vr:\"SQ\",name:\"ResultsNormalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0065)\":{tag:\"(0024,0065)\",vr:\"SQ\",name:\"AgeCorrectedSensitivityDeviationAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0066)\":{tag:\"(0024,0066)\",vr:\"FL\",name:\"GlobalDeviationFromNormal\",vm:\"1\",version:\"DICOM\"},\"(0024,0067)\":{tag:\"(0024,0067)\",vr:\"SQ\",name:\"GeneralizedDefectSensitivityDeviationAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0068)\":{tag:\"(0024,0068)\",vr:\"FL\",name:\"LocalizedDeviationFromNormal\",vm:\"1\",version:\"DICOM\"},\"(0024,0069)\":{tag:\"(0024,0069)\",vr:\"LO\",name:\"PatientReliabilityIndicator\",vm:\"1\",version:\"DICOM\"},\"(0024,0070)\":{tag:\"(0024,0070)\",vr:\"FL\",name:\"VisualFieldMeanSensitivity\",vm:\"1\",version:\"DICOM\"},\"(0024,0071)\":{tag:\"(0024,0071)\",vr:\"FL\",name:\"GlobalDeviationProbability\",vm:\"1\",version:\"DICOM\"},\"(0024,0072)\":{tag:\"(0024,0072)\",vr:\"CS\",name:\"LocalDeviationProbabilityNormalsFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0073)\":{tag:\"(0024,0073)\",vr:\"FL\",name:\"LocalizedDeviationProbability\",vm:\"1\",version:\"DICOM\"},\"(0024,0074)\":{tag:\"(0024,0074)\",vr:\"CS\",name:\"ShortTermFluctuationCalculated\",vm:\"1\",version:\"DICOM\"},\"(0024,0075)\":{tag:\"(0024,0075)\",vr:\"FL\",name:\"ShortTermFluctuation\",vm:\"1\",version:\"DICOM\"},\"(0024,0076)\":{tag:\"(0024,0076)\",vr:\"CS\",name:\"ShortTermFluctuationProbabilityCalculated\",vm:\"1\",version:\"DICOM\"},\"(0024,0077)\":{tag:\"(0024,0077)\",vr:\"FL\",name:\"ShortTermFluctuationProbability\",vm:\"1\",version:\"DICOM\"},\"(0024,0078)\":{tag:\"(0024,0078)\",vr:\"CS\",name:\"CorrectedLocalizedDeviationFromNormalCalculated\",vm:\"1\",version:\"DICOM\"},\"(0024,0079)\":{tag:\"(0024,0079)\",vr:\"FL\",name:\"CorrectedLocalizedDeviationFromNormal\",vm:\"1\",version:\"DICOM\"},\"(0024,0080)\":{tag:\"(0024,0080)\",vr:\"CS\",name:\"CorrectedLocalizedDeviationFromNormalProbabilityCalculated\",vm:\"1\",version:\"DICOM\"},\"(0024,0081)\":{tag:\"(0024,0081)\",vr:\"FL\",name:\"CorrectedLocalizedDeviationFromNormalProbability\",vm:\"1\",version:\"DICOM\"},\"(0024,0083)\":{tag:\"(0024,0083)\",vr:\"SQ\",name:\"GlobalDeviationProbabilitySequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0085)\":{tag:\"(0024,0085)\",vr:\"SQ\",name:\"LocalizedDeviationProbabilitySequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0086)\":{tag:\"(0024,0086)\",vr:\"CS\",name:\"FovealSensitivityMeasured\",vm:\"1\",version:\"DICOM\"},\"(0024,0087)\":{tag:\"(0024,0087)\",vr:\"FL\",name:\"FovealSensitivity\",vm:\"1\",version:\"DICOM\"},\"(0024,0088)\":{tag:\"(0024,0088)\",vr:\"FL\",name:\"VisualFieldTestDuration\",vm:\"1\",version:\"DICOM\"},\"(0024,0089)\":{tag:\"(0024,0089)\",vr:\"SQ\",name:\"VisualFieldTestPointSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0090)\":{tag:\"(0024,0090)\",vr:\"FL\",name:\"VisualFieldTestPointXCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0024,0091)\":{tag:\"(0024,0091)\",vr:\"FL\",name:\"VisualFieldTestPointYCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0024,0092)\":{tag:\"(0024,0092)\",vr:\"FL\",name:\"AgeCorrectedSensitivityDeviationValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0093)\":{tag:\"(0024,0093)\",vr:\"CS\",name:\"StimulusResults\",vm:\"1\",version:\"DICOM\"},\"(0024,0094)\":{tag:\"(0024,0094)\",vr:\"FL\",name:\"SensitivityValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0095)\":{tag:\"(0024,0095)\",vr:\"CS\",name:\"RetestStimulusSeen\",vm:\"1\",version:\"DICOM\"},\"(0024,0096)\":{tag:\"(0024,0096)\",vr:\"FL\",name:\"RetestSensitivityValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0097)\":{tag:\"(0024,0097)\",vr:\"SQ\",name:\"VisualFieldTestPointNormalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0098)\":{tag:\"(0024,0098)\",vr:\"FL\",name:\"QuantifiedDefect\",vm:\"1\",version:\"DICOM\"},\"(0024,0100)\":{tag:\"(0024,0100)\",vr:\"FL\",name:\"AgeCorrectedSensitivityDeviationProbabilityValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0102)\":{tag:\"(0024,0102)\",vr:\"CS\",name:\"GeneralizedDefectCorrectedSensitivityDeviationFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0103)\":{tag:\"(0024,0103)\",vr:\"FL\",name:\"GeneralizedDefectCorrectedSensitivityDeviationValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0104)\":{tag:\"(0024,0104)\",vr:\"FL\",name:\"GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0105)\":{tag:\"(0024,0105)\",vr:\"FL\",name:\"MinimumSensitivityValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0106)\":{tag:\"(0024,0106)\",vr:\"CS\",name:\"BlindSpotLocalized\",vm:\"1\",version:\"DICOM\"},\"(0024,0107)\":{tag:\"(0024,0107)\",vr:\"FL\",name:\"BlindSpotXCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0024,0108)\":{tag:\"(0024,0108)\",vr:\"FL\",name:\"BlindSpotYCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0024,0110)\":{tag:\"(0024,0110)\",vr:\"SQ\",name:\"VisualAcuityMeasurementSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0112)\":{tag:\"(0024,0112)\",vr:\"SQ\",name:\"RefractiveParametersUsedOnPatientSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0113)\":{tag:\"(0024,0113)\",vr:\"CS\",name:\"MeasurementLaterality\",vm:\"1\",version:\"DICOM\"},\"(0024,0114)\":{tag:\"(0024,0114)\",vr:\"SQ\",name:\"OphthalmicPatientClinicalInformationLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0115)\":{tag:\"(0024,0115)\",vr:\"SQ\",name:\"OphthalmicPatientClinicalInformationRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0117)\":{tag:\"(0024,0117)\",vr:\"CS\",name:\"FovealPointNormativeDataFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0118)\":{tag:\"(0024,0118)\",vr:\"FL\",name:\"FovealPointProbabilityValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0120)\":{tag:\"(0024,0120)\",vr:\"CS\",name:\"ScreeningBaselineMeasured\",vm:\"1\",version:\"DICOM\"},\"(0024,0122)\":{tag:\"(0024,0122)\",vr:\"SQ\",name:\"ScreeningBaselineMeasuredSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0124)\":{tag:\"(0024,0124)\",vr:\"CS\",name:\"ScreeningBaselineType\",vm:\"1\",version:\"DICOM\"},\"(0024,0126)\":{tag:\"(0024,0126)\",vr:\"FL\",name:\"ScreeningBaselineValue\",vm:\"1\",version:\"DICOM\"},\"(0024,0202)\":{tag:\"(0024,0202)\",vr:\"LO\",name:\"AlgorithmSource\",vm:\"1\",version:\"DICOM\"},\"(0024,0306)\":{tag:\"(0024,0306)\",vr:\"LO\",name:\"DataSetName\",vm:\"1\",version:\"DICOM\"},\"(0024,0307)\":{tag:\"(0024,0307)\",vr:\"LO\",name:\"DataSetVersion\",vm:\"1\",version:\"DICOM\"},\"(0024,0308)\":{tag:\"(0024,0308)\",vr:\"LO\",name:\"DataSetSource\",vm:\"1\",version:\"DICOM\"},\"(0024,0309)\":{tag:\"(0024,0309)\",vr:\"LO\",name:\"DataSetDescription\",vm:\"1\",version:\"DICOM\"},\"(0024,0317)\":{tag:\"(0024,0317)\",vr:\"SQ\",name:\"VisualFieldTestReliabilityGlobalIndexSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0320)\":{tag:\"(0024,0320)\",vr:\"SQ\",name:\"VisualFieldGlobalResultsIndexSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0325)\":{tag:\"(0024,0325)\",vr:\"SQ\",name:\"DataObservationSequence\",vm:\"1\",version:\"DICOM\"},\"(0024,0338)\":{tag:\"(0024,0338)\",vr:\"CS\",name:\"IndexNormalsFlag\",vm:\"1\",version:\"DICOM\"},\"(0024,0341)\":{tag:\"(0024,0341)\",vr:\"FL\",name:\"IndexProbability\",vm:\"1\",version:\"DICOM\"},\"(0024,0344)\":{tag:\"(0024,0344)\",vr:\"SQ\",name:\"IndexProbabilitySequence\",vm:\"1\",version:\"DICOM\"},\"(0028,0002)\":{tag:\"(0028,0002)\",vr:\"US\",name:\"SamplesPerPixel\",vm:\"1\",version:\"DICOM\"},\"(0028,0003)\":{tag:\"(0028,0003)\",vr:\"US\",name:\"SamplesPerPixelUsed\",vm:\"1\",version:\"DICOM\"},\"(0028,0004)\":{tag:\"(0028,0004)\",vr:\"CS\",name:\"PhotometricInterpretation\",vm:\"1\",version:\"DICOM\"},\"(0028,0006)\":{tag:\"(0028,0006)\",vr:\"US\",name:\"PlanarConfiguration\",vm:\"1\",version:\"DICOM\"},\"(0028,0008)\":{tag:\"(0028,0008)\",vr:\"IS\",name:\"NumberOfFrames\",vm:\"1\",version:\"DICOM\"},\"(0028,0009)\":{tag:\"(0028,0009)\",vr:\"AT\",name:\"FrameIncrementPointer\",vm:\"1-n\",version:\"DICOM\"},\"(0028,000A)\":{tag:\"(0028,000A)\",vr:\"AT\",name:\"FrameDimensionPointer\",vm:\"1-n\",version:\"DICOM\"},\"(0028,0010)\":{tag:\"(0028,0010)\",vr:\"US\",name:\"Rows\",vm:\"1\",version:\"DICOM\"},\"(0028,0011)\":{tag:\"(0028,0011)\",vr:\"US\",name:\"Columns\",vm:\"1\",version:\"DICOM\"},\"(0028,0014)\":{tag:\"(0028,0014)\",vr:\"US\",name:\"UltrasoundColorDataPresent\",vm:\"1\",version:\"DICOM\"},\"(0028,0030)\":{tag:\"(0028,0030)\",vr:\"DS\",name:\"PixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(0028,0031)\":{tag:\"(0028,0031)\",vr:\"DS\",name:\"ZoomFactor\",vm:\"2\",version:\"DICOM\"},\"(0028,0032)\":{tag:\"(0028,0032)\",vr:\"DS\",name:\"ZoomCenter\",vm:\"2\",version:\"DICOM\"},\"(0028,0034)\":{tag:\"(0028,0034)\",vr:\"IS\",name:\"PixelAspectRatio\",vm:\"2\",version:\"DICOM\"},\"(0028,0051)\":{tag:\"(0028,0051)\",vr:\"CS\",name:\"CorrectedImage\",vm:\"1-n\",version:\"DICOM\"},\"(0028,0100)\":{tag:\"(0028,0100)\",vr:\"US\",name:\"BitsAllocated\",vm:\"1\",version:\"DICOM\"},\"(0028,0101)\":{tag:\"(0028,0101)\",vr:\"US\",name:\"BitsStored\",vm:\"1\",version:\"DICOM\"},\"(0028,0102)\":{tag:\"(0028,0102)\",vr:\"US\",name:\"HighBit\",vm:\"1\",version:\"DICOM\"},\"(0028,0103)\":{tag:\"(0028,0103)\",vr:\"US\",name:\"PixelRepresentation\",vm:\"1\",version:\"DICOM\"},\"(0028,0106)\":{tag:\"(0028,0106)\",vr:\"xs\",name:\"SmallestImagePixelValue\",vm:\"1\",version:\"DICOM\"},\"(0028,0107)\":{tag:\"(0028,0107)\",vr:\"xs\",name:\"LargestImagePixelValue\",vm:\"1\",version:\"DICOM\"},\"(0028,0108)\":{tag:\"(0028,0108)\",vr:\"xs\",name:\"SmallestPixelValueInSeries\",vm:\"1\",version:\"DICOM\"},\"(0028,0109)\":{tag:\"(0028,0109)\",vr:\"xs\",name:\"LargestPixelValueInSeries\",vm:\"1\",version:\"DICOM\"},\"(0028,0120)\":{tag:\"(0028,0120)\",vr:\"xs\",name:\"PixelPaddingValue\",vm:\"1\",version:\"DICOM\"},\"(0028,0121)\":{tag:\"(0028,0121)\",vr:\"xs\",name:\"PixelPaddingRangeLimit\",vm:\"1\",version:\"DICOM\"},\"(0028,0122)\":{tag:\"(0028,0122)\",vr:\"FL\",name:\"FloatPixelPaddingValue\",vm:\"1\",version:\"DICOM\"},\"(0028,0123)\":{tag:\"(0028,0123)\",vr:\"FD\",name:\"DoubleFloatPixelPaddingValue\",vm:\"1\",version:\"DICOM\"},\"(0028,0124)\":{tag:\"(0028,0124)\",vr:\"FL\",name:\"FloatPixelPaddingRangeLimit\",vm:\"1\",version:\"DICOM\"},\"(0028,0125)\":{tag:\"(0028,0125)\",vr:\"FD\",name:\"DoubleFloatPixelPaddingRangeLimit\",vm:\"1\",version:\"DICOM\"},\"(0028,0300)\":{tag:\"(0028,0300)\",vr:\"CS\",name:\"QualityControlImage\",vm:\"1\",version:\"DICOM\"},\"(0028,0301)\":{tag:\"(0028,0301)\",vr:\"CS\",name:\"BurnedInAnnotation\",vm:\"1\",version:\"DICOM\"},\"(0028,0302)\":{tag:\"(0028,0302)\",vr:\"CS\",name:\"RecognizableVisualFeatures\",vm:\"1\",version:\"DICOM\"},\"(0028,0303)\":{tag:\"(0028,0303)\",vr:\"CS\",name:\"LongitudinalTemporalInformationModified\",vm:\"1\",version:\"DICOM\"},\"(0028,0304)\":{tag:\"(0028,0304)\",vr:\"UI\",name:\"ReferencedColorPaletteInstanceUID\",vm:\"1\",version:\"DICOM\"},\"(0028,0A02)\":{tag:\"(0028,0A02)\",vr:\"CS\",name:\"PixelSpacingCalibrationType\",vm:\"1\",version:\"DICOM\"},\"(0028,0A04)\":{tag:\"(0028,0A04)\",vr:\"LO\",name:\"PixelSpacingCalibrationDescription\",vm:\"1\",version:\"DICOM\"},\"(0028,1040)\":{tag:\"(0028,1040)\",vr:\"CS\",name:\"PixelIntensityRelationship\",vm:\"1\",version:\"DICOM\"},\"(0028,1041)\":{tag:\"(0028,1041)\",vr:\"SS\",name:\"PixelIntensityRelationshipSign\",vm:\"1\",version:\"DICOM\"},\"(0028,1050)\":{tag:\"(0028,1050)\",vr:\"DS\",name:\"WindowCenter\",vm:\"1-n\",version:\"DICOM\"},\"(0028,1051)\":{tag:\"(0028,1051)\",vr:\"DS\",name:\"WindowWidth\",vm:\"1-n\",version:\"DICOM\"},\"(0028,1052)\":{tag:\"(0028,1052)\",vr:\"DS\",name:\"RescaleIntercept\",vm:\"1\",version:\"DICOM\"},\"(0028,1053)\":{tag:\"(0028,1053)\",vr:\"DS\",name:\"RescaleSlope\",vm:\"1\",version:\"DICOM\"},\"(0028,1054)\":{tag:\"(0028,1054)\",vr:\"LO\",name:\"RescaleType\",vm:\"1\",version:\"DICOM\"},\"(0028,1055)\":{tag:\"(0028,1055)\",vr:\"LO\",name:\"WindowCenterWidthExplanation\",vm:\"1-n\",version:\"DICOM\"},\"(0028,1056)\":{tag:\"(0028,1056)\",vr:\"CS\",name:\"VOILUTFunction\",vm:\"1\",version:\"DICOM\"},\"(0028,1090)\":{tag:\"(0028,1090)\",vr:\"CS\",name:\"RecommendedViewingMode\",vm:\"1\",version:\"DICOM\"},\"(0028,1101)\":{tag:\"(0028,1101)\",vr:\"xs\",name:\"RedPaletteColorLookupTableDescriptor\",vm:\"3\",version:\"DICOM\"},\"(0028,1102)\":{tag:\"(0028,1102)\",vr:\"xs\",name:\"GreenPaletteColorLookupTableDescriptor\",vm:\"3\",version:\"DICOM\"},\"(0028,1103)\":{tag:\"(0028,1103)\",vr:\"xs\",name:\"BluePaletteColorLookupTableDescriptor\",vm:\"3\",version:\"DICOM\"},\"(0028,1104)\":{tag:\"(0028,1104)\",vr:\"US\",name:\"AlphaPaletteColorLookupTableDescriptor\",vm:\"3\",version:\"DICOM\"},\"(0028,1199)\":{tag:\"(0028,1199)\",vr:\"UI\",name:\"PaletteColorLookupTableUID\",vm:\"1\",version:\"DICOM\"},\"(0028,1201)\":{tag:\"(0028,1201)\",vr:\"OW\",name:\"RedPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1202)\":{tag:\"(0028,1202)\",vr:\"OW\",name:\"GreenPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1203)\":{tag:\"(0028,1203)\",vr:\"OW\",name:\"BluePaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1204)\":{tag:\"(0028,1204)\",vr:\"OW\",name:\"AlphaPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1221)\":{tag:\"(0028,1221)\",vr:\"OW\",name:\"SegmentedRedPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1222)\":{tag:\"(0028,1222)\",vr:\"OW\",name:\"SegmentedGreenPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1223)\":{tag:\"(0028,1223)\",vr:\"OW\",name:\"SegmentedBluePaletteColorLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,1230)\":{tag:\"(0028,1230)\",vr:\"SQ\",name:\"StoredValueColorRangeSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,1231)\":{tag:\"(0028,1231)\",vr:\"FD\",name:\"MinimumStoredValueMapped\",vm:\"1\",version:\"DICOM\"},\"(0028,1232)\":{tag:\"(0028,1232)\",vr:\"FD\",name:\"MaximumStoredValueMapped\",vm:\"1\",version:\"DICOM\"},\"(0028,1300)\":{tag:\"(0028,1300)\",vr:\"CS\",name:\"BreastImplantPresent\",vm:\"1\",version:\"DICOM\"},\"(0028,1350)\":{tag:\"(0028,1350)\",vr:\"CS\",name:\"PartialView\",vm:\"1\",version:\"DICOM\"},\"(0028,1351)\":{tag:\"(0028,1351)\",vr:\"ST\",name:\"PartialViewDescription\",vm:\"1\",version:\"DICOM\"},\"(0028,1352)\":{tag:\"(0028,1352)\",vr:\"SQ\",name:\"PartialViewCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,135A)\":{tag:\"(0028,135A)\",vr:\"CS\",name:\"SpatialLocationsPreserved\",vm:\"1\",version:\"DICOM\"},\"(0028,1401)\":{tag:\"(0028,1401)\",vr:\"SQ\",name:\"DataFrameAssignmentSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,1402)\":{tag:\"(0028,1402)\",vr:\"CS\",name:\"DataPathAssignment\",vm:\"1\",version:\"DICOM\"},\"(0028,1403)\":{tag:\"(0028,1403)\",vr:\"US\",name:\"BitsMappedToColorLookupTable\",vm:\"1\",version:\"DICOM\"},\"(0028,1404)\":{tag:\"(0028,1404)\",vr:\"SQ\",name:\"BlendingLUT1Sequence\",vm:\"1\",version:\"DICOM\"},\"(0028,1405)\":{tag:\"(0028,1405)\",vr:\"CS\",name:\"BlendingLUT1TransferFunction\",vm:\"1\",version:\"DICOM\"},\"(0028,1406)\":{tag:\"(0028,1406)\",vr:\"FD\",name:\"BlendingWeightConstant\",vm:\"1\",version:\"DICOM\"},\"(0028,1407)\":{tag:\"(0028,1407)\",vr:\"US\",name:\"BlendingLookupTableDescriptor\",vm:\"3\",version:\"DICOM\"},\"(0028,1408)\":{tag:\"(0028,1408)\",vr:\"OW\",name:\"BlendingLookupTableData\",vm:\"1\",version:\"DICOM\"},\"(0028,140B)\":{tag:\"(0028,140B)\",vr:\"SQ\",name:\"EnhancedPaletteColorLookupTableSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,140C)\":{tag:\"(0028,140C)\",vr:\"SQ\",name:\"BlendingLUT2Sequence\",vm:\"1\",version:\"DICOM\"},\"(0028,140D)\":{tag:\"(0028,140D)\",vr:\"CS\",name:\"BlendingLUT2TransferFunction\",vm:\"1\",version:\"DICOM\"},\"(0028,140E)\":{tag:\"(0028,140E)\",vr:\"CS\",name:\"DataPathID\",vm:\"1\",version:\"DICOM\"},\"(0028,140F)\":{tag:\"(0028,140F)\",vr:\"CS\",name:\"RGBLUTTransferFunction\",vm:\"1\",version:\"DICOM\"},\"(0028,1410)\":{tag:\"(0028,1410)\",vr:\"CS\",name:\"AlphaLUTTransferFunction\",vm:\"1\",version:\"DICOM\"},\"(0028,2000)\":{tag:\"(0028,2000)\",vr:\"OB\",name:\"ICCProfile\",vm:\"1\",version:\"DICOM\"},\"(0028,2110)\":{tag:\"(0028,2110)\",vr:\"CS\",name:\"LossyImageCompression\",vm:\"1\",version:\"DICOM\"},\"(0028,2112)\":{tag:\"(0028,2112)\",vr:\"DS\",name:\"LossyImageCompressionRatio\",vm:\"1-n\",version:\"DICOM\"},\"(0028,2114)\":{tag:\"(0028,2114)\",vr:\"CS\",name:\"LossyImageCompressionMethod\",vm:\"1-n\",version:\"DICOM\"},\"(0028,3000)\":{tag:\"(0028,3000)\",vr:\"SQ\",name:\"ModalityLUTSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,3002)\":{tag:\"(0028,3002)\",vr:\"xs\",name:\"LUTDescriptor\",vm:\"3\",version:\"DICOM\"},\"(0028,3003)\":{tag:\"(0028,3003)\",vr:\"LO\",name:\"LUTExplanation\",vm:\"1\",version:\"DICOM\"},\"(0028,3004)\":{tag:\"(0028,3004)\",vr:\"LO\",name:\"ModalityLUTType\",vm:\"1\",version:\"DICOM\"},\"(0028,3006)\":{tag:\"(0028,3006)\",vr:\"lt\",name:\"LUTData\",vm:\"1-n\",version:\"DICOM\"},\"(0028,3010)\":{tag:\"(0028,3010)\",vr:\"SQ\",name:\"VOILUTSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,3110)\":{tag:\"(0028,3110)\",vr:\"SQ\",name:\"SoftcopyVOILUTSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,6010)\":{tag:\"(0028,6010)\",vr:\"US\",name:\"RepresentativeFrameNumber\",vm:\"1\",version:\"DICOM\"},\"(0028,6020)\":{tag:\"(0028,6020)\",vr:\"US\",name:\"FrameNumbersOfInterest\",vm:\"1-n\",version:\"DICOM\"},\"(0028,6022)\":{tag:\"(0028,6022)\",vr:\"LO\",name:\"FrameOfInterestDescription\",vm:\"1-n\",version:\"DICOM\"},\"(0028,6023)\":{tag:\"(0028,6023)\",vr:\"CS\",name:\"FrameOfInterestType\",vm:\"1-n\",version:\"DICOM\"},\"(0028,6040)\":{tag:\"(0028,6040)\",vr:\"US\",name:\"RWavePointer\",vm:\"1-n\",version:\"DICOM\"},\"(0028,6100)\":{tag:\"(0028,6100)\",vr:\"SQ\",name:\"MaskSubtractionSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,6101)\":{tag:\"(0028,6101)\",vr:\"CS\",name:\"MaskOperation\",vm:\"1\",version:\"DICOM\"},\"(0028,6102)\":{tag:\"(0028,6102)\",vr:\"US\",name:\"ApplicableFrameRange\",vm:\"2-2n\",version:\"DICOM\"},\"(0028,6110)\":{tag:\"(0028,6110)\",vr:\"US\",name:\"MaskFrameNumbers\",vm:\"1-n\",version:\"DICOM\"},\"(0028,6112)\":{tag:\"(0028,6112)\",vr:\"US\",name:\"ContrastFrameAveraging\",vm:\"1\",version:\"DICOM\"},\"(0028,6114)\":{tag:\"(0028,6114)\",vr:\"FL\",name:\"MaskSubPixelShift\",vm:\"2\",version:\"DICOM\"},\"(0028,6120)\":{tag:\"(0028,6120)\",vr:\"SS\",name:\"TIDOffset\",vm:\"1\",version:\"DICOM\"},\"(0028,6190)\":{tag:\"(0028,6190)\",vr:\"ST\",name:\"MaskOperationExplanation\",vm:\"1\",version:\"DICOM\"},\"(0028,7000)\":{tag:\"(0028,7000)\",vr:\"SQ\",name:\"EquipmentAdministratorSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7001)\":{tag:\"(0028,7001)\",vr:\"US\",name:\"NumberOfDisplaySubsystems\",vm:\"1\",version:\"DICOM\"},\"(0028,7002)\":{tag:\"(0028,7002)\",vr:\"US\",name:\"CurrentConfigurationID\",vm:\"1\",version:\"DICOM\"},\"(0028,7003)\":{tag:\"(0028,7003)\",vr:\"US\",name:\"DisplaySubsystemID\",vm:\"1\",version:\"DICOM\"},\"(0028,7004)\":{tag:\"(0028,7004)\",vr:\"SH\",name:\"DisplaySubsystemName\",vm:\"1\",version:\"DICOM\"},\"(0028,7005)\":{tag:\"(0028,7005)\",vr:\"LO\",name:\"DisplaySubsystemDescription\",vm:\"1\",version:\"DICOM\"},\"(0028,7006)\":{tag:\"(0028,7006)\",vr:\"CS\",name:\"SystemStatus\",vm:\"1\",version:\"DICOM\"},\"(0028,7007)\":{tag:\"(0028,7007)\",vr:\"LO\",name:\"SystemStatusComment\",vm:\"1\",version:\"DICOM\"},\"(0028,7008)\":{tag:\"(0028,7008)\",vr:\"SQ\",name:\"TargetLuminanceCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7009)\":{tag:\"(0028,7009)\",vr:\"US\",name:\"LuminanceCharacteristicsID\",vm:\"1\",version:\"DICOM\"},\"(0028,700A)\":{tag:\"(0028,700A)\",vr:\"SQ\",name:\"DisplaySubsystemConfigurationSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,700B)\":{tag:\"(0028,700B)\",vr:\"US\",name:\"ConfigurationID\",vm:\"1\",version:\"DICOM\"},\"(0028,700C)\":{tag:\"(0028,700C)\",vr:\"SH\",name:\"ConfigurationName\",vm:\"1\",version:\"DICOM\"},\"(0028,700D)\":{tag:\"(0028,700D)\",vr:\"LO\",name:\"ConfigurationDescription\",vm:\"1\",version:\"DICOM\"},\"(0028,700E)\":{tag:\"(0028,700E)\",vr:\"US\",name:\"ReferencedTargetLuminanceCharacteristicsID\",vm:\"1\",version:\"DICOM\"},\"(0028,700F)\":{tag:\"(0028,700F)\",vr:\"SQ\",name:\"QAResultsSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7010)\":{tag:\"(0028,7010)\",vr:\"SQ\",name:\"DisplaySubsystemQAResultsSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7011)\":{tag:\"(0028,7011)\",vr:\"SQ\",name:\"ConfigurationQAResultsSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7012)\":{tag:\"(0028,7012)\",vr:\"SQ\",name:\"MeasurementEquipmentSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7013)\":{tag:\"(0028,7013)\",vr:\"CS\",name:\"MeasurementFunctions\",vm:\"1-n\",version:\"DICOM\"},\"(0028,7014)\":{tag:\"(0028,7014)\",vr:\"CS\",name:\"MeasurementEquipmentType\",vm:\"1\",version:\"DICOM\"},\"(0028,7015)\":{tag:\"(0028,7015)\",vr:\"SQ\",name:\"VisualEvaluationResultSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7016)\":{tag:\"(0028,7016)\",vr:\"SQ\",name:\"DisplayCalibrationResultSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7017)\":{tag:\"(0028,7017)\",vr:\"US\",name:\"DDLValue\",vm:\"1\",version:\"DICOM\"},\"(0028,7018)\":{tag:\"(0028,7018)\",vr:\"FL\",name:\"CIExyWhitePoint\",vm:\"2\",version:\"DICOM\"},\"(0028,7019)\":{tag:\"(0028,7019)\",vr:\"CS\",name:\"DisplayFunctionType\",vm:\"1\",version:\"DICOM\"},\"(0028,701A)\":{tag:\"(0028,701A)\",vr:\"FL\",name:\"GammaValue\",vm:\"1\",version:\"DICOM\"},\"(0028,701B)\":{tag:\"(0028,701B)\",vr:\"US\",name:\"NumberOfLuminancePoints\",vm:\"1\",version:\"DICOM\"},\"(0028,701C)\":{tag:\"(0028,701C)\",vr:\"SQ\",name:\"LuminanceResponseSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,701D)\":{tag:\"(0028,701D)\",vr:\"FL\",name:\"TargetMinimumLuminance\",vm:\"1\",version:\"DICOM\"},\"(0028,701E)\":{tag:\"(0028,701E)\",vr:\"FL\",name:\"TargetMaximumLuminance\",vm:\"1\",version:\"DICOM\"},\"(0028,701F)\":{tag:\"(0028,701F)\",vr:\"FL\",name:\"LuminanceValue\",vm:\"1\",version:\"DICOM\"},\"(0028,7020)\":{tag:\"(0028,7020)\",vr:\"LO\",name:\"LuminanceResponseDescription\",vm:\"1\",version:\"DICOM\"},\"(0028,7021)\":{tag:\"(0028,7021)\",vr:\"CS\",name:\"WhitePointFlag\",vm:\"1\",version:\"DICOM\"},\"(0028,7022)\":{tag:\"(0028,7022)\",vr:\"SQ\",name:\"DisplayDeviceTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7023)\":{tag:\"(0028,7023)\",vr:\"SQ\",name:\"DisplaySubsystemSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7024)\":{tag:\"(0028,7024)\",vr:\"SQ\",name:\"LuminanceResultSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7025)\":{tag:\"(0028,7025)\",vr:\"CS\",name:\"AmbientLightValueSource\",vm:\"1\",version:\"DICOM\"},\"(0028,7026)\":{tag:\"(0028,7026)\",vr:\"CS\",name:\"MeasuredCharacteristics\",vm:\"1-n\",version:\"DICOM\"},\"(0028,7027)\":{tag:\"(0028,7027)\",vr:\"SQ\",name:\"LuminanceUniformityResultSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7028)\":{tag:\"(0028,7028)\",vr:\"SQ\",name:\"VisualEvaluationTestSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7029)\":{tag:\"(0028,7029)\",vr:\"CS\",name:\"TestResult\",vm:\"1\",version:\"DICOM\"},\"(0028,702A)\":{tag:\"(0028,702A)\",vr:\"LO\",name:\"TestResultComment\",vm:\"1\",version:\"DICOM\"},\"(0028,702B)\":{tag:\"(0028,702B)\",vr:\"CS\",name:\"TestImageValidation\",vm:\"1\",version:\"DICOM\"},\"(0028,702C)\":{tag:\"(0028,702C)\",vr:\"SQ\",name:\"TestPatternCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,702D)\":{tag:\"(0028,702D)\",vr:\"SQ\",name:\"MeasurementPatternCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,702E)\":{tag:\"(0028,702E)\",vr:\"SQ\",name:\"VisualEvaluationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,7FE0)\":{tag:\"(0028,7FE0)\",vr:\"UR\",name:\"PixelDataProviderURL\",vm:\"1\",version:\"DICOM\"},\"(0028,9001)\":{tag:\"(0028,9001)\",vr:\"UL\",name:\"DataPointRows\",vm:\"1\",version:\"DICOM\"},\"(0028,9002)\":{tag:\"(0028,9002)\",vr:\"UL\",name:\"DataPointColumns\",vm:\"1\",version:\"DICOM\"},\"(0028,9003)\":{tag:\"(0028,9003)\",vr:\"CS\",name:\"SignalDomainColumns\",vm:\"1\",version:\"DICOM\"},\"(0028,9108)\":{tag:\"(0028,9108)\",vr:\"CS\",name:\"DataRepresentation\",vm:\"1\",version:\"DICOM\"},\"(0028,9110)\":{tag:\"(0028,9110)\",vr:\"SQ\",name:\"PixelMeasuresSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9132)\":{tag:\"(0028,9132)\",vr:\"SQ\",name:\"FrameVOILUTSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9145)\":{tag:\"(0028,9145)\",vr:\"SQ\",name:\"PixelValueTransformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9235)\":{tag:\"(0028,9235)\",vr:\"CS\",name:\"SignalDomainRows\",vm:\"1\",version:\"DICOM\"},\"(0028,9411)\":{tag:\"(0028,9411)\",vr:\"FL\",name:\"DisplayFilterPercentage\",vm:\"1\",version:\"DICOM\"},\"(0028,9415)\":{tag:\"(0028,9415)\",vr:\"SQ\",name:\"FramePixelShiftSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9416)\":{tag:\"(0028,9416)\",vr:\"US\",name:\"SubtractionItemID\",vm:\"1\",version:\"DICOM\"},\"(0028,9422)\":{tag:\"(0028,9422)\",vr:\"SQ\",name:\"PixelIntensityRelationshipLUTSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9443)\":{tag:\"(0028,9443)\",vr:\"SQ\",name:\"FramePixelDataPropertiesSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9444)\":{tag:\"(0028,9444)\",vr:\"CS\",name:\"GeometricalProperties\",vm:\"1\",version:\"DICOM\"},\"(0028,9445)\":{tag:\"(0028,9445)\",vr:\"FL\",name:\"GeometricMaximumDistortion\",vm:\"1\",version:\"DICOM\"},\"(0028,9446)\":{tag:\"(0028,9446)\",vr:\"CS\",name:\"ImageProcessingApplied\",vm:\"1-n\",version:\"DICOM\"},\"(0028,9454)\":{tag:\"(0028,9454)\",vr:\"CS\",name:\"MaskSelectionMode\",vm:\"1\",version:\"DICOM\"},\"(0028,9474)\":{tag:\"(0028,9474)\",vr:\"CS\",name:\"LUTFunction\",vm:\"1\",version:\"DICOM\"},\"(0028,9478)\":{tag:\"(0028,9478)\",vr:\"FL\",name:\"MaskVisibilityPercentage\",vm:\"1\",version:\"DICOM\"},\"(0028,9501)\":{tag:\"(0028,9501)\",vr:\"SQ\",name:\"PixelShiftSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9502)\":{tag:\"(0028,9502)\",vr:\"SQ\",name:\"RegionPixelShiftSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9503)\":{tag:\"(0028,9503)\",vr:\"SS\",name:\"VerticesOfTheRegion\",vm:\"2-2n\",version:\"DICOM\"},\"(0028,9505)\":{tag:\"(0028,9505)\",vr:\"SQ\",name:\"MultiFramePresentationSequence\",vm:\"1\",version:\"DICOM\"},\"(0028,9506)\":{tag:\"(0028,9506)\",vr:\"US\",name:\"PixelShiftFrameRange\",vm:\"2-2n\",version:\"DICOM\"},\"(0028,9507)\":{tag:\"(0028,9507)\",vr:\"US\",name:\"LUTFrameRange\",vm:\"2-2n\",version:\"DICOM\"},\"(0028,9520)\":{tag:\"(0028,9520)\",vr:\"DS\",name:\"ImageToEquipmentMappingMatrix\",vm:\"16\",version:\"DICOM\"},\"(0028,9537)\":{tag:\"(0028,9537)\",vr:\"CS\",name:\"EquipmentCoordinateSystemIdentification\",vm:\"1\",version:\"DICOM\"},\"(0032,1031)\":{tag:\"(0032,1031)\",vr:\"SQ\",name:\"RequestingPhysicianIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0032,1032)\":{tag:\"(0032,1032)\",vr:\"PN\",name:\"RequestingPhysician\",vm:\"1\",version:\"DICOM\"},\"(0032,1033)\":{tag:\"(0032,1033)\",vr:\"LO\",name:\"RequestingService\",vm:\"1\",version:\"DICOM\"},\"(0032,1034)\":{tag:\"(0032,1034)\",vr:\"SQ\",name:\"RequestingServiceCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0032,1060)\":{tag:\"(0032,1060)\",vr:\"LO\",name:\"RequestedProcedureDescription\",vm:\"1\",version:\"DICOM\"},\"(0032,1064)\":{tag:\"(0032,1064)\",vr:\"SQ\",name:\"RequestedProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0032,1066)\":{tag:\"(0032,1066)\",vr:\"UT\",name:\"ReasonForVisit\",vm:\"1\",version:\"DICOM\"},\"(0032,1067)\":{tag:\"(0032,1067)\",vr:\"SQ\",name:\"ReasonForVisitCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0032,1070)\":{tag:\"(0032,1070)\",vr:\"LO\",name:\"RequestedContrastAgent\",vm:\"1\",version:\"DICOM\"},\"(0034,0001)\":{tag:\"(0034,0001)\",vr:\"SQ\",name:\"FlowIdentifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0034,0002)\":{tag:\"(0034,0002)\",vr:\"OB\",name:\"FlowIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0034,0003)\":{tag:\"(0034,0003)\",vr:\"UI\",name:\"FlowTransferSyntaxUID\",vm:\"1\",version:\"DICOM\"},\"(0034,0004)\":{tag:\"(0034,0004)\",vr:\"UL\",name:\"FlowRTPSamplingRate\",vm:\"1\",version:\"DICOM\"},\"(0034,0005)\":{tag:\"(0034,0005)\",vr:\"OB\",name:\"SourceIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0034,0007)\":{tag:\"(0034,0007)\",vr:\"OB\",name:\"FrameOriginTimestamp\",vm:\"1\",version:\"DICOM\"},\"(0034,0008)\":{tag:\"(0034,0008)\",vr:\"CS\",name:\"IncludesImagingSubject\",vm:\"1\",version:\"DICOM\"},\"(0034,0009)\":{tag:\"(0034,0009)\",vr:\"SQ\",name:\"FrameUsefulnessGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(0034,000A)\":{tag:\"(0034,000A)\",vr:\"SQ\",name:\"RealTimeBulkDataFlowSequence\",vm:\"1\",version:\"DICOM\"},\"(0034,000B)\":{tag:\"(0034,000B)\",vr:\"SQ\",name:\"CameraPositionGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(0034,000C)\":{tag:\"(0034,000C)\",vr:\"CS\",name:\"IncludesInformation\",vm:\"1\",version:\"DICOM\"},\"(0034,000D)\":{tag:\"(0034,000D)\",vr:\"SQ\",name:\"TimeOfFrameGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,0004)\":{tag:\"(0038,0004)\",vr:\"SQ\",name:\"ReferencedPatientAliasSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,0008)\":{tag:\"(0038,0008)\",vr:\"CS\",name:\"VisitStatusID\",vm:\"1\",version:\"DICOM\"},\"(0038,0010)\":{tag:\"(0038,0010)\",vr:\"LO\",name:\"AdmissionID\",vm:\"1\",version:\"DICOM\"},\"(0038,0014)\":{tag:\"(0038,0014)\",vr:\"SQ\",name:\"IssuerOfAdmissionIDSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,0016)\":{tag:\"(0038,0016)\",vr:\"LO\",name:\"RouteOfAdmissions\",vm:\"1\",version:\"DICOM\"},\"(0038,0020)\":{tag:\"(0038,0020)\",vr:\"DA\",name:\"AdmittingDate\",vm:\"1\",version:\"DICOM\"},\"(0038,0021)\":{tag:\"(0038,0021)\",vr:\"TM\",name:\"AdmittingTime\",vm:\"1\",version:\"DICOM\"},\"(0038,0050)\":{tag:\"(0038,0050)\",vr:\"LO\",name:\"SpecialNeeds\",vm:\"1\",version:\"DICOM\"},\"(0038,0060)\":{tag:\"(0038,0060)\",vr:\"LO\",name:\"ServiceEpisodeID\",vm:\"1\",version:\"DICOM\"},\"(0038,0062)\":{tag:\"(0038,0062)\",vr:\"LO\",name:\"ServiceEpisodeDescription\",vm:\"1\",version:\"DICOM\"},\"(0038,0064)\":{tag:\"(0038,0064)\",vr:\"SQ\",name:\"IssuerOfServiceEpisodeIDSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,0100)\":{tag:\"(0038,0100)\",vr:\"SQ\",name:\"PertinentDocumentsSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,0101)\":{tag:\"(0038,0101)\",vr:\"SQ\",name:\"PertinentResourcesSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,0102)\":{tag:\"(0038,0102)\",vr:\"LO\",name:\"ResourceDescription\",vm:\"1\",version:\"DICOM\"},\"(0038,0300)\":{tag:\"(0038,0300)\",vr:\"LO\",name:\"CurrentPatientLocation\",vm:\"1\",version:\"DICOM\"},\"(0038,0400)\":{tag:\"(0038,0400)\",vr:\"LO\",name:\"PatientInstitutionResidence\",vm:\"1\",version:\"DICOM\"},\"(0038,0500)\":{tag:\"(0038,0500)\",vr:\"LO\",name:\"PatientState\",vm:\"1\",version:\"DICOM\"},\"(0038,0502)\":{tag:\"(0038,0502)\",vr:\"SQ\",name:\"PatientClinicalTrialParticipationSequence\",vm:\"1\",version:\"DICOM\"},\"(0038,4000)\":{tag:\"(0038,4000)\",vr:\"LT\",name:\"VisitComments\",vm:\"1\",version:\"DICOM\"},\"(003A,0004)\":{tag:\"(003A,0004)\",vr:\"CS\",name:\"WaveformOriginality\",vm:\"1\",version:\"DICOM\"},\"(003A,0005)\":{tag:\"(003A,0005)\",vr:\"US\",name:\"NumberOfWaveformChannels\",vm:\"1\",version:\"DICOM\"},\"(003A,0010)\":{tag:\"(003A,0010)\",vr:\"UL\",name:\"NumberOfWaveformSamples\",vm:\"1\",version:\"DICOM\"},\"(003A,001A)\":{tag:\"(003A,001A)\",vr:\"DS\",name:\"SamplingFrequency\",vm:\"1\",version:\"DICOM\"},\"(003A,0020)\":{tag:\"(003A,0020)\",vr:\"SH\",name:\"MultiplexGroupLabel\",vm:\"1\",version:\"DICOM\"},\"(003A,0200)\":{tag:\"(003A,0200)\",vr:\"SQ\",name:\"ChannelDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0202)\":{tag:\"(003A,0202)\",vr:\"IS\",name:\"WaveformChannelNumber\",vm:\"1\",version:\"DICOM\"},\"(003A,0203)\":{tag:\"(003A,0203)\",vr:\"SH\",name:\"ChannelLabel\",vm:\"1\",version:\"DICOM\"},\"(003A,0205)\":{tag:\"(003A,0205)\",vr:\"CS\",name:\"ChannelStatus\",vm:\"1-n\",version:\"DICOM\"},\"(003A,0208)\":{tag:\"(003A,0208)\",vr:\"SQ\",name:\"ChannelSourceSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0209)\":{tag:\"(003A,0209)\",vr:\"SQ\",name:\"ChannelSourceModifiersSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,020A)\":{tag:\"(003A,020A)\",vr:\"SQ\",name:\"SourceWaveformSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,020C)\":{tag:\"(003A,020C)\",vr:\"LO\",name:\"ChannelDerivationDescription\",vm:\"1\",version:\"DICOM\"},\"(003A,0210)\":{tag:\"(003A,0210)\",vr:\"DS\",name:\"ChannelSensitivity\",vm:\"1\",version:\"DICOM\"},\"(003A,0211)\":{tag:\"(003A,0211)\",vr:\"SQ\",name:\"ChannelSensitivityUnitsSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0212)\":{tag:\"(003A,0212)\",vr:\"DS\",name:\"ChannelSensitivityCorrectionFactor\",vm:\"1\",version:\"DICOM\"},\"(003A,0213)\":{tag:\"(003A,0213)\",vr:\"DS\",name:\"ChannelBaseline\",vm:\"1\",version:\"DICOM\"},\"(003A,0214)\":{tag:\"(003A,0214)\",vr:\"DS\",name:\"ChannelTimeSkew\",vm:\"1\",version:\"DICOM\"},\"(003A,0215)\":{tag:\"(003A,0215)\",vr:\"DS\",name:\"ChannelSampleSkew\",vm:\"1\",version:\"DICOM\"},\"(003A,0218)\":{tag:\"(003A,0218)\",vr:\"DS\",name:\"ChannelOffset\",vm:\"1\",version:\"DICOM\"},\"(003A,021A)\":{tag:\"(003A,021A)\",vr:\"US\",name:\"WaveformBitsStored\",vm:\"1\",version:\"DICOM\"},\"(003A,0220)\":{tag:\"(003A,0220)\",vr:\"DS\",name:\"FilterLowFrequency\",vm:\"1\",version:\"DICOM\"},\"(003A,0221)\":{tag:\"(003A,0221)\",vr:\"DS\",name:\"FilterHighFrequency\",vm:\"1\",version:\"DICOM\"},\"(003A,0222)\":{tag:\"(003A,0222)\",vr:\"DS\",name:\"NotchFilterFrequency\",vm:\"1\",version:\"DICOM\"},\"(003A,0223)\":{tag:\"(003A,0223)\",vr:\"DS\",name:\"NotchFilterBandwidth\",vm:\"1\",version:\"DICOM\"},\"(003A,0230)\":{tag:\"(003A,0230)\",vr:\"FL\",name:\"WaveformDataDisplayScale\",vm:\"1\",version:\"DICOM\"},\"(003A,0231)\":{tag:\"(003A,0231)\",vr:\"US\",name:\"WaveformDisplayBackgroundCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(003A,0240)\":{tag:\"(003A,0240)\",vr:\"SQ\",name:\"WaveformPresentationGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0241)\":{tag:\"(003A,0241)\",vr:\"US\",name:\"PresentationGroupNumber\",vm:\"1\",version:\"DICOM\"},\"(003A,0242)\":{tag:\"(003A,0242)\",vr:\"SQ\",name:\"ChannelDisplaySequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0244)\":{tag:\"(003A,0244)\",vr:\"US\",name:\"ChannelRecommendedDisplayCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(003A,0245)\":{tag:\"(003A,0245)\",vr:\"FL\",name:\"ChannelPosition\",vm:\"1\",version:\"DICOM\"},\"(003A,0246)\":{tag:\"(003A,0246)\",vr:\"CS\",name:\"DisplayShadingFlag\",vm:\"1\",version:\"DICOM\"},\"(003A,0247)\":{tag:\"(003A,0247)\",vr:\"FL\",name:\"FractionalChannelDisplayScale\",vm:\"1\",version:\"DICOM\"},\"(003A,0248)\":{tag:\"(003A,0248)\",vr:\"FL\",name:\"AbsoluteChannelDisplayScale\",vm:\"1\",version:\"DICOM\"},\"(003A,0300)\":{tag:\"(003A,0300)\",vr:\"SQ\",name:\"MultiplexedAudioChannelsDescriptionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0301)\":{tag:\"(003A,0301)\",vr:\"IS\",name:\"ChannelIdentificationCode\",vm:\"1\",version:\"DICOM\"},\"(003A,0302)\":{tag:\"(003A,0302)\",vr:\"CS\",name:\"ChannelMode\",vm:\"1\",version:\"DICOM\"},\"(003A,0310)\":{tag:\"(003A,0310)\",vr:\"UI\",name:\"MultiplexGroupUID\",vm:\"1\",version:\"DICOM\"},\"(003A,0311)\":{tag:\"(003A,0311)\",vr:\"DS\",name:\"PowerlineFrequency\",vm:\"1\",version:\"DICOM\"},\"(003A,0312)\":{tag:\"(003A,0312)\",vr:\"SQ\",name:\"ChannelImpedanceSequence\",vm:\"1\",version:\"DICOM\"},\"(003A,0313)\":{tag:\"(003A,0313)\",vr:\"DS\",name:\"ImpedanceValue\",vm:\"1\",version:\"DICOM\"},\"(003A,0314)\":{tag:\"(003A,0314)\",vr:\"DT\",name:\"ImpedanceMeasurementDateTime\",vm:\"1\",version:\"DICOM\"},\"(003A,0315)\":{tag:\"(003A,0315)\",vr:\"DS\",name:\"ImpedanceMeasurementFrequency\",vm:\"1\",version:\"DICOM\"},\"(003A,0316)\":{tag:\"(003A,0316)\",vr:\"CS\",name:\"ImpedanceMeasurementCurrentType\",vm:\"1\",version:\"DICOM\"},\"(0040,0001)\":{tag:\"(0040,0001)\",vr:\"AE\",name:\"ScheduledStationAETitle\",vm:\"1-n\",version:\"DICOM\"},\"(0040,0002)\":{tag:\"(0040,0002)\",vr:\"DA\",name:\"ScheduledProcedureStepStartDate\",vm:\"1\",version:\"DICOM\"},\"(0040,0003)\":{tag:\"(0040,0003)\",vr:\"TM\",name:\"ScheduledProcedureStepStartTime\",vm:\"1\",version:\"DICOM\"},\"(0040,0004)\":{tag:\"(0040,0004)\",vr:\"DA\",name:\"ScheduledProcedureStepEndDate\",vm:\"1\",version:\"DICOM\"},\"(0040,0005)\":{tag:\"(0040,0005)\",vr:\"TM\",name:\"ScheduledProcedureStepEndTime\",vm:\"1\",version:\"DICOM\"},\"(0040,0006)\":{tag:\"(0040,0006)\",vr:\"PN\",name:\"ScheduledPerformingPhysicianName\",vm:\"1\",version:\"DICOM\"},\"(0040,0007)\":{tag:\"(0040,0007)\",vr:\"LO\",name:\"ScheduledProcedureStepDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0008)\":{tag:\"(0040,0008)\",vr:\"SQ\",name:\"ScheduledProtocolCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0009)\":{tag:\"(0040,0009)\",vr:\"SH\",name:\"ScheduledProcedureStepID\",vm:\"1\",version:\"DICOM\"},\"(0040,000A)\":{tag:\"(0040,000A)\",vr:\"SQ\",name:\"StageCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,000B)\":{tag:\"(0040,000B)\",vr:\"SQ\",name:\"ScheduledPerformingPhysicianIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0010)\":{tag:\"(0040,0010)\",vr:\"SH\",name:\"ScheduledStationName\",vm:\"1-n\",version:\"DICOM\"},\"(0040,0011)\":{tag:\"(0040,0011)\",vr:\"SH\",name:\"ScheduledProcedureStepLocation\",vm:\"1\",version:\"DICOM\"},\"(0040,0012)\":{tag:\"(0040,0012)\",vr:\"LO\",name:\"PreMedication\",vm:\"1\",version:\"DICOM\"},\"(0040,0020)\":{tag:\"(0040,0020)\",vr:\"CS\",name:\"ScheduledProcedureStepStatus\",vm:\"1\",version:\"DICOM\"},\"(0040,0026)\":{tag:\"(0040,0026)\",vr:\"SQ\",name:\"OrderPlacerIdentifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0027)\":{tag:\"(0040,0027)\",vr:\"SQ\",name:\"OrderFillerIdentifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0031)\":{tag:\"(0040,0031)\",vr:\"UT\",name:\"LocalNamespaceEntityID\",vm:\"1\",version:\"DICOM\"},\"(0040,0032)\":{tag:\"(0040,0032)\",vr:\"UT\",name:\"UniversalEntityID\",vm:\"1\",version:\"DICOM\"},\"(0040,0033)\":{tag:\"(0040,0033)\",vr:\"CS\",name:\"UniversalEntityIDType\",vm:\"1\",version:\"DICOM\"},\"(0040,0035)\":{tag:\"(0040,0035)\",vr:\"CS\",name:\"IdentifierTypeCode\",vm:\"1\",version:\"DICOM\"},\"(0040,0036)\":{tag:\"(0040,0036)\",vr:\"SQ\",name:\"AssigningFacilitySequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0039)\":{tag:\"(0040,0039)\",vr:\"SQ\",name:\"AssigningJurisdictionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,003A)\":{tag:\"(0040,003A)\",vr:\"SQ\",name:\"AssigningAgencyOrDepartmentCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0100)\":{tag:\"(0040,0100)\",vr:\"SQ\",name:\"ScheduledProcedureStepSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0220)\":{tag:\"(0040,0220)\",vr:\"SQ\",name:\"ReferencedNonImageCompositeSOPInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0241)\":{tag:\"(0040,0241)\",vr:\"AE\",name:\"PerformedStationAETitle\",vm:\"1\",version:\"DICOM\"},\"(0040,0242)\":{tag:\"(0040,0242)\",vr:\"SH\",name:\"PerformedStationName\",vm:\"1\",version:\"DICOM\"},\"(0040,0243)\":{tag:\"(0040,0243)\",vr:\"SH\",name:\"PerformedLocation\",vm:\"1\",version:\"DICOM\"},\"(0040,0244)\":{tag:\"(0040,0244)\",vr:\"DA\",name:\"PerformedProcedureStepStartDate\",vm:\"1\",version:\"DICOM\"},\"(0040,0245)\":{tag:\"(0040,0245)\",vr:\"TM\",name:\"PerformedProcedureStepStartTime\",vm:\"1\",version:\"DICOM\"},\"(0040,0250)\":{tag:\"(0040,0250)\",vr:\"DA\",name:\"PerformedProcedureStepEndDate\",vm:\"1\",version:\"DICOM\"},\"(0040,0251)\":{tag:\"(0040,0251)\",vr:\"TM\",name:\"PerformedProcedureStepEndTime\",vm:\"1\",version:\"DICOM\"},\"(0040,0252)\":{tag:\"(0040,0252)\",vr:\"CS\",name:\"PerformedProcedureStepStatus\",vm:\"1\",version:\"DICOM\"},\"(0040,0253)\":{tag:\"(0040,0253)\",vr:\"SH\",name:\"PerformedProcedureStepID\",vm:\"1\",version:\"DICOM\"},\"(0040,0254)\":{tag:\"(0040,0254)\",vr:\"LO\",name:\"PerformedProcedureStepDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0255)\":{tag:\"(0040,0255)\",vr:\"LO\",name:\"PerformedProcedureTypeDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0260)\":{tag:\"(0040,0260)\",vr:\"SQ\",name:\"PerformedProtocolCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0261)\":{tag:\"(0040,0261)\",vr:\"CS\",name:\"PerformedProtocolType\",vm:\"1\",version:\"DICOM\"},\"(0040,0270)\":{tag:\"(0040,0270)\",vr:\"SQ\",name:\"ScheduledStepAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0275)\":{tag:\"(0040,0275)\",vr:\"SQ\",name:\"RequestAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0280)\":{tag:\"(0040,0280)\",vr:\"ST\",name:\"CommentsOnThePerformedProcedureStep\",vm:\"1\",version:\"DICOM\"},\"(0040,0281)\":{tag:\"(0040,0281)\",vr:\"SQ\",name:\"PerformedProcedureStepDiscontinuationReasonCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0293)\":{tag:\"(0040,0293)\",vr:\"SQ\",name:\"QuantitySequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0294)\":{tag:\"(0040,0294)\",vr:\"DS\",name:\"Quantity\",vm:\"1\",version:\"DICOM\"},\"(0040,0295)\":{tag:\"(0040,0295)\",vr:\"SQ\",name:\"MeasuringUnitsSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0296)\":{tag:\"(0040,0296)\",vr:\"SQ\",name:\"BillingItemSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0300)\":{tag:\"(0040,0300)\",vr:\"US\",name:\"TotalTimeOfFluoroscopy\",vm:\"1\",version:\"DICOM\"},\"(0040,0301)\":{tag:\"(0040,0301)\",vr:\"US\",name:\"TotalNumberOfExposures\",vm:\"1\",version:\"DICOM\"},\"(0040,0302)\":{tag:\"(0040,0302)\",vr:\"US\",name:\"EntranceDose\",vm:\"1\",version:\"DICOM\"},\"(0040,0303)\":{tag:\"(0040,0303)\",vr:\"US\",name:\"ExposedArea\",vm:\"1-2\",version:\"DICOM\"},\"(0040,0306)\":{tag:\"(0040,0306)\",vr:\"DS\",name:\"DistanceSourceToEntrance\",vm:\"1\",version:\"DICOM\"},\"(0040,030E)\":{tag:\"(0040,030E)\",vr:\"SQ\",name:\"ExposureDoseSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0310)\":{tag:\"(0040,0310)\",vr:\"ST\",name:\"CommentsOnRadiationDose\",vm:\"1\",version:\"DICOM\"},\"(0040,0312)\":{tag:\"(0040,0312)\",vr:\"DS\",name:\"XRayOutput\",vm:\"1\",version:\"DICOM\"},\"(0040,0314)\":{tag:\"(0040,0314)\",vr:\"DS\",name:\"HalfValueLayer\",vm:\"1\",version:\"DICOM\"},\"(0040,0316)\":{tag:\"(0040,0316)\",vr:\"DS\",name:\"OrganDose\",vm:\"1\",version:\"DICOM\"},\"(0040,0318)\":{tag:\"(0040,0318)\",vr:\"CS\",name:\"OrganExposed\",vm:\"1\",version:\"DICOM\"},\"(0040,0320)\":{tag:\"(0040,0320)\",vr:\"SQ\",name:\"BillingProcedureStepSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0321)\":{tag:\"(0040,0321)\",vr:\"SQ\",name:\"FilmConsumptionSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0324)\":{tag:\"(0040,0324)\",vr:\"SQ\",name:\"BillingSuppliesAndDevicesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0340)\":{tag:\"(0040,0340)\",vr:\"SQ\",name:\"PerformedSeriesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0400)\":{tag:\"(0040,0400)\",vr:\"LT\",name:\"CommentsOnTheScheduledProcedureStep\",vm:\"1\",version:\"DICOM\"},\"(0040,0440)\":{tag:\"(0040,0440)\",vr:\"SQ\",name:\"ProtocolContextSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0441)\":{tag:\"(0040,0441)\",vr:\"SQ\",name:\"ContentItemModifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0500)\":{tag:\"(0040,0500)\",vr:\"SQ\",name:\"ScheduledSpecimenSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0512)\":{tag:\"(0040,0512)\",vr:\"LO\",name:\"ContainerIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0040,0513)\":{tag:\"(0040,0513)\",vr:\"SQ\",name:\"IssuerOfTheContainerIdentifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0515)\":{tag:\"(0040,0515)\",vr:\"SQ\",name:\"AlternateContainerIdentifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0518)\":{tag:\"(0040,0518)\",vr:\"SQ\",name:\"ContainerTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,051A)\":{tag:\"(0040,051A)\",vr:\"LO\",name:\"ContainerDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0520)\":{tag:\"(0040,0520)\",vr:\"SQ\",name:\"ContainerComponentSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0551)\":{tag:\"(0040,0551)\",vr:\"LO\",name:\"SpecimenIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0040,0554)\":{tag:\"(0040,0554)\",vr:\"UI\",name:\"SpecimenUID\",vm:\"1\",version:\"DICOM\"},\"(0040,0555)\":{tag:\"(0040,0555)\",vr:\"SQ\",name:\"AcquisitionContextSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0556)\":{tag:\"(0040,0556)\",vr:\"ST\",name:\"AcquisitionContextDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0560)\":{tag:\"(0040,0560)\",vr:\"SQ\",name:\"SpecimenDescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0562)\":{tag:\"(0040,0562)\",vr:\"SQ\",name:\"IssuerOfTheSpecimenIdentifierSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,059A)\":{tag:\"(0040,059A)\",vr:\"SQ\",name:\"SpecimenTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0600)\":{tag:\"(0040,0600)\",vr:\"LO\",name:\"SpecimenShortDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0602)\":{tag:\"(0040,0602)\",vr:\"UT\",name:\"SpecimenDetailedDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,0610)\":{tag:\"(0040,0610)\",vr:\"SQ\",name:\"SpecimenPreparationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0612)\":{tag:\"(0040,0612)\",vr:\"SQ\",name:\"SpecimenPreparationStepContentItemSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0620)\":{tag:\"(0040,0620)\",vr:\"SQ\",name:\"SpecimenLocalizationContentItemSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,0710)\":{tag:\"(0040,0710)\",vr:\"SQ\",name:\"WholeSlideMicroscopyImageFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,071A)\":{tag:\"(0040,071A)\",vr:\"SQ\",name:\"ImageCenterPointCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,072A)\":{tag:\"(0040,072A)\",vr:\"DS\",name:\"XOffsetInSlideCoordinateSystem\",vm:\"1\",version:\"DICOM\"},\"(0040,073A)\":{tag:\"(0040,073A)\",vr:\"DS\",name:\"YOffsetInSlideCoordinateSystem\",vm:\"1\",version:\"DICOM\"},\"(0040,074A)\":{tag:\"(0040,074A)\",vr:\"DS\",name:\"ZOffsetInSlideCoordinateSystem\",vm:\"1\",version:\"DICOM\"},\"(0040,08EA)\":{tag:\"(0040,08EA)\",vr:\"SQ\",name:\"MeasurementUnitsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,1001)\":{tag:\"(0040,1001)\",vr:\"SH\",name:\"RequestedProcedureID\",vm:\"1\",version:\"DICOM\"},\"(0040,1002)\":{tag:\"(0040,1002)\",vr:\"LO\",name:\"ReasonForTheRequestedProcedure\",vm:\"1\",version:\"DICOM\"},\"(0040,1003)\":{tag:\"(0040,1003)\",vr:\"SH\",name:\"RequestedProcedurePriority\",vm:\"1\",version:\"DICOM\"},\"(0040,1004)\":{tag:\"(0040,1004)\",vr:\"LO\",name:\"PatientTransportArrangements\",vm:\"1\",version:\"DICOM\"},\"(0040,1005)\":{tag:\"(0040,1005)\",vr:\"LO\",name:\"RequestedProcedureLocation\",vm:\"1\",version:\"DICOM\"},\"(0040,1008)\":{tag:\"(0040,1008)\",vr:\"LO\",name:\"ConfidentialityCode\",vm:\"1\",version:\"DICOM\"},\"(0040,1009)\":{tag:\"(0040,1009)\",vr:\"SH\",name:\"ReportingPriority\",vm:\"1\",version:\"DICOM\"},\"(0040,100A)\":{tag:\"(0040,100A)\",vr:\"SQ\",name:\"ReasonForRequestedProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,1010)\":{tag:\"(0040,1010)\",vr:\"PN\",name:\"NamesOfIntendedRecipientsOfResults\",vm:\"1-n\",version:\"DICOM\"},\"(0040,1011)\":{tag:\"(0040,1011)\",vr:\"SQ\",name:\"IntendedRecipientsOfResultsIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,1012)\":{tag:\"(0040,1012)\",vr:\"SQ\",name:\"ReasonForPerformedProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,1101)\":{tag:\"(0040,1101)\",vr:\"SQ\",name:\"PersonIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,1102)\":{tag:\"(0040,1102)\",vr:\"ST\",name:\"PersonAddress\",vm:\"1\",version:\"DICOM\"},\"(0040,1103)\":{tag:\"(0040,1103)\",vr:\"LO\",name:\"PersonTelephoneNumbers\",vm:\"1-n\",version:\"DICOM\"},\"(0040,1104)\":{tag:\"(0040,1104)\",vr:\"LT\",name:\"PersonTelecomInformation\",vm:\"1\",version:\"DICOM\"},\"(0040,1400)\":{tag:\"(0040,1400)\",vr:\"LT\",name:\"RequestedProcedureComments\",vm:\"1\",version:\"DICOM\"},\"(0040,2004)\":{tag:\"(0040,2004)\",vr:\"DA\",name:\"IssueDateOfImagingServiceRequest\",vm:\"1\",version:\"DICOM\"},\"(0040,2005)\":{tag:\"(0040,2005)\",vr:\"TM\",name:\"IssueTimeOfImagingServiceRequest\",vm:\"1\",version:\"DICOM\"},\"(0040,2008)\":{tag:\"(0040,2008)\",vr:\"PN\",name:\"OrderEnteredBy\",vm:\"1\",version:\"DICOM\"},\"(0040,2009)\":{tag:\"(0040,2009)\",vr:\"SH\",name:\"OrderEntererLocation\",vm:\"1\",version:\"DICOM\"},\"(0040,2010)\":{tag:\"(0040,2010)\",vr:\"SH\",name:\"OrderCallbackPhoneNumber\",vm:\"1\",version:\"DICOM\"},\"(0040,2011)\":{tag:\"(0040,2011)\",vr:\"LT\",name:\"OrderCallbackTelecomInformation\",vm:\"1\",version:\"DICOM\"},\"(0040,2016)\":{tag:\"(0040,2016)\",vr:\"LO\",name:\"PlacerOrderNumberImagingServiceRequest\",vm:\"1\",version:\"DICOM\"},\"(0040,2017)\":{tag:\"(0040,2017)\",vr:\"LO\",name:\"FillerOrderNumberImagingServiceRequest\",vm:\"1\",version:\"DICOM\"},\"(0040,2400)\":{tag:\"(0040,2400)\",vr:\"LT\",name:\"ImagingServiceRequestComments\",vm:\"1\",version:\"DICOM\"},\"(0040,3001)\":{tag:\"(0040,3001)\",vr:\"LO\",name:\"ConfidentialityConstraintOnPatientDataDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,4005)\":{tag:\"(0040,4005)\",vr:\"DT\",name:\"ScheduledProcedureStepStartDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,4007)\":{tag:\"(0040,4007)\",vr:\"SQ\",name:\"PerformedProcessingApplicationsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4008)\":{tag:\"(0040,4008)\",vr:\"DT\",name:\"ScheduledProcedureStepExpirationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,4009)\":{tag:\"(0040,4009)\",vr:\"SQ\",name:\"HumanPerformerCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4010)\":{tag:\"(0040,4010)\",vr:\"DT\",name:\"ScheduledProcedureStepModificationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,4011)\":{tag:\"(0040,4011)\",vr:\"DT\",name:\"ExpectedCompletionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,4018)\":{tag:\"(0040,4018)\",vr:\"SQ\",name:\"ScheduledWorkitemCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4019)\":{tag:\"(0040,4019)\",vr:\"SQ\",name:\"PerformedWorkitemCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4020)\":{tag:\"(0040,4020)\",vr:\"CS\",name:\"InputAvailabilityFlag\",vm:\"1\",version:\"DICOM\"},\"(0040,4021)\":{tag:\"(0040,4021)\",vr:\"SQ\",name:\"InputInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4025)\":{tag:\"(0040,4025)\",vr:\"SQ\",name:\"ScheduledStationNameCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4026)\":{tag:\"(0040,4026)\",vr:\"SQ\",name:\"ScheduledStationClassCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4027)\":{tag:\"(0040,4027)\",vr:\"SQ\",name:\"ScheduledStationGeographicLocationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4028)\":{tag:\"(0040,4028)\",vr:\"SQ\",name:\"PerformedStationNameCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4029)\":{tag:\"(0040,4029)\",vr:\"SQ\",name:\"PerformedStationClassCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4030)\":{tag:\"(0040,4030)\",vr:\"SQ\",name:\"PerformedStationGeographicLocationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4033)\":{tag:\"(0040,4033)\",vr:\"SQ\",name:\"OutputInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4034)\":{tag:\"(0040,4034)\",vr:\"SQ\",name:\"ScheduledHumanPerformersSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4035)\":{tag:\"(0040,4035)\",vr:\"SQ\",name:\"ActualHumanPerformersSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,4036)\":{tag:\"(0040,4036)\",vr:\"LO\",name:\"HumanPerformerOrganization\",vm:\"1\",version:\"DICOM\"},\"(0040,4037)\":{tag:\"(0040,4037)\",vr:\"PN\",name:\"HumanPerformerName\",vm:\"1\",version:\"DICOM\"},\"(0040,4040)\":{tag:\"(0040,4040)\",vr:\"CS\",name:\"RawDataHandling\",vm:\"1\",version:\"DICOM\"},\"(0040,4041)\":{tag:\"(0040,4041)\",vr:\"CS\",name:\"InputReadinessState\",vm:\"1\",version:\"DICOM\"},\"(0040,4050)\":{tag:\"(0040,4050)\",vr:\"DT\",name:\"PerformedProcedureStepStartDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,4051)\":{tag:\"(0040,4051)\",vr:\"DT\",name:\"PerformedProcedureStepEndDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,4052)\":{tag:\"(0040,4052)\",vr:\"DT\",name:\"ProcedureStepCancellationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,8302)\":{tag:\"(0040,8302)\",vr:\"DS\",name:\"EntranceDoseInmGy\",vm:\"1\",version:\"DICOM\"},\"(0040,8303)\":{tag:\"(0040,8303)\",vr:\"CS\",name:\"EntranceDoseDerivation\",vm:\"1\",version:\"DICOM\"},\"(0040,9092)\":{tag:\"(0040,9092)\",vr:\"SQ\",name:\"ParametricMapFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,9094)\":{tag:\"(0040,9094)\",vr:\"SQ\",name:\"ReferencedImageRealWorldValueMappingSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,9096)\":{tag:\"(0040,9096)\",vr:\"SQ\",name:\"RealWorldValueMappingSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,9098)\":{tag:\"(0040,9098)\",vr:\"SQ\",name:\"PixelValueMappingCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,9210)\":{tag:\"(0040,9210)\",vr:\"SH\",name:\"LUTLabel\",vm:\"1\",version:\"DICOM\"},\"(0040,9211)\":{tag:\"(0040,9211)\",vr:\"xs\",name:\"RealWorldValueLastValueMapped\",vm:\"1\",version:\"DICOM\"},\"(0040,9212)\":{tag:\"(0040,9212)\",vr:\"FD\",name:\"RealWorldValueLUTData\",vm:\"1-n\",version:\"DICOM\"},\"(0040,9216)\":{tag:\"(0040,9216)\",vr:\"xs\",name:\"RealWorldValueFirstValueMapped\",vm:\"1\",version:\"DICOM\"},\"(0040,9220)\":{tag:\"(0040,9220)\",vr:\"SQ\",name:\"QuantityDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,9224)\":{tag:\"(0040,9224)\",vr:\"FD\",name:\"RealWorldValueIntercept\",vm:\"1\",version:\"DICOM\"},\"(0040,9225)\":{tag:\"(0040,9225)\",vr:\"FD\",name:\"RealWorldValueSlope\",vm:\"1\",version:\"DICOM\"},\"(0040,A010)\":{tag:\"(0040,A010)\",vr:\"CS\",name:\"RelationshipType\",vm:\"1\",version:\"DICOM\"},\"(0040,A027)\":{tag:\"(0040,A027)\",vr:\"LO\",name:\"VerifyingOrganization\",vm:\"1\",version:\"DICOM\"},\"(0040,A030)\":{tag:\"(0040,A030)\",vr:\"DT\",name:\"VerificationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,A032)\":{tag:\"(0040,A032)\",vr:\"DT\",name:\"ObservationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,A033)\":{tag:\"(0040,A033)\",vr:\"DT\",name:\"ObservationStartDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,A040)\":{tag:\"(0040,A040)\",vr:\"CS\",name:\"ValueType\",vm:\"1\",version:\"DICOM\"},\"(0040,A043)\":{tag:\"(0040,A043)\",vr:\"SQ\",name:\"ConceptNameCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A050)\":{tag:\"(0040,A050)\",vr:\"CS\",name:\"ContinuityOfContent\",vm:\"1\",version:\"DICOM\"},\"(0040,A073)\":{tag:\"(0040,A073)\",vr:\"SQ\",name:\"VerifyingObserverSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A075)\":{tag:\"(0040,A075)\",vr:\"PN\",name:\"VerifyingObserverName\",vm:\"1\",version:\"DICOM\"},\"(0040,A078)\":{tag:\"(0040,A078)\",vr:\"SQ\",name:\"AuthorObserverSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A07A)\":{tag:\"(0040,A07A)\",vr:\"SQ\",name:\"ParticipantSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A07C)\":{tag:\"(0040,A07C)\",vr:\"SQ\",name:\"CustodialOrganizationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A080)\":{tag:\"(0040,A080)\",vr:\"CS\",name:\"ParticipationType\",vm:\"1\",version:\"DICOM\"},\"(0040,A082)\":{tag:\"(0040,A082)\",vr:\"DT\",name:\"ParticipationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,A084)\":{tag:\"(0040,A084)\",vr:\"CS\",name:\"ObserverType\",vm:\"1\",version:\"DICOM\"},\"(0040,A088)\":{tag:\"(0040,A088)\",vr:\"SQ\",name:\"VerifyingObserverIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A0B0)\":{tag:\"(0040,A0B0)\",vr:\"US\",name:\"ReferencedWaveformChannels\",vm:\"2-2n\",version:\"DICOM\"},\"(0040,A120)\":{tag:\"(0040,A120)\",vr:\"DT\",name:\"DateTime\",vm:\"1\",version:\"DICOM\"},\"(0040,A121)\":{tag:\"(0040,A121)\",vr:\"DA\",name:\"Date\",vm:\"1\",version:\"DICOM\"},\"(0040,A122)\":{tag:\"(0040,A122)\",vr:\"TM\",name:\"Time\",vm:\"1\",version:\"DICOM\"},\"(0040,A123)\":{tag:\"(0040,A123)\",vr:\"PN\",name:\"PersonName\",vm:\"1\",version:\"DICOM\"},\"(0040,A124)\":{tag:\"(0040,A124)\",vr:\"UI\",name:\"UID\",vm:\"1\",version:\"DICOM\"},\"(0040,A130)\":{tag:\"(0040,A130)\",vr:\"CS\",name:\"TemporalRangeType\",vm:\"1\",version:\"DICOM\"},\"(0040,A132)\":{tag:\"(0040,A132)\",vr:\"UL\",name:\"ReferencedSamplePositions\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A136)\":{tag:\"(0040,A136)\",vr:\"US\",name:\"ReferencedFrameNumbers\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A138)\":{tag:\"(0040,A138)\",vr:\"DS\",name:\"ReferencedTimeOffsets\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A13A)\":{tag:\"(0040,A13A)\",vr:\"DT\",name:\"ReferencedDateTime\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A160)\":{tag:\"(0040,A160)\",vr:\"UT\",name:\"TextValue\",vm:\"1\",version:\"DICOM\"},\"(0040,A161)\":{tag:\"(0040,A161)\",vr:\"FD\",name:\"FloatingPointValue\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A162)\":{tag:\"(0040,A162)\",vr:\"SL\",name:\"RationalNumeratorValue\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A163)\":{tag:\"(0040,A163)\",vr:\"UL\",name:\"RationalDenominatorValue\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A168)\":{tag:\"(0040,A168)\",vr:\"SQ\",name:\"ConceptCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A170)\":{tag:\"(0040,A170)\",vr:\"SQ\",name:\"PurposeOfReferenceCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A171)\":{tag:\"(0040,A171)\",vr:\"UI\",name:\"ObservationUID\",vm:\"1\",version:\"DICOM\"},\"(0040,A180)\":{tag:\"(0040,A180)\",vr:\"US\",name:\"AnnotationGroupNumber\",vm:\"1\",version:\"DICOM\"},\"(0040,A195)\":{tag:\"(0040,A195)\",vr:\"SQ\",name:\"ModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A300)\":{tag:\"(0040,A300)\",vr:\"SQ\",name:\"MeasuredValueSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A301)\":{tag:\"(0040,A301)\",vr:\"SQ\",name:\"NumericValueQualifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A30A)\":{tag:\"(0040,A30A)\",vr:\"DS\",name:\"NumericValue\",vm:\"1-n\",version:\"DICOM\"},\"(0040,A360)\":{tag:\"(0040,A360)\",vr:\"SQ\",name:\"PredecessorDocumentsSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A370)\":{tag:\"(0040,A370)\",vr:\"SQ\",name:\"ReferencedRequestSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A372)\":{tag:\"(0040,A372)\",vr:\"SQ\",name:\"PerformedProcedureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A375)\":{tag:\"(0040,A375)\",vr:\"SQ\",name:\"CurrentRequestedProcedureEvidenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A385)\":{tag:\"(0040,A385)\",vr:\"SQ\",name:\"PertinentOtherEvidenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A390)\":{tag:\"(0040,A390)\",vr:\"SQ\",name:\"HL7StructuredDocumentReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A491)\":{tag:\"(0040,A491)\",vr:\"CS\",name:\"CompletionFlag\",vm:\"1\",version:\"DICOM\"},\"(0040,A492)\":{tag:\"(0040,A492)\",vr:\"LO\",name:\"CompletionFlagDescription\",vm:\"1\",version:\"DICOM\"},\"(0040,A493)\":{tag:\"(0040,A493)\",vr:\"CS\",name:\"VerificationFlag\",vm:\"1\",version:\"DICOM\"},\"(0040,A494)\":{tag:\"(0040,A494)\",vr:\"CS\",name:\"ArchiveRequested\",vm:\"1\",version:\"DICOM\"},\"(0040,A496)\":{tag:\"(0040,A496)\",vr:\"CS\",name:\"PreliminaryFlag\",vm:\"1\",version:\"DICOM\"},\"(0040,A504)\":{tag:\"(0040,A504)\",vr:\"SQ\",name:\"ContentTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A525)\":{tag:\"(0040,A525)\",vr:\"SQ\",name:\"IdenticalDocumentsSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A730)\":{tag:\"(0040,A730)\",vr:\"SQ\",name:\"ContentSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A801)\":{tag:\"(0040,A801)\",vr:\"SQ\",name:\"TabulatedValuesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A802)\":{tag:\"(0040,A802)\",vr:\"UL\",name:\"NumberOfTableRows\",vm:\"1\",version:\"DICOM\"},\"(0040,A803)\":{tag:\"(0040,A803)\",vr:\"UL\",name:\"NumbeOfTableColumns\",vm:\"1\",version:\"DICOM\"},\"(0040,A804)\":{tag:\"(0040,A804)\",vr:\"UL\",name:\"TableRowNumber\",vm:\"1\",version:\"DICOM\"},\"(0040,A805)\":{tag:\"(0040,A805)\",vr:\"UL\",name:\"TableColumnNumber\",vm:\"1\",version:\"DICOM\"},\"(0040,A806)\":{tag:\"(0040,A806)\",vr:\"SQ\",name:\"TableRowDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A807)\":{tag:\"(0040,A807)\",vr:\"SQ\",name:\"TableColumnDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,A808)\":{tag:\"(0040,A808)\",vr:\"SQ\",name:\"CellValuesSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,B020)\":{tag:\"(0040,B020)\",vr:\"SQ\",name:\"WaveformAnnotationSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,DB00)\":{tag:\"(0040,DB00)\",vr:\"CS\",name:\"TemplateIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0040,DB73)\":{tag:\"(0040,DB73)\",vr:\"UL\",name:\"ReferencedContentItemIdentifier\",vm:\"1-n\",version:\"DICOM\"},\"(0040,E001)\":{tag:\"(0040,E001)\",vr:\"ST\",name:\"HL7InstanceIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0040,E004)\":{tag:\"(0040,E004)\",vr:\"DT\",name:\"HL7DocumentEffectiveTime\",vm:\"1\",version:\"DICOM\"},\"(0040,E006)\":{tag:\"(0040,E006)\",vr:\"SQ\",name:\"HL7DocumentTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E008)\":{tag:\"(0040,E008)\",vr:\"SQ\",name:\"DocumentClassCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E010)\":{tag:\"(0040,E010)\",vr:\"UR\",name:\"RetrieveURI\",vm:\"1\",version:\"DICOM\"},\"(0040,E011)\":{tag:\"(0040,E011)\",vr:\"UI\",name:\"RetrieveLocationUID\",vm:\"1\",version:\"DICOM\"},\"(0040,E020)\":{tag:\"(0040,E020)\",vr:\"CS\",name:\"TypeOfInstances\",vm:\"1\",version:\"DICOM\"},\"(0040,E021)\":{tag:\"(0040,E021)\",vr:\"SQ\",name:\"DICOMRetrievalSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E022)\":{tag:\"(0040,E022)\",vr:\"SQ\",name:\"DICOMMediaRetrievalSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E023)\":{tag:\"(0040,E023)\",vr:\"SQ\",name:\"WADORetrievalSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E024)\":{tag:\"(0040,E024)\",vr:\"SQ\",name:\"XDSRetrievalSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E025)\":{tag:\"(0040,E025)\",vr:\"SQ\",name:\"WADORSRetrievalSequence\",vm:\"1\",version:\"DICOM\"},\"(0040,E030)\":{tag:\"(0040,E030)\",vr:\"UI\",name:\"RepositoryUniqueID\",vm:\"1\",version:\"DICOM\"},\"(0040,E031)\":{tag:\"(0040,E031)\",vr:\"UI\",name:\"HomeCommunityID\",vm:\"1\",version:\"DICOM\"},\"(0042,0010)\":{tag:\"(0042,0010)\",vr:\"ST\",name:\"DocumentTitle\",vm:\"1\",version:\"DICOM\"},\"(0042,0011)\":{tag:\"(0042,0011)\",vr:\"OB\",name:\"EncapsulatedDocument\",vm:\"1\",version:\"DICOM\"},\"(0042,0012)\":{tag:\"(0042,0012)\",vr:\"LO\",name:\"MIMETypeOfEncapsulatedDocument\",vm:\"1\",version:\"DICOM\"},\"(0042,0013)\":{tag:\"(0042,0013)\",vr:\"SQ\",name:\"SourceInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0042,0014)\":{tag:\"(0042,0014)\",vr:\"LO\",name:\"ListOfMIMETypes\",vm:\"1-n\",version:\"DICOM\"},\"(0042,0015)\":{tag:\"(0042,0015)\",vr:\"UL\",name:\"EncapsulatedDocumentLength\",vm:\"1\",version:\"DICOM\"},\"(0044,0001)\":{tag:\"(0044,0001)\",vr:\"ST\",name:\"ProductPackageIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0044,0002)\":{tag:\"(0044,0002)\",vr:\"CS\",name:\"SubstanceAdministrationApproval\",vm:\"1\",version:\"DICOM\"},\"(0044,0003)\":{tag:\"(0044,0003)\",vr:\"LT\",name:\"ApprovalStatusFurtherDescription\",vm:\"1\",version:\"DICOM\"},\"(0044,0004)\":{tag:\"(0044,0004)\",vr:\"DT\",name:\"ApprovalStatusDateTime\",vm:\"1\",version:\"DICOM\"},\"(0044,0007)\":{tag:\"(0044,0007)\",vr:\"SQ\",name:\"ProductTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0008)\":{tag:\"(0044,0008)\",vr:\"LO\",name:\"ProductName\",vm:\"1-n\",version:\"DICOM\"},\"(0044,0009)\":{tag:\"(0044,0009)\",vr:\"LT\",name:\"ProductDescription\",vm:\"1\",version:\"DICOM\"},\"(0044,000A)\":{tag:\"(0044,000A)\",vr:\"LO\",name:\"ProductLotIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0044,000B)\":{tag:\"(0044,000B)\",vr:\"DT\",name:\"ProductExpirationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0044,0010)\":{tag:\"(0044,0010)\",vr:\"DT\",name:\"SubstanceAdministrationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0044,0011)\":{tag:\"(0044,0011)\",vr:\"LO\",name:\"SubstanceAdministrationNotes\",vm:\"1\",version:\"DICOM\"},\"(0044,0012)\":{tag:\"(0044,0012)\",vr:\"LO\",name:\"SubstanceAdministrationDeviceID\",vm:\"1\",version:\"DICOM\"},\"(0044,0013)\":{tag:\"(0044,0013)\",vr:\"SQ\",name:\"ProductParameterSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0019)\":{tag:\"(0044,0019)\",vr:\"SQ\",name:\"SubstanceAdministrationParameterSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0100)\":{tag:\"(0044,0100)\",vr:\"SQ\",name:\"ApprovalSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0101)\":{tag:\"(0044,0101)\",vr:\"SQ\",name:\"AssertionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0102)\":{tag:\"(0044,0102)\",vr:\"UI\",name:\"AssertionUID\",vm:\"1\",version:\"DICOM\"},\"(0044,0103)\":{tag:\"(0044,0103)\",vr:\"SQ\",name:\"AsserterIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0104)\":{tag:\"(0044,0104)\",vr:\"DT\",name:\"AssertionDateTime\",vm:\"1\",version:\"DICOM\"},\"(0044,0105)\":{tag:\"(0044,0105)\",vr:\"DT\",name:\"AssertionExpirationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0044,0106)\":{tag:\"(0044,0106)\",vr:\"UT\",name:\"AssertionComments\",vm:\"1\",version:\"DICOM\"},\"(0044,0107)\":{tag:\"(0044,0107)\",vr:\"SQ\",name:\"RelatedAssertionSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,0108)\":{tag:\"(0044,0108)\",vr:\"UI\",name:\"ReferencedAssertionUID\",vm:\"1\",version:\"DICOM\"},\"(0044,0109)\":{tag:\"(0044,0109)\",vr:\"SQ\",name:\"ApprovalSubjectSequence\",vm:\"1\",version:\"DICOM\"},\"(0044,010A)\":{tag:\"(0044,010A)\",vr:\"SQ\",name:\"OrganizationalRoleCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0012)\":{tag:\"(0046,0012)\",vr:\"LO\",name:\"LensDescription\",vm:\"1\",version:\"DICOM\"},\"(0046,0014)\":{tag:\"(0046,0014)\",vr:\"SQ\",name:\"RightLensSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0015)\":{tag:\"(0046,0015)\",vr:\"SQ\",name:\"LeftLensSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0016)\":{tag:\"(0046,0016)\",vr:\"SQ\",name:\"UnspecifiedLateralityLensSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0018)\":{tag:\"(0046,0018)\",vr:\"SQ\",name:\"CylinderSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0028)\":{tag:\"(0046,0028)\",vr:\"SQ\",name:\"PrismSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0030)\":{tag:\"(0046,0030)\",vr:\"FD\",name:\"HorizontalPrismPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0032)\":{tag:\"(0046,0032)\",vr:\"CS\",name:\"HorizontalPrismBase\",vm:\"1\",version:\"DICOM\"},\"(0046,0034)\":{tag:\"(0046,0034)\",vr:\"FD\",name:\"VerticalPrismPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0036)\":{tag:\"(0046,0036)\",vr:\"CS\",name:\"VerticalPrismBase\",vm:\"1\",version:\"DICOM\"},\"(0046,0038)\":{tag:\"(0046,0038)\",vr:\"CS\",name:\"LensSegmentType\",vm:\"1\",version:\"DICOM\"},\"(0046,0040)\":{tag:\"(0046,0040)\",vr:\"FD\",name:\"OpticalTransmittance\",vm:\"1\",version:\"DICOM\"},\"(0046,0042)\":{tag:\"(0046,0042)\",vr:\"FD\",name:\"ChannelWidth\",vm:\"1\",version:\"DICOM\"},\"(0046,0044)\":{tag:\"(0046,0044)\",vr:\"FD\",name:\"PupilSize\",vm:\"1\",version:\"DICOM\"},\"(0046,0046)\":{tag:\"(0046,0046)\",vr:\"FD\",name:\"CornealSize\",vm:\"1\",version:\"DICOM\"},\"(0046,0047)\":{tag:\"(0046,0047)\",vr:\"SQ\",name:\"CornealSizeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0050)\":{tag:\"(0046,0050)\",vr:\"SQ\",name:\"AutorefractionRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0052)\":{tag:\"(0046,0052)\",vr:\"SQ\",name:\"AutorefractionLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0060)\":{tag:\"(0046,0060)\",vr:\"FD\",name:\"DistancePupillaryDistance\",vm:\"1\",version:\"DICOM\"},\"(0046,0062)\":{tag:\"(0046,0062)\",vr:\"FD\",name:\"NearPupillaryDistance\",vm:\"1\",version:\"DICOM\"},\"(0046,0063)\":{tag:\"(0046,0063)\",vr:\"FD\",name:\"IntermediatePupillaryDistance\",vm:\"1\",version:\"DICOM\"},\"(0046,0064)\":{tag:\"(0046,0064)\",vr:\"FD\",name:\"OtherPupillaryDistance\",vm:\"1\",version:\"DICOM\"},\"(0046,0070)\":{tag:\"(0046,0070)\",vr:\"SQ\",name:\"KeratometryRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0071)\":{tag:\"(0046,0071)\",vr:\"SQ\",name:\"KeratometryLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0074)\":{tag:\"(0046,0074)\",vr:\"SQ\",name:\"SteepKeratometricAxisSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0075)\":{tag:\"(0046,0075)\",vr:\"FD\",name:\"RadiusOfCurvature\",vm:\"1\",version:\"DICOM\"},\"(0046,0076)\":{tag:\"(0046,0076)\",vr:\"FD\",name:\"KeratometricPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0077)\":{tag:\"(0046,0077)\",vr:\"FD\",name:\"KeratometricAxis\",vm:\"1\",version:\"DICOM\"},\"(0046,0080)\":{tag:\"(0046,0080)\",vr:\"SQ\",name:\"FlatKeratometricAxisSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0092)\":{tag:\"(0046,0092)\",vr:\"CS\",name:\"BackgroundColor\",vm:\"1\",version:\"DICOM\"},\"(0046,0094)\":{tag:\"(0046,0094)\",vr:\"CS\",name:\"Optotype\",vm:\"1\",version:\"DICOM\"},\"(0046,0095)\":{tag:\"(0046,0095)\",vr:\"CS\",name:\"OptotypePresentation\",vm:\"1\",version:\"DICOM\"},\"(0046,0097)\":{tag:\"(0046,0097)\",vr:\"SQ\",name:\"SubjectiveRefractionRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0098)\":{tag:\"(0046,0098)\",vr:\"SQ\",name:\"SubjectiveRefractionLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0100)\":{tag:\"(0046,0100)\",vr:\"SQ\",name:\"AddNearSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0101)\":{tag:\"(0046,0101)\",vr:\"SQ\",name:\"AddIntermediateSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0102)\":{tag:\"(0046,0102)\",vr:\"SQ\",name:\"AddOtherSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0104)\":{tag:\"(0046,0104)\",vr:\"FD\",name:\"AddPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0106)\":{tag:\"(0046,0106)\",vr:\"FD\",name:\"ViewingDistance\",vm:\"1\",version:\"DICOM\"},\"(0046,0110)\":{tag:\"(0046,0110)\",vr:\"SQ\",name:\"CorneaMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0111)\":{tag:\"(0046,0111)\",vr:\"SQ\",name:\"SourceOfCorneaMeasurementDataCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0112)\":{tag:\"(0046,0112)\",vr:\"SQ\",name:\"SteepCornealAxisSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0113)\":{tag:\"(0046,0113)\",vr:\"SQ\",name:\"FlatCornealAxisSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0114)\":{tag:\"(0046,0114)\",vr:\"FD\",name:\"CornealPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0115)\":{tag:\"(0046,0115)\",vr:\"FD\",name:\"CornealAxis\",vm:\"1\",version:\"DICOM\"},\"(0046,0116)\":{tag:\"(0046,0116)\",vr:\"SQ\",name:\"CorneaMeasurementMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0117)\":{tag:\"(0046,0117)\",vr:\"FL\",name:\"RefractiveIndexOfCornea\",vm:\"1\",version:\"DICOM\"},\"(0046,0118)\":{tag:\"(0046,0118)\",vr:\"FL\",name:\"RefractiveIndexOfAqueousHumor\",vm:\"1\",version:\"DICOM\"},\"(0046,0121)\":{tag:\"(0046,0121)\",vr:\"SQ\",name:\"VisualAcuityTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0122)\":{tag:\"(0046,0122)\",vr:\"SQ\",name:\"VisualAcuityRightEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0123)\":{tag:\"(0046,0123)\",vr:\"SQ\",name:\"VisualAcuityLeftEyeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0124)\":{tag:\"(0046,0124)\",vr:\"SQ\",name:\"VisualAcuityBothEyesOpenSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0125)\":{tag:\"(0046,0125)\",vr:\"CS\",name:\"ViewingDistanceType\",vm:\"1\",version:\"DICOM\"},\"(0046,0135)\":{tag:\"(0046,0135)\",vr:\"SS\",name:\"VisualAcuityModifiers\",vm:\"2\",version:\"DICOM\"},\"(0046,0137)\":{tag:\"(0046,0137)\",vr:\"FD\",name:\"DecimalVisualAcuity\",vm:\"1\",version:\"DICOM\"},\"(0046,0139)\":{tag:\"(0046,0139)\",vr:\"LO\",name:\"OptotypeDetailedDefinition\",vm:\"1\",version:\"DICOM\"},\"(0046,0145)\":{tag:\"(0046,0145)\",vr:\"SQ\",name:\"ReferencedRefractiveMeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0146)\":{tag:\"(0046,0146)\",vr:\"FD\",name:\"SpherePower\",vm:\"1\",version:\"DICOM\"},\"(0046,0147)\":{tag:\"(0046,0147)\",vr:\"FD\",name:\"CylinderPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0201)\":{tag:\"(0046,0201)\",vr:\"CS\",name:\"CornealTopographySurface\",vm:\"1\",version:\"DICOM\"},\"(0046,0202)\":{tag:\"(0046,0202)\",vr:\"FL\",name:\"CornealVertexLocation\",vm:\"2\",version:\"DICOM\"},\"(0046,0203)\":{tag:\"(0046,0203)\",vr:\"FL\",name:\"PupilCentroidXCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0046,0204)\":{tag:\"(0046,0204)\",vr:\"FL\",name:\"PupilCentroidYCoordinate\",vm:\"1\",version:\"DICOM\"},\"(0046,0205)\":{tag:\"(0046,0205)\",vr:\"FL\",name:\"EquivalentPupilRadius\",vm:\"1\",version:\"DICOM\"},\"(0046,0207)\":{tag:\"(0046,0207)\",vr:\"SQ\",name:\"CornealTopographyMapTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0208)\":{tag:\"(0046,0208)\",vr:\"IS\",name:\"VerticesOfTheOutlineOfPupil\",vm:\"2-2n\",version:\"DICOM\"},\"(0046,0210)\":{tag:\"(0046,0210)\",vr:\"SQ\",name:\"CornealTopographyMappingNormalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0211)\":{tag:\"(0046,0211)\",vr:\"SQ\",name:\"MaximumCornealCurvatureSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0212)\":{tag:\"(0046,0212)\",vr:\"FL\",name:\"MaximumCornealCurvature\",vm:\"1\",version:\"DICOM\"},\"(0046,0213)\":{tag:\"(0046,0213)\",vr:\"FL\",name:\"MaximumCornealCurvatureLocation\",vm:\"2\",version:\"DICOM\"},\"(0046,0215)\":{tag:\"(0046,0215)\",vr:\"SQ\",name:\"MinimumKeratometricSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0218)\":{tag:\"(0046,0218)\",vr:\"SQ\",name:\"SimulatedKeratometricCylinderSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0220)\":{tag:\"(0046,0220)\",vr:\"FL\",name:\"AverageCornealPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0224)\":{tag:\"(0046,0224)\",vr:\"FL\",name:\"CornealISValue\",vm:\"1\",version:\"DICOM\"},\"(0046,0227)\":{tag:\"(0046,0227)\",vr:\"FL\",name:\"AnalyzedArea\",vm:\"1\",version:\"DICOM\"},\"(0046,0230)\":{tag:\"(0046,0230)\",vr:\"FL\",name:\"SurfaceRegularityIndex\",vm:\"1\",version:\"DICOM\"},\"(0046,0232)\":{tag:\"(0046,0232)\",vr:\"FL\",name:\"SurfaceAsymmetryIndex\",vm:\"1\",version:\"DICOM\"},\"(0046,0234)\":{tag:\"(0046,0234)\",vr:\"FL\",name:\"CornealEccentricityIndex\",vm:\"1\",version:\"DICOM\"},\"(0046,0236)\":{tag:\"(0046,0236)\",vr:\"FL\",name:\"KeratoconusPredictionIndex\",vm:\"1\",version:\"DICOM\"},\"(0046,0238)\":{tag:\"(0046,0238)\",vr:\"FL\",name:\"DecimalPotentialVisualAcuity\",vm:\"1\",version:\"DICOM\"},\"(0046,0242)\":{tag:\"(0046,0242)\",vr:\"CS\",name:\"CornealTopographyMapQualityEvaluation\",vm:\"1\",version:\"DICOM\"},\"(0046,0244)\":{tag:\"(0046,0244)\",vr:\"SQ\",name:\"SourceImageCornealProcessedDataSequence\",vm:\"1\",version:\"DICOM\"},\"(0046,0247)\":{tag:\"(0046,0247)\",vr:\"FL\",name:\"CornealPointLocation\",vm:\"3\",version:\"DICOM\"},\"(0046,0248)\":{tag:\"(0046,0248)\",vr:\"CS\",name:\"CornealPointEstimated\",vm:\"1\",version:\"DICOM\"},\"(0046,0249)\":{tag:\"(0046,0249)\",vr:\"FL\",name:\"AxialPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0250)\":{tag:\"(0046,0250)\",vr:\"FL\",name:\"TangentialPower\",vm:\"1\",version:\"DICOM\"},\"(0046,0251)\":{tag:\"(0046,0251)\",vr:\"FL\",name:\"RefractivePower\",vm:\"1\",version:\"DICOM\"},\"(0046,0252)\":{tag:\"(0046,0252)\",vr:\"FL\",name:\"RelativeElevation\",vm:\"1\",version:\"DICOM\"},\"(0046,0253)\":{tag:\"(0046,0253)\",vr:\"FL\",name:\"CornealWavefront\",vm:\"1\",version:\"DICOM\"},\"(0048,0001)\":{tag:\"(0048,0001)\",vr:\"FL\",name:\"ImagedVolumeWidth\",vm:\"1\",version:\"DICOM\"},\"(0048,0002)\":{tag:\"(0048,0002)\",vr:\"FL\",name:\"ImagedVolumeHeight\",vm:\"1\",version:\"DICOM\"},\"(0048,0003)\":{tag:\"(0048,0003)\",vr:\"FL\",name:\"ImagedVolumeDepth\",vm:\"1\",version:\"DICOM\"},\"(0048,0006)\":{tag:\"(0048,0006)\",vr:\"UL\",name:\"TotalPixelMatrixColumns\",vm:\"1\",version:\"DICOM\"},\"(0048,0007)\":{tag:\"(0048,0007)\",vr:\"UL\",name:\"TotalPixelMatrixRows\",vm:\"1\",version:\"DICOM\"},\"(0048,0008)\":{tag:\"(0048,0008)\",vr:\"SQ\",name:\"TotalPixelMatrixOriginSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0010)\":{tag:\"(0048,0010)\",vr:\"CS\",name:\"SpecimenLabelInImage\",vm:\"1\",version:\"DICOM\"},\"(0048,0011)\":{tag:\"(0048,0011)\",vr:\"CS\",name:\"FocusMethod\",vm:\"1\",version:\"DICOM\"},\"(0048,0012)\":{tag:\"(0048,0012)\",vr:\"CS\",name:\"ExtendedDepthOfField\",vm:\"1\",version:\"DICOM\"},\"(0048,0013)\":{tag:\"(0048,0013)\",vr:\"US\",name:\"NumberOfFocalPlanes\",vm:\"1\",version:\"DICOM\"},\"(0048,0014)\":{tag:\"(0048,0014)\",vr:\"FL\",name:\"DistanceBetweenFocalPlanes\",vm:\"1\",version:\"DICOM\"},\"(0048,0015)\":{tag:\"(0048,0015)\",vr:\"US\",name:\"RecommendedAbsentPixelCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0048,0100)\":{tag:\"(0048,0100)\",vr:\"SQ\",name:\"IlluminatorTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0102)\":{tag:\"(0048,0102)\",vr:\"DS\",name:\"ImageOrientationSlide\",vm:\"6\",version:\"DICOM\"},\"(0048,0105)\":{tag:\"(0048,0105)\",vr:\"SQ\",name:\"OpticalPathSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0106)\":{tag:\"(0048,0106)\",vr:\"SH\",name:\"OpticalPathIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0048,0107)\":{tag:\"(0048,0107)\",vr:\"ST\",name:\"OpticalPathDescription\",vm:\"1\",version:\"DICOM\"},\"(0048,0108)\":{tag:\"(0048,0108)\",vr:\"SQ\",name:\"IlluminationColorCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0110)\":{tag:\"(0048,0110)\",vr:\"SQ\",name:\"SpecimenReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0111)\":{tag:\"(0048,0111)\",vr:\"DS\",name:\"CondenserLensPower\",vm:\"1\",version:\"DICOM\"},\"(0048,0112)\":{tag:\"(0048,0112)\",vr:\"DS\",name:\"ObjectiveLensPower\",vm:\"1\",version:\"DICOM\"},\"(0048,0113)\":{tag:\"(0048,0113)\",vr:\"DS\",name:\"ObjectiveLensNumericalAperture\",vm:\"1\",version:\"DICOM\"},\"(0048,0120)\":{tag:\"(0048,0120)\",vr:\"SQ\",name:\"PaletteColorLookupTableSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0200)\":{tag:\"(0048,0200)\",vr:\"SQ\",name:\"ReferencedImageNavigationSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,0201)\":{tag:\"(0048,0201)\",vr:\"US\",name:\"TopLeftHandCornerOfLocalizerArea\",vm:\"2\",version:\"DICOM\"},\"(0048,0202)\":{tag:\"(0048,0202)\",vr:\"US\",name:\"BottomRightHandCornerOfLocalizerArea\",vm:\"2\",version:\"DICOM\"},\"(0048,0207)\":{tag:\"(0048,0207)\",vr:\"SQ\",name:\"OpticalPathIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,021A)\":{tag:\"(0048,021A)\",vr:\"SQ\",name:\"PlanePositionSlideSequence\",vm:\"1\",version:\"DICOM\"},\"(0048,021E)\":{tag:\"(0048,021E)\",vr:\"SL\",name:\"ColumnPositionInTotalImagePixelMatrix\",vm:\"1\",version:\"DICOM\"},\"(0048,021F)\":{tag:\"(0048,021F)\",vr:\"SL\",name:\"RowPositionInTotalImagePixelMatrix\",vm:\"1\",version:\"DICOM\"},\"(0048,0301)\":{tag:\"(0048,0301)\",vr:\"CS\",name:\"PixelOriginInterpretation\",vm:\"1\",version:\"DICOM\"},\"(0048,0302)\":{tag:\"(0048,0302)\",vr:\"UL\",name:\"NumberOfOpticalPaths\",vm:\"1\",version:\"DICOM\"},\"(0048,0303)\":{tag:\"(0048,0303)\",vr:\"UL\",name:\"TotalPixelMatrixFocalPlanes\",vm:\"1\",version:\"DICOM\"},\"(0050,0004)\":{tag:\"(0050,0004)\",vr:\"CS\",name:\"CalibrationImage\",vm:\"1\",version:\"DICOM\"},\"(0050,0010)\":{tag:\"(0050,0010)\",vr:\"SQ\",name:\"DeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(0050,0012)\":{tag:\"(0050,0012)\",vr:\"SQ\",name:\"ContainerComponentTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0050,0013)\":{tag:\"(0050,0013)\",vr:\"FD\",name:\"ContainerComponentThickness\",vm:\"1\",version:\"DICOM\"},\"(0050,0014)\":{tag:\"(0050,0014)\",vr:\"DS\",name:\"DeviceLength\",vm:\"1\",version:\"DICOM\"},\"(0050,0015)\":{tag:\"(0050,0015)\",vr:\"FD\",name:\"ContainerComponentWidth\",vm:\"1\",version:\"DICOM\"},\"(0050,0016)\":{tag:\"(0050,0016)\",vr:\"DS\",name:\"DeviceDiameter\",vm:\"1\",version:\"DICOM\"},\"(0050,0017)\":{tag:\"(0050,0017)\",vr:\"CS\",name:\"DeviceDiameterUnits\",vm:\"1\",version:\"DICOM\"},\"(0050,0018)\":{tag:\"(0050,0018)\",vr:\"DS\",name:\"DeviceVolume\",vm:\"1\",version:\"DICOM\"},\"(0050,0019)\":{tag:\"(0050,0019)\",vr:\"DS\",name:\"InterMarkerDistance\",vm:\"1\",version:\"DICOM\"},\"(0050,001A)\":{tag:\"(0050,001A)\",vr:\"CS\",name:\"ContainerComponentMaterial\",vm:\"1\",version:\"DICOM\"},\"(0050,001B)\":{tag:\"(0050,001B)\",vr:\"LO\",name:\"ContainerComponentID\",vm:\"1\",version:\"DICOM\"},\"(0050,001C)\":{tag:\"(0050,001C)\",vr:\"FD\",name:\"ContainerComponentLength\",vm:\"1\",version:\"DICOM\"},\"(0050,001D)\":{tag:\"(0050,001D)\",vr:\"FD\",name:\"ContainerComponentDiameter\",vm:\"1\",version:\"DICOM\"},\"(0050,001E)\":{tag:\"(0050,001E)\",vr:\"LO\",name:\"ContainerComponentDescription\",vm:\"1\",version:\"DICOM\"},\"(0050,0020)\":{tag:\"(0050,0020)\",vr:\"LO\",name:\"DeviceDescription\",vm:\"1\",version:\"DICOM\"},\"(0050,0021)\":{tag:\"(0050,0021)\",vr:\"ST\",name:\"LongDeviceDescription\",vm:\"1\",version:\"DICOM\"},\"(0052,0001)\":{tag:\"(0052,0001)\",vr:\"FL\",name:\"ContrastBolusIngredientPercentByVolume\",vm:\"1\",version:\"DICOM\"},\"(0052,0002)\":{tag:\"(0052,0002)\",vr:\"FD\",name:\"OCTFocalDistance\",vm:\"1\",version:\"DICOM\"},\"(0052,0003)\":{tag:\"(0052,0003)\",vr:\"FD\",name:\"BeamSpotSize\",vm:\"1\",version:\"DICOM\"},\"(0052,0004)\":{tag:\"(0052,0004)\",vr:\"FD\",name:\"EffectiveRefractiveIndex\",vm:\"1\",version:\"DICOM\"},\"(0052,0006)\":{tag:\"(0052,0006)\",vr:\"CS\",name:\"OCTAcquisitionDomain\",vm:\"1\",version:\"DICOM\"},\"(0052,0007)\":{tag:\"(0052,0007)\",vr:\"FD\",name:\"OCTOpticalCenterWavelength\",vm:\"1\",version:\"DICOM\"},\"(0052,0008)\":{tag:\"(0052,0008)\",vr:\"FD\",name:\"AxialResolution\",vm:\"1\",version:\"DICOM\"},\"(0052,0009)\":{tag:\"(0052,0009)\",vr:\"FD\",name:\"RangingDepth\",vm:\"1\",version:\"DICOM\"},\"(0052,0011)\":{tag:\"(0052,0011)\",vr:\"FD\",name:\"ALineRate\",vm:\"1\",version:\"DICOM\"},\"(0052,0012)\":{tag:\"(0052,0012)\",vr:\"US\",name:\"ALinesPerFrame\",vm:\"1\",version:\"DICOM\"},\"(0052,0013)\":{tag:\"(0052,0013)\",vr:\"FD\",name:\"CatheterRotationalRate\",vm:\"1\",version:\"DICOM\"},\"(0052,0014)\":{tag:\"(0052,0014)\",vr:\"FD\",name:\"ALinePixelSpacing\",vm:\"1\",version:\"DICOM\"},\"(0052,0016)\":{tag:\"(0052,0016)\",vr:\"SQ\",name:\"ModeOfPercutaneousAccessSequence\",vm:\"1\",version:\"DICOM\"},\"(0052,0025)\":{tag:\"(0052,0025)\",vr:\"SQ\",name:\"IntravascularOCTFrameTypeSequence\",vm:\"1\",version:\"DICOM\"},\"(0052,0026)\":{tag:\"(0052,0026)\",vr:\"CS\",name:\"OCTZOffsetApplied\",vm:\"1\",version:\"DICOM\"},\"(0052,0027)\":{tag:\"(0052,0027)\",vr:\"SQ\",name:\"IntravascularFrameContentSequence\",vm:\"1\",version:\"DICOM\"},\"(0052,0028)\":{tag:\"(0052,0028)\",vr:\"FD\",name:\"IntravascularLongitudinalDistance\",vm:\"1\",version:\"DICOM\"},\"(0052,0029)\":{tag:\"(0052,0029)\",vr:\"SQ\",name:\"IntravascularOCTFrameContentSequence\",vm:\"1\",version:\"DICOM\"},\"(0052,0030)\":{tag:\"(0052,0030)\",vr:\"SS\",name:\"OCTZOffsetCorrection\",vm:\"1\",version:\"DICOM\"},\"(0052,0031)\":{tag:\"(0052,0031)\",vr:\"CS\",name:\"CatheterDirectionOfRotation\",vm:\"1\",version:\"DICOM\"},\"(0052,0033)\":{tag:\"(0052,0033)\",vr:\"FD\",name:\"SeamLineLocation\",vm:\"1\",version:\"DICOM\"},\"(0052,0034)\":{tag:\"(0052,0034)\",vr:\"FD\",name:\"FirstALineLocation\",vm:\"1\",version:\"DICOM\"},\"(0052,0036)\":{tag:\"(0052,0036)\",vr:\"US\",name:\"SeamLineIndex\",vm:\"1\",version:\"DICOM\"},\"(0052,0038)\":{tag:\"(0052,0038)\",vr:\"US\",name:\"NumberOfPaddedALines\",vm:\"1\",version:\"DICOM\"},\"(0052,0039)\":{tag:\"(0052,0039)\",vr:\"CS\",name:\"InterpolationType\",vm:\"1\",version:\"DICOM\"},\"(0052,003A)\":{tag:\"(0052,003A)\",vr:\"CS\",name:\"RefractiveIndexApplied\",vm:\"1\",version:\"DICOM\"},\"(0054,0010)\":{tag:\"(0054,0010)\",vr:\"US\",name:\"EnergyWindowVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0011)\":{tag:\"(0054,0011)\",vr:\"US\",name:\"NumberOfEnergyWindows\",vm:\"1\",version:\"DICOM\"},\"(0054,0012)\":{tag:\"(0054,0012)\",vr:\"SQ\",name:\"EnergyWindowInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0013)\":{tag:\"(0054,0013)\",vr:\"SQ\",name:\"EnergyWindowRangeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0014)\":{tag:\"(0054,0014)\",vr:\"DS\",name:\"EnergyWindowLowerLimit\",vm:\"1\",version:\"DICOM\"},\"(0054,0015)\":{tag:\"(0054,0015)\",vr:\"DS\",name:\"EnergyWindowUpperLimit\",vm:\"1\",version:\"DICOM\"},\"(0054,0016)\":{tag:\"(0054,0016)\",vr:\"SQ\",name:\"RadiopharmaceuticalInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0017)\":{tag:\"(0054,0017)\",vr:\"IS\",name:\"ResidualSyringeCounts\",vm:\"1\",version:\"DICOM\"},\"(0054,0018)\":{tag:\"(0054,0018)\",vr:\"SH\",name:\"EnergyWindowName\",vm:\"1\",version:\"DICOM\"},\"(0054,0020)\":{tag:\"(0054,0020)\",vr:\"US\",name:\"DetectorVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0021)\":{tag:\"(0054,0021)\",vr:\"US\",name:\"NumberOfDetectors\",vm:\"1\",version:\"DICOM\"},\"(0054,0022)\":{tag:\"(0054,0022)\",vr:\"SQ\",name:\"DetectorInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0030)\":{tag:\"(0054,0030)\",vr:\"US\",name:\"PhaseVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0031)\":{tag:\"(0054,0031)\",vr:\"US\",name:\"NumberOfPhases\",vm:\"1\",version:\"DICOM\"},\"(0054,0032)\":{tag:\"(0054,0032)\",vr:\"SQ\",name:\"PhaseInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0033)\":{tag:\"(0054,0033)\",vr:\"US\",name:\"NumberOfFramesInPhase\",vm:\"1\",version:\"DICOM\"},\"(0054,0036)\":{tag:\"(0054,0036)\",vr:\"IS\",name:\"PhaseDelay\",vm:\"1\",version:\"DICOM\"},\"(0054,0038)\":{tag:\"(0054,0038)\",vr:\"IS\",name:\"PauseBetweenFrames\",vm:\"1\",version:\"DICOM\"},\"(0054,0039)\":{tag:\"(0054,0039)\",vr:\"CS\",name:\"PhaseDescription\",vm:\"1\",version:\"DICOM\"},\"(0054,0050)\":{tag:\"(0054,0050)\",vr:\"US\",name:\"RotationVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0051)\":{tag:\"(0054,0051)\",vr:\"US\",name:\"NumberOfRotations\",vm:\"1\",version:\"DICOM\"},\"(0054,0052)\":{tag:\"(0054,0052)\",vr:\"SQ\",name:\"RotationInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0053)\":{tag:\"(0054,0053)\",vr:\"US\",name:\"NumberOfFramesInRotation\",vm:\"1\",version:\"DICOM\"},\"(0054,0060)\":{tag:\"(0054,0060)\",vr:\"US\",name:\"RRIntervalVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0061)\":{tag:\"(0054,0061)\",vr:\"US\",name:\"NumberOfRRIntervals\",vm:\"1\",version:\"DICOM\"},\"(0054,0062)\":{tag:\"(0054,0062)\",vr:\"SQ\",name:\"GatedInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0063)\":{tag:\"(0054,0063)\",vr:\"SQ\",name:\"DataInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0070)\":{tag:\"(0054,0070)\",vr:\"US\",name:\"TimeSlotVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0071)\":{tag:\"(0054,0071)\",vr:\"US\",name:\"NumberOfTimeSlots\",vm:\"1\",version:\"DICOM\"},\"(0054,0072)\":{tag:\"(0054,0072)\",vr:\"SQ\",name:\"TimeSlotInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0073)\":{tag:\"(0054,0073)\",vr:\"DS\",name:\"TimeSlotTime\",vm:\"1\",version:\"DICOM\"},\"(0054,0080)\":{tag:\"(0054,0080)\",vr:\"US\",name:\"SliceVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0081)\":{tag:\"(0054,0081)\",vr:\"US\",name:\"NumberOfSlices\",vm:\"1\",version:\"DICOM\"},\"(0054,0090)\":{tag:\"(0054,0090)\",vr:\"US\",name:\"AngularViewVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0100)\":{tag:\"(0054,0100)\",vr:\"US\",name:\"TimeSliceVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0101)\":{tag:\"(0054,0101)\",vr:\"US\",name:\"NumberOfTimeSlices\",vm:\"1\",version:\"DICOM\"},\"(0054,0200)\":{tag:\"(0054,0200)\",vr:\"DS\",name:\"StartAngle\",vm:\"1\",version:\"DICOM\"},\"(0054,0202)\":{tag:\"(0054,0202)\",vr:\"CS\",name:\"TypeOfDetectorMotion\",vm:\"1\",version:\"DICOM\"},\"(0054,0210)\":{tag:\"(0054,0210)\",vr:\"IS\",name:\"TriggerVector\",vm:\"1-n\",version:\"DICOM\"},\"(0054,0211)\":{tag:\"(0054,0211)\",vr:\"US\",name:\"NumberOfTriggersInPhase\",vm:\"1\",version:\"DICOM\"},\"(0054,0220)\":{tag:\"(0054,0220)\",vr:\"SQ\",name:\"ViewCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0222)\":{tag:\"(0054,0222)\",vr:\"SQ\",name:\"ViewModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0300)\":{tag:\"(0054,0300)\",vr:\"SQ\",name:\"RadionuclideCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0302)\":{tag:\"(0054,0302)\",vr:\"SQ\",name:\"AdministrationRouteCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0304)\":{tag:\"(0054,0304)\",vr:\"SQ\",name:\"RadiopharmaceuticalCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0306)\":{tag:\"(0054,0306)\",vr:\"SQ\",name:\"CalibrationDataSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0308)\":{tag:\"(0054,0308)\",vr:\"US\",name:\"EnergyWindowNumber\",vm:\"1\",version:\"DICOM\"},\"(0054,0400)\":{tag:\"(0054,0400)\",vr:\"SH\",name:\"ImageID\",vm:\"1\",version:\"DICOM\"},\"(0054,0410)\":{tag:\"(0054,0410)\",vr:\"SQ\",name:\"PatientOrientationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0412)\":{tag:\"(0054,0412)\",vr:\"SQ\",name:\"PatientOrientationModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0414)\":{tag:\"(0054,0414)\",vr:\"SQ\",name:\"PatientGantryRelationshipCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0054,0500)\":{tag:\"(0054,0500)\",vr:\"CS\",name:\"SliceProgressionDirection\",vm:\"1\",version:\"DICOM\"},\"(0054,0501)\":{tag:\"(0054,0501)\",vr:\"CS\",name:\"ScanProgressionDirection\",vm:\"1\",version:\"DICOM\"},\"(0054,1000)\":{tag:\"(0054,1000)\",vr:\"CS\",name:\"SeriesType\",vm:\"2\",version:\"DICOM\"},\"(0054,1001)\":{tag:\"(0054,1001)\",vr:\"CS\",name:\"Units\",vm:\"1\",version:\"DICOM\"},\"(0054,1002)\":{tag:\"(0054,1002)\",vr:\"CS\",name:\"CountsSource\",vm:\"1\",version:\"DICOM\"},\"(0054,1004)\":{tag:\"(0054,1004)\",vr:\"CS\",name:\"ReprojectionMethod\",vm:\"1\",version:\"DICOM\"},\"(0054,1006)\":{tag:\"(0054,1006)\",vr:\"CS\",name:\"SUVType\",vm:\"1\",version:\"DICOM\"},\"(0054,1100)\":{tag:\"(0054,1100)\",vr:\"CS\",name:\"RandomsCorrectionMethod\",vm:\"1\",version:\"DICOM\"},\"(0054,1101)\":{tag:\"(0054,1101)\",vr:\"LO\",name:\"AttenuationCorrectionMethod\",vm:\"1\",version:\"DICOM\"},\"(0054,1102)\":{tag:\"(0054,1102)\",vr:\"CS\",name:\"DecayCorrection\",vm:\"1\",version:\"DICOM\"},\"(0054,1103)\":{tag:\"(0054,1103)\",vr:\"LO\",name:\"ReconstructionMethod\",vm:\"1\",version:\"DICOM\"},\"(0054,1104)\":{tag:\"(0054,1104)\",vr:\"LO\",name:\"DetectorLinesOfResponseUsed\",vm:\"1\",version:\"DICOM\"},\"(0054,1105)\":{tag:\"(0054,1105)\",vr:\"LO\",name:\"ScatterCorrectionMethod\",vm:\"1\",version:\"DICOM\"},\"(0054,1200)\":{tag:\"(0054,1200)\",vr:\"DS\",name:\"AxialAcceptance\",vm:\"1\",version:\"DICOM\"},\"(0054,1201)\":{tag:\"(0054,1201)\",vr:\"IS\",name:\"AxialMash\",vm:\"2\",version:\"DICOM\"},\"(0054,1202)\":{tag:\"(0054,1202)\",vr:\"IS\",name:\"TransverseMash\",vm:\"1\",version:\"DICOM\"},\"(0054,1203)\":{tag:\"(0054,1203)\",vr:\"DS\",name:\"DetectorElementSize\",vm:\"2\",version:\"DICOM\"},\"(0054,1210)\":{tag:\"(0054,1210)\",vr:\"DS\",name:\"CoincidenceWindowWidth\",vm:\"1\",version:\"DICOM\"},\"(0054,1220)\":{tag:\"(0054,1220)\",vr:\"CS\",name:\"SecondaryCountsType\",vm:\"1-n\",version:\"DICOM\"},\"(0054,1300)\":{tag:\"(0054,1300)\",vr:\"DS\",name:\"FrameReferenceTime\",vm:\"1\",version:\"DICOM\"},\"(0054,1310)\":{tag:\"(0054,1310)\",vr:\"IS\",name:\"PrimaryPromptsCountsAccumulated\",vm:\"1\",version:\"DICOM\"},\"(0054,1311)\":{tag:\"(0054,1311)\",vr:\"IS\",name:\"SecondaryCountsAccumulated\",vm:\"1-n\",version:\"DICOM\"},\"(0054,1320)\":{tag:\"(0054,1320)\",vr:\"DS\",name:\"SliceSensitivityFactor\",vm:\"1\",version:\"DICOM\"},\"(0054,1321)\":{tag:\"(0054,1321)\",vr:\"DS\",name:\"DecayFactor\",vm:\"1\",version:\"DICOM\"},\"(0054,1322)\":{tag:\"(0054,1322)\",vr:\"DS\",name:\"DoseCalibrationFactor\",vm:\"1\",version:\"DICOM\"},\"(0054,1323)\":{tag:\"(0054,1323)\",vr:\"DS\",name:\"ScatterFractionFactor\",vm:\"1\",version:\"DICOM\"},\"(0054,1324)\":{tag:\"(0054,1324)\",vr:\"DS\",name:\"DeadTimeFactor\",vm:\"1\",version:\"DICOM\"},\"(0054,1330)\":{tag:\"(0054,1330)\",vr:\"US\",name:\"ImageIndex\",vm:\"1\",version:\"DICOM\"},\"(0060,3000)\":{tag:\"(0060,3000)\",vr:\"SQ\",name:\"HistogramSequence\",vm:\"1\",version:\"DICOM\"},\"(0060,3002)\":{tag:\"(0060,3002)\",vr:\"US\",name:\"HistogramNumberOfBins\",vm:\"1\",version:\"DICOM\"},\"(0060,3004)\":{tag:\"(0060,3004)\",vr:\"xs\",name:\"HistogramFirstBinValue\",vm:\"1\",version:\"DICOM\"},\"(0060,3006)\":{tag:\"(0060,3006)\",vr:\"xs\",name:\"HistogramLastBinValue\",vm:\"1\",version:\"DICOM\"},\"(0060,3008)\":{tag:\"(0060,3008)\",vr:\"US\",name:\"HistogramBinWidth\",vm:\"1\",version:\"DICOM\"},\"(0060,3010)\":{tag:\"(0060,3010)\",vr:\"LO\",name:\"HistogramExplanation\",vm:\"1\",version:\"DICOM\"},\"(0060,3020)\":{tag:\"(0060,3020)\",vr:\"UL\",name:\"HistogramData\",vm:\"1-n\",version:\"DICOM\"},\"(0062,0001)\":{tag:\"(0062,0001)\",vr:\"CS\",name:\"SegmentationType\",vm:\"1\",version:\"DICOM\"},\"(0062,0002)\":{tag:\"(0062,0002)\",vr:\"SQ\",name:\"SegmentSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,0003)\":{tag:\"(0062,0003)\",vr:\"SQ\",name:\"SegmentedPropertyCategoryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,0004)\":{tag:\"(0062,0004)\",vr:\"US\",name:\"SegmentNumber\",vm:\"1\",version:\"DICOM\"},\"(0062,0005)\":{tag:\"(0062,0005)\",vr:\"LO\",name:\"SegmentLabel\",vm:\"1\",version:\"DICOM\"},\"(0062,0006)\":{tag:\"(0062,0006)\",vr:\"ST\",name:\"SegmentDescription\",vm:\"1\",version:\"DICOM\"},\"(0062,0007)\":{tag:\"(0062,0007)\",vr:\"SQ\",name:\"SegmentationAlgorithmIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,0008)\":{tag:\"(0062,0008)\",vr:\"CS\",name:\"SegmentAlgorithmType\",vm:\"1\",version:\"DICOM\"},\"(0062,0009)\":{tag:\"(0062,0009)\",vr:\"LO\",name:\"SegmentAlgorithmName\",vm:\"1\",version:\"DICOM\"},\"(0062,000A)\":{tag:\"(0062,000A)\",vr:\"SQ\",name:\"SegmentIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,000B)\":{tag:\"(0062,000B)\",vr:\"US\",name:\"ReferencedSegmentNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0062,000C)\":{tag:\"(0062,000C)\",vr:\"US\",name:\"RecommendedDisplayGrayscaleValue\",vm:\"1\",version:\"DICOM\"},\"(0062,000D)\":{tag:\"(0062,000D)\",vr:\"US\",name:\"RecommendedDisplayCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0062,000E)\":{tag:\"(0062,000E)\",vr:\"US\",name:\"MaximumFractionalValue\",vm:\"1\",version:\"DICOM\"},\"(0062,000F)\":{tag:\"(0062,000F)\",vr:\"SQ\",name:\"SegmentedPropertyTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,0010)\":{tag:\"(0062,0010)\",vr:\"CS\",name:\"SegmentationFractionalType\",vm:\"1\",version:\"DICOM\"},\"(0062,0011)\":{tag:\"(0062,0011)\",vr:\"SQ\",name:\"SegmentedPropertyTypeModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,0012)\":{tag:\"(0062,0012)\",vr:\"SQ\",name:\"UsedSegmentsSequence\",vm:\"1\",version:\"DICOM\"},\"(0062,0013)\":{tag:\"(0062,0013)\",vr:\"CS\",name:\"SegmentsOverlap\",vm:\"1\",version:\"DICOM\"},\"(0062,0020)\":{tag:\"(0062,0020)\",vr:\"UT\",name:\"TrackingID\",vm:\"1\",version:\"DICOM\"},\"(0062,0021)\":{tag:\"(0062,0021)\",vr:\"UI\",name:\"TrackingUID\",vm:\"1\",version:\"DICOM\"},\"(0064,0002)\":{tag:\"(0064,0002)\",vr:\"SQ\",name:\"DeformableRegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0064,0003)\":{tag:\"(0064,0003)\",vr:\"UI\",name:\"SourceFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(0064,0005)\":{tag:\"(0064,0005)\",vr:\"SQ\",name:\"DeformableRegistrationGridSequence\",vm:\"1\",version:\"DICOM\"},\"(0064,0007)\":{tag:\"(0064,0007)\",vr:\"UL\",name:\"GridDimensions\",vm:\"3\",version:\"DICOM\"},\"(0064,0008)\":{tag:\"(0064,0008)\",vr:\"FD\",name:\"GridResolution\",vm:\"3\",version:\"DICOM\"},\"(0064,0009)\":{tag:\"(0064,0009)\",vr:\"OF\",name:\"VectorGridData\",vm:\"1\",version:\"DICOM\"},\"(0064,000F)\":{tag:\"(0064,000F)\",vr:\"SQ\",name:\"PreDeformationMatrixRegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0064,0010)\":{tag:\"(0064,0010)\",vr:\"SQ\",name:\"PostDeformationMatrixRegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0001)\":{tag:\"(0066,0001)\",vr:\"UL\",name:\"NumberOfSurfaces\",vm:\"1\",version:\"DICOM\"},\"(0066,0002)\":{tag:\"(0066,0002)\",vr:\"SQ\",name:\"SurfaceSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0003)\":{tag:\"(0066,0003)\",vr:\"UL\",name:\"SurfaceNumber\",vm:\"1\",version:\"DICOM\"},\"(0066,0004)\":{tag:\"(0066,0004)\",vr:\"LT\",name:\"SurfaceComments\",vm:\"1\",version:\"DICOM\"},\"(0066,0009)\":{tag:\"(0066,0009)\",vr:\"CS\",name:\"SurfaceProcessing\",vm:\"1\",version:\"DICOM\"},\"(0066,000A)\":{tag:\"(0066,000A)\",vr:\"FL\",name:\"SurfaceProcessingRatio\",vm:\"1\",version:\"DICOM\"},\"(0066,000B)\":{tag:\"(0066,000B)\",vr:\"LO\",name:\"SurfaceProcessingDescription\",vm:\"1\",version:\"DICOM\"},\"(0066,000C)\":{tag:\"(0066,000C)\",vr:\"FL\",name:\"RecommendedPresentationOpacity\",vm:\"1\",version:\"DICOM\"},\"(0066,000D)\":{tag:\"(0066,000D)\",vr:\"CS\",name:\"RecommendedPresentationType\",vm:\"1\",version:\"DICOM\"},\"(0066,000E)\":{tag:\"(0066,000E)\",vr:\"CS\",name:\"FiniteVolume\",vm:\"1\",version:\"DICOM\"},\"(0066,0010)\":{tag:\"(0066,0010)\",vr:\"CS\",name:\"Manifold\",vm:\"1\",version:\"DICOM\"},\"(0066,0011)\":{tag:\"(0066,0011)\",vr:\"SQ\",name:\"SurfacePointsSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0012)\":{tag:\"(0066,0012)\",vr:\"SQ\",name:\"SurfacePointsNormalsSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0013)\":{tag:\"(0066,0013)\",vr:\"SQ\",name:\"SurfaceMeshPrimitivesSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0015)\":{tag:\"(0066,0015)\",vr:\"UL\",name:\"NumberOfSurfacePoints\",vm:\"1\",version:\"DICOM\"},\"(0066,0016)\":{tag:\"(0066,0016)\",vr:\"OF\",name:\"PointCoordinatesData\",vm:\"1\",version:\"DICOM\"},\"(0066,0017)\":{tag:\"(0066,0017)\",vr:\"FL\",name:\"PointPositionAccuracy\",vm:\"3\",version:\"DICOM\"},\"(0066,0018)\":{tag:\"(0066,0018)\",vr:\"FL\",name:\"MeanPointDistance\",vm:\"1\",version:\"DICOM\"},\"(0066,0019)\":{tag:\"(0066,0019)\",vr:\"FL\",name:\"MaximumPointDistance\",vm:\"1\",version:\"DICOM\"},\"(0066,001A)\":{tag:\"(0066,001A)\",vr:\"FL\",name:\"PointsBoundingBoxCoordinates\",vm:\"6\",version:\"DICOM\"},\"(0066,001B)\":{tag:\"(0066,001B)\",vr:\"FL\",name:\"AxisOfRotation\",vm:\"3\",version:\"DICOM\"},\"(0066,001C)\":{tag:\"(0066,001C)\",vr:\"FL\",name:\"CenterOfRotation\",vm:\"3\",version:\"DICOM\"},\"(0066,001E)\":{tag:\"(0066,001E)\",vr:\"UL\",name:\"NumberOfVectors\",vm:\"1\",version:\"DICOM\"},\"(0066,001F)\":{tag:\"(0066,001F)\",vr:\"US\",name:\"VectorDimensionality\",vm:\"1\",version:\"DICOM\"},\"(0066,0020)\":{tag:\"(0066,0020)\",vr:\"FL\",name:\"VectorAccuracy\",vm:\"1-n\",version:\"DICOM\"},\"(0066,0021)\":{tag:\"(0066,0021)\",vr:\"OF\",name:\"VectorCoordinateData\",vm:\"1\",version:\"DICOM\"},\"(0066,0023)\":{tag:\"(0066,0023)\",vr:\"OW\",name:\"TrianglePointIndexList\",vm:\"1\",version:\"DICOM\"},\"(0066,0024)\":{tag:\"(0066,0024)\",vr:\"OW\",name:\"EdgePointIndexList\",vm:\"1\",version:\"DICOM\"},\"(0066,0025)\":{tag:\"(0066,0025)\",vr:\"OW\",name:\"VertexPointIndexList\",vm:\"1\",version:\"DICOM\"},\"(0066,0026)\":{tag:\"(0066,0026)\",vr:\"SQ\",name:\"TriangleStripSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0027)\":{tag:\"(0066,0027)\",vr:\"SQ\",name:\"TriangleFanSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0028)\":{tag:\"(0066,0028)\",vr:\"SQ\",name:\"LineSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0029)\":{tag:\"(0066,0029)\",vr:\"OW\",name:\"PrimitivePointIndexList\",vm:\"1\",version:\"DICOM\"},\"(0066,002A)\":{tag:\"(0066,002A)\",vr:\"UL\",name:\"SurfaceCount\",vm:\"1\",version:\"DICOM\"},\"(0066,002B)\":{tag:\"(0066,002B)\",vr:\"SQ\",name:\"ReferencedSurfaceSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,002C)\":{tag:\"(0066,002C)\",vr:\"UL\",name:\"ReferencedSurfaceNumber\",vm:\"1\",version:\"DICOM\"},\"(0066,002D)\":{tag:\"(0066,002D)\",vr:\"SQ\",name:\"SegmentSurfaceGenerationAlgorithmIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,002E)\":{tag:\"(0066,002E)\",vr:\"SQ\",name:\"SegmentSurfaceSourceInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,002F)\":{tag:\"(0066,002F)\",vr:\"SQ\",name:\"AlgorithmFamilyCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0030)\":{tag:\"(0066,0030)\",vr:\"SQ\",name:\"AlgorithmNameCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0031)\":{tag:\"(0066,0031)\",vr:\"LO\",name:\"AlgorithmVersion\",vm:\"1\",version:\"DICOM\"},\"(0066,0032)\":{tag:\"(0066,0032)\",vr:\"LT\",name:\"AlgorithmParameters\",vm:\"1\",version:\"DICOM\"},\"(0066,0034)\":{tag:\"(0066,0034)\",vr:\"SQ\",name:\"FacetSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0035)\":{tag:\"(0066,0035)\",vr:\"SQ\",name:\"SurfaceProcessingAlgorithmIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0036)\":{tag:\"(0066,0036)\",vr:\"LO\",name:\"AlgorithmName\",vm:\"1\",version:\"DICOM\"},\"(0066,0037)\":{tag:\"(0066,0037)\",vr:\"FL\",name:\"RecommendedPointRadius\",vm:\"1\",version:\"DICOM\"},\"(0066,0038)\":{tag:\"(0066,0038)\",vr:\"FL\",name:\"RecommendedLineThickness\",vm:\"1\",version:\"DICOM\"},\"(0066,0040)\":{tag:\"(0066,0040)\",vr:\"UL\",name:\"LongPrimitivePointIndexList\",vm:\"1-n\",version:\"DICOM\"},\"(0066,0041)\":{tag:\"(0066,0041)\",vr:\"UL\",name:\"LongTrianglePointIndexList\",vm:\"3-3n\",version:\"DICOM\"},\"(0066,0042)\":{tag:\"(0066,0042)\",vr:\"UL\",name:\"LongEdgePointIndexList\",vm:\"2-2n\",version:\"DICOM\"},\"(0066,0043)\":{tag:\"(0066,0043)\",vr:\"UL\",name:\"LongVertexPointIndexList\",vm:\"1-n\",version:\"DICOM\"},\"(0066,0101)\":{tag:\"(0066,0101)\",vr:\"SQ\",name:\"TrackSetSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0102)\":{tag:\"(0066,0102)\",vr:\"SQ\",name:\"TrackSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0103)\":{tag:\"(0066,0103)\",vr:\"OW\",name:\"RecommendedDisplayCIELabValueList\",vm:\"1\",version:\"DICOM\"},\"(0066,0104)\":{tag:\"(0066,0104)\",vr:\"SQ\",name:\"TrackingAlgorithmIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0105)\":{tag:\"(0066,0105)\",vr:\"UL\",name:\"TrackSetNumber\",vm:\"1\",version:\"DICOM\"},\"(0066,0106)\":{tag:\"(0066,0106)\",vr:\"LO\",name:\"TrackSetLabel\",vm:\"1\",version:\"DICOM\"},\"(0066,0107)\":{tag:\"(0066,0107)\",vr:\"UT\",name:\"TrackSetDescription\",vm:\"1\",version:\"DICOM\"},\"(0066,0108)\":{tag:\"(0066,0108)\",vr:\"SQ\",name:\"TrackSetAnatomicalTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0121)\":{tag:\"(0066,0121)\",vr:\"SQ\",name:\"MeasurementsSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0124)\":{tag:\"(0066,0124)\",vr:\"SQ\",name:\"TrackSetStatisticsSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0125)\":{tag:\"(0066,0125)\",vr:\"OF\",name:\"FloatingPointValues\",vm:\"1\",version:\"DICOM\"},\"(0066,0129)\":{tag:\"(0066,0129)\",vr:\"OL\",name:\"TrackPointIndexList\",vm:\"1\",version:\"DICOM\"},\"(0066,0130)\":{tag:\"(0066,0130)\",vr:\"SQ\",name:\"TrackStatisticsSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0132)\":{tag:\"(0066,0132)\",vr:\"SQ\",name:\"MeasurementValuesSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0133)\":{tag:\"(0066,0133)\",vr:\"SQ\",name:\"DiffusionAcquisitionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0066,0134)\":{tag:\"(0066,0134)\",vr:\"SQ\",name:\"DiffusionModelCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6210)\":{tag:\"(0068,6210)\",vr:\"LO\",name:\"ImplantSize\",vm:\"1\",version:\"DICOM\"},\"(0068,6221)\":{tag:\"(0068,6221)\",vr:\"LO\",name:\"ImplantTemplateVersion\",vm:\"1\",version:\"DICOM\"},\"(0068,6222)\":{tag:\"(0068,6222)\",vr:\"SQ\",name:\"ReplacedImplantTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6223)\":{tag:\"(0068,6223)\",vr:\"CS\",name:\"ImplantType\",vm:\"1\",version:\"DICOM\"},\"(0068,6224)\":{tag:\"(0068,6224)\",vr:\"SQ\",name:\"DerivationImplantTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6225)\":{tag:\"(0068,6225)\",vr:\"SQ\",name:\"OriginalImplantTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6226)\":{tag:\"(0068,6226)\",vr:\"DT\",name:\"EffectiveDateTime\",vm:\"1\",version:\"DICOM\"},\"(0068,6230)\":{tag:\"(0068,6230)\",vr:\"SQ\",name:\"ImplantTargetAnatomySequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6260)\":{tag:\"(0068,6260)\",vr:\"SQ\",name:\"InformationFromManufacturerSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6265)\":{tag:\"(0068,6265)\",vr:\"SQ\",name:\"NotificationFromManufacturerSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6270)\":{tag:\"(0068,6270)\",vr:\"DT\",name:\"InformationIssueDateTime\",vm:\"1\",version:\"DICOM\"},\"(0068,6280)\":{tag:\"(0068,6280)\",vr:\"ST\",name:\"InformationSummary\",vm:\"1\",version:\"DICOM\"},\"(0068,62A0)\":{tag:\"(0068,62A0)\",vr:\"SQ\",name:\"ImplantRegulatoryDisapprovalCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,62A5)\":{tag:\"(0068,62A5)\",vr:\"FD\",name:\"OverallTemplateSpatialTolerance\",vm:\"1\",version:\"DICOM\"},\"(0068,62C0)\":{tag:\"(0068,62C0)\",vr:\"SQ\",name:\"HPGLDocumentSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,62D0)\":{tag:\"(0068,62D0)\",vr:\"US\",name:\"HPGLDocumentID\",vm:\"1\",version:\"DICOM\"},\"(0068,62D5)\":{tag:\"(0068,62D5)\",vr:\"LO\",name:\"HPGLDocumentLabel\",vm:\"1\",version:\"DICOM\"},\"(0068,62E0)\":{tag:\"(0068,62E0)\",vr:\"SQ\",name:\"ViewOrientationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,62F0)\":{tag:\"(0068,62F0)\",vr:\"FD\",name:\"ViewOrientationModifier\",vm:\"9\",version:\"DICOM\"},\"(0068,62F2)\":{tag:\"(0068,62F2)\",vr:\"FD\",name:\"HPGLDocumentScaling\",vm:\"1\",version:\"DICOM\"},\"(0068,6300)\":{tag:\"(0068,6300)\",vr:\"OB\",name:\"HPGLDocument\",vm:\"1\",version:\"DICOM\"},\"(0068,6310)\":{tag:\"(0068,6310)\",vr:\"US\",name:\"HPGLContourPenNumber\",vm:\"1\",version:\"DICOM\"},\"(0068,6320)\":{tag:\"(0068,6320)\",vr:\"SQ\",name:\"HPGLPenSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6330)\":{tag:\"(0068,6330)\",vr:\"US\",name:\"HPGLPenNumber\",vm:\"1\",version:\"DICOM\"},\"(0068,6340)\":{tag:\"(0068,6340)\",vr:\"LO\",name:\"HPGLPenLabel\",vm:\"1\",version:\"DICOM\"},\"(0068,6345)\":{tag:\"(0068,6345)\",vr:\"ST\",name:\"HPGLPenDescription\",vm:\"1\",version:\"DICOM\"},\"(0068,6346)\":{tag:\"(0068,6346)\",vr:\"FD\",name:\"RecommendedRotationPoint\",vm:\"2\",version:\"DICOM\"},\"(0068,6347)\":{tag:\"(0068,6347)\",vr:\"FD\",name:\"BoundingRectangle\",vm:\"4\",version:\"DICOM\"},\"(0068,6350)\":{tag:\"(0068,6350)\",vr:\"US\",name:\"ImplantTemplate3DModelSurfaceNumber\",vm:\"1-n\",version:\"DICOM\"},\"(0068,6360)\":{tag:\"(0068,6360)\",vr:\"SQ\",name:\"SurfaceModelDescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6380)\":{tag:\"(0068,6380)\",vr:\"LO\",name:\"SurfaceModelLabel\",vm:\"1\",version:\"DICOM\"},\"(0068,6390)\":{tag:\"(0068,6390)\",vr:\"FD\",name:\"SurfaceModelScalingFactor\",vm:\"1\",version:\"DICOM\"},\"(0068,63A0)\":{tag:\"(0068,63A0)\",vr:\"SQ\",name:\"MaterialsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,63A4)\":{tag:\"(0068,63A4)\",vr:\"SQ\",name:\"CoatingMaterialsCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,63A8)\":{tag:\"(0068,63A8)\",vr:\"SQ\",name:\"ImplantTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,63AC)\":{tag:\"(0068,63AC)\",vr:\"SQ\",name:\"FixationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,63B0)\":{tag:\"(0068,63B0)\",vr:\"SQ\",name:\"MatingFeatureSetsSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,63C0)\":{tag:\"(0068,63C0)\",vr:\"US\",name:\"MatingFeatureSetID\",vm:\"1\",version:\"DICOM\"},\"(0068,63D0)\":{tag:\"(0068,63D0)\",vr:\"LO\",name:\"MatingFeatureSetLabel\",vm:\"1\",version:\"DICOM\"},\"(0068,63E0)\":{tag:\"(0068,63E0)\",vr:\"SQ\",name:\"MatingFeatureSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,63F0)\":{tag:\"(0068,63F0)\",vr:\"US\",name:\"MatingFeatureID\",vm:\"1\",version:\"DICOM\"},\"(0068,6400)\":{tag:\"(0068,6400)\",vr:\"SQ\",name:\"MatingFeatureDegreeOfFreedomSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6410)\":{tag:\"(0068,6410)\",vr:\"US\",name:\"DegreeOfFreedomID\",vm:\"1\",version:\"DICOM\"},\"(0068,6420)\":{tag:\"(0068,6420)\",vr:\"CS\",name:\"DegreeOfFreedomType\",vm:\"1\",version:\"DICOM\"},\"(0068,6430)\":{tag:\"(0068,6430)\",vr:\"SQ\",name:\"TwoDMatingFeatureCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6440)\":{tag:\"(0068,6440)\",vr:\"US\",name:\"ReferencedHPGLDocumentID\",vm:\"1\",version:\"DICOM\"},\"(0068,6450)\":{tag:\"(0068,6450)\",vr:\"FD\",name:\"TwoDMatingPoint\",vm:\"2\",version:\"DICOM\"},\"(0068,6460)\":{tag:\"(0068,6460)\",vr:\"FD\",name:\"TwoDMatingAxes\",vm:\"4\",version:\"DICOM\"},\"(0068,6470)\":{tag:\"(0068,6470)\",vr:\"SQ\",name:\"TwoDDegreeOfFreedomSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6490)\":{tag:\"(0068,6490)\",vr:\"FD\",name:\"ThreeDDegreeOfFreedomAxis\",vm:\"3\",version:\"DICOM\"},\"(0068,64A0)\":{tag:\"(0068,64A0)\",vr:\"FD\",name:\"RangeOfFreedom\",vm:\"2\",version:\"DICOM\"},\"(0068,64C0)\":{tag:\"(0068,64C0)\",vr:\"FD\",name:\"ThreeDMatingPoint\",vm:\"3\",version:\"DICOM\"},\"(0068,64D0)\":{tag:\"(0068,64D0)\",vr:\"FD\",name:\"ThreeDMatingAxes\",vm:\"9\",version:\"DICOM\"},\"(0068,64F0)\":{tag:\"(0068,64F0)\",vr:\"FD\",name:\"TwoDDegreeOfFreedomAxis\",vm:\"3\",version:\"DICOM\"},\"(0068,6500)\":{tag:\"(0068,6500)\",vr:\"SQ\",name:\"PlanningLandmarkPointSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6510)\":{tag:\"(0068,6510)\",vr:\"SQ\",name:\"PlanningLandmarkLineSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6520)\":{tag:\"(0068,6520)\",vr:\"SQ\",name:\"PlanningLandmarkPlaneSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6530)\":{tag:\"(0068,6530)\",vr:\"US\",name:\"PlanningLandmarkID\",vm:\"1\",version:\"DICOM\"},\"(0068,6540)\":{tag:\"(0068,6540)\",vr:\"LO\",name:\"PlanningLandmarkDescription\",vm:\"1\",version:\"DICOM\"},\"(0068,6545)\":{tag:\"(0068,6545)\",vr:\"SQ\",name:\"PlanningLandmarkIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6550)\":{tag:\"(0068,6550)\",vr:\"SQ\",name:\"TwoDPointCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,6560)\":{tag:\"(0068,6560)\",vr:\"FD\",name:\"TwoDPointCoordinates\",vm:\"2\",version:\"DICOM\"},\"(0068,6590)\":{tag:\"(0068,6590)\",vr:\"FD\",name:\"ThreeDPointCoordinates\",vm:\"3\",version:\"DICOM\"},\"(0068,65A0)\":{tag:\"(0068,65A0)\",vr:\"SQ\",name:\"TwoDLineCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,65B0)\":{tag:\"(0068,65B0)\",vr:\"FD\",name:\"TwoDLineCoordinates\",vm:\"4\",version:\"DICOM\"},\"(0068,65D0)\":{tag:\"(0068,65D0)\",vr:\"FD\",name:\"ThreeDLineCoordinates\",vm:\"6\",version:\"DICOM\"},\"(0068,65E0)\":{tag:\"(0068,65E0)\",vr:\"SQ\",name:\"TwoDPlaneCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,65F0)\":{tag:\"(0068,65F0)\",vr:\"FD\",name:\"TwoDPlaneIntersection\",vm:\"4\",version:\"DICOM\"},\"(0068,6610)\":{tag:\"(0068,6610)\",vr:\"FD\",name:\"ThreeDPlaneOrigin\",vm:\"3\",version:\"DICOM\"},\"(0068,6620)\":{tag:\"(0068,6620)\",vr:\"FD\",name:\"ThreeDPlaneNormal\",vm:\"3\",version:\"DICOM\"},\"(0068,7001)\":{tag:\"(0068,7001)\",vr:\"CS\",name:\"ModelModification\",vm:\"1\",version:\"DICOM\"},\"(0068,7002)\":{tag:\"(0068,7002)\",vr:\"CS\",name:\"ModelMirroring\",vm:\"1\",version:\"DICOM\"},\"(0068,7003)\":{tag:\"(0068,7003)\",vr:\"SQ\",name:\"ModelUsageCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0068,7004)\":{tag:\"(0068,7004)\",vr:\"UI\",name:\"ModelGroupUID\",vm:\"1\",version:\"DICOM\"},\"(0068,7005)\":{tag:\"(0068,7005)\",vr:\"UR\",name:\"RelativeURIReferenceWithinEncapsulatedDocument\",vm:\"1\",version:\"DICOM\"},\"(0070,0001)\":{tag:\"(0070,0001)\",vr:\"SQ\",name:\"GraphicAnnotationSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0002)\":{tag:\"(0070,0002)\",vr:\"CS\",name:\"GraphicLayer\",vm:\"1\",version:\"DICOM\"},\"(0070,0003)\":{tag:\"(0070,0003)\",vr:\"CS\",name:\"BoundingBoxAnnotationUnits\",vm:\"1\",version:\"DICOM\"},\"(0070,0004)\":{tag:\"(0070,0004)\",vr:\"CS\",name:\"AnchorPointAnnotationUnits\",vm:\"1\",version:\"DICOM\"},\"(0070,0005)\":{tag:\"(0070,0005)\",vr:\"CS\",name:\"GraphicAnnotationUnits\",vm:\"1\",version:\"DICOM\"},\"(0070,0006)\":{tag:\"(0070,0006)\",vr:\"ST\",name:\"UnformattedTextValue\",vm:\"1\",version:\"DICOM\"},\"(0070,0008)\":{tag:\"(0070,0008)\",vr:\"SQ\",name:\"TextObjectSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0009)\":{tag:\"(0070,0009)\",vr:\"SQ\",name:\"GraphicObjectSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0010)\":{tag:\"(0070,0010)\",vr:\"FL\",name:\"BoundingBoxTopLeftHandCorner\",vm:\"2\",version:\"DICOM\"},\"(0070,0011)\":{tag:\"(0070,0011)\",vr:\"FL\",name:\"BoundingBoxBottomRightHandCorner\",vm:\"2\",version:\"DICOM\"},\"(0070,0012)\":{tag:\"(0070,0012)\",vr:\"CS\",name:\"BoundingBoxTextHorizontalJustification\",vm:\"1\",version:\"DICOM\"},\"(0070,0014)\":{tag:\"(0070,0014)\",vr:\"FL\",name:\"AnchorPoint\",vm:\"2\",version:\"DICOM\"},\"(0070,0015)\":{tag:\"(0070,0015)\",vr:\"CS\",name:\"AnchorPointVisibility\",vm:\"1\",version:\"DICOM\"},\"(0070,0020)\":{tag:\"(0070,0020)\",vr:\"US\",name:\"GraphicDimensions\",vm:\"1\",version:\"DICOM\"},\"(0070,0021)\":{tag:\"(0070,0021)\",vr:\"US\",name:\"NumberOfGraphicPoints\",vm:\"1\",version:\"DICOM\"},\"(0070,0022)\":{tag:\"(0070,0022)\",vr:\"FL\",name:\"GraphicData\",vm:\"2-n\",version:\"DICOM\"},\"(0070,0023)\":{tag:\"(0070,0023)\",vr:\"CS\",name:\"GraphicType\",vm:\"1\",version:\"DICOM\"},\"(0070,0024)\":{tag:\"(0070,0024)\",vr:\"CS\",name:\"GraphicFilled\",vm:\"1\",version:\"DICOM\"},\"(0070,0041)\":{tag:\"(0070,0041)\",vr:\"CS\",name:\"ImageHorizontalFlip\",vm:\"1\",version:\"DICOM\"},\"(0070,0042)\":{tag:\"(0070,0042)\",vr:\"US\",name:\"ImageRotation\",vm:\"1\",version:\"DICOM\"},\"(0070,0052)\":{tag:\"(0070,0052)\",vr:\"SL\",name:\"DisplayedAreaTopLeftHandCorner\",vm:\"2\",version:\"DICOM\"},\"(0070,0053)\":{tag:\"(0070,0053)\",vr:\"SL\",name:\"DisplayedAreaBottomRightHandCorner\",vm:\"2\",version:\"DICOM\"},\"(0070,005A)\":{tag:\"(0070,005A)\",vr:\"SQ\",name:\"DisplayedAreaSelectionSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0060)\":{tag:\"(0070,0060)\",vr:\"SQ\",name:\"GraphicLayerSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0062)\":{tag:\"(0070,0062)\",vr:\"IS\",name:\"GraphicLayerOrder\",vm:\"1\",version:\"DICOM\"},\"(0070,0066)\":{tag:\"(0070,0066)\",vr:\"US\",name:\"GraphicLayerRecommendedDisplayGrayscaleValue\",vm:\"1\",version:\"DICOM\"},\"(0070,0068)\":{tag:\"(0070,0068)\",vr:\"LO\",name:\"GraphicLayerDescription\",vm:\"1\",version:\"DICOM\"},\"(0070,0080)\":{tag:\"(0070,0080)\",vr:\"CS\",name:\"ContentLabel\",vm:\"1\",version:\"DICOM\"},\"(0070,0081)\":{tag:\"(0070,0081)\",vr:\"LO\",name:\"ContentDescription\",vm:\"1\",version:\"DICOM\"},\"(0070,0082)\":{tag:\"(0070,0082)\",vr:\"DA\",name:\"PresentationCreationDate\",vm:\"1\",version:\"DICOM\"},\"(0070,0083)\":{tag:\"(0070,0083)\",vr:\"TM\",name:\"PresentationCreationTime\",vm:\"1\",version:\"DICOM\"},\"(0070,0084)\":{tag:\"(0070,0084)\",vr:\"PN\",name:\"ContentCreatorName\",vm:\"1\",version:\"DICOM\"},\"(0070,0086)\":{tag:\"(0070,0086)\",vr:\"SQ\",name:\"ContentCreatorIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0087)\":{tag:\"(0070,0087)\",vr:\"SQ\",name:\"AlternateContentDescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0100)\":{tag:\"(0070,0100)\",vr:\"CS\",name:\"PresentationSizeMode\",vm:\"1\",version:\"DICOM\"},\"(0070,0101)\":{tag:\"(0070,0101)\",vr:\"DS\",name:\"PresentationPixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(0070,0102)\":{tag:\"(0070,0102)\",vr:\"IS\",name:\"PresentationPixelAspectRatio\",vm:\"2\",version:\"DICOM\"},\"(0070,0103)\":{tag:\"(0070,0103)\",vr:\"FL\",name:\"PresentationPixelMagnificationRatio\",vm:\"1\",version:\"DICOM\"},\"(0070,0207)\":{tag:\"(0070,0207)\",vr:\"LO\",name:\"GraphicGroupLabel\",vm:\"1\",version:\"DICOM\"},\"(0070,0208)\":{tag:\"(0070,0208)\",vr:\"ST\",name:\"GraphicGroupDescription\",vm:\"1\",version:\"DICOM\"},\"(0070,0209)\":{tag:\"(0070,0209)\",vr:\"SQ\",name:\"CompoundGraphicSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0226)\":{tag:\"(0070,0226)\",vr:\"UL\",name:\"CompoundGraphicInstanceID\",vm:\"1\",version:\"DICOM\"},\"(0070,0227)\":{tag:\"(0070,0227)\",vr:\"LO\",name:\"FontName\",vm:\"1\",version:\"DICOM\"},\"(0070,0228)\":{tag:\"(0070,0228)\",vr:\"CS\",name:\"FontNameType\",vm:\"1\",version:\"DICOM\"},\"(0070,0229)\":{tag:\"(0070,0229)\",vr:\"LO\",name:\"CSSFontName\",vm:\"1\",version:\"DICOM\"},\"(0070,0230)\":{tag:\"(0070,0230)\",vr:\"FD\",name:\"RotationAngle\",vm:\"1\",version:\"DICOM\"},\"(0070,0231)\":{tag:\"(0070,0231)\",vr:\"SQ\",name:\"TextStyleSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0232)\":{tag:\"(0070,0232)\",vr:\"SQ\",name:\"LineStyleSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0233)\":{tag:\"(0070,0233)\",vr:\"SQ\",name:\"FillStyleSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0234)\":{tag:\"(0070,0234)\",vr:\"SQ\",name:\"GraphicGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0241)\":{tag:\"(0070,0241)\",vr:\"US\",name:\"TextColorCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0070,0242)\":{tag:\"(0070,0242)\",vr:\"CS\",name:\"HorizontalAlignment\",vm:\"1\",version:\"DICOM\"},\"(0070,0243)\":{tag:\"(0070,0243)\",vr:\"CS\",name:\"VerticalAlignment\",vm:\"1\",version:\"DICOM\"},\"(0070,0244)\":{tag:\"(0070,0244)\",vr:\"CS\",name:\"ShadowStyle\",vm:\"1\",version:\"DICOM\"},\"(0070,0245)\":{tag:\"(0070,0245)\",vr:\"FL\",name:\"ShadowOffsetX\",vm:\"1\",version:\"DICOM\"},\"(0070,0246)\":{tag:\"(0070,0246)\",vr:\"FL\",name:\"ShadowOffsetY\",vm:\"1\",version:\"DICOM\"},\"(0070,0247)\":{tag:\"(0070,0247)\",vr:\"US\",name:\"ShadowColorCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0070,0248)\":{tag:\"(0070,0248)\",vr:\"CS\",name:\"Underlined\",vm:\"1\",version:\"DICOM\"},\"(0070,0249)\":{tag:\"(0070,0249)\",vr:\"CS\",name:\"Bold\",vm:\"1\",version:\"DICOM\"},\"(0070,0250)\":{tag:\"(0070,0250)\",vr:\"CS\",name:\"Italic\",vm:\"1\",version:\"DICOM\"},\"(0070,0251)\":{tag:\"(0070,0251)\",vr:\"US\",name:\"PatternOnColorCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0070,0252)\":{tag:\"(0070,0252)\",vr:\"US\",name:\"PatternOffColorCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0070,0253)\":{tag:\"(0070,0253)\",vr:\"FL\",name:\"LineThickness\",vm:\"1\",version:\"DICOM\"},\"(0070,0254)\":{tag:\"(0070,0254)\",vr:\"CS\",name:\"LineDashingStyle\",vm:\"1\",version:\"DICOM\"},\"(0070,0255)\":{tag:\"(0070,0255)\",vr:\"UL\",name:\"LinePattern\",vm:\"1\",version:\"DICOM\"},\"(0070,0256)\":{tag:\"(0070,0256)\",vr:\"OB\",name:\"FillPattern\",vm:\"1\",version:\"DICOM\"},\"(0070,0257)\":{tag:\"(0070,0257)\",vr:\"CS\",name:\"FillMode\",vm:\"1\",version:\"DICOM\"},\"(0070,0258)\":{tag:\"(0070,0258)\",vr:\"FL\",name:\"ShadowOpacity\",vm:\"1\",version:\"DICOM\"},\"(0070,0261)\":{tag:\"(0070,0261)\",vr:\"FL\",name:\"GapLength\",vm:\"1\",version:\"DICOM\"},\"(0070,0262)\":{tag:\"(0070,0262)\",vr:\"FL\",name:\"DiameterOfVisibility\",vm:\"1\",version:\"DICOM\"},\"(0070,0273)\":{tag:\"(0070,0273)\",vr:\"FL\",name:\"RotationPoint\",vm:\"2\",version:\"DICOM\"},\"(0070,0274)\":{tag:\"(0070,0274)\",vr:\"CS\",name:\"TickAlignment\",vm:\"1\",version:\"DICOM\"},\"(0070,0278)\":{tag:\"(0070,0278)\",vr:\"CS\",name:\"ShowTickLabel\",vm:\"1\",version:\"DICOM\"},\"(0070,0279)\":{tag:\"(0070,0279)\",vr:\"CS\",name:\"TickLabelAlignment\",vm:\"1\",version:\"DICOM\"},\"(0070,0282)\":{tag:\"(0070,0282)\",vr:\"CS\",name:\"CompoundGraphicUnits\",vm:\"1\",version:\"DICOM\"},\"(0070,0284)\":{tag:\"(0070,0284)\",vr:\"FL\",name:\"PatternOnOpacity\",vm:\"1\",version:\"DICOM\"},\"(0070,0285)\":{tag:\"(0070,0285)\",vr:\"FL\",name:\"PatternOffOpacity\",vm:\"1\",version:\"DICOM\"},\"(0070,0287)\":{tag:\"(0070,0287)\",vr:\"SQ\",name:\"MajorTicksSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0288)\":{tag:\"(0070,0288)\",vr:\"FL\",name:\"TickPosition\",vm:\"1\",version:\"DICOM\"},\"(0070,0289)\":{tag:\"(0070,0289)\",vr:\"SH\",name:\"TickLabel\",vm:\"1\",version:\"DICOM\"},\"(0070,0294)\":{tag:\"(0070,0294)\",vr:\"CS\",name:\"CompoundGraphicType\",vm:\"1\",version:\"DICOM\"},\"(0070,0295)\":{tag:\"(0070,0295)\",vr:\"UL\",name:\"GraphicGroupID\",vm:\"1\",version:\"DICOM\"},\"(0070,0306)\":{tag:\"(0070,0306)\",vr:\"CS\",name:\"ShapeType\",vm:\"1\",version:\"DICOM\"},\"(0070,0308)\":{tag:\"(0070,0308)\",vr:\"SQ\",name:\"RegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0309)\":{tag:\"(0070,0309)\",vr:\"SQ\",name:\"MatrixRegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,030A)\":{tag:\"(0070,030A)\",vr:\"SQ\",name:\"MatrixSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,030B)\":{tag:\"(0070,030B)\",vr:\"FD\",name:\"FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix\",vm:\"16\",version:\"DICOM\"},\"(0070,030C)\":{tag:\"(0070,030C)\",vr:\"CS\",name:\"FrameOfReferenceTransformationMatrixType\",vm:\"1\",version:\"DICOM\"},\"(0070,030D)\":{tag:\"(0070,030D)\",vr:\"SQ\",name:\"RegistrationTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,030F)\":{tag:\"(0070,030F)\",vr:\"ST\",name:\"FiducialDescription\",vm:\"1\",version:\"DICOM\"},\"(0070,0310)\":{tag:\"(0070,0310)\",vr:\"SH\",name:\"FiducialIdentifier\",vm:\"1\",version:\"DICOM\"},\"(0070,0311)\":{tag:\"(0070,0311)\",vr:\"SQ\",name:\"FiducialIdentifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0312)\":{tag:\"(0070,0312)\",vr:\"FD\",name:\"ContourUncertaintyRadius\",vm:\"1\",version:\"DICOM\"},\"(0070,0314)\":{tag:\"(0070,0314)\",vr:\"SQ\",name:\"UsedFiducialsSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0318)\":{tag:\"(0070,0318)\",vr:\"SQ\",name:\"GraphicCoordinatesDataSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,031A)\":{tag:\"(0070,031A)\",vr:\"UI\",name:\"FiducialUID\",vm:\"1\",version:\"DICOM\"},\"(0070,031B)\":{tag:\"(0070,031B)\",vr:\"UI\",name:\"ReferencedFiducialUID\",vm:\"1\",version:\"DICOM\"},\"(0070,031C)\":{tag:\"(0070,031C)\",vr:\"SQ\",name:\"FiducialSetSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,031E)\":{tag:\"(0070,031E)\",vr:\"SQ\",name:\"FiducialSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,031F)\":{tag:\"(0070,031F)\",vr:\"SQ\",name:\"FiducialsPropertyCategoryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0401)\":{tag:\"(0070,0401)\",vr:\"US\",name:\"GraphicLayerRecommendedDisplayCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0070,0402)\":{tag:\"(0070,0402)\",vr:\"SQ\",name:\"BlendingSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0403)\":{tag:\"(0070,0403)\",vr:\"FL\",name:\"RelativeOpacity\",vm:\"1\",version:\"DICOM\"},\"(0070,0404)\":{tag:\"(0070,0404)\",vr:\"SQ\",name:\"ReferencedSpatialRegistrationSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,0405)\":{tag:\"(0070,0405)\",vr:\"CS\",name:\"BlendingPosition\",vm:\"1\",version:\"DICOM\"},\"(0070,1209)\":{tag:\"(0070,1209)\",vr:\"UI\",name:\"VolumetricPresentationInputSetUID\",vm:\"1\",version:\"DICOM\"},\"(0070,120A)\":{tag:\"(0070,120A)\",vr:\"SQ\",name:\"VolumetricPresentationInputSetSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,120B)\":{tag:\"(0070,120B)\",vr:\"CS\",name:\"GlobalCrop\",vm:\"1\",version:\"DICOM\"},\"(0070,120C)\":{tag:\"(0070,120C)\",vr:\"US\",name:\"GlobalCroppingSpecificationIndex\",vm:\"1-n\",version:\"DICOM\"},\"(0070,120D)\":{tag:\"(0070,120D)\",vr:\"CS\",name:\"RenderingMethod\",vm:\"1\",version:\"DICOM\"},\"(0070,1602)\":{tag:\"(0070,1602)\",vr:\"CS\",name:\"RenderProjection\",vm:\"1\",version:\"DICOM\"},\"(0070,1603)\":{tag:\"(0070,1603)\",vr:\"FD\",name:\"ViewpointPosition\",vm:\"3\",version:\"DICOM\"},\"(0070,1604)\":{tag:\"(0070,1604)\",vr:\"FD\",name:\"ViewpointLookAtPoint\",vm:\"3\",version:\"DICOM\"},\"(0070,1605)\":{tag:\"(0070,1605)\",vr:\"FD\",name:\"ViewpointUpDirection\",vm:\"3\",version:\"DICOM\"},\"(0070,1606)\":{tag:\"(0070,1606)\",vr:\"FD\",name:\"RenderFieldOfView\",vm:\"6\",version:\"DICOM\"},\"(0070,1607)\":{tag:\"(0070,1607)\",vr:\"FD\",name:\"SamplingStepSize\",vm:\"1\",version:\"DICOM\"},\"(0070,1701)\":{tag:\"(0070,1701)\",vr:\"CS\",name:\"ShadingStyle\",vm:\"1\",version:\"DICOM\"},\"(0070,1702)\":{tag:\"(0070,1702)\",vr:\"FD\",name:\"AmbientReflectionIntensity\",vm:\"1\",version:\"DICOM\"},\"(0070,1703)\":{tag:\"(0070,1703)\",vr:\"FD\",name:\"LightDirection\",vm:\"3\",version:\"DICOM\"},\"(0070,1704)\":{tag:\"(0070,1704)\",vr:\"FD\",name:\"DiffuseReflectionIntensity\",vm:\"1\",version:\"DICOM\"},\"(0070,1705)\":{tag:\"(0070,1705)\",vr:\"FD\",name:\"SpecularReflectionIntensity\",vm:\"1\",version:\"DICOM\"},\"(0070,1706)\":{tag:\"(0070,1706)\",vr:\"FD\",name:\"Shininess\",vm:\"1\",version:\"DICOM\"},\"(0070,1A06)\":{tag:\"(0070,1A06)\",vr:\"FD\",name:\"SwivelRange\",vm:\"1\",version:\"DICOM\"},\"(0070,1A07)\":{tag:\"(0070,1A07)\",vr:\"OD\",name:\"VolumetricCurveUpDirections\",vm:\"1\",version:\"DICOM\"},\"(0070,1A08)\":{tag:\"(0070,1A08)\",vr:\"SQ\",name:\"VolumeStreamSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,1A09)\":{tag:\"(0070,1A09)\",vr:\"LO\",name:\"RGBATransferFunctionDescription\",vm:\"1\",version:\"DICOM\"},\"(0070,1B01)\":{tag:\"(0070,1B01)\",vr:\"SQ\",name:\"AdvancedBlendingSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,1B02)\":{tag:\"(0070,1B02)\",vr:\"US\",name:\"BlendingInputNumber\",vm:\"1\",version:\"DICOM\"},\"(0070,1B03)\":{tag:\"(0070,1B03)\",vr:\"SQ\",name:\"BlendingDisplayInputSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,1B04)\":{tag:\"(0070,1B04)\",vr:\"SQ\",name:\"BlendingDisplaySequence\",vm:\"1\",version:\"DICOM\"},\"(0070,1B06)\":{tag:\"(0070,1B06)\",vr:\"CS\",name:\"BlendingMode\",vm:\"1\",version:\"DICOM\"},\"(0070,1B07)\":{tag:\"(0070,1B07)\",vr:\"CS\",name:\"TimeSeriesBlending\",vm:\"1\",version:\"DICOM\"},\"(0070,1B08)\":{tag:\"(0070,1B08)\",vr:\"CS\",name:\"GeometryForDisplay\",vm:\"1\",version:\"DICOM\"},\"(0070,1B11)\":{tag:\"(0070,1B11)\",vr:\"SQ\",name:\"ThresholdSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,1B12)\":{tag:\"(0070,1B12)\",vr:\"SQ\",name:\"ThresholdValueSequence\",vm:\"1\",version:\"DICOM\"},\"(0070,1B13)\":{tag:\"(0070,1B13)\",vr:\"CS\",name:\"ThresholdType\",vm:\"1\",version:\"DICOM\"},\"(0070,1B14)\":{tag:\"(0070,1B14)\",vr:\"FD\",name:\"ThresholdValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0002)\":{tag:\"(0072,0002)\",vr:\"SH\",name:\"HangingProtocolName\",vm:\"1\",version:\"DICOM\"},\"(0072,0004)\":{tag:\"(0072,0004)\",vr:\"LO\",name:\"HangingProtocolDescription\",vm:\"1\",version:\"DICOM\"},\"(0072,0006)\":{tag:\"(0072,0006)\",vr:\"CS\",name:\"HangingProtocolLevel\",vm:\"1\",version:\"DICOM\"},\"(0072,0008)\":{tag:\"(0072,0008)\",vr:\"LO\",name:\"HangingProtocolCreator\",vm:\"1\",version:\"DICOM\"},\"(0072,000A)\":{tag:\"(0072,000A)\",vr:\"DT\",name:\"HangingProtocolCreationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0072,000C)\":{tag:\"(0072,000C)\",vr:\"SQ\",name:\"HangingProtocolDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,000E)\":{tag:\"(0072,000E)\",vr:\"SQ\",name:\"HangingProtocolUserIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0010)\":{tag:\"(0072,0010)\",vr:\"LO\",name:\"HangingProtocolUserGroupName\",vm:\"1\",version:\"DICOM\"},\"(0072,0012)\":{tag:\"(0072,0012)\",vr:\"SQ\",name:\"SourceHangingProtocolSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0014)\":{tag:\"(0072,0014)\",vr:\"US\",name:\"NumberOfPriorsReferenced\",vm:\"1\",version:\"DICOM\"},\"(0072,0020)\":{tag:\"(0072,0020)\",vr:\"SQ\",name:\"ImageSetsSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0022)\":{tag:\"(0072,0022)\",vr:\"SQ\",name:\"ImageSetSelectorSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0024)\":{tag:\"(0072,0024)\",vr:\"CS\",name:\"ImageSetSelectorUsageFlag\",vm:\"1\",version:\"DICOM\"},\"(0072,0026)\":{tag:\"(0072,0026)\",vr:\"AT\",name:\"SelectorAttribute\",vm:\"1\",version:\"DICOM\"},\"(0072,0028)\":{tag:\"(0072,0028)\",vr:\"US\",name:\"SelectorValueNumber\",vm:\"1\",version:\"DICOM\"},\"(0072,0030)\":{tag:\"(0072,0030)\",vr:\"SQ\",name:\"TimeBasedImageSetsSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0032)\":{tag:\"(0072,0032)\",vr:\"US\",name:\"ImageSetNumber\",vm:\"1\",version:\"DICOM\"},\"(0072,0034)\":{tag:\"(0072,0034)\",vr:\"CS\",name:\"ImageSetSelectorCategory\",vm:\"1\",version:\"DICOM\"},\"(0072,0038)\":{tag:\"(0072,0038)\",vr:\"US\",name:\"RelativeTime\",vm:\"2\",version:\"DICOM\"},\"(0072,003A)\":{tag:\"(0072,003A)\",vr:\"CS\",name:\"RelativeTimeUnits\",vm:\"1\",version:\"DICOM\"},\"(0072,003C)\":{tag:\"(0072,003C)\",vr:\"SS\",name:\"AbstractPriorValue\",vm:\"2\",version:\"DICOM\"},\"(0072,003E)\":{tag:\"(0072,003E)\",vr:\"SQ\",name:\"AbstractPriorCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0040)\":{tag:\"(0072,0040)\",vr:\"LO\",name:\"ImageSetLabel\",vm:\"1\",version:\"DICOM\"},\"(0072,0050)\":{tag:\"(0072,0050)\",vr:\"CS\",name:\"SelectorAttributeVR\",vm:\"1\",version:\"DICOM\"},\"(0072,0052)\":{tag:\"(0072,0052)\",vr:\"AT\",name:\"SelectorSequencePointer\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0054)\":{tag:\"(0072,0054)\",vr:\"LO\",name:\"SelectorSequencePointerPrivateCreator\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0056)\":{tag:\"(0072,0056)\",vr:\"LO\",name:\"SelectorAttributePrivateCreator\",vm:\"1\",version:\"DICOM\"},\"(0072,005E)\":{tag:\"(0072,005E)\",vr:\"AE\",name:\"SelectorAEValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,005F)\":{tag:\"(0072,005F)\",vr:\"AS\",name:\"SelectorASValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0060)\":{tag:\"(0072,0060)\",vr:\"AT\",name:\"SelectorATValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0061)\":{tag:\"(0072,0061)\",vr:\"DA\",name:\"SelectorDAValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0062)\":{tag:\"(0072,0062)\",vr:\"CS\",name:\"SelectorCSValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0063)\":{tag:\"(0072,0063)\",vr:\"DT\",name:\"SelectorDTValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0064)\":{tag:\"(0072,0064)\",vr:\"IS\",name:\"SelectorISValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0065)\":{tag:\"(0072,0065)\",vr:\"OB\",name:\"SelectorOBValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0066)\":{tag:\"(0072,0066)\",vr:\"LO\",name:\"SelectorLOValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0067)\":{tag:\"(0072,0067)\",vr:\"OF\",name:\"SelectorOFValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0068)\":{tag:\"(0072,0068)\",vr:\"LT\",name:\"SelectorLTValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0069)\":{tag:\"(0072,0069)\",vr:\"OW\",name:\"SelectorOWValue\",vm:\"1\",version:\"DICOM\"},\"(0072,006A)\":{tag:\"(0072,006A)\",vr:\"PN\",name:\"SelectorPNValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,006B)\":{tag:\"(0072,006B)\",vr:\"TM\",name:\"SelectorTMValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,006C)\":{tag:\"(0072,006C)\",vr:\"SH\",name:\"SelectorSHValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,006D)\":{tag:\"(0072,006D)\",vr:\"UN\",name:\"SelectorUNValue\",vm:\"1\",version:\"DICOM\"},\"(0072,006E)\":{tag:\"(0072,006E)\",vr:\"ST\",name:\"SelectorSTValue\",vm:\"1\",version:\"DICOM\"},\"(0072,006F)\":{tag:\"(0072,006F)\",vr:\"UC\",name:\"SelectorUCValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0070)\":{tag:\"(0072,0070)\",vr:\"UT\",name:\"SelectorUTValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0071)\":{tag:\"(0072,0071)\",vr:\"UR\",name:\"SelectorURValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0072)\":{tag:\"(0072,0072)\",vr:\"DS\",name:\"SelectorDSValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0073)\":{tag:\"(0072,0073)\",vr:\"OD\",name:\"SelectorODValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0074)\":{tag:\"(0072,0074)\",vr:\"FD\",name:\"SelectorFDValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0075)\":{tag:\"(0072,0075)\",vr:\"OL\",name:\"SelectorOLValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0076)\":{tag:\"(0072,0076)\",vr:\"FL\",name:\"SelectorFLValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0078)\":{tag:\"(0072,0078)\",vr:\"UL\",name:\"SelectorULValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,007A)\":{tag:\"(0072,007A)\",vr:\"US\",name:\"SelectorUSValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,007C)\":{tag:\"(0072,007C)\",vr:\"SL\",name:\"SelectorSLValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,007E)\":{tag:\"(0072,007E)\",vr:\"SS\",name:\"SelectorSSValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,007F)\":{tag:\"(0072,007F)\",vr:\"UI\",name:\"SelectorUIValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0080)\":{tag:\"(0072,0080)\",vr:\"SQ\",name:\"SelectorCodeSequenceValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0081)\":{tag:\"(0072,0081)\",vr:\"OV\",name:\"SelectorOVValue\",vm:\"1\",version:\"DICOM\"},\"(0072,0082)\":{tag:\"(0072,0082)\",vr:\"SV\",name:\"SelectorSVValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0083)\":{tag:\"(0072,0083)\",vr:\"UV\",name:\"SelectorUVValue\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0100)\":{tag:\"(0072,0100)\",vr:\"US\",name:\"NumberOfScreens\",vm:\"1\",version:\"DICOM\"},\"(0072,0102)\":{tag:\"(0072,0102)\",vr:\"SQ\",name:\"NominalScreenDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0104)\":{tag:\"(0072,0104)\",vr:\"US\",name:\"NumberOfVerticalPixels\",vm:\"1\",version:\"DICOM\"},\"(0072,0106)\":{tag:\"(0072,0106)\",vr:\"US\",name:\"NumberOfHorizontalPixels\",vm:\"1\",version:\"DICOM\"},\"(0072,0108)\":{tag:\"(0072,0108)\",vr:\"FD\",name:\"DisplayEnvironmentSpatialPosition\",vm:\"4\",version:\"DICOM\"},\"(0072,010A)\":{tag:\"(0072,010A)\",vr:\"US\",name:\"ScreenMinimumGrayscaleBitDepth\",vm:\"1\",version:\"DICOM\"},\"(0072,010C)\":{tag:\"(0072,010C)\",vr:\"US\",name:\"ScreenMinimumColorBitDepth\",vm:\"1\",version:\"DICOM\"},\"(0072,010E)\":{tag:\"(0072,010E)\",vr:\"US\",name:\"ApplicationMaximumRepaintTime\",vm:\"1\",version:\"DICOM\"},\"(0072,0200)\":{tag:\"(0072,0200)\",vr:\"SQ\",name:\"DisplaySetsSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0202)\":{tag:\"(0072,0202)\",vr:\"US\",name:\"DisplaySetNumber\",vm:\"1\",version:\"DICOM\"},\"(0072,0203)\":{tag:\"(0072,0203)\",vr:\"LO\",name:\"DisplaySetLabel\",vm:\"1\",version:\"DICOM\"},\"(0072,0204)\":{tag:\"(0072,0204)\",vr:\"US\",name:\"DisplaySetPresentationGroup\",vm:\"1\",version:\"DICOM\"},\"(0072,0206)\":{tag:\"(0072,0206)\",vr:\"LO\",name:\"DisplaySetPresentationGroupDescription\",vm:\"1\",version:\"DICOM\"},\"(0072,0208)\":{tag:\"(0072,0208)\",vr:\"CS\",name:\"PartialDataDisplayHandling\",vm:\"1\",version:\"DICOM\"},\"(0072,0210)\":{tag:\"(0072,0210)\",vr:\"SQ\",name:\"SynchronizedScrollingSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0212)\":{tag:\"(0072,0212)\",vr:\"US\",name:\"DisplaySetScrollingGroup\",vm:\"2-n\",version:\"DICOM\"},\"(0072,0214)\":{tag:\"(0072,0214)\",vr:\"SQ\",name:\"NavigationIndicatorSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0216)\":{tag:\"(0072,0216)\",vr:\"US\",name:\"NavigationDisplaySet\",vm:\"1\",version:\"DICOM\"},\"(0072,0218)\":{tag:\"(0072,0218)\",vr:\"US\",name:\"ReferenceDisplaySets\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0300)\":{tag:\"(0072,0300)\",vr:\"SQ\",name:\"ImageBoxesSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0302)\":{tag:\"(0072,0302)\",vr:\"US\",name:\"ImageBoxNumber\",vm:\"1\",version:\"DICOM\"},\"(0072,0304)\":{tag:\"(0072,0304)\",vr:\"CS\",name:\"ImageBoxLayoutType\",vm:\"1\",version:\"DICOM\"},\"(0072,0306)\":{tag:\"(0072,0306)\",vr:\"US\",name:\"ImageBoxTileHorizontalDimension\",vm:\"1\",version:\"DICOM\"},\"(0072,0308)\":{tag:\"(0072,0308)\",vr:\"US\",name:\"ImageBoxTileVerticalDimension\",vm:\"1\",version:\"DICOM\"},\"(0072,0310)\":{tag:\"(0072,0310)\",vr:\"CS\",name:\"ImageBoxScrollDirection\",vm:\"1\",version:\"DICOM\"},\"(0072,0312)\":{tag:\"(0072,0312)\",vr:\"CS\",name:\"ImageBoxSmallScrollType\",vm:\"1\",version:\"DICOM\"},\"(0072,0314)\":{tag:\"(0072,0314)\",vr:\"US\",name:\"ImageBoxSmallScrollAmount\",vm:\"1\",version:\"DICOM\"},\"(0072,0316)\":{tag:\"(0072,0316)\",vr:\"CS\",name:\"ImageBoxLargeScrollType\",vm:\"1\",version:\"DICOM\"},\"(0072,0318)\":{tag:\"(0072,0318)\",vr:\"US\",name:\"ImageBoxLargeScrollAmount\",vm:\"1\",version:\"DICOM\"},\"(0072,0320)\":{tag:\"(0072,0320)\",vr:\"US\",name:\"ImageBoxOverlapPriority\",vm:\"1\",version:\"DICOM\"},\"(0072,0330)\":{tag:\"(0072,0330)\",vr:\"FD\",name:\"CineRelativeToRealTime\",vm:\"1\",version:\"DICOM\"},\"(0072,0400)\":{tag:\"(0072,0400)\",vr:\"SQ\",name:\"FilterOperationsSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0402)\":{tag:\"(0072,0402)\",vr:\"CS\",name:\"FilterByCategory\",vm:\"1\",version:\"DICOM\"},\"(0072,0404)\":{tag:\"(0072,0404)\",vr:\"CS\",name:\"FilterByAttributePresence\",vm:\"1\",version:\"DICOM\"},\"(0072,0406)\":{tag:\"(0072,0406)\",vr:\"CS\",name:\"FilterByOperator\",vm:\"1\",version:\"DICOM\"},\"(0072,0420)\":{tag:\"(0072,0420)\",vr:\"US\",name:\"StructuredDisplayBackgroundCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0072,0421)\":{tag:\"(0072,0421)\",vr:\"US\",name:\"EmptyImageBoxCIELabValue\",vm:\"3\",version:\"DICOM\"},\"(0072,0422)\":{tag:\"(0072,0422)\",vr:\"SQ\",name:\"StructuredDisplayImageBoxSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0424)\":{tag:\"(0072,0424)\",vr:\"SQ\",name:\"StructuredDisplayTextBoxSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0427)\":{tag:\"(0072,0427)\",vr:\"SQ\",name:\"ReferencedFirstFrameSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0430)\":{tag:\"(0072,0430)\",vr:\"SQ\",name:\"ImageBoxSynchronizationSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0432)\":{tag:\"(0072,0432)\",vr:\"US\",name:\"SynchronizedImageBoxList\",vm:\"2-n\",version:\"DICOM\"},\"(0072,0434)\":{tag:\"(0072,0434)\",vr:\"CS\",name:\"TypeOfSynchronization\",vm:\"1\",version:\"DICOM\"},\"(0072,0500)\":{tag:\"(0072,0500)\",vr:\"CS\",name:\"BlendingOperationType\",vm:\"1\",version:\"DICOM\"},\"(0072,0510)\":{tag:\"(0072,0510)\",vr:\"CS\",name:\"ReformattingOperationType\",vm:\"1\",version:\"DICOM\"},\"(0072,0512)\":{tag:\"(0072,0512)\",vr:\"FD\",name:\"ReformattingThickness\",vm:\"1\",version:\"DICOM\"},\"(0072,0514)\":{tag:\"(0072,0514)\",vr:\"FD\",name:\"ReformattingInterval\",vm:\"1\",version:\"DICOM\"},\"(0072,0516)\":{tag:\"(0072,0516)\",vr:\"CS\",name:\"ReformattingOperationInitialViewDirection\",vm:\"1\",version:\"DICOM\"},\"(0072,0520)\":{tag:\"(0072,0520)\",vr:\"CS\",name:\"ThreeDRenderingType\",vm:\"1-n\",version:\"DICOM\"},\"(0072,0600)\":{tag:\"(0072,0600)\",vr:\"SQ\",name:\"SortingOperationsSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0602)\":{tag:\"(0072,0602)\",vr:\"CS\",name:\"SortByCategory\",vm:\"1\",version:\"DICOM\"},\"(0072,0604)\":{tag:\"(0072,0604)\",vr:\"CS\",name:\"SortingDirection\",vm:\"1\",version:\"DICOM\"},\"(0072,0700)\":{tag:\"(0072,0700)\",vr:\"CS\",name:\"DisplaySetPatientOrientation\",vm:\"2\",version:\"DICOM\"},\"(0072,0702)\":{tag:\"(0072,0702)\",vr:\"CS\",name:\"VOIType\",vm:\"1\",version:\"DICOM\"},\"(0072,0704)\":{tag:\"(0072,0704)\",vr:\"CS\",name:\"PseudoColorType\",vm:\"1\",version:\"DICOM\"},\"(0072,0705)\":{tag:\"(0072,0705)\",vr:\"SQ\",name:\"PseudoColorPaletteInstanceReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0072,0706)\":{tag:\"(0072,0706)\",vr:\"CS\",name:\"ShowGrayscaleInverted\",vm:\"1\",version:\"DICOM\"},\"(0072,0710)\":{tag:\"(0072,0710)\",vr:\"CS\",name:\"ShowImageTrueSizeFlag\",vm:\"1\",version:\"DICOM\"},\"(0072,0712)\":{tag:\"(0072,0712)\",vr:\"CS\",name:\"ShowGraphicAnnotationFlag\",vm:\"1\",version:\"DICOM\"},\"(0072,0714)\":{tag:\"(0072,0714)\",vr:\"CS\",name:\"ShowPatientDemographicsFlag\",vm:\"1\",version:\"DICOM\"},\"(0072,0716)\":{tag:\"(0072,0716)\",vr:\"CS\",name:\"ShowAcquisitionTechniquesFlag\",vm:\"1\",version:\"DICOM\"},\"(0072,0717)\":{tag:\"(0072,0717)\",vr:\"CS\",name:\"DisplaySetHorizontalJustification\",vm:\"1\",version:\"DICOM\"},\"(0072,0718)\":{tag:\"(0072,0718)\",vr:\"CS\",name:\"DisplaySetVerticalJustification\",vm:\"1\",version:\"DICOM\"},\"(0074,0120)\":{tag:\"(0074,0120)\",vr:\"FD\",name:\"ContinuationStartMeterset\",vm:\"1\",version:\"DICOM\"},\"(0074,0121)\":{tag:\"(0074,0121)\",vr:\"FD\",name:\"ContinuationEndMeterset\",vm:\"1\",version:\"DICOM\"},\"(0074,1000)\":{tag:\"(0074,1000)\",vr:\"CS\",name:\"ProcedureStepState\",vm:\"1\",version:\"DICOM\"},\"(0074,1002)\":{tag:\"(0074,1002)\",vr:\"SQ\",name:\"ProcedureStepProgressInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1004)\":{tag:\"(0074,1004)\",vr:\"DS\",name:\"ProcedureStepProgress\",vm:\"1\",version:\"DICOM\"},\"(0074,1006)\":{tag:\"(0074,1006)\",vr:\"ST\",name:\"ProcedureStepProgressDescription\",vm:\"1\",version:\"DICOM\"},\"(0074,1007)\":{tag:\"(0074,1007)\",vr:\"SQ\",name:\"ProcedureStepProgressParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1008)\":{tag:\"(0074,1008)\",vr:\"SQ\",name:\"ProcedureStepCommunicationsURISequence\",vm:\"1\",version:\"DICOM\"},\"(0074,100A)\":{tag:\"(0074,100A)\",vr:\"UR\",name:\"ContactURI\",vm:\"1\",version:\"DICOM\"},\"(0074,100C)\":{tag:\"(0074,100C)\",vr:\"LO\",name:\"ContactDisplayName\",vm:\"1\",version:\"DICOM\"},\"(0074,100E)\":{tag:\"(0074,100E)\",vr:\"SQ\",name:\"ProcedureStepDiscontinuationReasonCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1020)\":{tag:\"(0074,1020)\",vr:\"SQ\",name:\"BeamTaskSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1022)\":{tag:\"(0074,1022)\",vr:\"CS\",name:\"BeamTaskType\",vm:\"1\",version:\"DICOM\"},\"(0074,1025)\":{tag:\"(0074,1025)\",vr:\"CS\",name:\"AutosequenceFlag\",vm:\"1\",version:\"DICOM\"},\"(0074,1026)\":{tag:\"(0074,1026)\",vr:\"FD\",name:\"TableTopVerticalAdjustedPosition\",vm:\"1\",version:\"DICOM\"},\"(0074,1027)\":{tag:\"(0074,1027)\",vr:\"FD\",name:\"TableTopLongitudinalAdjustedPosition\",vm:\"1\",version:\"DICOM\"},\"(0074,1028)\":{tag:\"(0074,1028)\",vr:\"FD\",name:\"TableTopLateralAdjustedPosition\",vm:\"1\",version:\"DICOM\"},\"(0074,102A)\":{tag:\"(0074,102A)\",vr:\"FD\",name:\"PatientSupportAdjustedAngle\",vm:\"1\",version:\"DICOM\"},\"(0074,102B)\":{tag:\"(0074,102B)\",vr:\"FD\",name:\"TableTopEccentricAdjustedAngle\",vm:\"1\",version:\"DICOM\"},\"(0074,102C)\":{tag:\"(0074,102C)\",vr:\"FD\",name:\"TableTopPitchAdjustedAngle\",vm:\"1\",version:\"DICOM\"},\"(0074,102D)\":{tag:\"(0074,102D)\",vr:\"FD\",name:\"TableTopRollAdjustedAngle\",vm:\"1\",version:\"DICOM\"},\"(0074,1030)\":{tag:\"(0074,1030)\",vr:\"SQ\",name:\"DeliveryVerificationImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1032)\":{tag:\"(0074,1032)\",vr:\"CS\",name:\"VerificationImageTiming\",vm:\"1\",version:\"DICOM\"},\"(0074,1034)\":{tag:\"(0074,1034)\",vr:\"CS\",name:\"DoubleExposureFlag\",vm:\"1\",version:\"DICOM\"},\"(0074,1036)\":{tag:\"(0074,1036)\",vr:\"CS\",name:\"DoubleExposureOrdering\",vm:\"1\",version:\"DICOM\"},\"(0074,1040)\":{tag:\"(0074,1040)\",vr:\"SQ\",name:\"RelatedReferenceRTImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1042)\":{tag:\"(0074,1042)\",vr:\"SQ\",name:\"GeneralMachineVerificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1044)\":{tag:\"(0074,1044)\",vr:\"SQ\",name:\"ConventionalMachineVerificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1046)\":{tag:\"(0074,1046)\",vr:\"SQ\",name:\"IonMachineVerificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1048)\":{tag:\"(0074,1048)\",vr:\"SQ\",name:\"FailedAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,104A)\":{tag:\"(0074,104A)\",vr:\"SQ\",name:\"OverriddenAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,104C)\":{tag:\"(0074,104C)\",vr:\"SQ\",name:\"ConventionalControlPointVerificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,104E)\":{tag:\"(0074,104E)\",vr:\"SQ\",name:\"IonControlPointVerificationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1050)\":{tag:\"(0074,1050)\",vr:\"SQ\",name:\"AttributeOccurrenceSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1052)\":{tag:\"(0074,1052)\",vr:\"AT\",name:\"AttributeOccurrencePointer\",vm:\"1\",version:\"DICOM\"},\"(0074,1054)\":{tag:\"(0074,1054)\",vr:\"UL\",name:\"AttributeItemSelector\",vm:\"1\",version:\"DICOM\"},\"(0074,1056)\":{tag:\"(0074,1056)\",vr:\"LO\",name:\"AttributeOccurrencePrivateCreator\",vm:\"1\",version:\"DICOM\"},\"(0074,1057)\":{tag:\"(0074,1057)\",vr:\"IS\",name:\"SelectorSequencePointerItems\",vm:\"1-n\",version:\"DICOM\"},\"(0074,1200)\":{tag:\"(0074,1200)\",vr:\"CS\",name:\"ScheduledProcedureStepPriority\",vm:\"1\",version:\"DICOM\"},\"(0074,1202)\":{tag:\"(0074,1202)\",vr:\"LO\",name:\"WorklistLabel\",vm:\"1\",version:\"DICOM\"},\"(0074,1204)\":{tag:\"(0074,1204)\",vr:\"LO\",name:\"ProcedureStepLabel\",vm:\"1\",version:\"DICOM\"},\"(0074,1210)\":{tag:\"(0074,1210)\",vr:\"SQ\",name:\"ScheduledProcessingParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1212)\":{tag:\"(0074,1212)\",vr:\"SQ\",name:\"PerformedProcessingParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1216)\":{tag:\"(0074,1216)\",vr:\"SQ\",name:\"UnifiedProcedureStepPerformedProcedureSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1224)\":{tag:\"(0074,1224)\",vr:\"SQ\",name:\"ReplacedProcedureStepSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1230)\":{tag:\"(0074,1230)\",vr:\"LO\",name:\"DeletionLock\",vm:\"1\",version:\"DICOM\"},\"(0074,1234)\":{tag:\"(0074,1234)\",vr:\"AE\",name:\"ReceivingAE\",vm:\"1\",version:\"DICOM\"},\"(0074,1236)\":{tag:\"(0074,1236)\",vr:\"AE\",name:\"RequestingAE\",vm:\"1\",version:\"DICOM\"},\"(0074,1238)\":{tag:\"(0074,1238)\",vr:\"LT\",name:\"ReasonForCancellation\",vm:\"1\",version:\"DICOM\"},\"(0074,1242)\":{tag:\"(0074,1242)\",vr:\"CS\",name:\"SCPStatus\",vm:\"1\",version:\"DICOM\"},\"(0074,1244)\":{tag:\"(0074,1244)\",vr:\"CS\",name:\"SubscriptionListStatus\",vm:\"1\",version:\"DICOM\"},\"(0074,1246)\":{tag:\"(0074,1246)\",vr:\"CS\",name:\"UnifiedProcedureStepListStatus\",vm:\"1\",version:\"DICOM\"},\"(0074,1324)\":{tag:\"(0074,1324)\",vr:\"UL\",name:\"BeamOrderIndex\",vm:\"1\",version:\"DICOM\"},\"(0074,1338)\":{tag:\"(0074,1338)\",vr:\"FD\",name:\"DoubleExposureMeterset\",vm:\"1\",version:\"DICOM\"},\"(0074,133A)\":{tag:\"(0074,133A)\",vr:\"FD\",name:\"DoubleExposureFieldDelta\",vm:\"4\",version:\"DICOM\"},\"(0074,1401)\":{tag:\"(0074,1401)\",vr:\"SQ\",name:\"BrachyTaskSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1402)\":{tag:\"(0074,1402)\",vr:\"DS\",name:\"ContinuationStartTotalReferenceAirKerma\",vm:\"1\",version:\"DICOM\"},\"(0074,1403)\":{tag:\"(0074,1403)\",vr:\"DS\",name:\"ContinuationEndTotalReferenceAirKerma\",vm:\"1\",version:\"DICOM\"},\"(0074,1404)\":{tag:\"(0074,1404)\",vr:\"IS\",name:\"ContinuationPulseNumber\",vm:\"1\",version:\"DICOM\"},\"(0074,1405)\":{tag:\"(0074,1405)\",vr:\"SQ\",name:\"ChannelDeliveryOrderSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,1406)\":{tag:\"(0074,1406)\",vr:\"IS\",name:\"ReferencedChannelNumber\",vm:\"1\",version:\"DICOM\"},\"(0074,1407)\":{tag:\"(0074,1407)\",vr:\"DS\",name:\"StartCumulativeTimeWeight\",vm:\"1\",version:\"DICOM\"},\"(0074,1408)\":{tag:\"(0074,1408)\",vr:\"DS\",name:\"EndCumulativeTimeWeight\",vm:\"1\",version:\"DICOM\"},\"(0074,1409)\":{tag:\"(0074,1409)\",vr:\"SQ\",name:\"OmittedChannelSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,140A)\":{tag:\"(0074,140A)\",vr:\"CS\",name:\"ReasonForChannelOmission\",vm:\"1\",version:\"DICOM\"},\"(0074,140B)\":{tag:\"(0074,140B)\",vr:\"LO\",name:\"ReasonForChannelOmissionDescription\",vm:\"1\",version:\"DICOM\"},\"(0074,140C)\":{tag:\"(0074,140C)\",vr:\"IS\",name:\"ChannelDeliveryOrderIndex\",vm:\"1\",version:\"DICOM\"},\"(0074,140D)\":{tag:\"(0074,140D)\",vr:\"SQ\",name:\"ChannelDeliveryContinuationSequence\",vm:\"1\",version:\"DICOM\"},\"(0074,140E)\":{tag:\"(0074,140E)\",vr:\"SQ\",name:\"OmittedApplicationSetupSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0001)\":{tag:\"(0076,0001)\",vr:\"LO\",name:\"ImplantAssemblyTemplateName\",vm:\"1\",version:\"DICOM\"},\"(0076,0003)\":{tag:\"(0076,0003)\",vr:\"LO\",name:\"ImplantAssemblyTemplateIssuer\",vm:\"1\",version:\"DICOM\"},\"(0076,0006)\":{tag:\"(0076,0006)\",vr:\"LO\",name:\"ImplantAssemblyTemplateVersion\",vm:\"1\",version:\"DICOM\"},\"(0076,0008)\":{tag:\"(0076,0008)\",vr:\"SQ\",name:\"ReplacedImplantAssemblyTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,000A)\":{tag:\"(0076,000A)\",vr:\"CS\",name:\"ImplantAssemblyTemplateType\",vm:\"1\",version:\"DICOM\"},\"(0076,000C)\":{tag:\"(0076,000C)\",vr:\"SQ\",name:\"OriginalImplantAssemblyTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,000E)\":{tag:\"(0076,000E)\",vr:\"SQ\",name:\"DerivationImplantAssemblyTemplateSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0010)\":{tag:\"(0076,0010)\",vr:\"SQ\",name:\"ImplantAssemblyTemplateTargetAnatomySequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0020)\":{tag:\"(0076,0020)\",vr:\"SQ\",name:\"ProcedureTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0030)\":{tag:\"(0076,0030)\",vr:\"LO\",name:\"SurgicalTechnique\",vm:\"1\",version:\"DICOM\"},\"(0076,0032)\":{tag:\"(0076,0032)\",vr:\"SQ\",name:\"ComponentTypesSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0034)\":{tag:\"(0076,0034)\",vr:\"CS\",name:\"ComponentTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0036)\":{tag:\"(0076,0036)\",vr:\"CS\",name:\"ExclusiveComponentType\",vm:\"1\",version:\"DICOM\"},\"(0076,0038)\":{tag:\"(0076,0038)\",vr:\"CS\",name:\"MandatoryComponentType\",vm:\"1\",version:\"DICOM\"},\"(0076,0040)\":{tag:\"(0076,0040)\",vr:\"SQ\",name:\"ComponentSequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0055)\":{tag:\"(0076,0055)\",vr:\"US\",name:\"ComponentID\",vm:\"1\",version:\"DICOM\"},\"(0076,0060)\":{tag:\"(0076,0060)\",vr:\"SQ\",name:\"ComponentAssemblySequence\",vm:\"1\",version:\"DICOM\"},\"(0076,0070)\":{tag:\"(0076,0070)\",vr:\"US\",name:\"Component1ReferencedID\",vm:\"1\",version:\"DICOM\"},\"(0076,0080)\":{tag:\"(0076,0080)\",vr:\"US\",name:\"Component1ReferencedMatingFeatureSetID\",vm:\"1\",version:\"DICOM\"},\"(0076,0090)\":{tag:\"(0076,0090)\",vr:\"US\",name:\"Component1ReferencedMatingFeatureID\",vm:\"1\",version:\"DICOM\"},\"(0076,00A0)\":{tag:\"(0076,00A0)\",vr:\"US\",name:\"Component2ReferencedID\",vm:\"1\",version:\"DICOM\"},\"(0076,00B0)\":{tag:\"(0076,00B0)\",vr:\"US\",name:\"Component2ReferencedMatingFeatureSetID\",vm:\"1\",version:\"DICOM\"},\"(0076,00C0)\":{tag:\"(0076,00C0)\",vr:\"US\",name:\"Component2ReferencedMatingFeatureID\",vm:\"1\",version:\"DICOM\"},\"(0078,0001)\":{tag:\"(0078,0001)\",vr:\"LO\",name:\"ImplantTemplateGroupName\",vm:\"1\",version:\"DICOM\"},\"(0078,0010)\":{tag:\"(0078,0010)\",vr:\"ST\",name:\"ImplantTemplateGroupDescription\",vm:\"1\",version:\"DICOM\"},\"(0078,0020)\":{tag:\"(0078,0020)\",vr:\"LO\",name:\"ImplantTemplateGroupIssuer\",vm:\"1\",version:\"DICOM\"},\"(0078,0024)\":{tag:\"(0078,0024)\",vr:\"LO\",name:\"ImplantTemplateGroupVersion\",vm:\"1\",version:\"DICOM\"},\"(0078,0026)\":{tag:\"(0078,0026)\",vr:\"SQ\",name:\"ReplacedImplantTemplateGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(0078,0028)\":{tag:\"(0078,0028)\",vr:\"SQ\",name:\"ImplantTemplateGroupTargetAnatomySequence\",vm:\"1\",version:\"DICOM\"},\"(0078,002A)\":{tag:\"(0078,002A)\",vr:\"SQ\",name:\"ImplantTemplateGroupMembersSequence\",vm:\"1\",version:\"DICOM\"},\"(0078,002E)\":{tag:\"(0078,002E)\",vr:\"US\",name:\"ImplantTemplateGroupMemberID\",vm:\"1\",version:\"DICOM\"},\"(0078,0050)\":{tag:\"(0078,0050)\",vr:\"FD\",name:\"ThreeDImplantTemplateGroupMemberMatchingPoint\",vm:\"3\",version:\"DICOM\"},\"(0078,0060)\":{tag:\"(0078,0060)\",vr:\"FD\",name:\"ThreeDImplantTemplateGroupMemberMatchingAxes\",vm:\"9\",version:\"DICOM\"},\"(0078,0070)\":{tag:\"(0078,0070)\",vr:\"SQ\",name:\"ImplantTemplateGroupMemberMatching2DCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(0078,0090)\":{tag:\"(0078,0090)\",vr:\"FD\",name:\"TwoDImplantTemplateGroupMemberMatchingPoint\",vm:\"2\",version:\"DICOM\"},\"(0078,00A0)\":{tag:\"(0078,00A0)\",vr:\"FD\",name:\"TwoDImplantTemplateGroupMemberMatchingAxes\",vm:\"4\",version:\"DICOM\"},\"(0078,00B0)\":{tag:\"(0078,00B0)\",vr:\"SQ\",name:\"ImplantTemplateGroupVariationDimensionSequence\",vm:\"1\",version:\"DICOM\"},\"(0078,00B2)\":{tag:\"(0078,00B2)\",vr:\"LO\",name:\"ImplantTemplateGroupVariationDimensionName\",vm:\"1\",version:\"DICOM\"},\"(0078,00B4)\":{tag:\"(0078,00B4)\",vr:\"SQ\",name:\"ImplantTemplateGroupVariationDimensionRankSequence\",vm:\"1\",version:\"DICOM\"},\"(0078,00B6)\":{tag:\"(0078,00B6)\",vr:\"US\",name:\"ReferencedImplantTemplateGroupMemberID\",vm:\"1\",version:\"DICOM\"},\"(0078,00B8)\":{tag:\"(0078,00B8)\",vr:\"US\",name:\"ImplantTemplateGroupVariationDimensionRank\",vm:\"1\",version:\"DICOM\"},\"(0080,0001)\":{tag:\"(0080,0001)\",vr:\"SQ\",name:\"SurfaceScanAcquisitionTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0080,0002)\":{tag:\"(0080,0002)\",vr:\"SQ\",name:\"SurfaceScanModeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0080,0003)\":{tag:\"(0080,0003)\",vr:\"SQ\",name:\"RegistrationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0080,0004)\":{tag:\"(0080,0004)\",vr:\"FD\",name:\"ShotDurationTime\",vm:\"1\",version:\"DICOM\"},\"(0080,0005)\":{tag:\"(0080,0005)\",vr:\"FD\",name:\"ShotOffsetTime\",vm:\"1\",version:\"DICOM\"},\"(0080,0006)\":{tag:\"(0080,0006)\",vr:\"US\",name:\"SurfacePointPresentationValueData\",vm:\"1-n\",version:\"DICOM\"},\"(0080,0007)\":{tag:\"(0080,0007)\",vr:\"US\",name:\"SurfacePointColorCIELabValueData\",vm:\"3-3n\",version:\"DICOM\"},\"(0080,0008)\":{tag:\"(0080,0008)\",vr:\"SQ\",name:\"UVMappingSequence\",vm:\"1\",version:\"DICOM\"},\"(0080,0009)\":{tag:\"(0080,0009)\",vr:\"SH\",name:\"TextureLabel\",vm:\"1\",version:\"DICOM\"},\"(0080,0010)\":{tag:\"(0080,0010)\",vr:\"OF\",name:\"UValueData\",vm:\"1-n\",version:\"DICOM\"},\"(0080,0011)\":{tag:\"(0080,0011)\",vr:\"OF\",name:\"VValueData\",vm:\"1-n\",version:\"DICOM\"},\"(0080,0012)\":{tag:\"(0080,0012)\",vr:\"SQ\",name:\"ReferencedTextureSequence\",vm:\"1\",version:\"DICOM\"},\"(0080,0013)\":{tag:\"(0080,0013)\",vr:\"SQ\",name:\"ReferencedSurfaceDataSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0001)\":{tag:\"(0082,0001)\",vr:\"CS\",name:\"AssessmentSummary\",vm:\"1\",version:\"DICOM\"},\"(0082,0003)\":{tag:\"(0082,0003)\",vr:\"UT\",name:\"AssessmentSummaryDescription\",vm:\"1\",version:\"DICOM\"},\"(0082,0004)\":{tag:\"(0082,0004)\",vr:\"SQ\",name:\"AssessedSOPInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0005)\":{tag:\"(0082,0005)\",vr:\"SQ\",name:\"ReferencedComparisonSOPInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0006)\":{tag:\"(0082,0006)\",vr:\"UL\",name:\"NumberOfAssessmentObservations\",vm:\"1\",version:\"DICOM\"},\"(0082,0007)\":{tag:\"(0082,0007)\",vr:\"SQ\",name:\"AssessmentObservationsSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0008)\":{tag:\"(0082,0008)\",vr:\"CS\",name:\"ObservationSignificance\",vm:\"1\",version:\"DICOM\"},\"(0082,000A)\":{tag:\"(0082,000A)\",vr:\"UT\",name:\"ObservationDescription\",vm:\"1\",version:\"DICOM\"},\"(0082,000C)\":{tag:\"(0082,000C)\",vr:\"SQ\",name:\"StructuredConstraintObservationSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0010)\":{tag:\"(0082,0010)\",vr:\"SQ\",name:\"AssessedAttributeValueSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0016)\":{tag:\"(0082,0016)\",vr:\"LO\",name:\"AssessmentSetID\",vm:\"1\",version:\"DICOM\"},\"(0082,0017)\":{tag:\"(0082,0017)\",vr:\"SQ\",name:\"AssessmentRequesterSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0018)\":{tag:\"(0082,0018)\",vr:\"LO\",name:\"SelectorAttributeName\",vm:\"1\",version:\"DICOM\"},\"(0082,0019)\":{tag:\"(0082,0019)\",vr:\"LO\",name:\"SelectorAttributeKeyword\",vm:\"1\",version:\"DICOM\"},\"(0082,0021)\":{tag:\"(0082,0021)\",vr:\"SQ\",name:\"AssessmentTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0022)\":{tag:\"(0082,0022)\",vr:\"SQ\",name:\"ObservationBasisCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0023)\":{tag:\"(0082,0023)\",vr:\"LO\",name:\"AssessmentLabel\",vm:\"1\",version:\"DICOM\"},\"(0082,0032)\":{tag:\"(0082,0032)\",vr:\"CS\",name:\"ConstraintType\",vm:\"1\",version:\"DICOM\"},\"(0082,0033)\":{tag:\"(0082,0033)\",vr:\"UT\",name:\"SpecificationSelectionGuidance\",vm:\"1\",version:\"DICOM\"},\"(0082,0034)\":{tag:\"(0082,0034)\",vr:\"SQ\",name:\"ConstraintValueSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0035)\":{tag:\"(0082,0035)\",vr:\"SQ\",name:\"RecommendedDefaultValueSequence\",vm:\"1\",version:\"DICOM\"},\"(0082,0036)\":{tag:\"(0082,0036)\",vr:\"CS\",name:\"ConstraintViolationSignificance\",vm:\"1\",version:\"DICOM\"},\"(0082,0037)\":{tag:\"(0082,0037)\",vr:\"UT\",name:\"ConstraintViolationCondition\",vm:\"1\",version:\"DICOM\"},\"(0082,0038)\":{tag:\"(0082,0038)\",vr:\"CS\",name:\"ModifiableConstraintFlag\",vm:\"1\",version:\"DICOM\"},\"(0088,0130)\":{tag:\"(0088,0130)\",vr:\"SH\",name:\"StorageMediaFileSetID\",vm:\"1\",version:\"DICOM\"},\"(0088,0140)\":{tag:\"(0088,0140)\",vr:\"UI\",name:\"StorageMediaFileSetUID\",vm:\"1\",version:\"DICOM\"},\"(0088,0200)\":{tag:\"(0088,0200)\",vr:\"SQ\",name:\"IconImageSequence\",vm:\"1\",version:\"DICOM\"},\"(0100,0410)\":{tag:\"(0100,0410)\",vr:\"CS\",name:\"SOPInstanceStatus\",vm:\"1\",version:\"DICOM\"},\"(0100,0420)\":{tag:\"(0100,0420)\",vr:\"DT\",name:\"SOPAuthorizationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0100,0424)\":{tag:\"(0100,0424)\",vr:\"LT\",name:\"SOPAuthorizationComment\",vm:\"1\",version:\"DICOM\"},\"(0100,0426)\":{tag:\"(0100,0426)\",vr:\"LO\",name:\"AuthorizationEquipmentCertificationNumber\",vm:\"1\",version:\"DICOM\"},\"(0400,0005)\":{tag:\"(0400,0005)\",vr:\"US\",name:\"MACIDNumber\",vm:\"1\",version:\"DICOM\"},\"(0400,0010)\":{tag:\"(0400,0010)\",vr:\"UI\",name:\"MACCalculationTransferSyntaxUID\",vm:\"1\",version:\"DICOM\"},\"(0400,0015)\":{tag:\"(0400,0015)\",vr:\"CS\",name:\"MACAlgorithm\",vm:\"1\",version:\"DICOM\"},\"(0400,0020)\":{tag:\"(0400,0020)\",vr:\"AT\",name:\"DataElementsSigned\",vm:\"1-n\",version:\"DICOM\"},\"(0400,0100)\":{tag:\"(0400,0100)\",vr:\"UI\",name:\"DigitalSignatureUID\",vm:\"1\",version:\"DICOM\"},\"(0400,0105)\":{tag:\"(0400,0105)\",vr:\"DT\",name:\"DigitalSignatureDateTime\",vm:\"1\",version:\"DICOM\"},\"(0400,0110)\":{tag:\"(0400,0110)\",vr:\"CS\",name:\"CertificateType\",vm:\"1\",version:\"DICOM\"},\"(0400,0115)\":{tag:\"(0400,0115)\",vr:\"OB\",name:\"CertificateOfSigner\",vm:\"1\",version:\"DICOM\"},\"(0400,0120)\":{tag:\"(0400,0120)\",vr:\"OB\",name:\"Signature\",vm:\"1\",version:\"DICOM\"},\"(0400,0305)\":{tag:\"(0400,0305)\",vr:\"CS\",name:\"CertifiedTimestampType\",vm:\"1\",version:\"DICOM\"},\"(0400,0310)\":{tag:\"(0400,0310)\",vr:\"OB\",name:\"CertifiedTimestamp\",vm:\"1\",version:\"DICOM\"},\"(0400,0401)\":{tag:\"(0400,0401)\",vr:\"SQ\",name:\"DigitalSignaturePurposeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0402)\":{tag:\"(0400,0402)\",vr:\"SQ\",name:\"ReferencedDigitalSignatureSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0403)\":{tag:\"(0400,0403)\",vr:\"SQ\",name:\"ReferencedSOPInstanceMACSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0404)\":{tag:\"(0400,0404)\",vr:\"OB\",name:\"MAC\",vm:\"1\",version:\"DICOM\"},\"(0400,0500)\":{tag:\"(0400,0500)\",vr:\"SQ\",name:\"EncryptedAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0510)\":{tag:\"(0400,0510)\",vr:\"UI\",name:\"EncryptedContentTransferSyntaxUID\",vm:\"1\",version:\"DICOM\"},\"(0400,0520)\":{tag:\"(0400,0520)\",vr:\"OB\",name:\"EncryptedContent\",vm:\"1\",version:\"DICOM\"},\"(0400,0550)\":{tag:\"(0400,0550)\",vr:\"SQ\",name:\"ModifiedAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0551)\":{tag:\"(0400,0551)\",vr:\"SQ\",name:\"NonconformingModifiedAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0552)\":{tag:\"(0400,0552)\",vr:\"OB\",name:\"NonconformingDataElementValue\",vm:\"1\",version:\"DICOM\"},\"(0400,0561)\":{tag:\"(0400,0561)\",vr:\"SQ\",name:\"OriginalAttributesSequence\",vm:\"1\",version:\"DICOM\"},\"(0400,0562)\":{tag:\"(0400,0562)\",vr:\"DT\",name:\"AttributeModificationDateTime\",vm:\"1\",version:\"DICOM\"},\"(0400,0563)\":{tag:\"(0400,0563)\",vr:\"LO\",name:\"ModifyingSystem\",vm:\"1\",version:\"DICOM\"},\"(0400,0564)\":{tag:\"(0400,0564)\",vr:\"LO\",name:\"SourceOfPreviousValues\",vm:\"1\",version:\"DICOM\"},\"(0400,0565)\":{tag:\"(0400,0565)\",vr:\"CS\",name:\"ReasonForTheAttributeModification\",vm:\"1\",version:\"DICOM\"},\"(0400,0600)\":{tag:\"(0400,0600)\",vr:\"CS\",name:\"InstanceOriginStatus\",vm:\"1\",version:\"DICOM\"},\"(2000,0010)\":{tag:\"(2000,0010)\",vr:\"IS\",name:\"NumberOfCopies\",vm:\"1\",version:\"DICOM\"},\"(2000,001E)\":{tag:\"(2000,001E)\",vr:\"SQ\",name:\"PrinterConfigurationSequence\",vm:\"1\",version:\"DICOM\"},\"(2000,0020)\":{tag:\"(2000,0020)\",vr:\"CS\",name:\"PrintPriority\",vm:\"1\",version:\"DICOM\"},\"(2000,0030)\":{tag:\"(2000,0030)\",vr:\"CS\",name:\"MediumType\",vm:\"1\",version:\"DICOM\"},\"(2000,0040)\":{tag:\"(2000,0040)\",vr:\"CS\",name:\"FilmDestination\",vm:\"1\",version:\"DICOM\"},\"(2000,0050)\":{tag:\"(2000,0050)\",vr:\"LO\",name:\"FilmSessionLabel\",vm:\"1\",version:\"DICOM\"},\"(2000,0060)\":{tag:\"(2000,0060)\",vr:\"IS\",name:\"MemoryAllocation\",vm:\"1\",version:\"DICOM\"},\"(2000,0061)\":{tag:\"(2000,0061)\",vr:\"IS\",name:\"MaximumMemoryAllocation\",vm:\"1\",version:\"DICOM\"},\"(2000,00A0)\":{tag:\"(2000,00A0)\",vr:\"US\",name:\"MemoryBitDepth\",vm:\"1\",version:\"DICOM\"},\"(2000,00A1)\":{tag:\"(2000,00A1)\",vr:\"US\",name:\"PrintingBitDepth\",vm:\"1\",version:\"DICOM\"},\"(2000,00A2)\":{tag:\"(2000,00A2)\",vr:\"SQ\",name:\"MediaInstalledSequence\",vm:\"1\",version:\"DICOM\"},\"(2000,00A4)\":{tag:\"(2000,00A4)\",vr:\"SQ\",name:\"OtherMediaAvailableSequence\",vm:\"1\",version:\"DICOM\"},\"(2000,00A8)\":{tag:\"(2000,00A8)\",vr:\"SQ\",name:\"SupportedImageDisplayFormatsSequence\",vm:\"1\",version:\"DICOM\"},\"(2000,0500)\":{tag:\"(2000,0500)\",vr:\"SQ\",name:\"ReferencedFilmBoxSequence\",vm:\"1\",version:\"DICOM\"},\"(2010,0010)\":{tag:\"(2010,0010)\",vr:\"ST\",name:\"ImageDisplayFormat\",vm:\"1\",version:\"DICOM\"},\"(2010,0030)\":{tag:\"(2010,0030)\",vr:\"CS\",name:\"AnnotationDisplayFormatID\",vm:\"1\",version:\"DICOM\"},\"(2010,0040)\":{tag:\"(2010,0040)\",vr:\"CS\",name:\"FilmOrientation\",vm:\"1\",version:\"DICOM\"},\"(2010,0050)\":{tag:\"(2010,0050)\",vr:\"CS\",name:\"FilmSizeID\",vm:\"1\",version:\"DICOM\"},\"(2010,0052)\":{tag:\"(2010,0052)\",vr:\"CS\",name:\"PrinterResolutionID\",vm:\"1\",version:\"DICOM\"},\"(2010,0054)\":{tag:\"(2010,0054)\",vr:\"CS\",name:\"DefaultPrinterResolutionID\",vm:\"1\",version:\"DICOM\"},\"(2010,0060)\":{tag:\"(2010,0060)\",vr:\"CS\",name:\"MagnificationType\",vm:\"1\",version:\"DICOM\"},\"(2010,0080)\":{tag:\"(2010,0080)\",vr:\"CS\",name:\"SmoothingType\",vm:\"1\",version:\"DICOM\"},\"(2010,00A6)\":{tag:\"(2010,00A6)\",vr:\"CS\",name:\"DefaultMagnificationType\",vm:\"1\",version:\"DICOM\"},\"(2010,00A7)\":{tag:\"(2010,00A7)\",vr:\"CS\",name:\"OtherMagnificationTypesAvailable\",vm:\"1-n\",version:\"DICOM\"},\"(2010,00A8)\":{tag:\"(2010,00A8)\",vr:\"CS\",name:\"DefaultSmoothingType\",vm:\"1\",version:\"DICOM\"},\"(2010,00A9)\":{tag:\"(2010,00A9)\",vr:\"CS\",name:\"OtherSmoothingTypesAvailable\",vm:\"1-n\",version:\"DICOM\"},\"(2010,0100)\":{tag:\"(2010,0100)\",vr:\"CS\",name:\"BorderDensity\",vm:\"1\",version:\"DICOM\"},\"(2010,0110)\":{tag:\"(2010,0110)\",vr:\"CS\",name:\"EmptyImageDensity\",vm:\"1\",version:\"DICOM\"},\"(2010,0120)\":{tag:\"(2010,0120)\",vr:\"US\",name:\"MinDensity\",vm:\"1\",version:\"DICOM\"},\"(2010,0130)\":{tag:\"(2010,0130)\",vr:\"US\",name:\"MaxDensity\",vm:\"1\",version:\"DICOM\"},\"(2010,0140)\":{tag:\"(2010,0140)\",vr:\"CS\",name:\"Trim\",vm:\"1\",version:\"DICOM\"},\"(2010,0150)\":{tag:\"(2010,0150)\",vr:\"ST\",name:\"ConfigurationInformation\",vm:\"1\",version:\"DICOM\"},\"(2010,0152)\":{tag:\"(2010,0152)\",vr:\"LT\",name:\"ConfigurationInformationDescription\",vm:\"1\",version:\"DICOM\"},\"(2010,0154)\":{tag:\"(2010,0154)\",vr:\"IS\",name:\"MaximumCollatedFilms\",vm:\"1\",version:\"DICOM\"},\"(2010,015E)\":{tag:\"(2010,015E)\",vr:\"US\",name:\"Illumination\",vm:\"1\",version:\"DICOM\"},\"(2010,0160)\":{tag:\"(2010,0160)\",vr:\"US\",name:\"ReflectedAmbientLight\",vm:\"1\",version:\"DICOM\"},\"(2010,0376)\":{tag:\"(2010,0376)\",vr:\"DS\",name:\"PrinterPixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(2010,0500)\":{tag:\"(2010,0500)\",vr:\"SQ\",name:\"ReferencedFilmSessionSequence\",vm:\"1\",version:\"DICOM\"},\"(2010,0510)\":{tag:\"(2010,0510)\",vr:\"SQ\",name:\"ReferencedImageBoxSequence\",vm:\"1\",version:\"DICOM\"},\"(2010,0520)\":{tag:\"(2010,0520)\",vr:\"SQ\",name:\"ReferencedBasicAnnotationBoxSequence\",vm:\"1\",version:\"DICOM\"},\"(2020,0010)\":{tag:\"(2020,0010)\",vr:\"US\",name:\"ImageBoxPosition\",vm:\"1\",version:\"DICOM\"},\"(2020,0020)\":{tag:\"(2020,0020)\",vr:\"CS\",name:\"Polarity\",vm:\"1\",version:\"DICOM\"},\"(2020,0030)\":{tag:\"(2020,0030)\",vr:\"DS\",name:\"RequestedImageSize\",vm:\"1\",version:\"DICOM\"},\"(2020,0040)\":{tag:\"(2020,0040)\",vr:\"CS\",name:\"RequestedDecimateCropBehavior\",vm:\"1\",version:\"DICOM\"},\"(2020,0050)\":{tag:\"(2020,0050)\",vr:\"CS\",name:\"RequestedResolutionID\",vm:\"1\",version:\"DICOM\"},\"(2020,00A0)\":{tag:\"(2020,00A0)\",vr:\"CS\",name:\"RequestedImageSizeFlag\",vm:\"1\",version:\"DICOM\"},\"(2020,00A2)\":{tag:\"(2020,00A2)\",vr:\"CS\",name:\"DecimateCropResult\",vm:\"1\",version:\"DICOM\"},\"(2020,0110)\":{tag:\"(2020,0110)\",vr:\"SQ\",name:\"BasicGrayscaleImageSequence\",vm:\"1\",version:\"DICOM\"},\"(2020,0111)\":{tag:\"(2020,0111)\",vr:\"SQ\",name:\"BasicColorImageSequence\",vm:\"1\",version:\"DICOM\"},\"(2030,0010)\":{tag:\"(2030,0010)\",vr:\"US\",name:\"AnnotationPosition\",vm:\"1\",version:\"DICOM\"},\"(2030,0020)\":{tag:\"(2030,0020)\",vr:\"LO\",name:\"TextString\",vm:\"1\",version:\"DICOM\"},\"(2050,0010)\":{tag:\"(2050,0010)\",vr:\"SQ\",name:\"PresentationLUTSequence\",vm:\"1\",version:\"DICOM\"},\"(2050,0020)\":{tag:\"(2050,0020)\",vr:\"CS\",name:\"PresentationLUTShape\",vm:\"1\",version:\"DICOM\"},\"(2050,0500)\":{tag:\"(2050,0500)\",vr:\"SQ\",name:\"ReferencedPresentationLUTSequence\",vm:\"1\",version:\"DICOM\"},\"(2100,0020)\":{tag:\"(2100,0020)\",vr:\"CS\",name:\"ExecutionStatus\",vm:\"1\",version:\"DICOM\"},\"(2100,0030)\":{tag:\"(2100,0030)\",vr:\"CS\",name:\"ExecutionStatusInfo\",vm:\"1\",version:\"DICOM\"},\"(2100,0040)\":{tag:\"(2100,0040)\",vr:\"DA\",name:\"CreationDate\",vm:\"1\",version:\"DICOM\"},\"(2100,0050)\":{tag:\"(2100,0050)\",vr:\"TM\",name:\"CreationTime\",vm:\"1\",version:\"DICOM\"},\"(2100,0070)\":{tag:\"(2100,0070)\",vr:\"AE\",name:\"Originator\",vm:\"1\",version:\"DICOM\"},\"(2100,0160)\":{tag:\"(2100,0160)\",vr:\"SH\",name:\"OwnerID\",vm:\"1\",version:\"DICOM\"},\"(2100,0170)\":{tag:\"(2100,0170)\",vr:\"IS\",name:\"NumberOfFilms\",vm:\"1\",version:\"DICOM\"},\"(2110,0010)\":{tag:\"(2110,0010)\",vr:\"CS\",name:\"PrinterStatus\",vm:\"1\",version:\"DICOM\"},\"(2110,0020)\":{tag:\"(2110,0020)\",vr:\"CS\",name:\"PrinterStatusInfo\",vm:\"1\",version:\"DICOM\"},\"(2110,0030)\":{tag:\"(2110,0030)\",vr:\"LO\",name:\"PrinterName\",vm:\"1\",version:\"DICOM\"},\"(2200,0001)\":{tag:\"(2200,0001)\",vr:\"CS\",name:\"LabelUsingInformationExtractedFromInstances\",vm:\"1\",version:\"DICOM\"},\"(2200,0002)\":{tag:\"(2200,0002)\",vr:\"UT\",name:\"LabelText\",vm:\"1\",version:\"DICOM\"},\"(2200,0003)\":{tag:\"(2200,0003)\",vr:\"CS\",name:\"LabelStyleSelection\",vm:\"1\",version:\"DICOM\"},\"(2200,0004)\":{tag:\"(2200,0004)\",vr:\"LT\",name:\"MediaDisposition\",vm:\"1\",version:\"DICOM\"},\"(2200,0005)\":{tag:\"(2200,0005)\",vr:\"LT\",name:\"BarcodeValue\",vm:\"1\",version:\"DICOM\"},\"(2200,0006)\":{tag:\"(2200,0006)\",vr:\"CS\",name:\"BarcodeSymbology\",vm:\"1\",version:\"DICOM\"},\"(2200,0007)\":{tag:\"(2200,0007)\",vr:\"CS\",name:\"AllowMediaSplitting\",vm:\"1\",version:\"DICOM\"},\"(2200,0008)\":{tag:\"(2200,0008)\",vr:\"CS\",name:\"IncludeNonDICOMObjects\",vm:\"1\",version:\"DICOM\"},\"(2200,0009)\":{tag:\"(2200,0009)\",vr:\"CS\",name:\"IncludeDisplayApplication\",vm:\"1\",version:\"DICOM\"},\"(2200,000A)\":{tag:\"(2200,000A)\",vr:\"CS\",name:\"PreserveCompositeInstancesAfterMediaCreation\",vm:\"1\",version:\"DICOM\"},\"(2200,000B)\":{tag:\"(2200,000B)\",vr:\"US\",name:\"TotalNumberOfPiecesOfMediaCreated\",vm:\"1\",version:\"DICOM\"},\"(2200,000C)\":{tag:\"(2200,000C)\",vr:\"LO\",name:\"RequestedMediaApplicationProfile\",vm:\"1\",version:\"DICOM\"},\"(2200,000D)\":{tag:\"(2200,000D)\",vr:\"SQ\",name:\"ReferencedStorageMediaSequence\",vm:\"1\",version:\"DICOM\"},\"(2200,000E)\":{tag:\"(2200,000E)\",vr:\"AT\",name:\"FailureAttributes\",vm:\"1-n\",version:\"DICOM\"},\"(2200,000F)\":{tag:\"(2200,000F)\",vr:\"CS\",name:\"AllowLossyCompression\",vm:\"1\",version:\"DICOM\"},\"(2200,0020)\":{tag:\"(2200,0020)\",vr:\"CS\",name:\"RequestPriority\",vm:\"1\",version:\"DICOM\"},\"(3002,0002)\":{tag:\"(3002,0002)\",vr:\"SH\",name:\"RTImageLabel\",vm:\"1\",version:\"DICOM\"},\"(3002,0003)\":{tag:\"(3002,0003)\",vr:\"LO\",name:\"RTImageName\",vm:\"1\",version:\"DICOM\"},\"(3002,0004)\":{tag:\"(3002,0004)\",vr:\"ST\",name:\"RTImageDescription\",vm:\"1\",version:\"DICOM\"},\"(3002,000A)\":{tag:\"(3002,000A)\",vr:\"CS\",name:\"ReportedValuesOrigin\",vm:\"1\",version:\"DICOM\"},\"(3002,000C)\":{tag:\"(3002,000C)\",vr:\"CS\",name:\"RTImagePlane\",vm:\"1\",version:\"DICOM\"},\"(3002,000D)\":{tag:\"(3002,000D)\",vr:\"DS\",name:\"XRayImageReceptorTranslation\",vm:\"3\",version:\"DICOM\"},\"(3002,000E)\":{tag:\"(3002,000E)\",vr:\"DS\",name:\"XRayImageReceptorAngle\",vm:\"1\",version:\"DICOM\"},\"(3002,0010)\":{tag:\"(3002,0010)\",vr:\"DS\",name:\"RTImageOrientation\",vm:\"6\",version:\"DICOM\"},\"(3002,0011)\":{tag:\"(3002,0011)\",vr:\"DS\",name:\"ImagePlanePixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(3002,0012)\":{tag:\"(3002,0012)\",vr:\"DS\",name:\"RTImagePosition\",vm:\"2\",version:\"DICOM\"},\"(3002,0020)\":{tag:\"(3002,0020)\",vr:\"SH\",name:\"RadiationMachineName\",vm:\"1\",version:\"DICOM\"},\"(3002,0022)\":{tag:\"(3002,0022)\",vr:\"DS\",name:\"RadiationMachineSAD\",vm:\"1\",version:\"DICOM\"},\"(3002,0024)\":{tag:\"(3002,0024)\",vr:\"DS\",name:\"RadiationMachineSSD\",vm:\"1\",version:\"DICOM\"},\"(3002,0026)\":{tag:\"(3002,0026)\",vr:\"DS\",name:\"RTImageSID\",vm:\"1\",version:\"DICOM\"},\"(3002,0028)\":{tag:\"(3002,0028)\",vr:\"DS\",name:\"SourceToReferenceObjectDistance\",vm:\"1\",version:\"DICOM\"},\"(3002,0029)\":{tag:\"(3002,0029)\",vr:\"IS\",name:\"FractionNumber\",vm:\"1\",version:\"DICOM\"},\"(3002,0030)\":{tag:\"(3002,0030)\",vr:\"SQ\",name:\"ExposureSequence\",vm:\"1\",version:\"DICOM\"},\"(3002,0032)\":{tag:\"(3002,0032)\",vr:\"DS\",name:\"MetersetExposure\",vm:\"1\",version:\"DICOM\"},\"(3002,0034)\":{tag:\"(3002,0034)\",vr:\"DS\",name:\"DiaphragmPosition\",vm:\"4\",version:\"DICOM\"},\"(3002,0040)\":{tag:\"(3002,0040)\",vr:\"SQ\",name:\"FluenceMapSequence\",vm:\"1\",version:\"DICOM\"},\"(3002,0041)\":{tag:\"(3002,0041)\",vr:\"CS\",name:\"FluenceDataSource\",vm:\"1\",version:\"DICOM\"},\"(3002,0042)\":{tag:\"(3002,0042)\",vr:\"DS\",name:\"FluenceDataScale\",vm:\"1\",version:\"DICOM\"},\"(3002,0050)\":{tag:\"(3002,0050)\",vr:\"SQ\",name:\"PrimaryFluenceModeSequence\",vm:\"1\",version:\"DICOM\"},\"(3002,0051)\":{tag:\"(3002,0051)\",vr:\"CS\",name:\"FluenceMode\",vm:\"1\",version:\"DICOM\"},\"(3002,0052)\":{tag:\"(3002,0052)\",vr:\"SH\",name:\"FluenceModeID\",vm:\"1\",version:\"DICOM\"},\"(3004,0001)\":{tag:\"(3004,0001)\",vr:\"CS\",name:\"DVHType\",vm:\"1\",version:\"DICOM\"},\"(3004,0002)\":{tag:\"(3004,0002)\",vr:\"CS\",name:\"DoseUnits\",vm:\"1\",version:\"DICOM\"},\"(3004,0004)\":{tag:\"(3004,0004)\",vr:\"CS\",name:\"DoseType\",vm:\"1\",version:\"DICOM\"},\"(3004,0005)\":{tag:\"(3004,0005)\",vr:\"CS\",name:\"SpatialTransformOfDose\",vm:\"1\",version:\"DICOM\"},\"(3004,0006)\":{tag:\"(3004,0006)\",vr:\"LO\",name:\"DoseComment\",vm:\"1\",version:\"DICOM\"},\"(3004,0008)\":{tag:\"(3004,0008)\",vr:\"DS\",name:\"NormalizationPoint\",vm:\"3\",version:\"DICOM\"},\"(3004,000A)\":{tag:\"(3004,000A)\",vr:\"CS\",name:\"DoseSummationType\",vm:\"1\",version:\"DICOM\"},\"(3004,000C)\":{tag:\"(3004,000C)\",vr:\"DS\",name:\"GridFrameOffsetVector\",vm:\"2-n\",version:\"DICOM\"},\"(3004,000E)\":{tag:\"(3004,000E)\",vr:\"DS\",name:\"DoseGridScaling\",vm:\"1\",version:\"DICOM\"},\"(3004,0010)\":{tag:\"(3004,0010)\",vr:\"SQ\",name:\"RTDoseROISequence\",vm:\"1\",version:\"DICOM\"},\"(3004,0012)\":{tag:\"(3004,0012)\",vr:\"DS\",name:\"DoseValue\",vm:\"1\",version:\"DICOM\"},\"(3004,0014)\":{tag:\"(3004,0014)\",vr:\"CS\",name:\"TissueHeterogeneityCorrection\",vm:\"1-3\",version:\"DICOM\"},\"(3004,0040)\":{tag:\"(3004,0040)\",vr:\"DS\",name:\"DVHNormalizationPoint\",vm:\"3\",version:\"DICOM\"},\"(3004,0042)\":{tag:\"(3004,0042)\",vr:\"DS\",name:\"DVHNormalizationDoseValue\",vm:\"1\",version:\"DICOM\"},\"(3004,0050)\":{tag:\"(3004,0050)\",vr:\"SQ\",name:\"DVHSequence\",vm:\"1\",version:\"DICOM\"},\"(3004,0052)\":{tag:\"(3004,0052)\",vr:\"DS\",name:\"DVHDoseScaling\",vm:\"1\",version:\"DICOM\"},\"(3004,0054)\":{tag:\"(3004,0054)\",vr:\"CS\",name:\"DVHVolumeUnits\",vm:\"1\",version:\"DICOM\"},\"(3004,0056)\":{tag:\"(3004,0056)\",vr:\"IS\",name:\"DVHNumberOfBins\",vm:\"1\",version:\"DICOM\"},\"(3004,0058)\":{tag:\"(3004,0058)\",vr:\"DS\",name:\"DVHData\",vm:\"2-2n\",version:\"DICOM\"},\"(3004,0060)\":{tag:\"(3004,0060)\",vr:\"SQ\",name:\"DVHReferencedROISequence\",vm:\"1\",version:\"DICOM\"},\"(3004,0062)\":{tag:\"(3004,0062)\",vr:\"CS\",name:\"DVHROIContributionType\",vm:\"1\",version:\"DICOM\"},\"(3004,0070)\":{tag:\"(3004,0070)\",vr:\"DS\",name:\"DVHMinimumDose\",vm:\"1\",version:\"DICOM\"},\"(3004,0072)\":{tag:\"(3004,0072)\",vr:\"DS\",name:\"DVHMaximumDose\",vm:\"1\",version:\"DICOM\"},\"(3004,0074)\":{tag:\"(3004,0074)\",vr:\"DS\",name:\"DVHMeanDose\",vm:\"1\",version:\"DICOM\"},\"(3006,0002)\":{tag:\"(3006,0002)\",vr:\"SH\",name:\"StructureSetLabel\",vm:\"1\",version:\"DICOM\"},\"(3006,0004)\":{tag:\"(3006,0004)\",vr:\"LO\",name:\"StructureSetName\",vm:\"1\",version:\"DICOM\"},\"(3006,0006)\":{tag:\"(3006,0006)\",vr:\"ST\",name:\"StructureSetDescription\",vm:\"1\",version:\"DICOM\"},\"(3006,0008)\":{tag:\"(3006,0008)\",vr:\"DA\",name:\"StructureSetDate\",vm:\"1\",version:\"DICOM\"},\"(3006,0009)\":{tag:\"(3006,0009)\",vr:\"TM\",name:\"StructureSetTime\",vm:\"1\",version:\"DICOM\"},\"(3006,0010)\":{tag:\"(3006,0010)\",vr:\"SQ\",name:\"ReferencedFrameOfReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0012)\":{tag:\"(3006,0012)\",vr:\"SQ\",name:\"RTReferencedStudySequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0014)\":{tag:\"(3006,0014)\",vr:\"SQ\",name:\"RTReferencedSeriesSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0016)\":{tag:\"(3006,0016)\",vr:\"SQ\",name:\"ContourImageSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0018)\":{tag:\"(3006,0018)\",vr:\"SQ\",name:\"PredecessorStructureSetSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0020)\":{tag:\"(3006,0020)\",vr:\"SQ\",name:\"StructureSetROISequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0022)\":{tag:\"(3006,0022)\",vr:\"IS\",name:\"ROINumber\",vm:\"1\",version:\"DICOM\"},\"(3006,0024)\":{tag:\"(3006,0024)\",vr:\"UI\",name:\"ReferencedFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(3006,0026)\":{tag:\"(3006,0026)\",vr:\"LO\",name:\"ROIName\",vm:\"1\",version:\"DICOM\"},\"(3006,0028)\":{tag:\"(3006,0028)\",vr:\"ST\",name:\"ROIDescription\",vm:\"1\",version:\"DICOM\"},\"(3006,002A)\":{tag:\"(3006,002A)\",vr:\"IS\",name:\"ROIDisplayColor\",vm:\"3\",version:\"DICOM\"},\"(3006,002C)\":{tag:\"(3006,002C)\",vr:\"DS\",name:\"ROIVolume\",vm:\"1\",version:\"DICOM\"},\"(3006,0030)\":{tag:\"(3006,0030)\",vr:\"SQ\",name:\"RTRelatedROISequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0033)\":{tag:\"(3006,0033)\",vr:\"CS\",name:\"RTROIRelationship\",vm:\"1\",version:\"DICOM\"},\"(3006,0036)\":{tag:\"(3006,0036)\",vr:\"CS\",name:\"ROIGenerationAlgorithm\",vm:\"1\",version:\"DICOM\"},\"(3006,0037)\":{tag:\"(3006,0037)\",vr:\"SQ\",name:\"ROIDerivationAlgorithmIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0038)\":{tag:\"(3006,0038)\",vr:\"LO\",name:\"ROIGenerationDescription\",vm:\"1\",version:\"DICOM\"},\"(3006,0039)\":{tag:\"(3006,0039)\",vr:\"SQ\",name:\"ROIContourSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0040)\":{tag:\"(3006,0040)\",vr:\"SQ\",name:\"ContourSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0042)\":{tag:\"(3006,0042)\",vr:\"CS\",name:\"ContourGeometricType\",vm:\"1\",version:\"DICOM\"},\"(3006,0044)\":{tag:\"(3006,0044)\",vr:\"DS\",name:\"ContourSlabThickness\",vm:\"1\",version:\"DICOM\"},\"(3006,0045)\":{tag:\"(3006,0045)\",vr:\"DS\",name:\"ContourOffsetVector\",vm:\"3\",version:\"DICOM\"},\"(3006,0046)\":{tag:\"(3006,0046)\",vr:\"IS\",name:\"NumberOfContourPoints\",vm:\"1\",version:\"DICOM\"},\"(3006,0048)\":{tag:\"(3006,0048)\",vr:\"IS\",name:\"ContourNumber\",vm:\"1\",version:\"DICOM\"},\"(3006,0049)\":{tag:\"(3006,0049)\",vr:\"IS\",name:\"AttachedContours\",vm:\"1-n\",version:\"DICOM\"},\"(3006,004A)\":{tag:\"(3006,004A)\",vr:\"SQ\",name:\"SourcePixelPlanesCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0050)\":{tag:\"(3006,0050)\",vr:\"DS\",name:\"ContourData\",vm:\"3-3n\",version:\"DICOM\"},\"(3006,0080)\":{tag:\"(3006,0080)\",vr:\"SQ\",name:\"RTROIObservationsSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0082)\":{tag:\"(3006,0082)\",vr:\"IS\",name:\"ObservationNumber\",vm:\"1\",version:\"DICOM\"},\"(3006,0084)\":{tag:\"(3006,0084)\",vr:\"IS\",name:\"ReferencedROINumber\",vm:\"1\",version:\"DICOM\"},\"(3006,0085)\":{tag:\"(3006,0085)\",vr:\"SH\",name:\"ROIObservationLabel\",vm:\"1\",version:\"DICOM\"},\"(3006,0086)\":{tag:\"(3006,0086)\",vr:\"SQ\",name:\"RTROIIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,0088)\":{tag:\"(3006,0088)\",vr:\"ST\",name:\"ROIObservationDescription\",vm:\"1\",version:\"DICOM\"},\"(3006,00A0)\":{tag:\"(3006,00A0)\",vr:\"SQ\",name:\"RelatedRTROIObservationsSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,00A4)\":{tag:\"(3006,00A4)\",vr:\"CS\",name:\"RTROIInterpretedType\",vm:\"1\",version:\"DICOM\"},\"(3006,00A6)\":{tag:\"(3006,00A6)\",vr:\"PN\",name:\"ROIInterpreter\",vm:\"1\",version:\"DICOM\"},\"(3006,00B0)\":{tag:\"(3006,00B0)\",vr:\"SQ\",name:\"ROIPhysicalPropertiesSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,00B2)\":{tag:\"(3006,00B2)\",vr:\"CS\",name:\"ROIPhysicalProperty\",vm:\"1\",version:\"DICOM\"},\"(3006,00B4)\":{tag:\"(3006,00B4)\",vr:\"DS\",name:\"ROIPhysicalPropertyValue\",vm:\"1\",version:\"DICOM\"},\"(3006,00B6)\":{tag:\"(3006,00B6)\",vr:\"SQ\",name:\"ROIElementalCompositionSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,00B7)\":{tag:\"(3006,00B7)\",vr:\"US\",name:\"ROIElementalCompositionAtomicNumber\",vm:\"1\",version:\"DICOM\"},\"(3006,00B8)\":{tag:\"(3006,00B8)\",vr:\"FL\",name:\"ROIElementalCompositionAtomicMassFraction\",vm:\"1\",version:\"DICOM\"},\"(3006,00B9)\":{tag:\"(3006,00B9)\",vr:\"SQ\",name:\"AdditionalRTROIIdentificationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,00C6)\":{tag:\"(3006,00C6)\",vr:\"DS\",name:\"FrameOfReferenceTransformationMatrix\",vm:\"16\",version:\"DICOM\"},\"(3006,00C8)\":{tag:\"(3006,00C8)\",vr:\"LO\",name:\"FrameOfReferenceTransformationComment\",vm:\"1\",version:\"DICOM\"},\"(3006,00C9)\":{tag:\"(3006,00C9)\",vr:\"SQ\",name:\"PatientLocationCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,00CA)\":{tag:\"(3006,00CA)\",vr:\"SQ\",name:\"PatientLocationCoordinatesCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3006,00CB)\":{tag:\"(3006,00CB)\",vr:\"SQ\",name:\"PatientSupportPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0010)\":{tag:\"(3008,0010)\",vr:\"SQ\",name:\"MeasuredDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0012)\":{tag:\"(3008,0012)\",vr:\"ST\",name:\"MeasuredDoseDescription\",vm:\"1\",version:\"DICOM\"},\"(3008,0014)\":{tag:\"(3008,0014)\",vr:\"CS\",name:\"MeasuredDoseType\",vm:\"1\",version:\"DICOM\"},\"(3008,0016)\":{tag:\"(3008,0016)\",vr:\"DS\",name:\"MeasuredDoseValue\",vm:\"1\",version:\"DICOM\"},\"(3008,0020)\":{tag:\"(3008,0020)\",vr:\"SQ\",name:\"TreatmentSessionBeamSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0021)\":{tag:\"(3008,0021)\",vr:\"SQ\",name:\"TreatmentSessionIonBeamSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0022)\":{tag:\"(3008,0022)\",vr:\"IS\",name:\"CurrentFractionNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0024)\":{tag:\"(3008,0024)\",vr:\"DA\",name:\"TreatmentControlPointDate\",vm:\"1\",version:\"DICOM\"},\"(3008,0025)\":{tag:\"(3008,0025)\",vr:\"TM\",name:\"TreatmentControlPointTime\",vm:\"1\",version:\"DICOM\"},\"(3008,002A)\":{tag:\"(3008,002A)\",vr:\"CS\",name:\"TreatmentTerminationStatus\",vm:\"1\",version:\"DICOM\"},\"(3008,002B)\":{tag:\"(3008,002B)\",vr:\"SH\",name:\"TreatmentTerminationCode\",vm:\"1\",version:\"DICOM\"},\"(3008,002C)\":{tag:\"(3008,002C)\",vr:\"CS\",name:\"TreatmentVerificationStatus\",vm:\"1\",version:\"DICOM\"},\"(3008,0030)\":{tag:\"(3008,0030)\",vr:\"SQ\",name:\"ReferencedTreatmentRecordSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0032)\":{tag:\"(3008,0032)\",vr:\"DS\",name:\"SpecifiedPrimaryMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,0033)\":{tag:\"(3008,0033)\",vr:\"DS\",name:\"SpecifiedSecondaryMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,0036)\":{tag:\"(3008,0036)\",vr:\"DS\",name:\"DeliveredPrimaryMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,0037)\":{tag:\"(3008,0037)\",vr:\"DS\",name:\"DeliveredSecondaryMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,003A)\":{tag:\"(3008,003A)\",vr:\"DS\",name:\"SpecifiedTreatmentTime\",vm:\"1\",version:\"DICOM\"},\"(3008,003B)\":{tag:\"(3008,003B)\",vr:\"DS\",name:\"DeliveredTreatmentTime\",vm:\"1\",version:\"DICOM\"},\"(3008,0040)\":{tag:\"(3008,0040)\",vr:\"SQ\",name:\"ControlPointDeliverySequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0041)\":{tag:\"(3008,0041)\",vr:\"SQ\",name:\"IonControlPointDeliverySequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0042)\":{tag:\"(3008,0042)\",vr:\"DS\",name:\"SpecifiedMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,0044)\":{tag:\"(3008,0044)\",vr:\"DS\",name:\"DeliveredMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,0045)\":{tag:\"(3008,0045)\",vr:\"FL\",name:\"MetersetRateSet\",vm:\"1\",version:\"DICOM\"},\"(3008,0046)\":{tag:\"(3008,0046)\",vr:\"FL\",name:\"MetersetRateDelivered\",vm:\"1\",version:\"DICOM\"},\"(3008,0047)\":{tag:\"(3008,0047)\",vr:\"FL\",name:\"ScanSpotMetersetsDelivered\",vm:\"1-n\",version:\"DICOM\"},\"(3008,0048)\":{tag:\"(3008,0048)\",vr:\"DS\",name:\"DoseRateDelivered\",vm:\"1\",version:\"DICOM\"},\"(3008,0050)\":{tag:\"(3008,0050)\",vr:\"SQ\",name:\"TreatmentSummaryCalculatedDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0052)\":{tag:\"(3008,0052)\",vr:\"DS\",name:\"CumulativeDoseToDoseReference\",vm:\"1\",version:\"DICOM\"},\"(3008,0054)\":{tag:\"(3008,0054)\",vr:\"DA\",name:\"FirstTreatmentDate\",vm:\"1\",version:\"DICOM\"},\"(3008,0056)\":{tag:\"(3008,0056)\",vr:\"DA\",name:\"MostRecentTreatmentDate\",vm:\"1\",version:\"DICOM\"},\"(3008,005A)\":{tag:\"(3008,005A)\",vr:\"IS\",name:\"NumberOfFractionsDelivered\",vm:\"1\",version:\"DICOM\"},\"(3008,0060)\":{tag:\"(3008,0060)\",vr:\"SQ\",name:\"OverrideSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0061)\":{tag:\"(3008,0061)\",vr:\"AT\",name:\"ParameterSequencePointer\",vm:\"1\",version:\"DICOM\"},\"(3008,0062)\":{tag:\"(3008,0062)\",vr:\"AT\",name:\"OverrideParameterPointer\",vm:\"1\",version:\"DICOM\"},\"(3008,0063)\":{tag:\"(3008,0063)\",vr:\"IS\",name:\"ParameterItemIndex\",vm:\"1\",version:\"DICOM\"},\"(3008,0064)\":{tag:\"(3008,0064)\",vr:\"IS\",name:\"MeasuredDoseReferenceNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0065)\":{tag:\"(3008,0065)\",vr:\"AT\",name:\"ParameterPointer\",vm:\"1\",version:\"DICOM\"},\"(3008,0066)\":{tag:\"(3008,0066)\",vr:\"ST\",name:\"OverrideReason\",vm:\"1\",version:\"DICOM\"},\"(3008,0067)\":{tag:\"(3008,0067)\",vr:\"US\",name:\"ParameterValueNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0068)\":{tag:\"(3008,0068)\",vr:\"SQ\",name:\"CorrectedParameterSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,006A)\":{tag:\"(3008,006A)\",vr:\"FL\",name:\"CorrectionValue\",vm:\"1\",version:\"DICOM\"},\"(3008,0070)\":{tag:\"(3008,0070)\",vr:\"SQ\",name:\"CalculatedDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0072)\":{tag:\"(3008,0072)\",vr:\"IS\",name:\"CalculatedDoseReferenceNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0074)\":{tag:\"(3008,0074)\",vr:\"ST\",name:\"CalculatedDoseReferenceDescription\",vm:\"1\",version:\"DICOM\"},\"(3008,0076)\":{tag:\"(3008,0076)\",vr:\"DS\",name:\"CalculatedDoseReferenceDoseValue\",vm:\"1\",version:\"DICOM\"},\"(3008,0078)\":{tag:\"(3008,0078)\",vr:\"DS\",name:\"StartMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,007A)\":{tag:\"(3008,007A)\",vr:\"DS\",name:\"EndMeterset\",vm:\"1\",version:\"DICOM\"},\"(3008,0080)\":{tag:\"(3008,0080)\",vr:\"SQ\",name:\"ReferencedMeasuredDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0082)\":{tag:\"(3008,0082)\",vr:\"IS\",name:\"ReferencedMeasuredDoseReferenceNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0090)\":{tag:\"(3008,0090)\",vr:\"SQ\",name:\"ReferencedCalculatedDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0092)\":{tag:\"(3008,0092)\",vr:\"IS\",name:\"ReferencedCalculatedDoseReferenceNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,00A0)\":{tag:\"(3008,00A0)\",vr:\"SQ\",name:\"BeamLimitingDeviceLeafPairsSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00B0)\":{tag:\"(3008,00B0)\",vr:\"SQ\",name:\"RecordedWedgeSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00C0)\":{tag:\"(3008,00C0)\",vr:\"SQ\",name:\"RecordedCompensatorSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00D0)\":{tag:\"(3008,00D0)\",vr:\"SQ\",name:\"RecordedBlockSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00E0)\":{tag:\"(3008,00E0)\",vr:\"SQ\",name:\"TreatmentSummaryMeasuredDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00F0)\":{tag:\"(3008,00F0)\",vr:\"SQ\",name:\"RecordedSnoutSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00F2)\":{tag:\"(3008,00F2)\",vr:\"SQ\",name:\"RecordedRangeShifterSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00F4)\":{tag:\"(3008,00F4)\",vr:\"SQ\",name:\"RecordedLateralSpreadingDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,00F6)\":{tag:\"(3008,00F6)\",vr:\"SQ\",name:\"RecordedRangeModulatorSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0100)\":{tag:\"(3008,0100)\",vr:\"SQ\",name:\"RecordedSourceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0105)\":{tag:\"(3008,0105)\",vr:\"LO\",name:\"SourceSerialNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0110)\":{tag:\"(3008,0110)\",vr:\"SQ\",name:\"TreatmentSessionApplicationSetupSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0116)\":{tag:\"(3008,0116)\",vr:\"CS\",name:\"ApplicationSetupCheck\",vm:\"1\",version:\"DICOM\"},\"(3008,0120)\":{tag:\"(3008,0120)\",vr:\"SQ\",name:\"RecordedBrachyAccessoryDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0122)\":{tag:\"(3008,0122)\",vr:\"IS\",name:\"ReferencedBrachyAccessoryDeviceNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0130)\":{tag:\"(3008,0130)\",vr:\"SQ\",name:\"RecordedChannelSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0132)\":{tag:\"(3008,0132)\",vr:\"DS\",name:\"SpecifiedChannelTotalTime\",vm:\"1\",version:\"DICOM\"},\"(3008,0134)\":{tag:\"(3008,0134)\",vr:\"DS\",name:\"DeliveredChannelTotalTime\",vm:\"1\",version:\"DICOM\"},\"(3008,0136)\":{tag:\"(3008,0136)\",vr:\"IS\",name:\"SpecifiedNumberOfPulses\",vm:\"1\",version:\"DICOM\"},\"(3008,0138)\":{tag:\"(3008,0138)\",vr:\"IS\",name:\"DeliveredNumberOfPulses\",vm:\"1\",version:\"DICOM\"},\"(3008,013A)\":{tag:\"(3008,013A)\",vr:\"DS\",name:\"SpecifiedPulseRepetitionInterval\",vm:\"1\",version:\"DICOM\"},\"(3008,013C)\":{tag:\"(3008,013C)\",vr:\"DS\",name:\"DeliveredPulseRepetitionInterval\",vm:\"1\",version:\"DICOM\"},\"(3008,0140)\":{tag:\"(3008,0140)\",vr:\"SQ\",name:\"RecordedSourceApplicatorSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0142)\":{tag:\"(3008,0142)\",vr:\"IS\",name:\"ReferencedSourceApplicatorNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0150)\":{tag:\"(3008,0150)\",vr:\"SQ\",name:\"RecordedChannelShieldSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0152)\":{tag:\"(3008,0152)\",vr:\"IS\",name:\"ReferencedChannelShieldNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0160)\":{tag:\"(3008,0160)\",vr:\"SQ\",name:\"BrachyControlPointDeliveredSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0162)\":{tag:\"(3008,0162)\",vr:\"DA\",name:\"SafePositionExitDate\",vm:\"1\",version:\"DICOM\"},\"(3008,0164)\":{tag:\"(3008,0164)\",vr:\"TM\",name:\"SafePositionExitTime\",vm:\"1\",version:\"DICOM\"},\"(3008,0166)\":{tag:\"(3008,0166)\",vr:\"DA\",name:\"SafePositionReturnDate\",vm:\"1\",version:\"DICOM\"},\"(3008,0168)\":{tag:\"(3008,0168)\",vr:\"TM\",name:\"SafePositionReturnTime\",vm:\"1\",version:\"DICOM\"},\"(3008,0171)\":{tag:\"(3008,0171)\",vr:\"SQ\",name:\"PulseSpecificBrachyControlPointDeliveredSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0172)\":{tag:\"(3008,0172)\",vr:\"US\",name:\"PulseNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0173)\":{tag:\"(3008,0173)\",vr:\"SQ\",name:\"BrachyPulseControlPointDeliveredSequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0200)\":{tag:\"(3008,0200)\",vr:\"CS\",name:\"CurrentTreatmentStatus\",vm:\"1\",version:\"DICOM\"},\"(3008,0202)\":{tag:\"(3008,0202)\",vr:\"ST\",name:\"TreatmentStatusComment\",vm:\"1\",version:\"DICOM\"},\"(3008,0220)\":{tag:\"(3008,0220)\",vr:\"SQ\",name:\"FractionGroupSummarySequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0223)\":{tag:\"(3008,0223)\",vr:\"IS\",name:\"ReferencedFractionNumber\",vm:\"1\",version:\"DICOM\"},\"(3008,0224)\":{tag:\"(3008,0224)\",vr:\"CS\",name:\"FractionGroupType\",vm:\"1\",version:\"DICOM\"},\"(3008,0230)\":{tag:\"(3008,0230)\",vr:\"CS\",name:\"BeamStopperPosition\",vm:\"1\",version:\"DICOM\"},\"(3008,0240)\":{tag:\"(3008,0240)\",vr:\"SQ\",name:\"FractionStatusSummarySequence\",vm:\"1\",version:\"DICOM\"},\"(3008,0250)\":{tag:\"(3008,0250)\",vr:\"DA\",name:\"TreatmentDate\",vm:\"1\",version:\"DICOM\"},\"(3008,0251)\":{tag:\"(3008,0251)\",vr:\"TM\",name:\"TreatmentTime\",vm:\"1\",version:\"DICOM\"},\"(300A,0002)\":{tag:\"(300A,0002)\",vr:\"SH\",name:\"RTPlanLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,0003)\":{tag:\"(300A,0003)\",vr:\"LO\",name:\"RTPlanName\",vm:\"1\",version:\"DICOM\"},\"(300A,0004)\":{tag:\"(300A,0004)\",vr:\"ST\",name:\"RTPlanDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0006)\":{tag:\"(300A,0006)\",vr:\"DA\",name:\"RTPlanDate\",vm:\"1\",version:\"DICOM\"},\"(300A,0007)\":{tag:\"(300A,0007)\",vr:\"TM\",name:\"RTPlanTime\",vm:\"1\",version:\"DICOM\"},\"(300A,0009)\":{tag:\"(300A,0009)\",vr:\"LO\",name:\"TreatmentProtocols\",vm:\"1-n\",version:\"DICOM\"},\"(300A,000A)\":{tag:\"(300A,000A)\",vr:\"CS\",name:\"PlanIntent\",vm:\"1\",version:\"DICOM\"},\"(300A,000B)\":{tag:\"(300A,000B)\",vr:\"LO\",name:\"TreatmentSites\",vm:\"1-n\",version:\"DICOM\"},\"(300A,000C)\":{tag:\"(300A,000C)\",vr:\"CS\",name:\"RTPlanGeometry\",vm:\"1\",version:\"DICOM\"},\"(300A,000E)\":{tag:\"(300A,000E)\",vr:\"ST\",name:\"PrescriptionDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0010)\":{tag:\"(300A,0010)\",vr:\"SQ\",name:\"DoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0012)\":{tag:\"(300A,0012)\",vr:\"IS\",name:\"DoseReferenceNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0013)\":{tag:\"(300A,0013)\",vr:\"UI\",name:\"DoseReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(300A,0014)\":{tag:\"(300A,0014)\",vr:\"CS\",name:\"DoseReferenceStructureType\",vm:\"1\",version:\"DICOM\"},\"(300A,0015)\":{tag:\"(300A,0015)\",vr:\"CS\",name:\"NominalBeamEnergyUnit\",vm:\"1\",version:\"DICOM\"},\"(300A,0016)\":{tag:\"(300A,0016)\",vr:\"LO\",name:\"DoseReferenceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0018)\":{tag:\"(300A,0018)\",vr:\"DS\",name:\"DoseReferencePointCoordinates\",vm:\"3\",version:\"DICOM\"},\"(300A,001A)\":{tag:\"(300A,001A)\",vr:\"DS\",name:\"NominalPriorDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0020)\":{tag:\"(300A,0020)\",vr:\"CS\",name:\"DoseReferenceType\",vm:\"1\",version:\"DICOM\"},\"(300A,0021)\":{tag:\"(300A,0021)\",vr:\"DS\",name:\"ConstraintWeight\",vm:\"1\",version:\"DICOM\"},\"(300A,0022)\":{tag:\"(300A,0022)\",vr:\"DS\",name:\"DeliveryWarningDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0023)\":{tag:\"(300A,0023)\",vr:\"DS\",name:\"DeliveryMaximumDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0025)\":{tag:\"(300A,0025)\",vr:\"DS\",name:\"TargetMinimumDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0026)\":{tag:\"(300A,0026)\",vr:\"DS\",name:\"TargetPrescriptionDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0027)\":{tag:\"(300A,0027)\",vr:\"DS\",name:\"TargetMaximumDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0028)\":{tag:\"(300A,0028)\",vr:\"DS\",name:\"TargetUnderdoseVolumeFraction\",vm:\"1\",version:\"DICOM\"},\"(300A,002A)\":{tag:\"(300A,002A)\",vr:\"DS\",name:\"OrganAtRiskFullVolumeDose\",vm:\"1\",version:\"DICOM\"},\"(300A,002B)\":{tag:\"(300A,002B)\",vr:\"DS\",name:\"OrganAtRiskLimitDose\",vm:\"1\",version:\"DICOM\"},\"(300A,002C)\":{tag:\"(300A,002C)\",vr:\"DS\",name:\"OrganAtRiskMaximumDose\",vm:\"1\",version:\"DICOM\"},\"(300A,002D)\":{tag:\"(300A,002D)\",vr:\"DS\",name:\"OrganAtRiskOverdoseVolumeFraction\",vm:\"1\",version:\"DICOM\"},\"(300A,0040)\":{tag:\"(300A,0040)\",vr:\"SQ\",name:\"ToleranceTableSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0042)\":{tag:\"(300A,0042)\",vr:\"IS\",name:\"ToleranceTableNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0043)\":{tag:\"(300A,0043)\",vr:\"SH\",name:\"ToleranceTableLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,0044)\":{tag:\"(300A,0044)\",vr:\"DS\",name:\"GantryAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0046)\":{tag:\"(300A,0046)\",vr:\"DS\",name:\"BeamLimitingDeviceAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0048)\":{tag:\"(300A,0048)\",vr:\"SQ\",name:\"BeamLimitingDeviceToleranceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,004A)\":{tag:\"(300A,004A)\",vr:\"DS\",name:\"BeamLimitingDevicePositionTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,004B)\":{tag:\"(300A,004B)\",vr:\"FL\",name:\"SnoutPositionTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,004C)\":{tag:\"(300A,004C)\",vr:\"DS\",name:\"PatientSupportAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,004E)\":{tag:\"(300A,004E)\",vr:\"DS\",name:\"TableTopEccentricAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,004F)\":{tag:\"(300A,004F)\",vr:\"FL\",name:\"TableTopPitchAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0050)\":{tag:\"(300A,0050)\",vr:\"FL\",name:\"TableTopRollAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0051)\":{tag:\"(300A,0051)\",vr:\"DS\",name:\"TableTopVerticalPositionTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0052)\":{tag:\"(300A,0052)\",vr:\"DS\",name:\"TableTopLongitudinalPositionTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0053)\":{tag:\"(300A,0053)\",vr:\"DS\",name:\"TableTopLateralPositionTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0055)\":{tag:\"(300A,0055)\",vr:\"CS\",name:\"RTPlanRelationship\",vm:\"1\",version:\"DICOM\"},\"(300A,0070)\":{tag:\"(300A,0070)\",vr:\"SQ\",name:\"FractionGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0071)\":{tag:\"(300A,0071)\",vr:\"IS\",name:\"FractionGroupNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0072)\":{tag:\"(300A,0072)\",vr:\"LO\",name:\"FractionGroupDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0078)\":{tag:\"(300A,0078)\",vr:\"IS\",name:\"NumberOfFractionsPlanned\",vm:\"1\",version:\"DICOM\"},\"(300A,0079)\":{tag:\"(300A,0079)\",vr:\"IS\",name:\"NumberOfFractionPatternDigitsPerDay\",vm:\"1\",version:\"DICOM\"},\"(300A,007A)\":{tag:\"(300A,007A)\",vr:\"IS\",name:\"RepeatFractionCycleLength\",vm:\"1\",version:\"DICOM\"},\"(300A,007B)\":{tag:\"(300A,007B)\",vr:\"LT\",name:\"FractionPattern\",vm:\"1\",version:\"DICOM\"},\"(300A,0080)\":{tag:\"(300A,0080)\",vr:\"IS\",name:\"NumberOfBeams\",vm:\"1\",version:\"DICOM\"},\"(300A,0082)\":{tag:\"(300A,0082)\",vr:\"DS\",name:\"BeamDoseSpecificationPoint\",vm:\"3\",version:\"DICOM\"},\"(300A,0083)\":{tag:\"(300A,0083)\",vr:\"UI\",name:\"ReferencedDoseReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(300A,0084)\":{tag:\"(300A,0084)\",vr:\"DS\",name:\"BeamDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0086)\":{tag:\"(300A,0086)\",vr:\"DS\",name:\"BeamMeterset\",vm:\"1\",version:\"DICOM\"},\"(300A,008B)\":{tag:\"(300A,008B)\",vr:\"CS\",name:\"BeamDoseMeaning\",vm:\"1\",version:\"DICOM\"},\"(300A,008C)\":{tag:\"(300A,008C)\",vr:\"SQ\",name:\"BeamDoseVerificationControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,008D)\":{tag:\"(300A,008D)\",vr:\"FL\",name:\"AverageBeamDosePointDepth\",vm:\"1\",version:\"DICOM\"},\"(300A,008E)\":{tag:\"(300A,008E)\",vr:\"FL\",name:\"AverageBeamDosePointEquivalentDepth\",vm:\"1\",version:\"DICOM\"},\"(300A,008F)\":{tag:\"(300A,008F)\",vr:\"FL\",name:\"AverageBeamDosePointSSD\",vm:\"1\",version:\"DICOM\"},\"(300A,0090)\":{tag:\"(300A,0090)\",vr:\"CS\",name:\"BeamDoseType\",vm:\"1\",version:\"DICOM\"},\"(300A,0091)\":{tag:\"(300A,0091)\",vr:\"DS\",name:\"AlternateBeamDose\",vm:\"1\",version:\"DICOM\"},\"(300A,0092)\":{tag:\"(300A,0092)\",vr:\"CS\",name:\"AlternateBeamDoseType\",vm:\"1\",version:\"DICOM\"},\"(300A,0093)\":{tag:\"(300A,0093)\",vr:\"CS\",name:\"DepthValueAveragingFlag\",vm:\"1\",version:\"DICOM\"},\"(300A,0094)\":{tag:\"(300A,0094)\",vr:\"DS\",name:\"BeamDosePointSourceToExternalContourDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00A0)\":{tag:\"(300A,00A0)\",vr:\"IS\",name:\"NumberOfBrachyApplicationSetups\",vm:\"1\",version:\"DICOM\"},\"(300A,00A2)\":{tag:\"(300A,00A2)\",vr:\"DS\",name:\"BrachyApplicationSetupDoseSpecificationPoint\",vm:\"3\",version:\"DICOM\"},\"(300A,00A4)\":{tag:\"(300A,00A4)\",vr:\"DS\",name:\"BrachyApplicationSetupDose\",vm:\"1\",version:\"DICOM\"},\"(300A,00B0)\":{tag:\"(300A,00B0)\",vr:\"SQ\",name:\"BeamSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,00B2)\":{tag:\"(300A,00B2)\",vr:\"SH\",name:\"TreatmentMachineName\",vm:\"1\",version:\"DICOM\"},\"(300A,00B3)\":{tag:\"(300A,00B3)\",vr:\"CS\",name:\"PrimaryDosimeterUnit\",vm:\"1\",version:\"DICOM\"},\"(300A,00B4)\":{tag:\"(300A,00B4)\",vr:\"DS\",name:\"SourceAxisDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00B6)\":{tag:\"(300A,00B6)\",vr:\"SQ\",name:\"BeamLimitingDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,00B8)\":{tag:\"(300A,00B8)\",vr:\"CS\",name:\"RTBeamLimitingDeviceType\",vm:\"1\",version:\"DICOM\"},\"(300A,00BA)\":{tag:\"(300A,00BA)\",vr:\"DS\",name:\"SourceToBeamLimitingDeviceDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00BB)\":{tag:\"(300A,00BB)\",vr:\"FL\",name:\"IsocenterToBeamLimitingDeviceDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00BC)\":{tag:\"(300A,00BC)\",vr:\"IS\",name:\"NumberOfLeafJawPairs\",vm:\"1\",version:\"DICOM\"},\"(300A,00BE)\":{tag:\"(300A,00BE)\",vr:\"DS\",name:\"LeafPositionBoundaries\",vm:\"3-n\",version:\"DICOM\"},\"(300A,00C0)\":{tag:\"(300A,00C0)\",vr:\"IS\",name:\"BeamNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,00C2)\":{tag:\"(300A,00C2)\",vr:\"LO\",name:\"BeamName\",vm:\"1\",version:\"DICOM\"},\"(300A,00C3)\":{tag:\"(300A,00C3)\",vr:\"ST\",name:\"BeamDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,00C4)\":{tag:\"(300A,00C4)\",vr:\"CS\",name:\"BeamType\",vm:\"1\",version:\"DICOM\"},\"(300A,00C5)\":{tag:\"(300A,00C5)\",vr:\"FD\",name:\"BeamDeliveryDurationLimit\",vm:\"1\",version:\"DICOM\"},\"(300A,00C6)\":{tag:\"(300A,00C6)\",vr:\"CS\",name:\"RadiationType\",vm:\"1\",version:\"DICOM\"},\"(300A,00C7)\":{tag:\"(300A,00C7)\",vr:\"CS\",name:\"HighDoseTechniqueType\",vm:\"1\",version:\"DICOM\"},\"(300A,00C8)\":{tag:\"(300A,00C8)\",vr:\"IS\",name:\"ReferenceImageNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,00CA)\":{tag:\"(300A,00CA)\",vr:\"SQ\",name:\"PlannedVerificationImageSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,00CC)\":{tag:\"(300A,00CC)\",vr:\"LO\",name:\"ImagingDeviceSpecificAcquisitionParameters\",vm:\"1-n\",version:\"DICOM\"},\"(300A,00CE)\":{tag:\"(300A,00CE)\",vr:\"CS\",name:\"TreatmentDeliveryType\",vm:\"1\",version:\"DICOM\"},\"(300A,00D0)\":{tag:\"(300A,00D0)\",vr:\"IS\",name:\"NumberOfWedges\",vm:\"1\",version:\"DICOM\"},\"(300A,00D1)\":{tag:\"(300A,00D1)\",vr:\"SQ\",name:\"WedgeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,00D2)\":{tag:\"(300A,00D2)\",vr:\"IS\",name:\"WedgeNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,00D3)\":{tag:\"(300A,00D3)\",vr:\"CS\",name:\"WedgeType\",vm:\"1\",version:\"DICOM\"},\"(300A,00D4)\":{tag:\"(300A,00D4)\",vr:\"SH\",name:\"WedgeID\",vm:\"1\",version:\"DICOM\"},\"(300A,00D5)\":{tag:\"(300A,00D5)\",vr:\"IS\",name:\"WedgeAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,00D6)\":{tag:\"(300A,00D6)\",vr:\"DS\",name:\"WedgeFactor\",vm:\"1\",version:\"DICOM\"},\"(300A,00D7)\":{tag:\"(300A,00D7)\",vr:\"FL\",name:\"TotalWedgeTrayWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,00D8)\":{tag:\"(300A,00D8)\",vr:\"DS\",name:\"WedgeOrientation\",vm:\"1\",version:\"DICOM\"},\"(300A,00D9)\":{tag:\"(300A,00D9)\",vr:\"FL\",name:\"IsocenterToWedgeTrayDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00DA)\":{tag:\"(300A,00DA)\",vr:\"DS\",name:\"SourceToWedgeTrayDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00DB)\":{tag:\"(300A,00DB)\",vr:\"FL\",name:\"WedgeThinEdgePosition\",vm:\"1\",version:\"DICOM\"},\"(300A,00DC)\":{tag:\"(300A,00DC)\",vr:\"SH\",name:\"BolusID\",vm:\"1\",version:\"DICOM\"},\"(300A,00DD)\":{tag:\"(300A,00DD)\",vr:\"ST\",name:\"BolusDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,00DE)\":{tag:\"(300A,00DE)\",vr:\"DS\",name:\"EffectiveWedgeAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,00E0)\":{tag:\"(300A,00E0)\",vr:\"IS\",name:\"NumberOfCompensators\",vm:\"1\",version:\"DICOM\"},\"(300A,00E1)\":{tag:\"(300A,00E1)\",vr:\"SH\",name:\"MaterialID\",vm:\"1\",version:\"DICOM\"},\"(300A,00E2)\":{tag:\"(300A,00E2)\",vr:\"DS\",name:\"TotalCompensatorTrayFactor\",vm:\"1\",version:\"DICOM\"},\"(300A,00E3)\":{tag:\"(300A,00E3)\",vr:\"SQ\",name:\"CompensatorSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,00E4)\":{tag:\"(300A,00E4)\",vr:\"IS\",name:\"CompensatorNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,00E5)\":{tag:\"(300A,00E5)\",vr:\"SH\",name:\"CompensatorID\",vm:\"1\",version:\"DICOM\"},\"(300A,00E6)\":{tag:\"(300A,00E6)\",vr:\"DS\",name:\"SourceToCompensatorTrayDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00E7)\":{tag:\"(300A,00E7)\",vr:\"IS\",name:\"CompensatorRows\",vm:\"1\",version:\"DICOM\"},\"(300A,00E8)\":{tag:\"(300A,00E8)\",vr:\"IS\",name:\"CompensatorColumns\",vm:\"1\",version:\"DICOM\"},\"(300A,00E9)\":{tag:\"(300A,00E9)\",vr:\"DS\",name:\"CompensatorPixelSpacing\",vm:\"2\",version:\"DICOM\"},\"(300A,00EA)\":{tag:\"(300A,00EA)\",vr:\"DS\",name:\"CompensatorPosition\",vm:\"2\",version:\"DICOM\"},\"(300A,00EB)\":{tag:\"(300A,00EB)\",vr:\"DS\",name:\"CompensatorTransmissionData\",vm:\"1-n\",version:\"DICOM\"},\"(300A,00EC)\":{tag:\"(300A,00EC)\",vr:\"DS\",name:\"CompensatorThicknessData\",vm:\"1-n\",version:\"DICOM\"},\"(300A,00ED)\":{tag:\"(300A,00ED)\",vr:\"IS\",name:\"NumberOfBoli\",vm:\"1\",version:\"DICOM\"},\"(300A,00EE)\":{tag:\"(300A,00EE)\",vr:\"CS\",name:\"CompensatorType\",vm:\"1\",version:\"DICOM\"},\"(300A,00EF)\":{tag:\"(300A,00EF)\",vr:\"SH\",name:\"CompensatorTrayID\",vm:\"1\",version:\"DICOM\"},\"(300A,00F0)\":{tag:\"(300A,00F0)\",vr:\"IS\",name:\"NumberOfBlocks\",vm:\"1\",version:\"DICOM\"},\"(300A,00F2)\":{tag:\"(300A,00F2)\",vr:\"DS\",name:\"TotalBlockTrayFactor\",vm:\"1\",version:\"DICOM\"},\"(300A,00F3)\":{tag:\"(300A,00F3)\",vr:\"FL\",name:\"TotalBlockTrayWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,00F4)\":{tag:\"(300A,00F4)\",vr:\"SQ\",name:\"BlockSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,00F5)\":{tag:\"(300A,00F5)\",vr:\"SH\",name:\"BlockTrayID\",vm:\"1\",version:\"DICOM\"},\"(300A,00F6)\":{tag:\"(300A,00F6)\",vr:\"DS\",name:\"SourceToBlockTrayDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00F7)\":{tag:\"(300A,00F7)\",vr:\"FL\",name:\"IsocenterToBlockTrayDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,00F8)\":{tag:\"(300A,00F8)\",vr:\"CS\",name:\"BlockType\",vm:\"1\",version:\"DICOM\"},\"(300A,00F9)\":{tag:\"(300A,00F9)\",vr:\"LO\",name:\"AccessoryCode\",vm:\"1\",version:\"DICOM\"},\"(300A,00FA)\":{tag:\"(300A,00FA)\",vr:\"CS\",name:\"BlockDivergence\",vm:\"1\",version:\"DICOM\"},\"(300A,00FB)\":{tag:\"(300A,00FB)\",vr:\"CS\",name:\"BlockMountingPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,00FC)\":{tag:\"(300A,00FC)\",vr:\"IS\",name:\"BlockNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,00FE)\":{tag:\"(300A,00FE)\",vr:\"LO\",name:\"BlockName\",vm:\"1\",version:\"DICOM\"},\"(300A,0100)\":{tag:\"(300A,0100)\",vr:\"DS\",name:\"BlockThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,0102)\":{tag:\"(300A,0102)\",vr:\"DS\",name:\"BlockTransmission\",vm:\"1\",version:\"DICOM\"},\"(300A,0104)\":{tag:\"(300A,0104)\",vr:\"IS\",name:\"BlockNumberOfPoints\",vm:\"1\",version:\"DICOM\"},\"(300A,0106)\":{tag:\"(300A,0106)\",vr:\"DS\",name:\"BlockData\",vm:\"2-2n\",version:\"DICOM\"},\"(300A,0107)\":{tag:\"(300A,0107)\",vr:\"SQ\",name:\"ApplicatorSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0108)\":{tag:\"(300A,0108)\",vr:\"SH\",name:\"ApplicatorID\",vm:\"1\",version:\"DICOM\"},\"(300A,0109)\":{tag:\"(300A,0109)\",vr:\"CS\",name:\"ApplicatorType\",vm:\"1\",version:\"DICOM\"},\"(300A,010A)\":{tag:\"(300A,010A)\",vr:\"LO\",name:\"ApplicatorDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,010C)\":{tag:\"(300A,010C)\",vr:\"DS\",name:\"CumulativeDoseReferenceCoefficient\",vm:\"1\",version:\"DICOM\"},\"(300A,010E)\":{tag:\"(300A,010E)\",vr:\"DS\",name:\"FinalCumulativeMetersetWeight\",vm:\"1\",version:\"DICOM\"},\"(300A,0110)\":{tag:\"(300A,0110)\",vr:\"IS\",name:\"NumberOfControlPoints\",vm:\"1\",version:\"DICOM\"},\"(300A,0111)\":{tag:\"(300A,0111)\",vr:\"SQ\",name:\"ControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0112)\":{tag:\"(300A,0112)\",vr:\"IS\",name:\"ControlPointIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0114)\":{tag:\"(300A,0114)\",vr:\"DS\",name:\"NominalBeamEnergy\",vm:\"1\",version:\"DICOM\"},\"(300A,0115)\":{tag:\"(300A,0115)\",vr:\"DS\",name:\"DoseRateSet\",vm:\"1\",version:\"DICOM\"},\"(300A,0116)\":{tag:\"(300A,0116)\",vr:\"SQ\",name:\"WedgePositionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0118)\":{tag:\"(300A,0118)\",vr:\"CS\",name:\"WedgePosition\",vm:\"1\",version:\"DICOM\"},\"(300A,011A)\":{tag:\"(300A,011A)\",vr:\"SQ\",name:\"BeamLimitingDevicePositionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,011C)\":{tag:\"(300A,011C)\",vr:\"DS\",name:\"LeafJawPositions\",vm:\"2-2n\",version:\"DICOM\"},\"(300A,011E)\":{tag:\"(300A,011E)\",vr:\"DS\",name:\"GantryAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,011F)\":{tag:\"(300A,011F)\",vr:\"CS\",name:\"GantryRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,0120)\":{tag:\"(300A,0120)\",vr:\"DS\",name:\"BeamLimitingDeviceAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0121)\":{tag:\"(300A,0121)\",vr:\"CS\",name:\"BeamLimitingDeviceRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,0122)\":{tag:\"(300A,0122)\",vr:\"DS\",name:\"PatientSupportAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0123)\":{tag:\"(300A,0123)\",vr:\"CS\",name:\"PatientSupportRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,0124)\":{tag:\"(300A,0124)\",vr:\"DS\",name:\"TableTopEccentricAxisDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0125)\":{tag:\"(300A,0125)\",vr:\"DS\",name:\"TableTopEccentricAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0126)\":{tag:\"(300A,0126)\",vr:\"CS\",name:\"TableTopEccentricRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,0128)\":{tag:\"(300A,0128)\",vr:\"DS\",name:\"TableTopVerticalPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,0129)\":{tag:\"(300A,0129)\",vr:\"DS\",name:\"TableTopLongitudinalPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,012A)\":{tag:\"(300A,012A)\",vr:\"DS\",name:\"TableTopLateralPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,012C)\":{tag:\"(300A,012C)\",vr:\"DS\",name:\"IsocenterPosition\",vm:\"3\",version:\"DICOM\"},\"(300A,012E)\":{tag:\"(300A,012E)\",vr:\"DS\",name:\"SurfaceEntryPoint\",vm:\"3\",version:\"DICOM\"},\"(300A,0130)\":{tag:\"(300A,0130)\",vr:\"DS\",name:\"SourceToSurfaceDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0131)\":{tag:\"(300A,0131)\",vr:\"FL\",name:\"AverageBeamDosePointSourceToExternalContourSurfaceDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0132)\":{tag:\"(300A,0132)\",vr:\"FL\",name:\"SourceToExternalContourDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0133)\":{tag:\"(300A,0133)\",vr:\"FL\",name:\"ExternalContourEntryPoint\",vm:\"3\",version:\"DICOM\"},\"(300A,0134)\":{tag:\"(300A,0134)\",vr:\"DS\",name:\"CumulativeMetersetWeight\",vm:\"1\",version:\"DICOM\"},\"(300A,0140)\":{tag:\"(300A,0140)\",vr:\"FL\",name:\"TableTopPitchAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0142)\":{tag:\"(300A,0142)\",vr:\"CS\",name:\"TableTopPitchRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,0144)\":{tag:\"(300A,0144)\",vr:\"FL\",name:\"TableTopRollAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0146)\":{tag:\"(300A,0146)\",vr:\"CS\",name:\"TableTopRollRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,0148)\":{tag:\"(300A,0148)\",vr:\"FL\",name:\"HeadFixationAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,014A)\":{tag:\"(300A,014A)\",vr:\"FL\",name:\"GantryPitchAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,014C)\":{tag:\"(300A,014C)\",vr:\"CS\",name:\"GantryPitchRotationDirection\",vm:\"1\",version:\"DICOM\"},\"(300A,014E)\":{tag:\"(300A,014E)\",vr:\"FL\",name:\"GantryPitchAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0150)\":{tag:\"(300A,0150)\",vr:\"CS\",name:\"FixationEye\",vm:\"1\",version:\"DICOM\"},\"(300A,0151)\":{tag:\"(300A,0151)\",vr:\"DS\",name:\"ChairHeadFramePosition\",vm:\"1\",version:\"DICOM\"},\"(300A,0152)\":{tag:\"(300A,0152)\",vr:\"DS\",name:\"HeadFixationAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0153)\":{tag:\"(300A,0153)\",vr:\"DS\",name:\"ChairHeadFramePositionTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0154)\":{tag:\"(300A,0154)\",vr:\"DS\",name:\"FixationLightAzimuthalAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0155)\":{tag:\"(300A,0155)\",vr:\"DS\",name:\"FixationLightPolarAngleTolerance\",vm:\"1\",version:\"DICOM\"},\"(300A,0180)\":{tag:\"(300A,0180)\",vr:\"SQ\",name:\"PatientSetupSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0182)\":{tag:\"(300A,0182)\",vr:\"IS\",name:\"PatientSetupNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0183)\":{tag:\"(300A,0183)\",vr:\"LO\",name:\"PatientSetupLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,0184)\":{tag:\"(300A,0184)\",vr:\"LO\",name:\"PatientAdditionalPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,0190)\":{tag:\"(300A,0190)\",vr:\"SQ\",name:\"FixationDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0192)\":{tag:\"(300A,0192)\",vr:\"CS\",name:\"FixationDeviceType\",vm:\"1\",version:\"DICOM\"},\"(300A,0194)\":{tag:\"(300A,0194)\",vr:\"SH\",name:\"FixationDeviceLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,0196)\":{tag:\"(300A,0196)\",vr:\"ST\",name:\"FixationDeviceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0198)\":{tag:\"(300A,0198)\",vr:\"SH\",name:\"FixationDevicePosition\",vm:\"1\",version:\"DICOM\"},\"(300A,0199)\":{tag:\"(300A,0199)\",vr:\"FL\",name:\"FixationDevicePitchAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,019A)\":{tag:\"(300A,019A)\",vr:\"FL\",name:\"FixationDeviceRollAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,01A0)\":{tag:\"(300A,01A0)\",vr:\"SQ\",name:\"ShieldingDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,01A2)\":{tag:\"(300A,01A2)\",vr:\"CS\",name:\"ShieldingDeviceType\",vm:\"1\",version:\"DICOM\"},\"(300A,01A4)\":{tag:\"(300A,01A4)\",vr:\"SH\",name:\"ShieldingDeviceLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,01A6)\":{tag:\"(300A,01A6)\",vr:\"ST\",name:\"ShieldingDeviceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,01A8)\":{tag:\"(300A,01A8)\",vr:\"SH\",name:\"ShieldingDevicePosition\",vm:\"1\",version:\"DICOM\"},\"(300A,01B0)\":{tag:\"(300A,01B0)\",vr:\"CS\",name:\"SetupTechnique\",vm:\"1\",version:\"DICOM\"},\"(300A,01B2)\":{tag:\"(300A,01B2)\",vr:\"ST\",name:\"SetupTechniqueDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,01B4)\":{tag:\"(300A,01B4)\",vr:\"SQ\",name:\"SetupDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,01B6)\":{tag:\"(300A,01B6)\",vr:\"CS\",name:\"SetupDeviceType\",vm:\"1\",version:\"DICOM\"},\"(300A,01B8)\":{tag:\"(300A,01B8)\",vr:\"SH\",name:\"SetupDeviceLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,01BA)\":{tag:\"(300A,01BA)\",vr:\"ST\",name:\"SetupDeviceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,01BC)\":{tag:\"(300A,01BC)\",vr:\"DS\",name:\"SetupDeviceParameter\",vm:\"1\",version:\"DICOM\"},\"(300A,01D0)\":{tag:\"(300A,01D0)\",vr:\"ST\",name:\"SetupReferenceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,01D2)\":{tag:\"(300A,01D2)\",vr:\"DS\",name:\"TableTopVerticalSetupDisplacement\",vm:\"1\",version:\"DICOM\"},\"(300A,01D4)\":{tag:\"(300A,01D4)\",vr:\"DS\",name:\"TableTopLongitudinalSetupDisplacement\",vm:\"1\",version:\"DICOM\"},\"(300A,01D6)\":{tag:\"(300A,01D6)\",vr:\"DS\",name:\"TableTopLateralSetupDisplacement\",vm:\"1\",version:\"DICOM\"},\"(300A,0200)\":{tag:\"(300A,0200)\",vr:\"CS\",name:\"BrachyTreatmentTechnique\",vm:\"1\",version:\"DICOM\"},\"(300A,0202)\":{tag:\"(300A,0202)\",vr:\"CS\",name:\"BrachyTreatmentType\",vm:\"1\",version:\"DICOM\"},\"(300A,0206)\":{tag:\"(300A,0206)\",vr:\"SQ\",name:\"TreatmentMachineSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0210)\":{tag:\"(300A,0210)\",vr:\"SQ\",name:\"SourceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0212)\":{tag:\"(300A,0212)\",vr:\"IS\",name:\"SourceNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0214)\":{tag:\"(300A,0214)\",vr:\"CS\",name:\"SourceType\",vm:\"1\",version:\"DICOM\"},\"(300A,0216)\":{tag:\"(300A,0216)\",vr:\"LO\",name:\"SourceManufacturer\",vm:\"1\",version:\"DICOM\"},\"(300A,0218)\":{tag:\"(300A,0218)\",vr:\"DS\",name:\"ActiveSourceDiameter\",vm:\"1\",version:\"DICOM\"},\"(300A,021A)\":{tag:\"(300A,021A)\",vr:\"DS\",name:\"ActiveSourceLength\",vm:\"1\",version:\"DICOM\"},\"(300A,021B)\":{tag:\"(300A,021B)\",vr:\"SH\",name:\"SourceModelID\",vm:\"1\",version:\"DICOM\"},\"(300A,021C)\":{tag:\"(300A,021C)\",vr:\"LO\",name:\"SourceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0222)\":{tag:\"(300A,0222)\",vr:\"DS\",name:\"SourceEncapsulationNominalThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,0224)\":{tag:\"(300A,0224)\",vr:\"DS\",name:\"SourceEncapsulationNominalTransmission\",vm:\"1\",version:\"DICOM\"},\"(300A,0226)\":{tag:\"(300A,0226)\",vr:\"LO\",name:\"SourceIsotopeName\",vm:\"1\",version:\"DICOM\"},\"(300A,0228)\":{tag:\"(300A,0228)\",vr:\"DS\",name:\"SourceIsotopeHalfLife\",vm:\"1\",version:\"DICOM\"},\"(300A,0229)\":{tag:\"(300A,0229)\",vr:\"CS\",name:\"SourceStrengthUnits\",vm:\"1\",version:\"DICOM\"},\"(300A,022A)\":{tag:\"(300A,022A)\",vr:\"DS\",name:\"ReferenceAirKermaRate\",vm:\"1\",version:\"DICOM\"},\"(300A,022B)\":{tag:\"(300A,022B)\",vr:\"DS\",name:\"SourceStrength\",vm:\"1\",version:\"DICOM\"},\"(300A,022C)\":{tag:\"(300A,022C)\",vr:\"DA\",name:\"SourceStrengthReferenceDate\",vm:\"1\",version:\"DICOM\"},\"(300A,022E)\":{tag:\"(300A,022E)\",vr:\"TM\",name:\"SourceStrengthReferenceTime\",vm:\"1\",version:\"DICOM\"},\"(300A,0230)\":{tag:\"(300A,0230)\",vr:\"SQ\",name:\"ApplicationSetupSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0232)\":{tag:\"(300A,0232)\",vr:\"CS\",name:\"ApplicationSetupType\",vm:\"1\",version:\"DICOM\"},\"(300A,0234)\":{tag:\"(300A,0234)\",vr:\"IS\",name:\"ApplicationSetupNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0236)\":{tag:\"(300A,0236)\",vr:\"LO\",name:\"ApplicationSetupName\",vm:\"1\",version:\"DICOM\"},\"(300A,0238)\":{tag:\"(300A,0238)\",vr:\"LO\",name:\"ApplicationSetupManufacturer\",vm:\"1\",version:\"DICOM\"},\"(300A,0240)\":{tag:\"(300A,0240)\",vr:\"IS\",name:\"TemplateNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0242)\":{tag:\"(300A,0242)\",vr:\"SH\",name:\"TemplateType\",vm:\"1\",version:\"DICOM\"},\"(300A,0244)\":{tag:\"(300A,0244)\",vr:\"LO\",name:\"TemplateName\",vm:\"1\",version:\"DICOM\"},\"(300A,0250)\":{tag:\"(300A,0250)\",vr:\"DS\",name:\"TotalReferenceAirKerma\",vm:\"1\",version:\"DICOM\"},\"(300A,0260)\":{tag:\"(300A,0260)\",vr:\"SQ\",name:\"BrachyAccessoryDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0262)\":{tag:\"(300A,0262)\",vr:\"IS\",name:\"BrachyAccessoryDeviceNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0263)\":{tag:\"(300A,0263)\",vr:\"SH\",name:\"BrachyAccessoryDeviceID\",vm:\"1\",version:\"DICOM\"},\"(300A,0264)\":{tag:\"(300A,0264)\",vr:\"CS\",name:\"BrachyAccessoryDeviceType\",vm:\"1\",version:\"DICOM\"},\"(300A,0266)\":{tag:\"(300A,0266)\",vr:\"LO\",name:\"BrachyAccessoryDeviceName\",vm:\"1\",version:\"DICOM\"},\"(300A,026A)\":{tag:\"(300A,026A)\",vr:\"DS\",name:\"BrachyAccessoryDeviceNominalThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,026C)\":{tag:\"(300A,026C)\",vr:\"DS\",name:\"BrachyAccessoryDeviceNominalTransmission\",vm:\"1\",version:\"DICOM\"},\"(300A,0271)\":{tag:\"(300A,0271)\",vr:\"DS\",name:\"ChannelEffectiveLength\",vm:\"1\",version:\"DICOM\"},\"(300A,0272)\":{tag:\"(300A,0272)\",vr:\"DS\",name:\"ChannelInnerLength\",vm:\"1\",version:\"DICOM\"},\"(300A,0273)\":{tag:\"(300A,0273)\",vr:\"SH\",name:\"AfterloaderChannelID\",vm:\"1\",version:\"DICOM\"},\"(300A,0274)\":{tag:\"(300A,0274)\",vr:\"DS\",name:\"SourceApplicatorTipLength\",vm:\"1\",version:\"DICOM\"},\"(300A,0280)\":{tag:\"(300A,0280)\",vr:\"SQ\",name:\"ChannelSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0282)\":{tag:\"(300A,0282)\",vr:\"IS\",name:\"ChannelNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0284)\":{tag:\"(300A,0284)\",vr:\"DS\",name:\"ChannelLength\",vm:\"1\",version:\"DICOM\"},\"(300A,0286)\":{tag:\"(300A,0286)\",vr:\"DS\",name:\"ChannelTotalTime\",vm:\"1\",version:\"DICOM\"},\"(300A,0288)\":{tag:\"(300A,0288)\",vr:\"CS\",name:\"SourceMovementType\",vm:\"1\",version:\"DICOM\"},\"(300A,028A)\":{tag:\"(300A,028A)\",vr:\"IS\",name:\"NumberOfPulses\",vm:\"1\",version:\"DICOM\"},\"(300A,028C)\":{tag:\"(300A,028C)\",vr:\"DS\",name:\"PulseRepetitionInterval\",vm:\"1\",version:\"DICOM\"},\"(300A,0290)\":{tag:\"(300A,0290)\",vr:\"IS\",name:\"SourceApplicatorNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0291)\":{tag:\"(300A,0291)\",vr:\"SH\",name:\"SourceApplicatorID\",vm:\"1\",version:\"DICOM\"},\"(300A,0292)\":{tag:\"(300A,0292)\",vr:\"CS\",name:\"SourceApplicatorType\",vm:\"1\",version:\"DICOM\"},\"(300A,0294)\":{tag:\"(300A,0294)\",vr:\"LO\",name:\"SourceApplicatorName\",vm:\"1\",version:\"DICOM\"},\"(300A,0296)\":{tag:\"(300A,0296)\",vr:\"DS\",name:\"SourceApplicatorLength\",vm:\"1\",version:\"DICOM\"},\"(300A,0298)\":{tag:\"(300A,0298)\",vr:\"LO\",name:\"SourceApplicatorManufacturer\",vm:\"1\",version:\"DICOM\"},\"(300A,029C)\":{tag:\"(300A,029C)\",vr:\"DS\",name:\"SourceApplicatorWallNominalThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,029E)\":{tag:\"(300A,029E)\",vr:\"DS\",name:\"SourceApplicatorWallNominalTransmission\",vm:\"1\",version:\"DICOM\"},\"(300A,02A0)\":{tag:\"(300A,02A0)\",vr:\"DS\",name:\"SourceApplicatorStepSize\",vm:\"1\",version:\"DICOM\"},\"(300A,02A2)\":{tag:\"(300A,02A2)\",vr:\"IS\",name:\"TransferTubeNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,02A4)\":{tag:\"(300A,02A4)\",vr:\"DS\",name:\"TransferTubeLength\",vm:\"1\",version:\"DICOM\"},\"(300A,02B0)\":{tag:\"(300A,02B0)\",vr:\"SQ\",name:\"ChannelShieldSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,02B2)\":{tag:\"(300A,02B2)\",vr:\"IS\",name:\"ChannelShieldNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,02B3)\":{tag:\"(300A,02B3)\",vr:\"SH\",name:\"ChannelShieldID\",vm:\"1\",version:\"DICOM\"},\"(300A,02B4)\":{tag:\"(300A,02B4)\",vr:\"LO\",name:\"ChannelShieldName\",vm:\"1\",version:\"DICOM\"},\"(300A,02B8)\":{tag:\"(300A,02B8)\",vr:\"DS\",name:\"ChannelShieldNominalThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,02BA)\":{tag:\"(300A,02BA)\",vr:\"DS\",name:\"ChannelShieldNominalTransmission\",vm:\"1\",version:\"DICOM\"},\"(300A,02C8)\":{tag:\"(300A,02C8)\",vr:\"DS\",name:\"FinalCumulativeTimeWeight\",vm:\"1\",version:\"DICOM\"},\"(300A,02D0)\":{tag:\"(300A,02D0)\",vr:\"SQ\",name:\"BrachyControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,02D2)\":{tag:\"(300A,02D2)\",vr:\"DS\",name:\"ControlPointRelativePosition\",vm:\"1\",version:\"DICOM\"},\"(300A,02D4)\":{tag:\"(300A,02D4)\",vr:\"DS\",name:\"ControlPoint3DPosition\",vm:\"3\",version:\"DICOM\"},\"(300A,02D6)\":{tag:\"(300A,02D6)\",vr:\"DS\",name:\"CumulativeTimeWeight\",vm:\"1\",version:\"DICOM\"},\"(300A,02E0)\":{tag:\"(300A,02E0)\",vr:\"CS\",name:\"CompensatorDivergence\",vm:\"1\",version:\"DICOM\"},\"(300A,02E1)\":{tag:\"(300A,02E1)\",vr:\"CS\",name:\"CompensatorMountingPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,02E2)\":{tag:\"(300A,02E2)\",vr:\"DS\",name:\"SourceToCompensatorDistance\",vm:\"1-n\",version:\"DICOM\"},\"(300A,02E3)\":{tag:\"(300A,02E3)\",vr:\"FL\",name:\"TotalCompensatorTrayWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,02E4)\":{tag:\"(300A,02E4)\",vr:\"FL\",name:\"IsocenterToCompensatorTrayDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,02E5)\":{tag:\"(300A,02E5)\",vr:\"FL\",name:\"CompensatorColumnOffset\",vm:\"1\",version:\"DICOM\"},\"(300A,02E6)\":{tag:\"(300A,02E6)\",vr:\"FL\",name:\"IsocenterToCompensatorDistances\",vm:\"1-n\",version:\"DICOM\"},\"(300A,02E7)\":{tag:\"(300A,02E7)\",vr:\"FL\",name:\"CompensatorRelativeStoppingPowerRatio\",vm:\"1\",version:\"DICOM\"},\"(300A,02E8)\":{tag:\"(300A,02E8)\",vr:\"FL\",name:\"CompensatorMillingToolDiameter\",vm:\"1\",version:\"DICOM\"},\"(300A,02EA)\":{tag:\"(300A,02EA)\",vr:\"SQ\",name:\"IonRangeCompensatorSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,02EB)\":{tag:\"(300A,02EB)\",vr:\"LT\",name:\"CompensatorDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0302)\":{tag:\"(300A,0302)\",vr:\"IS\",name:\"RadiationMassNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0304)\":{tag:\"(300A,0304)\",vr:\"IS\",name:\"RadiationAtomicNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0306)\":{tag:\"(300A,0306)\",vr:\"SS\",name:\"RadiationChargeState\",vm:\"1\",version:\"DICOM\"},\"(300A,0308)\":{tag:\"(300A,0308)\",vr:\"CS\",name:\"ScanMode\",vm:\"1\",version:\"DICOM\"},\"(300A,0309)\":{tag:\"(300A,0309)\",vr:\"CS\",name:\"ModulatedScanModeType\",vm:\"1\",version:\"DICOM\"},\"(300A,030A)\":{tag:\"(300A,030A)\",vr:\"FL\",name:\"VirtualSourceAxisDistances\",vm:\"2\",version:\"DICOM\"},\"(300A,030C)\":{tag:\"(300A,030C)\",vr:\"SQ\",name:\"SnoutSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,030D)\":{tag:\"(300A,030D)\",vr:\"FL\",name:\"SnoutPosition\",vm:\"1\",version:\"DICOM\"},\"(300A,030F)\":{tag:\"(300A,030F)\",vr:\"SH\",name:\"SnoutID\",vm:\"1\",version:\"DICOM\"},\"(300A,0312)\":{tag:\"(300A,0312)\",vr:\"IS\",name:\"NumberOfRangeShifters\",vm:\"1\",version:\"DICOM\"},\"(300A,0314)\":{tag:\"(300A,0314)\",vr:\"SQ\",name:\"RangeShifterSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0316)\":{tag:\"(300A,0316)\",vr:\"IS\",name:\"RangeShifterNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0318)\":{tag:\"(300A,0318)\",vr:\"SH\",name:\"RangeShifterID\",vm:\"1\",version:\"DICOM\"},\"(300A,0320)\":{tag:\"(300A,0320)\",vr:\"CS\",name:\"RangeShifterType\",vm:\"1\",version:\"DICOM\"},\"(300A,0322)\":{tag:\"(300A,0322)\",vr:\"LO\",name:\"RangeShifterDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0330)\":{tag:\"(300A,0330)\",vr:\"IS\",name:\"NumberOfLateralSpreadingDevices\",vm:\"1\",version:\"DICOM\"},\"(300A,0332)\":{tag:\"(300A,0332)\",vr:\"SQ\",name:\"LateralSpreadingDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0334)\":{tag:\"(300A,0334)\",vr:\"IS\",name:\"LateralSpreadingDeviceNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0336)\":{tag:\"(300A,0336)\",vr:\"SH\",name:\"LateralSpreadingDeviceID\",vm:\"1\",version:\"DICOM\"},\"(300A,0338)\":{tag:\"(300A,0338)\",vr:\"CS\",name:\"LateralSpreadingDeviceType\",vm:\"1\",version:\"DICOM\"},\"(300A,033A)\":{tag:\"(300A,033A)\",vr:\"LO\",name:\"LateralSpreadingDeviceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,033C)\":{tag:\"(300A,033C)\",vr:\"FL\",name:\"LateralSpreadingDeviceWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,0340)\":{tag:\"(300A,0340)\",vr:\"IS\",name:\"NumberOfRangeModulators\",vm:\"1\",version:\"DICOM\"},\"(300A,0342)\":{tag:\"(300A,0342)\",vr:\"SQ\",name:\"RangeModulatorSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0344)\":{tag:\"(300A,0344)\",vr:\"IS\",name:\"RangeModulatorNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0346)\":{tag:\"(300A,0346)\",vr:\"SH\",name:\"RangeModulatorID\",vm:\"1\",version:\"DICOM\"},\"(300A,0348)\":{tag:\"(300A,0348)\",vr:\"CS\",name:\"RangeModulatorType\",vm:\"1\",version:\"DICOM\"},\"(300A,034A)\":{tag:\"(300A,034A)\",vr:\"LO\",name:\"RangeModulatorDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,034C)\":{tag:\"(300A,034C)\",vr:\"SH\",name:\"BeamCurrentModulationID\",vm:\"1\",version:\"DICOM\"},\"(300A,0350)\":{tag:\"(300A,0350)\",vr:\"CS\",name:\"PatientSupportType\",vm:\"1\",version:\"DICOM\"},\"(300A,0352)\":{tag:\"(300A,0352)\",vr:\"SH\",name:\"PatientSupportID\",vm:\"1\",version:\"DICOM\"},\"(300A,0354)\":{tag:\"(300A,0354)\",vr:\"LO\",name:\"PatientSupportAccessoryCode\",vm:\"1\",version:\"DICOM\"},\"(300A,0355)\":{tag:\"(300A,0355)\",vr:\"LO\",name:\"TrayAccessoryCode\",vm:\"1\",version:\"DICOM\"},\"(300A,0356)\":{tag:\"(300A,0356)\",vr:\"FL\",name:\"FixationLightAzimuthalAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0358)\":{tag:\"(300A,0358)\",vr:\"FL\",name:\"FixationLightPolarAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,035A)\":{tag:\"(300A,035A)\",vr:\"FL\",name:\"MetersetRate\",vm:\"1\",version:\"DICOM\"},\"(300A,0360)\":{tag:\"(300A,0360)\",vr:\"SQ\",name:\"RangeShifterSettingsSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0362)\":{tag:\"(300A,0362)\",vr:\"LO\",name:\"RangeShifterSetting\",vm:\"1\",version:\"DICOM\"},\"(300A,0364)\":{tag:\"(300A,0364)\",vr:\"FL\",name:\"IsocenterToRangeShifterDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0366)\":{tag:\"(300A,0366)\",vr:\"FL\",name:\"RangeShifterWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,0370)\":{tag:\"(300A,0370)\",vr:\"SQ\",name:\"LateralSpreadingDeviceSettingsSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0372)\":{tag:\"(300A,0372)\",vr:\"LO\",name:\"LateralSpreadingDeviceSetting\",vm:\"1\",version:\"DICOM\"},\"(300A,0374)\":{tag:\"(300A,0374)\",vr:\"FL\",name:\"IsocenterToLateralSpreadingDeviceDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0380)\":{tag:\"(300A,0380)\",vr:\"SQ\",name:\"RangeModulatorSettingsSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0382)\":{tag:\"(300A,0382)\",vr:\"FL\",name:\"RangeModulatorGatingStartValue\",vm:\"1\",version:\"DICOM\"},\"(300A,0384)\":{tag:\"(300A,0384)\",vr:\"FL\",name:\"RangeModulatorGatingStopValue\",vm:\"1\",version:\"DICOM\"},\"(300A,0386)\":{tag:\"(300A,0386)\",vr:\"FL\",name:\"RangeModulatorGatingStartWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,0388)\":{tag:\"(300A,0388)\",vr:\"FL\",name:\"RangeModulatorGatingStopWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,038A)\":{tag:\"(300A,038A)\",vr:\"FL\",name:\"IsocenterToRangeModulatorDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,038F)\":{tag:\"(300A,038F)\",vr:\"FL\",name:\"ScanSpotTimeOffset\",vm:\"1-n\",version:\"DICOM\"},\"(300A,0390)\":{tag:\"(300A,0390)\",vr:\"SH\",name:\"ScanSpotTuneID\",vm:\"1\",version:\"DICOM\"},\"(300A,0391)\":{tag:\"(300A,0391)\",vr:\"IS\",name:\"ScanSpotPrescribedIndices\",vm:\"1-n\",version:\"DICOM\"},\"(300A,0392)\":{tag:\"(300A,0392)\",vr:\"IS\",name:\"NumberOfScanSpotPositions\",vm:\"1\",version:\"DICOM\"},\"(300A,0393)\":{tag:\"(300A,0393)\",vr:\"CS\",name:\"ScanSpotReordered\",vm:\"1\",version:\"DICOM\"},\"(300A,0394)\":{tag:\"(300A,0394)\",vr:\"FL\",name:\"ScanSpotPositionMap\",vm:\"1-n\",version:\"DICOM\"},\"(300A,0395)\":{tag:\"(300A,0395)\",vr:\"CS\",name:\"ScanSpotReorderingAllowed\",vm:\"1\",version:\"DICOM\"},\"(300A,0396)\":{tag:\"(300A,0396)\",vr:\"FL\",name:\"ScanSpotMetersetWeights\",vm:\"1-n\",version:\"DICOM\"},\"(300A,0398)\":{tag:\"(300A,0398)\",vr:\"FL\",name:\"ScanningSpotSize\",vm:\"2\",version:\"DICOM\"},\"(300A,0399)\":{tag:\"(300A,0399)\",vr:\"FL\",name:\"ScanSpotSizesDelivered\",vm:\"2-2n\",version:\"DICOM\"},\"(300A,039A)\":{tag:\"(300A,039A)\",vr:\"IS\",name:\"NumberOfPaintings\",vm:\"1\",version:\"DICOM\"},\"(300A,03A0)\":{tag:\"(300A,03A0)\",vr:\"SQ\",name:\"IonToleranceTableSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,03A2)\":{tag:\"(300A,03A2)\",vr:\"SQ\",name:\"IonBeamSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,03A4)\":{tag:\"(300A,03A4)\",vr:\"SQ\",name:\"IonBeamLimitingDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,03A6)\":{tag:\"(300A,03A6)\",vr:\"SQ\",name:\"IonBlockSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,03A8)\":{tag:\"(300A,03A8)\",vr:\"SQ\",name:\"IonControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,03AA)\":{tag:\"(300A,03AA)\",vr:\"SQ\",name:\"IonWedgeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,03AC)\":{tag:\"(300A,03AC)\",vr:\"SQ\",name:\"IonWedgePositionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0401)\":{tag:\"(300A,0401)\",vr:\"SQ\",name:\"ReferencedSetupImageSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0402)\":{tag:\"(300A,0402)\",vr:\"ST\",name:\"SetupImageComment\",vm:\"1\",version:\"DICOM\"},\"(300A,0410)\":{tag:\"(300A,0410)\",vr:\"SQ\",name:\"MotionSynchronizationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0412)\":{tag:\"(300A,0412)\",vr:\"FL\",name:\"ControlPointOrientation\",vm:\"3\",version:\"DICOM\"},\"(300A,0420)\":{tag:\"(300A,0420)\",vr:\"SQ\",name:\"GeneralAccessorySequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0421)\":{tag:\"(300A,0421)\",vr:\"SH\",name:\"GeneralAccessoryID\",vm:\"1\",version:\"DICOM\"},\"(300A,0422)\":{tag:\"(300A,0422)\",vr:\"ST\",name:\"GeneralAccessoryDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0423)\":{tag:\"(300A,0423)\",vr:\"CS\",name:\"GeneralAccessoryType\",vm:\"1\",version:\"DICOM\"},\"(300A,0424)\":{tag:\"(300A,0424)\",vr:\"IS\",name:\"GeneralAccessoryNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0425)\":{tag:\"(300A,0425)\",vr:\"FL\",name:\"SourceToGeneralAccessoryDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0426)\":{tag:\"(300A,0426)\",vr:\"DS\",name:\"IsocenterToGeneralAccessoryDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0431)\":{tag:\"(300A,0431)\",vr:\"SQ\",name:\"ApplicatorGeometrySequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0432)\":{tag:\"(300A,0432)\",vr:\"CS\",name:\"ApplicatorApertureShape\",vm:\"1\",version:\"DICOM\"},\"(300A,0433)\":{tag:\"(300A,0433)\",vr:\"FL\",name:\"ApplicatorOpening\",vm:\"1\",version:\"DICOM\"},\"(300A,0434)\":{tag:\"(300A,0434)\",vr:\"FL\",name:\"ApplicatorOpeningX\",vm:\"1\",version:\"DICOM\"},\"(300A,0435)\":{tag:\"(300A,0435)\",vr:\"FL\",name:\"ApplicatorOpeningY\",vm:\"1\",version:\"DICOM\"},\"(300A,0436)\":{tag:\"(300A,0436)\",vr:\"FL\",name:\"SourceToApplicatorMountingPositionDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0440)\":{tag:\"(300A,0440)\",vr:\"IS\",name:\"NumberOfBlockSlabItems\",vm:\"1\",version:\"DICOM\"},\"(300A,0441)\":{tag:\"(300A,0441)\",vr:\"SQ\",name:\"BlockSlabSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0442)\":{tag:\"(300A,0442)\",vr:\"DS\",name:\"BlockSlabThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,0443)\":{tag:\"(300A,0443)\",vr:\"US\",name:\"BlockSlabNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0450)\":{tag:\"(300A,0450)\",vr:\"SQ\",name:\"DeviceMotionControlSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0451)\":{tag:\"(300A,0451)\",vr:\"CS\",name:\"DeviceMotionExecutionMode\",vm:\"1\",version:\"DICOM\"},\"(300A,0452)\":{tag:\"(300A,0452)\",vr:\"CS\",name:\"DeviceMotionObservationMode\",vm:\"1\",version:\"DICOM\"},\"(300A,0453)\":{tag:\"(300A,0453)\",vr:\"SQ\",name:\"DeviceMotionParameterCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0501)\":{tag:\"(300A,0501)\",vr:\"FL\",name:\"DistalDepthFraction\",vm:\"1\",version:\"DICOM\"},\"(300A,0502)\":{tag:\"(300A,0502)\",vr:\"FL\",name:\"DistalDepth\",vm:\"1\",version:\"DICOM\"},\"(300A,0503)\":{tag:\"(300A,0503)\",vr:\"FL\",name:\"NominalRangeModulationFractions\",vm:\"2\",version:\"DICOM\"},\"(300A,0504)\":{tag:\"(300A,0504)\",vr:\"FL\",name:\"NominalRangeModulatedRegionDepths\",vm:\"2\",version:\"DICOM\"},\"(300A,0505)\":{tag:\"(300A,0505)\",vr:\"SQ\",name:\"DepthDoseParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0506)\":{tag:\"(300A,0506)\",vr:\"SQ\",name:\"DeliveredDepthDoseParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0507)\":{tag:\"(300A,0507)\",vr:\"FL\",name:\"DeliveredDistalDepthFraction\",vm:\"1\",version:\"DICOM\"},\"(300A,0508)\":{tag:\"(300A,0508)\",vr:\"FL\",name:\"DeliveredDistalDepth\",vm:\"1\",version:\"DICOM\"},\"(300A,0509)\":{tag:\"(300A,0509)\",vr:\"FL\",name:\"DeliveredNominalRangeModulationFractions\",vm:\"2\",version:\"DICOM\"},\"(300A,0510)\":{tag:\"(300A,0510)\",vr:\"FL\",name:\"DeliveredNominalRangeModulatedRegionDepths\",vm:\"2\",version:\"DICOM\"},\"(300A,0511)\":{tag:\"(300A,0511)\",vr:\"CS\",name:\"DeliveredReferenceDoseDefinition\",vm:\"1\",version:\"DICOM\"},\"(300A,0512)\":{tag:\"(300A,0512)\",vr:\"CS\",name:\"ReferenceDoseDefinition\",vm:\"1\",version:\"DICOM\"},\"(300A,0600)\":{tag:\"(300A,0600)\",vr:\"US\",name:\"RTControlPointIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0601)\":{tag:\"(300A,0601)\",vr:\"US\",name:\"RadiationGenerationModeIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0602)\":{tag:\"(300A,0602)\",vr:\"US\",name:\"ReferencedDefinedDeviceIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0603)\":{tag:\"(300A,0603)\",vr:\"US\",name:\"RadiationDoseIdentificationIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0604)\":{tag:\"(300A,0604)\",vr:\"US\",name:\"NumberOfRTControlPoints\",vm:\"1\",version:\"DICOM\"},\"(300A,0605)\":{tag:\"(300A,0605)\",vr:\"US\",name:\"ReferencedRadiationGenerationModeIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0606)\":{tag:\"(300A,0606)\",vr:\"US\",name:\"TreatmentPositionIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0607)\":{tag:\"(300A,0607)\",vr:\"US\",name:\"ReferencedDeviceIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0608)\":{tag:\"(300A,0608)\",vr:\"LO\",name:\"TreatmentPositionGroupLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,0609)\":{tag:\"(300A,0609)\",vr:\"UI\",name:\"TreatmentPositionGroupUID\",vm:\"1\",version:\"DICOM\"},\"(300A,060A)\":{tag:\"(300A,060A)\",vr:\"SQ\",name:\"TreatmentPositionGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,060B)\":{tag:\"(300A,060B)\",vr:\"US\",name:\"ReferencedTreatmentPositionIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,060C)\":{tag:\"(300A,060C)\",vr:\"US\",name:\"ReferencedRadiationDoseIdentificationIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,060D)\":{tag:\"(300A,060D)\",vr:\"FD\",name:\"RTAccessoryHolderWaterEquivalentThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,060E)\":{tag:\"(300A,060E)\",vr:\"US\",name:\"ReferencedRTAccessoryHolderDeviceIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,060F)\":{tag:\"(300A,060F)\",vr:\"CS\",name:\"RTAccessoryHolderSlotExistenceFlag\",vm:\"1\",version:\"DICOM\"},\"(300A,0610)\":{tag:\"(300A,0610)\",vr:\"SQ\",name:\"RTAccessoryHolderSlotSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0611)\":{tag:\"(300A,0611)\",vr:\"LO\",name:\"RTAccessoryHolderSlotID\",vm:\"1\",version:\"DICOM\"},\"(300A,0612)\":{tag:\"(300A,0612)\",vr:\"FD\",name:\"RTAccessoryHolderSlotDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0613)\":{tag:\"(300A,0613)\",vr:\"FD\",name:\"RTAccessorySlotDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0614)\":{tag:\"(300A,0614)\",vr:\"SQ\",name:\"RTAccessoryHolderDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0615)\":{tag:\"(300A,0615)\",vr:\"LO\",name:\"RTAccessoryDeviceSlotID\",vm:\"1\",version:\"DICOM\"},\"(300A,0616)\":{tag:\"(300A,0616)\",vr:\"SQ\",name:\"RTRadiationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0617)\":{tag:\"(300A,0617)\",vr:\"SQ\",name:\"RadiationDoseSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0618)\":{tag:\"(300A,0618)\",vr:\"SQ\",name:\"RadiationDoseIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0619)\":{tag:\"(300A,0619)\",vr:\"LO\",name:\"RadiationDoseIdentificationLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,061A)\":{tag:\"(300A,061A)\",vr:\"CS\",name:\"ReferenceDoseType\",vm:\"1\",version:\"DICOM\"},\"(300A,061B)\":{tag:\"(300A,061B)\",vr:\"CS\",name:\"PrimaryDoseValueIndicator\",vm:\"1\",version:\"DICOM\"},\"(300A,061C)\":{tag:\"(300A,061C)\",vr:\"SQ\",name:\"DoseValuesSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,061D)\":{tag:\"(300A,061D)\",vr:\"CS\",name:\"DoseValuePurpose\",vm:\"1-n\",version:\"DICOM\"},\"(300A,061E)\":{tag:\"(300A,061E)\",vr:\"FD\",name:\"ReferenceDosePointCoordinates\",vm:\"3\",version:\"DICOM\"},\"(300A,061F)\":{tag:\"(300A,061F)\",vr:\"SQ\",name:\"RadiationDoseValuesParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0620)\":{tag:\"(300A,0620)\",vr:\"SQ\",name:\"MetersetToDoseMappingSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0621)\":{tag:\"(300A,0621)\",vr:\"SQ\",name:\"ExpectedInVivoMeasurementValuesSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0622)\":{tag:\"(300A,0622)\",vr:\"US\",name:\"ExpectedInVivoMeasurementValueIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0623)\":{tag:\"(300A,0623)\",vr:\"LO\",name:\"RadiationDoseInVivoMeasurementLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,0624)\":{tag:\"(300A,0624)\",vr:\"FD\",name:\"RadiationDoseCentralAxisDisplacement\",vm:\"2\",version:\"DICOM\"},\"(300A,0625)\":{tag:\"(300A,0625)\",vr:\"FD\",name:\"RadiationDoseValue\",vm:\"1\",version:\"DICOM\"},\"(300A,0626)\":{tag:\"(300A,0626)\",vr:\"FD\",name:\"RadiationDoseSourceToSkinDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0627)\":{tag:\"(300A,0627)\",vr:\"FD\",name:\"RadiationDoseMeasurementPointCoordinates\",vm:\"3\",version:\"DICOM\"},\"(300A,0628)\":{tag:\"(300A,0628)\",vr:\"FD\",name:\"RadiationDoseSourceToExternalContourDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0629)\":{tag:\"(300A,0629)\",vr:\"SQ\",name:\"RTToleranceSetSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,062A)\":{tag:\"(300A,062A)\",vr:\"LO\",name:\"RTToleranceSetLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,062B)\":{tag:\"(300A,062B)\",vr:\"SQ\",name:\"AttributeToleranceValuesSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,062C)\":{tag:\"(300A,062C)\",vr:\"FD\",name:\"ToleranceValue\",vm:\"1\",version:\"DICOM\"},\"(300A,062D)\":{tag:\"(300A,062D)\",vr:\"SQ\",name:\"PatientSupportPositionToleranceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,062E)\":{tag:\"(300A,062E)\",vr:\"FD\",name:\"TreatmentTimeLimit\",vm:\"1\",version:\"DICOM\"},\"(300A,062F)\":{tag:\"(300A,062F)\",vr:\"SQ\",name:\"CArmPhotonElectronControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0630)\":{tag:\"(300A,0630)\",vr:\"SQ\",name:\"ReferencedRTRadiationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0631)\":{tag:\"(300A,0631)\",vr:\"SQ\",name:\"ReferencedRTInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0632)\":{tag:\"(300A,0632)\",vr:\"SQ\",name:\"ReferencedRTPatientSetupSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0634)\":{tag:\"(300A,0634)\",vr:\"FD\",name:\"SourceToPatientSurfaceDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0635)\":{tag:\"(300A,0635)\",vr:\"SQ\",name:\"TreatmentMachineSpecialModeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0636)\":{tag:\"(300A,0636)\",vr:\"US\",name:\"IntendedNumberOfFractions\",vm:\"1\",version:\"DICOM\"},\"(300A,0637)\":{tag:\"(300A,0637)\",vr:\"CS\",name:\"RTRadiationSetIntent\",vm:\"1\",version:\"DICOM\"},\"(300A,0638)\":{tag:\"(300A,0638)\",vr:\"CS\",name:\"RTRadiationPhysicalAndGeometricContentDetailFlag\",vm:\"1\",version:\"DICOM\"},\"(300A,0639)\":{tag:\"(300A,0639)\",vr:\"CS\",name:\"RTRecordFlag\",vm:\"1\",version:\"DICOM\"},\"(300A,063A)\":{tag:\"(300A,063A)\",vr:\"SQ\",name:\"TreatmentDeviceIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,063B)\":{tag:\"(300A,063B)\",vr:\"SQ\",name:\"ReferencedRTPhysicianIntentSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,063C)\":{tag:\"(300A,063C)\",vr:\"FD\",name:\"CumulativeMeterset\",vm:\"1\",version:\"DICOM\"},\"(300A,063D)\":{tag:\"(300A,063D)\",vr:\"FD\",name:\"DeliveryRate\",vm:\"1\",version:\"DICOM\"},\"(300A,063E)\":{tag:\"(300A,063E)\",vr:\"SQ\",name:\"DeliveryRateUnitSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,063F)\":{tag:\"(300A,063F)\",vr:\"SQ\",name:\"TreatmentPositionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0640)\":{tag:\"(300A,0640)\",vr:\"FD\",name:\"RadiationSourceAxisDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0641)\":{tag:\"(300A,0641)\",vr:\"US\",name:\"NumberOfRTBeamLimitingDevices\",vm:\"1\",version:\"DICOM\"},\"(300A,0642)\":{tag:\"(300A,0642)\",vr:\"FD\",name:\"RTBeamLimitingDeviceProximalDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0643)\":{tag:\"(300A,0643)\",vr:\"FD\",name:\"RTBeamLimitingDeviceDistalDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0644)\":{tag:\"(300A,0644)\",vr:\"SQ\",name:\"ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0645)\":{tag:\"(300A,0645)\",vr:\"FD\",name:\"BeamModifierOrientationAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0646)\":{tag:\"(300A,0646)\",vr:\"SQ\",name:\"FixedRTBeamDelimiterDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0647)\":{tag:\"(300A,0647)\",vr:\"SQ\",name:\"ParallelRTBeamDelimiterDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0648)\":{tag:\"(300A,0648)\",vr:\"US\",name:\"NumberOfParallelRTBeamDelimiters\",vm:\"1\",version:\"DICOM\"},\"(300A,0649)\":{tag:\"(300A,0649)\",vr:\"FD\",name:\"ParallelRTBeamDelimiterBoundaries\",vm:\"2-n\",version:\"DICOM\"},\"(300A,064A)\":{tag:\"(300A,064A)\",vr:\"FD\",name:\"ParallelRTBeamDelimiterPositions\",vm:\"2-n\",version:\"DICOM\"},\"(300A,064B)\":{tag:\"(300A,064B)\",vr:\"FD\",name:\"RTBeamLimitingDeviceOffset\",vm:\"2\",version:\"DICOM\"},\"(300A,064C)\":{tag:\"(300A,064C)\",vr:\"SQ\",name:\"RTBeamDelimiterGeometrySequence\",vm:\"1\",version:\"DICOM\"},\"(300A,064D)\":{tag:\"(300A,064D)\",vr:\"SQ\",name:\"RTBeamLimitingDeviceDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,064E)\":{tag:\"(300A,064E)\",vr:\"CS\",name:\"ParallelRTBeamDelimiterOpeningMode\",vm:\"1\",version:\"DICOM\"},\"(300A,064F)\":{tag:\"(300A,064F)\",vr:\"CS\",name:\"ParallelRTBeamDelimiterLeafMountingSide\",vm:\"1-n\",version:\"DICOM\"},\"(300A,0650)\":{tag:\"(300A,0650)\",vr:\"UI\",name:\"PatientSetupUID\",vm:\"1\",version:\"DICOM\"},\"(300A,0651)\":{tag:\"(300A,0651)\",vr:\"SQ\",name:\"WedgeDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0652)\":{tag:\"(300A,0652)\",vr:\"FD\",name:\"RadiationBeamWedgeAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0653)\":{tag:\"(300A,0653)\",vr:\"FD\",name:\"RadiationBeamWedgeThinEdgeDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0654)\":{tag:\"(300A,0654)\",vr:\"FD\",name:\"RadiationBeamEffectiveWedgeAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,0655)\":{tag:\"(300A,0655)\",vr:\"US\",name:\"NumberOfWedgePositions\",vm:\"1\",version:\"DICOM\"},\"(300A,0656)\":{tag:\"(300A,0656)\",vr:\"SQ\",name:\"RTBeamLimitingDeviceOpeningSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0657)\":{tag:\"(300A,0657)\",vr:\"US\",name:\"NumberOfRTBeamLimitingDeviceOpenings\",vm:\"1\",version:\"DICOM\"},\"(300A,0658)\":{tag:\"(300A,0658)\",vr:\"SQ\",name:\"RadiationDosimeterUnitSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0659)\":{tag:\"(300A,0659)\",vr:\"SQ\",name:\"RTDeviceDistanceReferenceLocationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,065A)\":{tag:\"(300A,065A)\",vr:\"SQ\",name:\"RadiationDeviceConfigurationAndCommissioningKeySequence\",vm:\"1\",version:\"DICOM\"},\"(300A,065B)\":{tag:\"(300A,065B)\",vr:\"SQ\",name:\"PatientSupportPositionParameterSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,065C)\":{tag:\"(300A,065C)\",vr:\"CS\",name:\"PatientSupportPositionSpecificationMethod\",vm:\"1\",version:\"DICOM\"},\"(300A,065D)\":{tag:\"(300A,065D)\",vr:\"SQ\",name:\"PatientSupportPositionDeviceParameterSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,065E)\":{tag:\"(300A,065E)\",vr:\"US\",name:\"DeviceOrderIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,065F)\":{tag:\"(300A,065F)\",vr:\"US\",name:\"PatientSupportPositionParameterOrderIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0660)\":{tag:\"(300A,0660)\",vr:\"SQ\",name:\"PatientSupportPositionDeviceToleranceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0661)\":{tag:\"(300A,0661)\",vr:\"US\",name:\"PatientSupportPositionToleranceOrderIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0662)\":{tag:\"(300A,0662)\",vr:\"SQ\",name:\"CompensatorDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0663)\":{tag:\"(300A,0663)\",vr:\"CS\",name:\"CompensatorMapOrientation\",vm:\"1\",version:\"DICOM\"},\"(300A,0664)\":{tag:\"(300A,0664)\",vr:\"OF\",name:\"CompensatorProximalThicknessMap\",vm:\"1\",version:\"DICOM\"},\"(300A,0665)\":{tag:\"(300A,0665)\",vr:\"OF\",name:\"CompensatorDistalThicknessMap\",vm:\"1\",version:\"DICOM\"},\"(300A,0666)\":{tag:\"(300A,0666)\",vr:\"FD\",name:\"CompensatorBasePlaneOffset\",vm:\"1\",version:\"DICOM\"},\"(300A,0667)\":{tag:\"(300A,0667)\",vr:\"SQ\",name:\"CompensatorShapeFabricationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0668)\":{tag:\"(300A,0668)\",vr:\"SQ\",name:\"CompensatorShapeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0669)\":{tag:\"(300A,0669)\",vr:\"FD\",name:\"RadiationBeamCompensatorMillingToolDiameter\",vm:\"1\",version:\"DICOM\"},\"(300A,066A)\":{tag:\"(300A,066A)\",vr:\"SQ\",name:\"BlockDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,066B)\":{tag:\"(300A,066B)\",vr:\"OF\",name:\"BlockEdgeData\",vm:\"1\",version:\"DICOM\"},\"(300A,066C)\":{tag:\"(300A,066C)\",vr:\"CS\",name:\"BlockOrientation\",vm:\"1\",version:\"DICOM\"},\"(300A,066D)\":{tag:\"(300A,066D)\",vr:\"FD\",name:\"RadiationBeamBlockThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,066E)\":{tag:\"(300A,066E)\",vr:\"FD\",name:\"RadiationBeamBlockSlabThickness\",vm:\"1\",version:\"DICOM\"},\"(300A,066F)\":{tag:\"(300A,066F)\",vr:\"SQ\",name:\"BlockEdgeDataSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0670)\":{tag:\"(300A,0670)\",vr:\"US\",name:\"NumberOfRTAccessoryHolders\",vm:\"1\",version:\"DICOM\"},\"(300A,0671)\":{tag:\"(300A,0671)\",vr:\"SQ\",name:\"GeneralAccessoryDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0672)\":{tag:\"(300A,0672)\",vr:\"US\",name:\"NumberOfGeneralAccessories\",vm:\"1\",version:\"DICOM\"},\"(300A,0673)\":{tag:\"(300A,0673)\",vr:\"SQ\",name:\"BolusDefinitionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0674)\":{tag:\"(300A,0674)\",vr:\"US\",name:\"NumberOfBoluses\",vm:\"1\",version:\"DICOM\"},\"(300A,0675)\":{tag:\"(300A,0675)\",vr:\"UI\",name:\"EquipmentFrameOfReferenceUID\",vm:\"1\",version:\"DICOM\"},\"(300A,0676)\":{tag:\"(300A,0676)\",vr:\"ST\",name:\"EquipmentFrameOfReferenceDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0677)\":{tag:\"(300A,0677)\",vr:\"SQ\",name:\"EquipmentReferencePointCoordinatesSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0678)\":{tag:\"(300A,0678)\",vr:\"SQ\",name:\"EquipmentReferencePointCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0679)\":{tag:\"(300A,0679)\",vr:\"FD\",name:\"RTBeamLimitingDeviceAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,067A)\":{tag:\"(300A,067A)\",vr:\"FD\",name:\"SourceRollAngle\",vm:\"1\",version:\"DICOM\"},\"(300A,067B)\":{tag:\"(300A,067B)\",vr:\"SQ\",name:\"RadiationGenerationModeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,067C)\":{tag:\"(300A,067C)\",vr:\"SH\",name:\"RadiationGenerationModeLabel\",vm:\"1\",version:\"DICOM\"},\"(300A,067D)\":{tag:\"(300A,067D)\",vr:\"ST\",name:\"RadiationGenerationModeDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,067E)\":{tag:\"(300A,067E)\",vr:\"SQ\",name:\"RadiationGenerationModeMachineCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,067F)\":{tag:\"(300A,067F)\",vr:\"SQ\",name:\"RadiationTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0680)\":{tag:\"(300A,0680)\",vr:\"DS\",name:\"NominalEnergy\",vm:\"1\",version:\"DICOM\"},\"(300A,0681)\":{tag:\"(300A,0681)\",vr:\"DS\",name:\"MinimumNominalEnergy\",vm:\"1\",version:\"DICOM\"},\"(300A,0682)\":{tag:\"(300A,0682)\",vr:\"DS\",name:\"MaximumNominalEnergy\",vm:\"1\",version:\"DICOM\"},\"(300A,0683)\":{tag:\"(300A,0683)\",vr:\"SQ\",name:\"RadiationFluenceModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0684)\":{tag:\"(300A,0684)\",vr:\"SQ\",name:\"EnergyUnitCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0685)\":{tag:\"(300A,0685)\",vr:\"US\",name:\"NumberOfRadiationGenerationModes\",vm:\"1\",version:\"DICOM\"},\"(300A,0686)\":{tag:\"(300A,0686)\",vr:\"SQ\",name:\"PatientSupportDevicesSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0687)\":{tag:\"(300A,0687)\",vr:\"US\",name:\"NumberOfPatientSupportDevices\",vm:\"1\",version:\"DICOM\"},\"(300A,0688)\":{tag:\"(300A,0688)\",vr:\"FD\",name:\"RTBeamModifierDefinitionDistance\",vm:\"1\",version:\"DICOM\"},\"(300A,0689)\":{tag:\"(300A,0689)\",vr:\"SQ\",name:\"BeamAreaLimitSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,068A)\":{tag:\"(300A,068A)\",vr:\"SQ\",name:\"ReferencedRTPrescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0700)\":{tag:\"(300A,0700)\",vr:\"UI\",name:\"TreatmentSessionUID\",vm:\"1\",version:\"DICOM\"},\"(300A,0701)\":{tag:\"(300A,0701)\",vr:\"CS\",name:\"RTRadiationUsage\",vm:\"1\",version:\"DICOM\"},\"(300A,0702)\":{tag:\"(300A,0702)\",vr:\"SQ\",name:\"ReferencedRTRadiationSetSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0703)\":{tag:\"(300A,0703)\",vr:\"SQ\",name:\"ReferencedRTRadiationRecordSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0704)\":{tag:\"(300A,0704)\",vr:\"US\",name:\"RTRadiationSetDeliveryNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0705)\":{tag:\"(300A,0705)\",vr:\"US\",name:\"ClinicalFractionNumber\",vm:\"1\",version:\"DICOM\"},\"(300A,0706)\":{tag:\"(300A,0706)\",vr:\"CS\",name:\"RTTreatmentFractionCompletionStatus\",vm:\"1\",version:\"DICOM\"},\"(300A,0707)\":{tag:\"(300A,0707)\",vr:\"CS\",name:\"RTRadiationSetUsage\",vm:\"1\",version:\"DICOM\"},\"(300A,0708)\":{tag:\"(300A,0708)\",vr:\"CS\",name:\"TreatmentDeliveryContinuationFlag\",vm:\"1\",version:\"DICOM\"},\"(300A,0709)\":{tag:\"(300A,0709)\",vr:\"CS\",name:\"TreatmentRecordContentOrigin\",vm:\"1\",version:\"DICOM\"},\"(300A,0714)\":{tag:\"(300A,0714)\",vr:\"CS\",name:\"RTTreatmentTerminationStatus\",vm:\"1\",version:\"DICOM\"},\"(300A,0715)\":{tag:\"(300A,0715)\",vr:\"SQ\",name:\"RTTreatmentTerminationReasonCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0716)\":{tag:\"(300A,0716)\",vr:\"SQ\",name:\"MachineSpecificTreatmentTerminationCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0722)\":{tag:\"(300A,0722)\",vr:\"SQ\",name:\"RTRadiationSalvageRecordControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0723)\":{tag:\"(300A,0723)\",vr:\"CS\",name:\"StartingMetersetValueKnownFlag\",vm:\"1\",version:\"DICOM\"},\"(300A,0730)\":{tag:\"(300A,0730)\",vr:\"ST\",name:\"TreatmentTerminationDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0731)\":{tag:\"(300A,0731)\",vr:\"SQ\",name:\"TreatmentToleranceViolationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0732)\":{tag:\"(300A,0732)\",vr:\"CS\",name:\"TreatmentToleranceViolationCategory\",vm:\"1\",version:\"DICOM\"},\"(300A,0733)\":{tag:\"(300A,0733)\",vr:\"SQ\",name:\"TreatmentToleranceViolationAttributeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0734)\":{tag:\"(300A,0734)\",vr:\"ST\",name:\"TreatmentToleranceViolationDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0735)\":{tag:\"(300A,0735)\",vr:\"ST\",name:\"TreatmentToleranceViolationIdentification\",vm:\"1\",version:\"DICOM\"},\"(300A,0736)\":{tag:\"(300A,0736)\",vr:\"DT\",name:\"TreatmentToleranceViolationDateTime\",vm:\"1\",version:\"DICOM\"},\"(300A,073A)\":{tag:\"(300A,073A)\",vr:\"DT\",name:\"RecordedRTControlPointDateTime\",vm:\"1\",version:\"DICOM\"},\"(300A,073B)\":{tag:\"(300A,073B)\",vr:\"US\",name:\"ReferencedRadiationRTControlPointIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,073E)\":{tag:\"(300A,073E)\",vr:\"SQ\",name:\"AlternateValueSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,073F)\":{tag:\"(300A,073F)\",vr:\"SQ\",name:\"ConfirmationSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0740)\":{tag:\"(300A,0740)\",vr:\"SQ\",name:\"InterlockSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0741)\":{tag:\"(300A,0741)\",vr:\"DT\",name:\"InterlockDateTime\",vm:\"1\",version:\"DICOM\"},\"(300A,0742)\":{tag:\"(300A,0742)\",vr:\"ST\",name:\"InterlockDescription\",vm:\"1\",version:\"DICOM\"},\"(300A,0743)\":{tag:\"(300A,0743)\",vr:\"SQ\",name:\"InterlockOriginatingDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0744)\":{tag:\"(300A,0744)\",vr:\"SQ\",name:\"InterlockCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0745)\":{tag:\"(300A,0745)\",vr:\"SQ\",name:\"InterlockResolutionCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0746)\":{tag:\"(300A,0746)\",vr:\"SQ\",name:\"InterlockResolutionUserSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0760)\":{tag:\"(300A,0760)\",vr:\"DT\",name:\"OverrideDateTime\",vm:\"1\",version:\"DICOM\"},\"(300A,0761)\":{tag:\"(300A,0761)\",vr:\"SQ\",name:\"TreatmentToleranceViolationTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0762)\":{tag:\"(300A,0762)\",vr:\"SQ\",name:\"TreatmentToleranceViolationCauseCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0772)\":{tag:\"(300A,0772)\",vr:\"SQ\",name:\"MeasuredMetersetToDoseMappingSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0773)\":{tag:\"(300A,0773)\",vr:\"US\",name:\"ReferencedExpectedInVivoMeasurementValueIndex\",vm:\"1\",version:\"DICOM\"},\"(300A,0774)\":{tag:\"(300A,0774)\",vr:\"SQ\",name:\"DoseMeasurementDeviceCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0780)\":{tag:\"(300A,0780)\",vr:\"SQ\",name:\"AdditionalParameterRecordingInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(300A,0783)\":{tag:\"(300A,0783)\",vr:\"ST\",name:\"InterlockOriginDescription\",vm:\"1\",version:\"DICOM\"},\"(300C,0002)\":{tag:\"(300C,0002)\",vr:\"SQ\",name:\"ReferencedRTPlanSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0004)\":{tag:\"(300C,0004)\",vr:\"SQ\",name:\"ReferencedBeamSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0006)\":{tag:\"(300C,0006)\",vr:\"IS\",name:\"ReferencedBeamNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0007)\":{tag:\"(300C,0007)\",vr:\"IS\",name:\"ReferencedReferenceImageNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0008)\":{tag:\"(300C,0008)\",vr:\"DS\",name:\"StartCumulativeMetersetWeight\",vm:\"1\",version:\"DICOM\"},\"(300C,0009)\":{tag:\"(300C,0009)\",vr:\"DS\",name:\"EndCumulativeMetersetWeight\",vm:\"1\",version:\"DICOM\"},\"(300C,000A)\":{tag:\"(300C,000A)\",vr:\"SQ\",name:\"ReferencedBrachyApplicationSetupSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,000C)\":{tag:\"(300C,000C)\",vr:\"IS\",name:\"ReferencedBrachyApplicationSetupNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,000E)\":{tag:\"(300C,000E)\",vr:\"IS\",name:\"ReferencedSourceNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0020)\":{tag:\"(300C,0020)\",vr:\"SQ\",name:\"ReferencedFractionGroupSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0022)\":{tag:\"(300C,0022)\",vr:\"IS\",name:\"ReferencedFractionGroupNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0040)\":{tag:\"(300C,0040)\",vr:\"SQ\",name:\"ReferencedVerificationImageSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0042)\":{tag:\"(300C,0042)\",vr:\"SQ\",name:\"ReferencedReferenceImageSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0050)\":{tag:\"(300C,0050)\",vr:\"SQ\",name:\"ReferencedDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0051)\":{tag:\"(300C,0051)\",vr:\"IS\",name:\"ReferencedDoseReferenceNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0055)\":{tag:\"(300C,0055)\",vr:\"SQ\",name:\"BrachyReferencedDoseReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0060)\":{tag:\"(300C,0060)\",vr:\"SQ\",name:\"ReferencedStructureSetSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,006A)\":{tag:\"(300C,006A)\",vr:\"IS\",name:\"ReferencedPatientSetupNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0080)\":{tag:\"(300C,0080)\",vr:\"SQ\",name:\"ReferencedDoseSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,00A0)\":{tag:\"(300C,00A0)\",vr:\"IS\",name:\"ReferencedToleranceTableNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,00B0)\":{tag:\"(300C,00B0)\",vr:\"SQ\",name:\"ReferencedBolusSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,00C0)\":{tag:\"(300C,00C0)\",vr:\"IS\",name:\"ReferencedWedgeNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,00D0)\":{tag:\"(300C,00D0)\",vr:\"IS\",name:\"ReferencedCompensatorNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,00E0)\":{tag:\"(300C,00E0)\",vr:\"IS\",name:\"ReferencedBlockNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,00F0)\":{tag:\"(300C,00F0)\",vr:\"IS\",name:\"ReferencedControlPointIndex\",vm:\"1\",version:\"DICOM\"},\"(300C,00F2)\":{tag:\"(300C,00F2)\",vr:\"SQ\",name:\"ReferencedControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,00F4)\":{tag:\"(300C,00F4)\",vr:\"IS\",name:\"ReferencedStartControlPointIndex\",vm:\"1\",version:\"DICOM\"},\"(300C,00F6)\":{tag:\"(300C,00F6)\",vr:\"IS\",name:\"ReferencedStopControlPointIndex\",vm:\"1\",version:\"DICOM\"},\"(300C,0100)\":{tag:\"(300C,0100)\",vr:\"IS\",name:\"ReferencedRangeShifterNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0102)\":{tag:\"(300C,0102)\",vr:\"IS\",name:\"ReferencedLateralSpreadingDeviceNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0104)\":{tag:\"(300C,0104)\",vr:\"IS\",name:\"ReferencedRangeModulatorNumber\",vm:\"1\",version:\"DICOM\"},\"(300C,0111)\":{tag:\"(300C,0111)\",vr:\"SQ\",name:\"OmittedBeamTaskSequence\",vm:\"1\",version:\"DICOM\"},\"(300C,0112)\":{tag:\"(300C,0112)\",vr:\"CS\",name:\"ReasonForOmission\",vm:\"1\",version:\"DICOM\"},\"(300C,0113)\":{tag:\"(300C,0113)\",vr:\"LO\",name:\"ReasonForOmissionDescription\",vm:\"1\",version:\"DICOM\"},\"(300E,0002)\":{tag:\"(300E,0002)\",vr:\"CS\",name:\"ApprovalStatus\",vm:\"1\",version:\"DICOM\"},\"(300E,0004)\":{tag:\"(300E,0004)\",vr:\"DA\",name:\"ReviewDate\",vm:\"1\",version:\"DICOM\"},\"(300E,0005)\":{tag:\"(300E,0005)\",vr:\"TM\",name:\"ReviewTime\",vm:\"1\",version:\"DICOM\"},\"(300E,0008)\":{tag:\"(300E,0008)\",vr:\"PN\",name:\"ReviewerName\",vm:\"1\",version:\"DICOM\"},\"(4010,0001)\":{tag:\"(4010,0001)\",vr:\"CS\",name:\"LowEnergyDetectors\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,0002)\":{tag:\"(4010,0002)\",vr:\"CS\",name:\"HighEnergyDetectors\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,0004)\":{tag:\"(4010,0004)\",vr:\"SQ\",name:\"DetectorGeometrySequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1001)\":{tag:\"(4010,1001)\",vr:\"SQ\",name:\"ThreatROIVoxelSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1004)\":{tag:\"(4010,1004)\",vr:\"FL\",name:\"ThreatROIBase\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,1005)\":{tag:\"(4010,1005)\",vr:\"FL\",name:\"ThreatROIExtents\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,1006)\":{tag:\"(4010,1006)\",vr:\"OB\",name:\"ThreatROIBitmap\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1007)\":{tag:\"(4010,1007)\",vr:\"SH\",name:\"RouteSegmentID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1008)\":{tag:\"(4010,1008)\",vr:\"CS\",name:\"GantryType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1009)\":{tag:\"(4010,1009)\",vr:\"CS\",name:\"OOIOwnerType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,100A)\":{tag:\"(4010,100A)\",vr:\"SQ\",name:\"RouteSegmentSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1010)\":{tag:\"(4010,1010)\",vr:\"US\",name:\"PotentialThreatObjectID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1011)\":{tag:\"(4010,1011)\",vr:\"SQ\",name:\"ThreatSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1012)\":{tag:\"(4010,1012)\",vr:\"CS\",name:\"ThreatCategory\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1013)\":{tag:\"(4010,1013)\",vr:\"LT\",name:\"ThreatCategoryDescription\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1014)\":{tag:\"(4010,1014)\",vr:\"CS\",name:\"ATDAbilityAssessment\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1015)\":{tag:\"(4010,1015)\",vr:\"CS\",name:\"ATDAssessmentFlag\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1016)\":{tag:\"(4010,1016)\",vr:\"FL\",name:\"ATDAssessmentProbability\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1017)\":{tag:\"(4010,1017)\",vr:\"FL\",name:\"Mass\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1018)\":{tag:\"(4010,1018)\",vr:\"FL\",name:\"Density\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1019)\":{tag:\"(4010,1019)\",vr:\"FL\",name:\"ZEffective\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,101A)\":{tag:\"(4010,101A)\",vr:\"SH\",name:\"BoardingPassID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,101B)\":{tag:\"(4010,101B)\",vr:\"FL\",name:\"CenterOfMass\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,101C)\":{tag:\"(4010,101C)\",vr:\"FL\",name:\"CenterOfPTO\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,101D)\":{tag:\"(4010,101D)\",vr:\"FL\",name:\"BoundingPolygon\",vm:\"6-n\",version:\"DICOM/DICOS\"},\"(4010,101E)\":{tag:\"(4010,101E)\",vr:\"SH\",name:\"RouteSegmentStartLocationID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,101F)\":{tag:\"(4010,101F)\",vr:\"SH\",name:\"RouteSegmentEndLocationID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1020)\":{tag:\"(4010,1020)\",vr:\"CS\",name:\"RouteSegmentLocationIDType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1021)\":{tag:\"(4010,1021)\",vr:\"CS\",name:\"AbortReason\",vm:\"1-n\",version:\"DICOM/DICOS\"},\"(4010,1023)\":{tag:\"(4010,1023)\",vr:\"FL\",name:\"VolumeOfPTO\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1024)\":{tag:\"(4010,1024)\",vr:\"CS\",name:\"AbortFlag\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1025)\":{tag:\"(4010,1025)\",vr:\"DT\",name:\"RouteSegmentStartTime\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1026)\":{tag:\"(4010,1026)\",vr:\"DT\",name:\"RouteSegmentEndTime\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1027)\":{tag:\"(4010,1027)\",vr:\"CS\",name:\"TDRType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1028)\":{tag:\"(4010,1028)\",vr:\"CS\",name:\"InternationalRouteSegment\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1029)\":{tag:\"(4010,1029)\",vr:\"LO\",name:\"ThreatDetectionAlgorithmandVersion\",vm:\"1-n\",version:\"DICOM/DICOS\"},\"(4010,102A)\":{tag:\"(4010,102A)\",vr:\"SH\",name:\"AssignedLocation\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,102B)\":{tag:\"(4010,102B)\",vr:\"DT\",name:\"AlarmDecisionTime\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1031)\":{tag:\"(4010,1031)\",vr:\"CS\",name:\"AlarmDecision\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1033)\":{tag:\"(4010,1033)\",vr:\"US\",name:\"NumberOfTotalObjects\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1034)\":{tag:\"(4010,1034)\",vr:\"US\",name:\"NumberOfAlarmObjects\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1037)\":{tag:\"(4010,1037)\",vr:\"SQ\",name:\"PTORepresentationSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1038)\":{tag:\"(4010,1038)\",vr:\"SQ\",name:\"ATDAssessmentSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1039)\":{tag:\"(4010,1039)\",vr:\"CS\",name:\"TIPType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,103A)\":{tag:\"(4010,103A)\",vr:\"CS\",name:\"DICOSVersion\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1041)\":{tag:\"(4010,1041)\",vr:\"DT\",name:\"OOIOwnerCreationTime\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1042)\":{tag:\"(4010,1042)\",vr:\"CS\",name:\"OOIType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1043)\":{tag:\"(4010,1043)\",vr:\"FL\",name:\"OOISize\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,1044)\":{tag:\"(4010,1044)\",vr:\"CS\",name:\"AcquisitionStatus\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1045)\":{tag:\"(4010,1045)\",vr:\"SQ\",name:\"BasisMaterialsCodeSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1046)\":{tag:\"(4010,1046)\",vr:\"CS\",name:\"PhantomType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1047)\":{tag:\"(4010,1047)\",vr:\"SQ\",name:\"OOIOwnerSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1048)\":{tag:\"(4010,1048)\",vr:\"CS\",name:\"ScanType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1051)\":{tag:\"(4010,1051)\",vr:\"LO\",name:\"ItineraryID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1052)\":{tag:\"(4010,1052)\",vr:\"SH\",name:\"ItineraryIDType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1053)\":{tag:\"(4010,1053)\",vr:\"LO\",name:\"ItineraryIDAssigningAuthority\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1054)\":{tag:\"(4010,1054)\",vr:\"SH\",name:\"RouteID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1055)\":{tag:\"(4010,1055)\",vr:\"SH\",name:\"RouteIDAssigningAuthority\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1056)\":{tag:\"(4010,1056)\",vr:\"CS\",name:\"InboundArrivalType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1058)\":{tag:\"(4010,1058)\",vr:\"SH\",name:\"CarrierID\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1059)\":{tag:\"(4010,1059)\",vr:\"CS\",name:\"CarrierIDAssigningAuthority\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1060)\":{tag:\"(4010,1060)\",vr:\"FL\",name:\"SourceOrientation\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,1061)\":{tag:\"(4010,1061)\",vr:\"FL\",name:\"SourcePosition\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,1062)\":{tag:\"(4010,1062)\",vr:\"FL\",name:\"BeltHeight\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1064)\":{tag:\"(4010,1064)\",vr:\"SQ\",name:\"AlgorithmRoutingCodeSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1067)\":{tag:\"(4010,1067)\",vr:\"CS\",name:\"TransportClassification\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1068)\":{tag:\"(4010,1068)\",vr:\"LT\",name:\"OOITypeDescriptor\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1069)\":{tag:\"(4010,1069)\",vr:\"FL\",name:\"TotalProcessingTime\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,106C)\":{tag:\"(4010,106C)\",vr:\"OB\",name:\"DetectorCalibrationData\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,106D)\":{tag:\"(4010,106D)\",vr:\"CS\",name:\"AdditionalScreeningPerformed\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,106E)\":{tag:\"(4010,106E)\",vr:\"CS\",name:\"AdditionalInspectionSelectionCriteria\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,106F)\":{tag:\"(4010,106F)\",vr:\"SQ\",name:\"AdditionalInspectionMethodSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1070)\":{tag:\"(4010,1070)\",vr:\"CS\",name:\"AITDeviceType\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1071)\":{tag:\"(4010,1071)\",vr:\"SQ\",name:\"QRMeasurementsSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1072)\":{tag:\"(4010,1072)\",vr:\"SQ\",name:\"TargetMaterialSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1073)\":{tag:\"(4010,1073)\",vr:\"FD\",name:\"SNRThreshold\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1075)\":{tag:\"(4010,1075)\",vr:\"DS\",name:\"ImageScaleRepresentation\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1076)\":{tag:\"(4010,1076)\",vr:\"SQ\",name:\"ReferencedPTOSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1077)\":{tag:\"(4010,1077)\",vr:\"SQ\",name:\"ReferencedTDRInstanceSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1078)\":{tag:\"(4010,1078)\",vr:\"ST\",name:\"PTOLocationDescription\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,1079)\":{tag:\"(4010,1079)\",vr:\"SQ\",name:\"AnomalyLocatorIndicatorSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,107A)\":{tag:\"(4010,107A)\",vr:\"FL\",name:\"AnomalyLocatorIndicator\",vm:\"3\",version:\"DICOM/DICOS\"},\"(4010,107B)\":{tag:\"(4010,107B)\",vr:\"SQ\",name:\"PTORegionSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,107C)\":{tag:\"(4010,107C)\",vr:\"CS\",name:\"InspectionSelectionCriteria\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,107D)\":{tag:\"(4010,107D)\",vr:\"SQ\",name:\"SecondaryInspectionMethodSequence\",vm:\"1\",version:\"DICOM/DICOS\"},\"(4010,107E)\":{tag:\"(4010,107E)\",vr:\"DS\",name:\"PRCSToRCSOrientation\",vm:\"6\",version:\"DICOM/DICOS\"},\"(3010,0001)\":{tag:\"(3010,0001)\",vr:\"SQ\",name:\"RadiobiologicalDoseEffectSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0002)\":{tag:\"(3010,0002)\",vr:\"CS\",name:\"RadiobiologicalDoseEffectFlag\",vm:\"1\",version:\"DICOM\"},\"(3010,0003)\":{tag:\"(3010,0003)\",vr:\"SQ\",name:\"EffectiveDoseCalculationMethodCategoryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0004)\":{tag:\"(3010,0004)\",vr:\"SQ\",name:\"EffectiveDoseCalculationMethodCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0005)\":{tag:\"(3010,0005)\",vr:\"LO\",name:\"EffectiveDoseCalculationMethodDescription\",vm:\"1\",version:\"DICOM\"},\"(3010,0006)\":{tag:\"(3010,0006)\",vr:\"UI\",name:\"ConceptualVolumeUID\",vm:\"1\",version:\"DICOM\"},\"(3010,0007)\":{tag:\"(3010,0007)\",vr:\"SQ\",name:\"OriginatingSOPInstanceReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0008)\":{tag:\"(3010,0008)\",vr:\"SQ\",name:\"ConceptualVolumeConstituentSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0009)\":{tag:\"(3010,0009)\",vr:\"SQ\",name:\"EquivalentConceptualVolumeInstanceReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,000A)\":{tag:\"(3010,000A)\",vr:\"SQ\",name:\"EquivalentConceptualVolumesSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,000B)\":{tag:\"(3010,000B)\",vr:\"UI\",name:\"ReferencedConceptualVolumeUID\",vm:\"1\",version:\"DICOM\"},\"(3010,000C)\":{tag:\"(3010,000C)\",vr:\"UT\",name:\"ConceptualVolumeCombinationExpression\",vm:\"1\",version:\"DICOM\"},\"(3010,000D)\":{tag:\"(3010,000D)\",vr:\"US\",name:\"ConceptualVolumeConstituentIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,000E)\":{tag:\"(3010,000E)\",vr:\"CS\",name:\"ConceptualVolumeCombinationFlag\",vm:\"1\",version:\"DICOM\"},\"(3010,000F)\":{tag:\"(3010,000F)\",vr:\"ST\",name:\"ConceptualVolumeCombinationDescription\",vm:\"1\",version:\"DICOM\"},\"(3010,0010)\":{tag:\"(3010,0010)\",vr:\"CS\",name:\"ConceptualVolumeSegmentationDefinedFlag\",vm:\"1\",version:\"DICOM\"},\"(3010,0011)\":{tag:\"(3010,0011)\",vr:\"SQ\",name:\"ConceptualVolumeSegmentationReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0012)\":{tag:\"(3010,0012)\",vr:\"SQ\",name:\"ConceptualVolumeConstituentSegmentationReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0013)\":{tag:\"(3010,0013)\",vr:\"UI\",name:\"ConstituentConceptualVolumeUID\",vm:\"1\",version:\"DICOM\"},\"(3010,0014)\":{tag:\"(3010,0014)\",vr:\"SQ\",name:\"DerivationConceptualVolumeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0015)\":{tag:\"(3010,0015)\",vr:\"UI\",name:\"SourceConceptualVolumeUID\",vm:\"1\",version:\"DICOM\"},\"(3010,0016)\":{tag:\"(3010,0016)\",vr:\"SQ\",name:\"ConceptualVolumeDerivationAlgorithmSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0017)\":{tag:\"(3010,0017)\",vr:\"ST\",name:\"ConceptualVolumeDescription\",vm:\"1\",version:\"DICOM\"},\"(3010,0018)\":{tag:\"(3010,0018)\",vr:\"SQ\",name:\"SourceConceptualVolumeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0019)\":{tag:\"(3010,0019)\",vr:\"SQ\",name:\"AuthorIdentificationSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,001A)\":{tag:\"(3010,001A)\",vr:\"LO\",name:\"ManufacturerModelVersion\",vm:\"1\",version:\"DICOM\"},\"(3010,001B)\":{tag:\"(3010,001B)\",vr:\"UC\",name:\"DeviceAlternateIdentifier\",vm:\"1\",version:\"DICOM\"},\"(3010,001C)\":{tag:\"(3010,001C)\",vr:\"CS\",name:\"DeviceAlternateIdentifierType\",vm:\"1\",version:\"DICOM\"},\"(3010,001D)\":{tag:\"(3010,001D)\",vr:\"LT\",name:\"DeviceAlternateIdentifierFormat\",vm:\"1\",version:\"DICOM\"},\"(3010,001E)\":{tag:\"(3010,001E)\",vr:\"LO\",name:\"SegmentationCreationTemplateLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,001F)\":{tag:\"(3010,001F)\",vr:\"UI\",name:\"SegmentationTemplateUID\",vm:\"1\",version:\"DICOM\"},\"(3010,0020)\":{tag:\"(3010,0020)\",vr:\"US\",name:\"ReferencedSegmentReferenceIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0021)\":{tag:\"(3010,0021)\",vr:\"SQ\",name:\"SegmentReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0022)\":{tag:\"(3010,0022)\",vr:\"US\",name:\"SegmentReferenceIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0023)\":{tag:\"(3010,0023)\",vr:\"SQ\",name:\"DirectSegmentReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0024)\":{tag:\"(3010,0024)\",vr:\"SQ\",name:\"CombinationSegmentReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0025)\":{tag:\"(3010,0025)\",vr:\"SQ\",name:\"ConceptualVolumeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0026)\":{tag:\"(3010,0026)\",vr:\"SQ\",name:\"SegmentedRTAccessoryDeviceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0027)\":{tag:\"(3010,0027)\",vr:\"SQ\",name:\"SegmentCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0028)\":{tag:\"(3010,0028)\",vr:\"SQ\",name:\"RelatedSegmentCharacteristicsSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0029)\":{tag:\"(3010,0029)\",vr:\"US\",name:\"SegmentCharacteristicsPrecedence\",vm:\"1\",version:\"DICOM\"},\"(3010,002A)\":{tag:\"(3010,002A)\",vr:\"SQ\",name:\"RTSegmentAnnotationSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,002B)\":{tag:\"(3010,002B)\",vr:\"SQ\",name:\"SegmentAnnotationCategoryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,002C)\":{tag:\"(3010,002C)\",vr:\"SQ\",name:\"SegmentAnnotationTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,002D)\":{tag:\"(3010,002D)\",vr:\"LO\",name:\"DeviceLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,002E)\":{tag:\"(3010,002E)\",vr:\"SQ\",name:\"DeviceTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,002F)\":{tag:\"(3010,002F)\",vr:\"SQ\",name:\"SegmentAnnotationTypeModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0030)\":{tag:\"(3010,0030)\",vr:\"SQ\",name:\"PatientEquipmentRelationshipCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0031)\":{tag:\"(3010,0031)\",vr:\"UI\",name:\"ReferencedFiducialsUID\",vm:\"1\",version:\"DICOM\"},\"(3010,0032)\":{tag:\"(3010,0032)\",vr:\"SQ\",name:\"PatientTreatmentOrientationSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0033)\":{tag:\"(3010,0033)\",vr:\"SH\",name:\"UserContentLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,0034)\":{tag:\"(3010,0034)\",vr:\"LO\",name:\"UserContentLongLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,0035)\":{tag:\"(3010,0035)\",vr:\"SH\",name:\"EntityLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,0036)\":{tag:\"(3010,0036)\",vr:\"LO\",name:\"EntityName\",vm:\"1\",version:\"DICOM\"},\"(3010,0037)\":{tag:\"(3010,0037)\",vr:\"ST\",name:\"EntityDescription\",vm:\"1\",version:\"DICOM\"},\"(3010,0038)\":{tag:\"(3010,0038)\",vr:\"LO\",name:\"EntityLongLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,0039)\":{tag:\"(3010,0039)\",vr:\"US\",name:\"DeviceIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,003A)\":{tag:\"(3010,003A)\",vr:\"US\",name:\"RTTreatmentPhaseIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,003B)\":{tag:\"(3010,003B)\",vr:\"UI\",name:\"RTTreatmentPhaseUID\",vm:\"1\",version:\"DICOM\"},\"(3010,003C)\":{tag:\"(3010,003C)\",vr:\"US\",name:\"RTPrescriptionIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,003D)\":{tag:\"(3010,003D)\",vr:\"US\",name:\"RTSegmentAnnotationIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,003E)\":{tag:\"(3010,003E)\",vr:\"US\",name:\"BasisRTTreatmentPhaseIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,003F)\":{tag:\"(3010,003F)\",vr:\"US\",name:\"RelatedRTTreatmentPhaseIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0040)\":{tag:\"(3010,0040)\",vr:\"US\",name:\"ReferencedRTTreatmentPhaseIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0041)\":{tag:\"(3010,0041)\",vr:\"US\",name:\"ReferencedRTPrescriptionIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0042)\":{tag:\"(3010,0042)\",vr:\"US\",name:\"ReferencedParentRTPrescriptionIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0043)\":{tag:\"(3010,0043)\",vr:\"ST\",name:\"ManufacturerDeviceIdentifier\",vm:\"1\",version:\"DICOM\"},\"(3010,0044)\":{tag:\"(3010,0044)\",vr:\"SQ\",name:\"InstanceLevelReferencedPerformedProcedureStepSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0045)\":{tag:\"(3010,0045)\",vr:\"CS\",name:\"RTTreatmentPhaseIntentPresenceFlag\",vm:\"1\",version:\"DICOM\"},\"(3010,0046)\":{tag:\"(3010,0046)\",vr:\"CS\",name:\"RadiotherapyTreatmentType\",vm:\"1\",version:\"DICOM\"},\"(3010,0047)\":{tag:\"(3010,0047)\",vr:\"CS\",name:\"TeletherapyRadiationType\",vm:\"1-n\",version:\"DICOM\"},\"(3010,0048)\":{tag:\"(3010,0048)\",vr:\"CS\",name:\"BrachytherapySourceType\",vm:\"1-n\",version:\"DICOM\"},\"(3010,0049)\":{tag:\"(3010,0049)\",vr:\"SQ\",name:\"ReferencedRTTreatmentPhaseSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,004A)\":{tag:\"(3010,004A)\",vr:\"SQ\",name:\"ReferencedDirectSegmentInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,004B)\":{tag:\"(3010,004B)\",vr:\"SQ\",name:\"IntendedRTTreatmentPhaseSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,004C)\":{tag:\"(3010,004C)\",vr:\"DA\",name:\"IntendedPhaseStartDate\",vm:\"1\",version:\"DICOM\"},\"(3010,004D)\":{tag:\"(3010,004D)\",vr:\"DA\",name:\"IntendedPhaseEndDate\",vm:\"1\",version:\"DICOM\"},\"(3010,004E)\":{tag:\"(3010,004E)\",vr:\"SQ\",name:\"RTTreatmentPhaseIntervalSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,004F)\":{tag:\"(3010,004F)\",vr:\"CS\",name:\"TemporalRelationshipIntervalAnchor\",vm:\"1\",version:\"DICOM\"},\"(3010,0050)\":{tag:\"(3010,0050)\",vr:\"FD\",name:\"MinimumNumberOfIntervalDays\",vm:\"1\",version:\"DICOM\"},\"(3010,0051)\":{tag:\"(3010,0051)\",vr:\"FD\",name:\"MaximumNumberOfIntervalDays\",vm:\"1\",version:\"DICOM\"},\"(3010,0052)\":{tag:\"(3010,0052)\",vr:\"UI\",name:\"PertinentSOPClassesInStudy\",vm:\"1-n\",version:\"DICOM\"},\"(3010,0053)\":{tag:\"(3010,0053)\",vr:\"UI\",name:\"PertinentSOPClassesInSeries\",vm:\"1-n\",version:\"DICOM\"},\"(3010,0054)\":{tag:\"(3010,0054)\",vr:\"LO\",name:\"RTPrescriptionLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,0055)\":{tag:\"(3010,0055)\",vr:\"SQ\",name:\"RTPhysicianIntentPredecessorSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0056)\":{tag:\"(3010,0056)\",vr:\"LO\",name:\"RTTreatmentApproachLabel\",vm:\"1\",version:\"DICOM\"},\"(3010,0057)\":{tag:\"(3010,0057)\",vr:\"SQ\",name:\"RTPhysicianIntentSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0058)\":{tag:\"(3010,0058)\",vr:\"US\",name:\"RTPhysicianIntentIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,0059)\":{tag:\"(3010,0059)\",vr:\"CS\",name:\"RTTreatmentIntentType\",vm:\"1\",version:\"DICOM\"},\"(3010,005A)\":{tag:\"(3010,005A)\",vr:\"UT\",name:\"RTPhysicianIntentNarrative\",vm:\"1\",version:\"DICOM\"},\"(3010,005B)\":{tag:\"(3010,005B)\",vr:\"SQ\",name:\"RTProtocolCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,005C)\":{tag:\"(3010,005C)\",vr:\"ST\",name:\"ReasonForSuperseding\",vm:\"1\",version:\"DICOM\"},\"(3010,005D)\":{tag:\"(3010,005D)\",vr:\"SQ\",name:\"RTDiagnosisCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,005E)\":{tag:\"(3010,005E)\",vr:\"US\",name:\"ReferencedRTPhysicianIntentIndex\",vm:\"1\",version:\"DICOM\"},\"(3010,005F)\":{tag:\"(3010,005F)\",vr:\"SQ\",name:\"RTPhysicianIntentInputInstanceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0060)\":{tag:\"(3010,0060)\",vr:\"SQ\",name:\"RTAnatomicPrescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0061)\":{tag:\"(3010,0061)\",vr:\"UT\",name:\"PriorTreatmentDoseDescription\",vm:\"1\",version:\"DICOM\"},\"(3010,0062)\":{tag:\"(3010,0062)\",vr:\"SQ\",name:\"PriorTreatmentReferenceSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0063)\":{tag:\"(3010,0063)\",vr:\"CS\",name:\"DosimetricObjectiveEvaluationScope\",vm:\"1\",version:\"DICOM\"},\"(3010,0064)\":{tag:\"(3010,0064)\",vr:\"SQ\",name:\"TherapeuticRoleCategoryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0065)\":{tag:\"(3010,0065)\",vr:\"SQ\",name:\"TherapeuticRoleTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0066)\":{tag:\"(3010,0066)\",vr:\"US\",name:\"ConceptualVolumeOptimizationPrecedence\",vm:\"1\",version:\"DICOM\"},\"(3010,0067)\":{tag:\"(3010,0067)\",vr:\"SQ\",name:\"ConceptualVolumeCategoryCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0068)\":{tag:\"(3010,0068)\",vr:\"CS\",name:\"ConceptualVolumeBlockingConstraint\",vm:\"1\",version:\"DICOM\"},\"(3010,0069)\":{tag:\"(3010,0069)\",vr:\"SQ\",name:\"ConceptualVolumeTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,006A)\":{tag:\"(3010,006A)\",vr:\"SQ\",name:\"ConceptualVolumeTypeModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,006B)\":{tag:\"(3010,006B)\",vr:\"SQ\",name:\"RTPrescriptionSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,006C)\":{tag:\"(3010,006C)\",vr:\"SQ\",name:\"DosimetricObjectiveSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,006D)\":{tag:\"(3010,006D)\",vr:\"SQ\",name:\"DosimetricObjectiveTypeCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,006E)\":{tag:\"(3010,006E)\",vr:\"UI\",name:\"DosimetricObjectiveUID\",vm:\"1\",version:\"DICOM\"},\"(3010,006F)\":{tag:\"(3010,006F)\",vr:\"UI\",name:\"ReferencedDosimetricObjectiveUID\",vm:\"1\",version:\"DICOM\"},\"(3010,0070)\":{tag:\"(3010,0070)\",vr:\"SQ\",name:\"DosimetricObjectiveParameterSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0071)\":{tag:\"(3010,0071)\",vr:\"SQ\",name:\"ReferencedDosimetricObjectivesSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0073)\":{tag:\"(3010,0073)\",vr:\"CS\",name:\"AbsoluteDosimetricObjectiveFlag\",vm:\"1\",version:\"DICOM\"},\"(3010,0074)\":{tag:\"(3010,0074)\",vr:\"FD\",name:\"DosimetricObjectiveWeight\",vm:\"1\",version:\"DICOM\"},\"(3010,0075)\":{tag:\"(3010,0075)\",vr:\"CS\",name:\"DosimetricObjectivePurpose\",vm:\"1\",version:\"DICOM\"},\"(3010,0076)\":{tag:\"(3010,0076)\",vr:\"SQ\",name:\"PlanningInputInformationSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0077)\":{tag:\"(3010,0077)\",vr:\"LO\",name:\"TreatmentSite\",vm:\"1\",version:\"DICOM\"},\"(3010,0078)\":{tag:\"(3010,0078)\",vr:\"SQ\",name:\"TreatmentSiteCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0079)\":{tag:\"(3010,0079)\",vr:\"SQ\",name:\"FractionPatternSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,007A)\":{tag:\"(3010,007A)\",vr:\"UT\",name:\"TreatmentTechniqueNotes\",vm:\"1\",version:\"DICOM\"},\"(3010,007B)\":{tag:\"(3010,007B)\",vr:\"UT\",name:\"PrescriptionNotes\",vm:\"1\",version:\"DICOM\"},\"(3010,007C)\":{tag:\"(3010,007C)\",vr:\"IS\",name:\"NumberOfIntervalFractions\",vm:\"1\",version:\"DICOM\"},\"(3010,007D)\":{tag:\"(3010,007D)\",vr:\"US\",name:\"NumberOfFractions\",vm:\"1\",version:\"DICOM\"},\"(3010,007E)\":{tag:\"(3010,007E)\",vr:\"US\",name:\"IntendedDeliveryDuration\",vm:\"1\",version:\"DICOM\"},\"(3010,007F)\":{tag:\"(3010,007F)\",vr:\"UT\",name:\"FractionationNotes\",vm:\"1\",version:\"DICOM\"},\"(3010,0080)\":{tag:\"(3010,0080)\",vr:\"SQ\",name:\"RTTreatmentTechniqueCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0081)\":{tag:\"(3010,0081)\",vr:\"SQ\",name:\"PrescriptionNotesSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0082)\":{tag:\"(3010,0082)\",vr:\"SQ\",name:\"FractionBasedRelationshipSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0083)\":{tag:\"(3010,0083)\",vr:\"CS\",name:\"FractionBasedRelationshipIntervalAnchor\",vm:\"1\",version:\"DICOM\"},\"(3010,0084)\":{tag:\"(3010,0084)\",vr:\"FD\",name:\"MinimumHoursBetweenFractions\",vm:\"1\",version:\"DICOM\"},\"(3010,0085)\":{tag:\"(3010,0085)\",vr:\"TM\",name:\"IntendedFractionStartTime\",vm:\"1-n\",version:\"DICOM\"},\"(3010,0086)\":{tag:\"(3010,0086)\",vr:\"LT\",name:\"IntendedStartDayOfWeek\",vm:\"1\",version:\"DICOM\"},\"(3010,0087)\":{tag:\"(3010,0087)\",vr:\"SQ\",name:\"WeekdayFractionPatternSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0088)\":{tag:\"(3010,0088)\",vr:\"SQ\",name:\"DeliveryTimeStructureCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0089)\":{tag:\"(3010,0089)\",vr:\"SQ\",name:\"TreatmentSiteModifierCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0090)\":{tag:\"(3010,0090)\",vr:\"CS\",name:\"RoboticBaseLocationIndicator\",vm:\"1\",version:\"DICOM\"},\"(3010,0091)\":{tag:\"(3010,0091)\",vr:\"SQ\",name:\"RoboticPathNodeSetCodeSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0092)\":{tag:\"(3010,0092)\",vr:\"UL\",name:\"RoboticNodeIdentifier\",vm:\"1\",version:\"DICOM\"},\"(3010,0093)\":{tag:\"(3010,0093)\",vr:\"FD\",name:\"RTTreatmentSourceCoordinates\",vm:\"3\",version:\"DICOM\"},\"(3010,0094)\":{tag:\"(3010,0094)\",vr:\"FD\",name:\"RadiationSourceCoordinateSystemYawAngle\",vm:\"1\",version:\"DICOM\"},\"(3010,0095)\":{tag:\"(3010,0095)\",vr:\"FD\",name:\"RadiationSourceCoordinateSystemRollAngle\",vm:\"1\",version:\"DICOM\"},\"(3010,0096)\":{tag:\"(3010,0096)\",vr:\"FD\",name:\"RadiationSourceCoordinateSystemPitchAngle\",vm:\"1\",version:\"DICOM\"},\"(3010,0097)\":{tag:\"(3010,0097)\",vr:\"SQ\",name:\"RoboticPathControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0098)\":{tag:\"(3010,0098)\",vr:\"SQ\",name:\"TomotherapeuticControlPointSequence\",vm:\"1\",version:\"DICOM\"},\"(3010,0099)\":{tag:\"(3010,0099)\",vr:\"FD\",name:\"TomotherapeuticLeafOpenDurations\",vm:\"1-n\",version:\"DICOM\"},\"(3010,009A)\":{tag:\"(3010,009A)\",vr:\"FD\",name:\"TomotherapeuticLeafInitialClosedDurations\",vm:\"1-n\",version:\"DICOM\"},\"(4FFE,0001)\":{tag:\"(4FFE,0001)\",vr:\"SQ\",name:\"MACParametersSequence\",vm:\"1\",version:\"DICOM\"},\"(5200,9229)\":{tag:\"(5200,9229)\",vr:\"SQ\",name:\"SharedFunctionalGroupsSequence\",vm:\"1\",version:\"DICOM\"},\"(5200,9230)\":{tag:\"(5200,9230)\",vr:\"SQ\",name:\"PerFrameFunctionalGroupsSequence\",vm:\"1\",version:\"DICOM\"},\"(5400,0100)\":{tag:\"(5400,0100)\",vr:\"SQ\",name:\"WaveformSequence\",vm:\"1\",version:\"DICOM\"},\"(5400,0110)\":{tag:\"(5400,0110)\",vr:\"ox\",name:\"ChannelMinimumValue\",vm:\"1\",version:\"DICOM\"},\"(5400,0112)\":{tag:\"(5400,0112)\",vr:\"ox\",name:\"ChannelMaximumValue\",vm:\"1\",version:\"DICOM\"},\"(5400,1004)\":{tag:\"(5400,1004)\",vr:\"US\",name:\"WaveformBitsAllocated\",vm:\"1\",version:\"DICOM\"},\"(5400,1006)\":{tag:\"(5400,1006)\",vr:\"CS\",name:\"WaveformSampleInterpretation\",vm:\"1\",version:\"DICOM\"},\"(5400,100A)\":{tag:\"(5400,100A)\",vr:\"ox\",name:\"WaveformPaddingValue\",vm:\"1\",version:\"DICOM\"},\"(5400,1010)\":{tag:\"(5400,1010)\",vr:\"ox\",name:\"WaveformData\",vm:\"1\",version:\"DICOM\"},\"(5600,0010)\":{tag:\"(5600,0010)\",vr:\"OF\",name:\"FirstOrderPhaseCorrectionAngle\",vm:\"1\",version:\"DICOM\"},\"(5600,0020)\":{tag:\"(5600,0020)\",vr:\"OF\",name:\"SpectroscopyData\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0010)\":{tag:\"(6000-60FF,0010)\",vr:\"US\",name:\"OverlayRows\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0011)\":{tag:\"(6000-60FF,0011)\",vr:\"US\",name:\"OverlayColumns\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0015)\":{tag:\"(6000-60FF,0015)\",vr:\"IS\",name:\"NumberOfFramesInOverlay\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0022)\":{tag:\"(6000-60FF,0022)\",vr:\"LO\",name:\"OverlayDescription\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0040)\":{tag:\"(6000-60FF,0040)\",vr:\"CS\",name:\"OverlayType\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0045)\":{tag:\"(6000-60FF,0045)\",vr:\"LO\",name:\"OverlaySubtype\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0050)\":{tag:\"(6000-60FF,0050)\",vr:\"SS\",name:\"OverlayOrigin\",vm:\"2\",version:\"DICOM\"},\"(6000-60FF,0051)\":{tag:\"(6000-60FF,0051)\",vr:\"US\",name:\"ImageFrameOrigin\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0100)\":{tag:\"(6000-60FF,0100)\",vr:\"US\",name:\"OverlayBitsAllocated\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,0102)\":{tag:\"(6000-60FF,0102)\",vr:\"US\",name:\"OverlayBitPosition\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,1001)\":{tag:\"(6000-60FF,1001)\",vr:\"CS\",name:\"OverlayActivationLayer\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,1301)\":{tag:\"(6000-60FF,1301)\",vr:\"IS\",name:\"ROIArea\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,1302)\":{tag:\"(6000-60FF,1302)\",vr:\"DS\",name:\"ROIMean\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,1303)\":{tag:\"(6000-60FF,1303)\",vr:\"DS\",name:\"ROIStandardDeviation\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,1500)\":{tag:\"(6000-60FF,1500)\",vr:\"LO\",name:\"OverlayLabel\",vm:\"1\",version:\"DICOM\"},\"(6000-60FF,3000)\":{tag:\"(6000-60FF,3000)\",vr:\"ox\",name:\"OverlayData\",vm:\"1\",version:\"DICOM\"},\"(7FE0,0001)\":{tag:\"(7FE0,0001)\",vr:\"OV\",name:\"ExtendedOffsetTable\",vm:\"1\",version:\"DICOM\"},\"(7FE0,0002)\":{tag:\"(7FE0,0002)\",vr:\"OV\",name:\"ExtendedOffsetTableLengths\",vm:\"1\",version:\"DICOM\"},\"(7FE0,0008)\":{tag:\"(7FE0,0008)\",vr:\"OF\",name:\"FloatPixelData\",vm:\"1\",version:\"DICOM\"},\"(7FE0,0009)\":{tag:\"(7FE0,0009)\",vr:\"OD\",name:\"DoubleFloatPixelData\",vm:\"1\",version:\"DICOM\"},\"(7FE0,0010)\":{tag:\"(7FE0,0010)\",vr:\"ox\",name:\"PixelData\",vm:\"1\",version:\"DICOM\"},\"(FFFA,FFFA)\":{tag:\"(FFFA,FFFA)\",vr:\"SQ\",name:\"DigitalSignaturesSequence\",vm:\"1\",version:\"DICOM\"},\"(FFFC,FFFC)\":{tag:\"(FFFC,FFFC)\",vr:\"OB\",name:\"DataSetTrailingPadding\",vm:\"1\",version:\"DICOM\"},\"(FFFE,E000)\":{tag:\"(FFFE,E000)\",vr:\"na\",name:\"Item\",vm:\"1\",version:\"DICOM\"},\"(FFFE,E00D)\":{tag:\"(FFFE,E00D)\",vr:\"na\",name:\"ItemDelimitationItem\",vm:\"1\",version:\"DICOM\"},\"(FFFE,E0DD)\":{tag:\"(FFFE,E0DD)\",vr:\"na\",name:\"SequenceDelimitationItem\",vm:\"1\",version:\"DICOM\"},\"(0028,1224)\":{tag:\"(0028,1224)\",vr:\"OW\",name:\"SegmentedAlphaPaletteColorLookupTableData\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1101)\":{tag:\"(0070,1101)\",vr:\"UI\",name:\"PresentationDisplayCollectionUID\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1102)\":{tag:\"(0070,1102)\",vr:\"UI\",name:\"PresentationSequenceCollectionUID\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1103)\":{tag:\"(0070,1103)\",vr:\"US\",name:\"PresentationSequencePositionIndex\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1104)\":{tag:\"(0070,1104)\",vr:\"SQ\",name:\"RenderedImageReferenceSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1201)\":{tag:\"(0070,1201)\",vr:\"SQ\",name:\"VolumetricPresentationStateInputSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1202)\":{tag:\"(0070,1202)\",vr:\"CS\",name:\"PresentationInputType\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1203)\":{tag:\"(0070,1203)\",vr:\"US\",name:\"InputSequencePositionIndex\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1204)\":{tag:\"(0070,1204)\",vr:\"CS\",name:\"Crop\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1205)\":{tag:\"(0070,1205)\",vr:\"US\",name:\"CroppingSpecificationIndex\",vm:\"1-n\",version:\"Supplement_156\"},\"(0070,1206)\":{tag:\"(0070,1206)\",vr:\"CS\",name:\"CompositingMethod\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1207)\":{tag:\"(0070,1207)\",vr:\"US\",name:\"VolumetricPresentationInputNumber\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1208)\":{tag:\"(0070,1208)\",vr:\"CS\",name:\"ImageVolumeGeometry\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1301)\":{tag:\"(0070,1301)\",vr:\"SQ\",name:\"VolumeCroppingSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1302)\":{tag:\"(0070,1302)\",vr:\"CS\",name:\"VolumeCroppingMethod\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1303)\":{tag:\"(0070,1303)\",vr:\"FD\",name:\"BoundingBoxCrop\",vm:\"6\",version:\"Supplement_156\"},\"(0070,1304)\":{tag:\"(0070,1304)\",vr:\"SQ\",name:\"ObliqueCroppingPlaneSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1305)\":{tag:\"(0070,1305)\",vr:\"FD\",name:\"ObliqueCroppingPlane\",vm:\"4\",version:\"Supplement_156\"},\"(0070,1306)\":{tag:\"(0070,1306)\",vr:\"FD\",name:\"ObliqueCroppingPlaneNormal\",vm:\"3\",version:\"Supplement_156\"},\"(0070,1309)\":{tag:\"(0070,1309)\",vr:\"US\",name:\"CroppingSpecificationNumber\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1501)\":{tag:\"(0070,1501)\",vr:\"CS\",name:\"MultiPlanarReconstructionStyle\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1502)\":{tag:\"(0070,1502)\",vr:\"CS\",name:\"MPRThicknessType\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1503)\":{tag:\"(0070,1503)\",vr:\"FD\",name:\"MPRSlabThickness\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1505)\":{tag:\"(0070,1505)\",vr:\"FD\",name:\"MPRTopLeftHandCorner\",vm:\"3\",version:\"Supplement_156\"},\"(0070,1507)\":{tag:\"(0070,1507)\",vr:\"FD\",name:\"MPRViewWidthDirection\",vm:\"3\",version:\"Supplement_156\"},\"(0070,1508)\":{tag:\"(0070,1508)\",vr:\"FD\",name:\"MPRViewWidth\",vm:\"1\",version:\"Supplement_156\"},\"(0070,150C)\":{tag:\"(0070,150C)\",vr:\"FL\",name:\"NumberOfVolumetricCurvePoints\",vm:\"1\",version:\"Supplement_156\"},\"(0070,150D)\":{tag:\"(0070,150D)\",vr:\"OD\",name:\"VolumetricCurvePoints\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1511)\":{tag:\"(0070,1511)\",vr:\"FD\",name:\"MPRViewHeightDirection\",vm:\"3\",version:\"Supplement_156\"},\"(0070,1512)\":{tag:\"(0070,1512)\",vr:\"FD\",name:\"MPRViewHeight\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1801)\":{tag:\"(0070,1801)\",vr:\"SQ\",name:\"PresentationStateClassificationComponentSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1802)\":{tag:\"(0070,1802)\",vr:\"CS\",name:\"ComponentType\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1803)\":{tag:\"(0070,1803)\",vr:\"SQ\",name:\"ComponentInputSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1804)\":{tag:\"(0070,1804)\",vr:\"US\",name:\"VolumetricPresentationInputIndex\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1805)\":{tag:\"(0070,1805)\",vr:\"SQ\",name:\"PresentationStateCompositorComponentSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1806)\":{tag:\"(0070,1806)\",vr:\"SQ\",name:\"WeightingTransferFunctionSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1807)\":{tag:\"(0070,1807)\",vr:\"US\",name:\"WeightingLookupTableDescriptor\",vm:\"3\",version:\"Supplement_156\"},\"(0070,1808)\":{tag:\"(0070,1808)\",vr:\"OB\",name:\"WeightingLookupTableData\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1901)\":{tag:\"(0070,1901)\",vr:\"SQ\",name:\"VolumetricAnnotationSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1903)\":{tag:\"(0070,1903)\",vr:\"SQ\",name:\"ReferencedStructuredContextSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1904)\":{tag:\"(0070,1904)\",vr:\"UI\",name:\"ReferencedContentItem\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1905)\":{tag:\"(0070,1905)\",vr:\"SQ\",name:\"VolumetricPresentationInputAnnotationSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1907)\":{tag:\"(0070,1907)\",vr:\"CS\",name:\"AnnotationClipping\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1A01)\":{tag:\"(0070,1A01)\",vr:\"CS\",name:\"PresentationAnimationStyle\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1A03)\":{tag:\"(0070,1A03)\",vr:\"FD\",name:\"RecommendedAnimationRate\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1A04)\":{tag:\"(0070,1A04)\",vr:\"SQ\",name:\"AnimationCurveSequence\",vm:\"1\",version:\"Supplement_156\"},\"(0070,1A05)\":{tag:\"(0070,1A05)\",vr:\"FD\",name:\"AnimationStepSize\",vm:\"1\",version:\"Supplement_156\"},\"(0040,4070)\":{tag:\"(0040,4070)\",vr:\"SQ\",name:\"OutputDestinationSequence\",vm:\"1\",version:\"CP_1441\"},\"(0040,4071)\":{tag:\"(0040,4071)\",vr:\"SQ\",name:\"DICOMStorageSequence\",vm:\"1\",version:\"CP_1441\"},\"(0040,4072)\":{tag:\"(0040,4072)\",vr:\"SQ\",name:\"STOWRSStorageSequence\",vm:\"1\",version:\"CP_1441\"},\"(0040,4073)\":{tag:\"(0040,4073)\",vr:\"UR\",name:\"StorageURL\",vm:\"1\",version:\"CP_1441\"},\"(0040,4074)\":{tag:\"(0040,4074)\",vr:\"SQ\",name:\"XDSStorageSequence\",vm:\"1\",version:\"CP_1441\"},\"(0028,2002)\":{tag:\"(0028,2002)\",vr:\"CS\",name:\"ColorSpace\",vm:\"1\",version:\"CP_1454\"},\"(0040,9213)\":{tag:\"(0040,9213)\",vr:\"FD\",name:\"DoubleFloatRealWorldValueLastValueMapped\",vm:\"1\",version:\"CP_1458\"},\"(0040,9214)\":{tag:\"(0040,9214)\",vr:\"FD\",name:\"DoubleFloatRealWorldValueFirstValueMapped\",vm:\"1\",version:\"CP_1458\"},\"(0018,1320)\":{tag:\"(0018,1320)\",vr:\"FL\",name:\"B1rms\",vm:\"1\",version:\"CP_1461\"},\"(0009-o-FFFF,0000)\":{tag:\"(0009-o-FFFF,0000)\",vr:\"UL\",name:\"PrivateGroupLength\",vm:\"1\",version:\"PRIVATE\"},\"(0009-o-FFFF,0010-u-00FF)\":{tag:\"(0009-o-FFFF,0010-u-00FF)\",vr:\"LO\",name:\"PrivateCreator\",vm:\"1\",version:\"PRIVATE\"},\"(0001-o-0007,0000)\":{tag:\"(0001-o-0007,0000)\",vr:\"UL\",name:\"IllegalGroupLength\",vm:\"1\",version:\"ILLEGAL\"},\"(0001-o-0007,0010-u-00FF)\":{tag:\"(0001-o-0007,0010-u-00FF)\",vr:\"LO\",name:\"IllegalPrivateCreator\",vm:\"1\",version:\"ILLEGAL\"},\"(0000-u-FFFF,0000)\":{tag:\"(0000-u-FFFF,0000)\",vr:\"UL\",name:\"GenericGroupLength\",vm:\"1\",version:\"GENERIC\"},\"(0000,0001)\":{tag:\"(0000,0001)\",vr:\"UL\",name:\"RETIRED_CommandLengthToEnd\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,0010)\":{tag:\"(0000,0010)\",vr:\"SH\",name:\"RETIRED_CommandRecognitionCode\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,0200)\":{tag:\"(0000,0200)\",vr:\"AE\",name:\"RETIRED_Initiator\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,0300)\":{tag:\"(0000,0300)\",vr:\"AE\",name:\"RETIRED_Receiver\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,0400)\":{tag:\"(0000,0400)\",vr:\"AE\",name:\"RETIRED_FindLocation\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,0850)\":{tag:\"(0000,0850)\",vr:\"US\",name:\"RETIRED_NumberOfMatches\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,0860)\":{tag:\"(0000,0860)\",vr:\"US\",name:\"RETIRED_ResponseSequenceNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,4000)\":{tag:\"(0000,4000)\",vr:\"LT\",name:\"RETIRED_DialogReceiver\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,4010)\":{tag:\"(0000,4010)\",vr:\"LT\",name:\"RETIRED_TerminalType\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5010)\":{tag:\"(0000,5010)\",vr:\"SH\",name:\"RETIRED_MessageSetID\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5020)\":{tag:\"(0000,5020)\",vr:\"SH\",name:\"RETIRED_EndMessageID\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5110)\":{tag:\"(0000,5110)\",vr:\"LT\",name:\"RETIRED_DisplayFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5120)\":{tag:\"(0000,5120)\",vr:\"LT\",name:\"RETIRED_PagePositionID\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5130)\":{tag:\"(0000,5130)\",vr:\"CS\",name:\"RETIRED_TextFormatID\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5140)\":{tag:\"(0000,5140)\",vr:\"CS\",name:\"RETIRED_NormalReverse\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5150)\":{tag:\"(0000,5150)\",vr:\"CS\",name:\"RETIRED_AddGrayScale\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5160)\":{tag:\"(0000,5160)\",vr:\"CS\",name:\"RETIRED_Borders\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5170)\":{tag:\"(0000,5170)\",vr:\"IS\",name:\"RETIRED_Copies\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5180)\":{tag:\"(0000,5180)\",vr:\"CS\",name:\"RETIRED_CommandMagnificationType\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,5190)\":{tag:\"(0000,5190)\",vr:\"CS\",name:\"RETIRED_Erase\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,51A0)\":{tag:\"(0000,51A0)\",vr:\"CS\",name:\"RETIRED_Print\",vm:\"1\",version:\"DICOM/retired\"},\"(0000,51B0)\":{tag:\"(0000,51B0)\",vr:\"US\",name:\"RETIRED_Overlays\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0004,1504)\":{tag:\"(0004,1504)\",vr:\"up\",name:\"RETIRED_MRDRDirectoryRecordOffset\",vm:\"1\",version:\"DICOM/retired\"},\"(0004,1600)\":{tag:\"(0004,1600)\",vr:\"UL\",name:\"RETIRED_NumberOfReferences\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0001)\":{tag:\"(0008,0001)\",vr:\"UL\",name:\"RETIRED_LengthToEnd\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0010)\":{tag:\"(0008,0010)\",vr:\"SH\",name:\"RETIRED_RecognitionCode\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0024)\":{tag:\"(0008,0024)\",vr:\"DA\",name:\"RETIRED_OverlayDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0025)\":{tag:\"(0008,0025)\",vr:\"DA\",name:\"RETIRED_CurveDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0034)\":{tag:\"(0008,0034)\",vr:\"TM\",name:\"RETIRED_OverlayTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0035)\":{tag:\"(0008,0035)\",vr:\"TM\",name:\"RETIRED_CurveTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0040)\":{tag:\"(0008,0040)\",vr:\"US\",name:\"RETIRED_DataSetType\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0041)\":{tag:\"(0008,0041)\",vr:\"LO\",name:\"RETIRED_DataSetSubtype\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,0042)\":{tag:\"(0008,0042)\",vr:\"CS\",name:\"RETIRED_NuclearMedicineSeriesType\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,1000)\":{tag:\"(0008,1000)\",vr:\"AE\",name:\"RETIRED_NetworkID\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,1100)\":{tag:\"(0008,1100)\",vr:\"SQ\",name:\"RETIRED_ReferencedResultsSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,1130)\":{tag:\"(0008,1130)\",vr:\"SQ\",name:\"RETIRED_ReferencedOverlaySequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,1145)\":{tag:\"(0008,1145)\",vr:\"SQ\",name:\"RETIRED_ReferencedCurveSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2110)\":{tag:\"(0008,2110)\",vr:\"CS\",name:\"RETIRED_LossyImageCompressionRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2200)\":{tag:\"(0008,2200)\",vr:\"CS\",name:\"RETIRED_TransducerPosition\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2204)\":{tag:\"(0008,2204)\",vr:\"CS\",name:\"RETIRED_TransducerOrientation\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2208)\":{tag:\"(0008,2208)\",vr:\"CS\",name:\"RETIRED_AnatomicStructure\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2240)\":{tag:\"(0008,2240)\",vr:\"SQ\",name:\"RETIRED_TransducerPositionSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2242)\":{tag:\"(0008,2242)\",vr:\"SQ\",name:\"RETIRED_TransducerPositionModifierSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2244)\":{tag:\"(0008,2244)\",vr:\"SQ\",name:\"RETIRED_TransducerOrientationSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2246)\":{tag:\"(0008,2246)\",vr:\"SQ\",name:\"RETIRED_TransducerOrientationModifierSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2251)\":{tag:\"(0008,2251)\",vr:\"SQ\",name:\"RETIRED_AnatomicStructureSpaceOrRegionCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2253)\":{tag:\"(0008,2253)\",vr:\"SQ\",name:\"RETIRED_AnatomicPortalOfEntranceCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2255)\":{tag:\"(0008,2255)\",vr:\"SQ\",name:\"RETIRED_AnatomicApproachDirectionCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2256)\":{tag:\"(0008,2256)\",vr:\"ST\",name:\"RETIRED_AnatomicPerspectiveDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2257)\":{tag:\"(0008,2257)\",vr:\"SQ\",name:\"RETIRED_AnatomicPerspectiveCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2258)\":{tag:\"(0008,2258)\",vr:\"ST\",name:\"RETIRED_AnatomicLocationOfExaminingInstrumentDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,2259)\":{tag:\"(0008,2259)\",vr:\"SQ\",name:\"RETIRED_AnatomicLocationOfExaminingInstrumentCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,225A)\":{tag:\"(0008,225A)\",vr:\"SQ\",name:\"RETIRED_AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,225C)\":{tag:\"(0008,225C)\",vr:\"SQ\",name:\"RETIRED_OnAxisBackgroundAnatomicStructureCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0008,4000)\":{tag:\"(0008,4000)\",vr:\"LT\",name:\"RETIRED_IdentifyingComments\",vm:\"1\",version:\"DICOM/retired\"},\"(0010,1050)\":{tag:\"(0010,1050)\",vr:\"LO\",name:\"RETIRED_InsurancePlanIdentification\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0014,0023)\":{tag:\"(0014,0023)\",vr:\"ST\",name:\"RETIRED_CADFileFormat\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0014,0024)\":{tag:\"(0014,0024)\",vr:\"ST\",name:\"RETIRED_ComponentReferenceSystem\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0014,0045)\":{tag:\"(0014,0045)\",vr:\"ST\",name:\"RETIRED_MaterialPropertiesFileFormatRetired\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0018,0030)\":{tag:\"(0018,0030)\",vr:\"LO\",name:\"RETIRED_Radionuclide\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0018,0032)\":{tag:\"(0018,0032)\",vr:\"DS\",name:\"RETIRED_EnergyWindowCenterline\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,0033)\":{tag:\"(0018,0033)\",vr:\"DS\",name:\"RETIRED_EnergyWindowTotalWidth\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0018,0037)\":{tag:\"(0018,0037)\",vr:\"CS\",name:\"RETIRED_TherapyType\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,0039)\":{tag:\"(0018,0039)\",vr:\"CS\",name:\"RETIRED_TherapyDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,0061)\":{tag:\"(0018,0061)\",vr:\"DS\",name:\"RETIRED_undefined\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,1011)\":{tag:\"(0018,1011)\",vr:\"LO\",name:\"RETIRED_HardcopyCreationDeviceID\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,1017)\":{tag:\"(0018,1017)\",vr:\"LO\",name:\"RETIRED_HardcopyDeviceManufacturer\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,101A)\":{tag:\"(0018,101A)\",vr:\"LO\",name:\"RETIRED_HardcopyDeviceSoftwareVersion\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0018,101B)\":{tag:\"(0018,101B)\",vr:\"LO\",name:\"RETIRED_HardcopyDeviceManufacturerModelName\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,1141)\":{tag:\"(0018,1141)\",vr:\"DS\",name:\"RETIRED_AngularPosition\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,1146)\":{tag:\"(0018,1146)\",vr:\"DS\",name:\"RETIRED_RotationOffset\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0018,1240)\":{tag:\"(0018,1240)\",vr:\"IS\",name:\"RETIRED_UpperLowerPixelValues\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0018,4000)\":{tag:\"(0018,4000)\",vr:\"LT\",name:\"RETIRED_AcquisitionComments\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,5021)\":{tag:\"(0018,5021)\",vr:\"LO\",name:\"RETIRED_PostprocessingFunction\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,5030)\":{tag:\"(0018,5030)\",vr:\"DS\",name:\"RETIRED_DynamicRange\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,5040)\":{tag:\"(0018,5040)\",vr:\"DS\",name:\"RETIRED_TotalGain\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,5210)\":{tag:\"(0018,5210)\",vr:\"DS\",name:\"RETIRED_ImageTransformationMatrix\",vm:\"6\",version:\"DICOM/retired\"},\"(0018,5212)\":{tag:\"(0018,5212)\",vr:\"DS\",name:\"RETIRED_ImageTranslationVector\",vm:\"3\",version:\"DICOM/retired\"},\"(0018,6038)\":{tag:\"(0018,6038)\",vr:\"UL\",name:\"RETIRED_DopplerSampleVolumeXPositionRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,603A)\":{tag:\"(0018,603A)\",vr:\"UL\",name:\"RETIRED_DopplerSampleVolumeYPositionRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,603C)\":{tag:\"(0018,603C)\",vr:\"UL\",name:\"RETIRED_TMLinePositionX0Retired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,603E)\":{tag:\"(0018,603E)\",vr:\"UL\",name:\"RETIRED_TMLinePositionY0Retired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,6040)\":{tag:\"(0018,6040)\",vr:\"UL\",name:\"RETIRED_TMLinePositionX1Retired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,6042)\":{tag:\"(0018,6042)\",vr:\"UL\",name:\"RETIRED_TMLinePositionY1Retired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,9096)\":{tag:\"(0018,9096)\",vr:\"FD\",name:\"RETIRED_ParallelReductionFactorInPlaneRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,9166)\":{tag:\"(0018,9166)\",vr:\"CS\",name:\"RETIRED_BulkMotionStatus\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,9195)\":{tag:\"(0018,9195)\",vr:\"FD\",name:\"RETIRED_ChemicalShiftMinimumIntegrationLimitInHz\",vm:\"1\",version:\"DICOM/retired\"},\"(0018,9196)\":{tag:\"(0018,9196)\",vr:\"FD\",name:\"RETIRED_ChemicalShiftMaximumIntegrationLimitInHz\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0014)\":{tag:\"(0020,0014)\",vr:\"IS\",name:\"RETIRED_IsotopeNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0015)\":{tag:\"(0020,0015)\",vr:\"IS\",name:\"RETIRED_PhaseNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0016)\":{tag:\"(0020,0016)\",vr:\"IS\",name:\"RETIRED_IntervalNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0017)\":{tag:\"(0020,0017)\",vr:\"IS\",name:\"RETIRED_TimeSlotNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0018)\":{tag:\"(0020,0018)\",vr:\"IS\",name:\"RETIRED_AngleNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0022)\":{tag:\"(0020,0022)\",vr:\"IS\",name:\"RETIRED_OverlayNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0024)\":{tag:\"(0020,0024)\",vr:\"IS\",name:\"RETIRED_CurveNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0026)\":{tag:\"(0020,0026)\",vr:\"IS\",name:\"RETIRED_LUTNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0030)\":{tag:\"(0020,0030)\",vr:\"DS\",name:\"RETIRED_ImagePosition\",vm:\"3\",version:\"DICOM/retired\"},\"(0020,0035)\":{tag:\"(0020,0035)\",vr:\"DS\",name:\"RETIRED_ImageOrientation\",vm:\"6\",version:\"DICOM/retired\"},\"(0020,0050)\":{tag:\"(0020,0050)\",vr:\"DS\",name:\"RETIRED_Location\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0070)\":{tag:\"(0020,0070)\",vr:\"LO\",name:\"RETIRED_ImageGeometryType\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,0080)\":{tag:\"(0020,0080)\",vr:\"CS\",name:\"RETIRED_MaskingImage\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0020,00AA)\":{tag:\"(0020,00AA)\",vr:\"IS\",name:\"RETIRED_ReportNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,1000)\":{tag:\"(0020,1000)\",vr:\"IS\",name:\"RETIRED_SeriesInStudy\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,1001)\":{tag:\"(0020,1001)\",vr:\"IS\",name:\"RETIRED_AcquisitionsInSeries\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,1003)\":{tag:\"(0020,1003)\",vr:\"IS\",name:\"RETIRED_ImagesInSeries\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,1004)\":{tag:\"(0020,1004)\",vr:\"IS\",name:\"RETIRED_AcquisitionsInStudy\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,1005)\":{tag:\"(0020,1005)\",vr:\"IS\",name:\"RETIRED_ImagesInStudy\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,1020)\":{tag:\"(0020,1020)\",vr:\"LO\",name:\"RETIRED_Reference\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0020,1070)\":{tag:\"(0020,1070)\",vr:\"IS\",name:\"RETIRED_OtherStudyNumbers\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0020,3100-31FF)\":{tag:\"(0020,3100-31FF)\",vr:\"CS\",name:\"RETIRED_SourceImageIDs\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0020,3401)\":{tag:\"(0020,3401)\",vr:\"CS\",name:\"RETIRED_ModifyingDeviceID\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,3402)\":{tag:\"(0020,3402)\",vr:\"CS\",name:\"RETIRED_ModifiedImageID\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,3403)\":{tag:\"(0020,3403)\",vr:\"DA\",name:\"RETIRED_ModifiedImageDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,3404)\":{tag:\"(0020,3404)\",vr:\"LO\",name:\"RETIRED_ModifyingDeviceManufacturer\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,3405)\":{tag:\"(0020,3405)\",vr:\"TM\",name:\"RETIRED_ModifiedImageTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,3406)\":{tag:\"(0020,3406)\",vr:\"LO\",name:\"RETIRED_ModifiedImageDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(0020,5000)\":{tag:\"(0020,5000)\",vr:\"AT\",name:\"RETIRED_OriginalImageIdentification\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0020,5002)\":{tag:\"(0020,5002)\",vr:\"LO\",name:\"RETIRED_OriginalImageIdentificationNomenclature\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0022,1094)\":{tag:\"(0022,1094)\",vr:\"LO\",name:\"RETIRED_LensConstantDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(0022,1153)\":{tag:\"(0022,1153)\",vr:\"SQ\",name:\"RETIRED_OphthalmicAxialLengthAcquisitionMethodCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0022,1265)\":{tag:\"(0022,1265)\",vr:\"SQ\",name:\"RETIRED_OphthalmicAxialLengthQualityMetricTypeCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0022,1273)\":{tag:\"(0022,1273)\",vr:\"LO\",name:\"RETIRED_OphthalmicAxialLengthQualityMetricTypeDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0005)\":{tag:\"(0028,0005)\",vr:\"US\",name:\"RETIRED_ImageDimensions\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0012)\":{tag:\"(0028,0012)\",vr:\"US\",name:\"RETIRED_Planes\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0040)\":{tag:\"(0028,0040)\",vr:\"CS\",name:\"RETIRED_ImageFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0050)\":{tag:\"(0028,0050)\",vr:\"LO\",name:\"RETIRED_ManipulatedImage\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,005F)\":{tag:\"(0028,005F)\",vr:\"LO\",name:\"RETIRED_CompressionRecognitionCode\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0060)\":{tag:\"(0028,0060)\",vr:\"CS\",name:\"RETIRED_CompressionCode\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0061)\":{tag:\"(0028,0061)\",vr:\"SH\",name:\"RETIRED_CompressionOriginator\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0062)\":{tag:\"(0028,0062)\",vr:\"LO\",name:\"RETIRED_CompressionLabel\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0063)\":{tag:\"(0028,0063)\",vr:\"SH\",name:\"RETIRED_CompressionDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0065)\":{tag:\"(0028,0065)\",vr:\"CS\",name:\"RETIRED_CompressionSequence\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0066)\":{tag:\"(0028,0066)\",vr:\"AT\",name:\"RETIRED_CompressionStepPointers\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0068)\":{tag:\"(0028,0068)\",vr:\"US\",name:\"RETIRED_RepeatInterval\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0069)\":{tag:\"(0028,0069)\",vr:\"US\",name:\"RETIRED_BitsGrouped\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0070)\":{tag:\"(0028,0070)\",vr:\"US\",name:\"RETIRED_PerimeterTable\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0071)\":{tag:\"(0028,0071)\",vr:\"xs\",name:\"RETIRED_PerimeterValue\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0080)\":{tag:\"(0028,0080)\",vr:\"US\",name:\"RETIRED_PredictorRows\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0081)\":{tag:\"(0028,0081)\",vr:\"US\",name:\"RETIRED_PredictorColumns\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0082)\":{tag:\"(0028,0082)\",vr:\"US\",name:\"RETIRED_PredictorConstants\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0090)\":{tag:\"(0028,0090)\",vr:\"CS\",name:\"RETIRED_BlockedPixels\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0091)\":{tag:\"(0028,0091)\",vr:\"US\",name:\"RETIRED_BlockRows\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0092)\":{tag:\"(0028,0092)\",vr:\"US\",name:\"RETIRED_BlockColumns\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0093)\":{tag:\"(0028,0093)\",vr:\"US\",name:\"RETIRED_RowOverlap\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0094)\":{tag:\"(0028,0094)\",vr:\"US\",name:\"RETIRED_ColumnOverlap\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0104)\":{tag:\"(0028,0104)\",vr:\"xs\",name:\"RETIRED_SmallestValidPixelValue\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0105)\":{tag:\"(0028,0105)\",vr:\"xs\",name:\"RETIRED_LargestValidPixelValue\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0110)\":{tag:\"(0028,0110)\",vr:\"xs\",name:\"RETIRED_SmallestImagePixelValueInPlane\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0111)\":{tag:\"(0028,0111)\",vr:\"xs\",name:\"RETIRED_LargestImagePixelValueInPlane\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0200)\":{tag:\"(0028,0200)\",vr:\"US\",name:\"RETIRED_ImageLocation\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0400)\":{tag:\"(0028,0400)\",vr:\"LO\",name:\"RETIRED_TransformLabel\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0401)\":{tag:\"(0028,0401)\",vr:\"LO\",name:\"RETIRED_TransformVersionNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0402)\":{tag:\"(0028,0402)\",vr:\"US\",name:\"RETIRED_NumberOfTransformSteps\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0403)\":{tag:\"(0028,0403)\",vr:\"LO\",name:\"RETIRED_SequenceOfCompressedData\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0404)\":{tag:\"(0028,0404)\",vr:\"AT\",name:\"RETIRED_DetailsOfCoefficients\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0410)\":{tag:\"(0028,0410)\",vr:\"US\",name:\"RETIRED_RowsForNthOrderCoefficients\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0411)\":{tag:\"(0028,0411)\",vr:\"US\",name:\"RETIRED_ColumnsForNthOrderCoefficients\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0412)\":{tag:\"(0028,0412)\",vr:\"LO\",name:\"RETIRED_CoefficientCoding\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0413)\":{tag:\"(0028,0413)\",vr:\"AT\",name:\"RETIRED_CoefficientCodingPointers\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0700)\":{tag:\"(0028,0700)\",vr:\"LO\",name:\"RETIRED_DCTLabel\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0701)\":{tag:\"(0028,0701)\",vr:\"CS\",name:\"RETIRED_DataBlockDescription\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0702)\":{tag:\"(0028,0702)\",vr:\"AT\",name:\"RETIRED_DataBlock\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0710)\":{tag:\"(0028,0710)\",vr:\"US\",name:\"RETIRED_NormalizationFactorFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0720)\":{tag:\"(0028,0720)\",vr:\"US\",name:\"RETIRED_ZonalMapNumberFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0721)\":{tag:\"(0028,0721)\",vr:\"AT\",name:\"RETIRED_ZonalMapLocation\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0722)\":{tag:\"(0028,0722)\",vr:\"US\",name:\"RETIRED_ZonalMapFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0730)\":{tag:\"(0028,0730)\",vr:\"US\",name:\"RETIRED_AdaptiveMapFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0740)\":{tag:\"(0028,0740)\",vr:\"US\",name:\"RETIRED_CodeNumberFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0800)\":{tag:\"(0028,0800)\",vr:\"CS\",name:\"RETIRED_CodeLabel\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0802)\":{tag:\"(0028,0802)\",vr:\"US\",name:\"RETIRED_NumberOfTables\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0803)\":{tag:\"(0028,0803)\",vr:\"AT\",name:\"RETIRED_CodeTableLocation\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,0804)\":{tag:\"(0028,0804)\",vr:\"US\",name:\"RETIRED_BitsForCodeWord\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,0808)\":{tag:\"(0028,0808)\",vr:\"AT\",name:\"RETIRED_ImageDataLocation\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,1080)\":{tag:\"(0028,1080)\",vr:\"CS\",name:\"RETIRED_GrayScale\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,1100)\":{tag:\"(0028,1100)\",vr:\"xs\",name:\"RETIRED_GrayLookupTableDescriptor\",vm:\"3\",version:\"DICOM/retired\"},\"(0028,1111)\":{tag:\"(0028,1111)\",vr:\"xs\",name:\"RETIRED_LargeRedPaletteColorLookupTableDescriptor\",vm:\"4\",version:\"DICOM/retired\"},\"(0028,1112)\":{tag:\"(0028,1112)\",vr:\"xs\",name:\"RETIRED_LargeGreenPaletteColorLookupTableDescriptor\",vm:\"4\",version:\"DICOM/retired\"},\"(0028,1113)\":{tag:\"(0028,1113)\",vr:\"xs\",name:\"RETIRED_LargeBluePaletteColorLookupTableDescriptor\",vm:\"4\",version:\"DICOM/retired\"},\"(0028,1200)\":{tag:\"(0028,1200)\",vr:\"lt\",name:\"RETIRED_GrayLookupTableData\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,1211)\":{tag:\"(0028,1211)\",vr:\"OW\",name:\"RETIRED_LargeRedPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,1212)\":{tag:\"(0028,1212)\",vr:\"OW\",name:\"RETIRED_LargeGreenPaletteColorLookupTableData\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,1213)\":{tag:\"(0028,1213)\",vr:\"OW\",name:\"RETIRED_LargeBluePaletteColorLookupTableData\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,1214)\":{tag:\"(0028,1214)\",vr:\"UI\",name:\"RETIRED_LargePaletteColorLookupTableUID\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,4000)\":{tag:\"(0028,4000)\",vr:\"LT\",name:\"RETIRED_ImagePresentationComments\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,5000)\":{tag:\"(0028,5000)\",vr:\"SQ\",name:\"RETIRED_BiPlaneAcquisitionSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0028,6030)\":{tag:\"(0028,6030)\",vr:\"US\",name:\"RETIRED_MaskPointers\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0028,9099)\":{tag:\"(0028,9099)\",vr:\"US\",name:\"RETIRED_LargestMonochromePixelValue\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,000A)\":{tag:\"(0032,000A)\",vr:\"CS\",name:\"RETIRED_StudyStatusID\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,000C)\":{tag:\"(0032,000C)\",vr:\"CS\",name:\"RETIRED_StudyPriorityID\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,0012)\":{tag:\"(0032,0012)\",vr:\"LO\",name:\"RETIRED_StudyIDIssuer\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,0032)\":{tag:\"(0032,0032)\",vr:\"DA\",name:\"RETIRED_StudyVerifiedDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,0033)\":{tag:\"(0032,0033)\",vr:\"TM\",name:\"RETIRED_StudyVerifiedTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,0034)\":{tag:\"(0032,0034)\",vr:\"DA\",name:\"RETIRED_StudyReadDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,0035)\":{tag:\"(0032,0035)\",vr:\"TM\",name:\"RETIRED_StudyReadTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1000)\":{tag:\"(0032,1000)\",vr:\"DA\",name:\"RETIRED_ScheduledStudyStartDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1001)\":{tag:\"(0032,1001)\",vr:\"TM\",name:\"RETIRED_ScheduledStudyStartTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1010)\":{tag:\"(0032,1010)\",vr:\"DA\",name:\"RETIRED_ScheduledStudyStopDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1011)\":{tag:\"(0032,1011)\",vr:\"TM\",name:\"RETIRED_ScheduledStudyStopTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1020)\":{tag:\"(0032,1020)\",vr:\"LO\",name:\"RETIRED_ScheduledStudyLocation\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1021)\":{tag:\"(0032,1021)\",vr:\"AE\",name:\"RETIRED_ScheduledStudyLocationAETitle\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0032,1030)\":{tag:\"(0032,1030)\",vr:\"LO\",name:\"RETIRED_ReasonForStudy\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1040)\":{tag:\"(0032,1040)\",vr:\"DA\",name:\"RETIRED_StudyArrivalDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1041)\":{tag:\"(0032,1041)\",vr:\"TM\",name:\"RETIRED_StudyArrivalTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1050)\":{tag:\"(0032,1050)\",vr:\"DA\",name:\"RETIRED_StudyCompletionDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1051)\":{tag:\"(0032,1051)\",vr:\"TM\",name:\"RETIRED_StudyCompletionTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,1055)\":{tag:\"(0032,1055)\",vr:\"CS\",name:\"RETIRED_StudyComponentStatusID\",vm:\"1\",version:\"DICOM/retired\"},\"(0032,4000)\":{tag:\"(0032,4000)\",vr:\"LT\",name:\"RETIRED_StudyComments\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,0011)\":{tag:\"(0038,0011)\",vr:\"LO\",name:\"RETIRED_IssuerOfAdmissionID\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,001A)\":{tag:\"(0038,001A)\",vr:\"DA\",name:\"RETIRED_ScheduledAdmissionDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,001B)\":{tag:\"(0038,001B)\",vr:\"TM\",name:\"RETIRED_ScheduledAdmissionTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,001C)\":{tag:\"(0038,001C)\",vr:\"DA\",name:\"RETIRED_ScheduledDischargeDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,001D)\":{tag:\"(0038,001D)\",vr:\"TM\",name:\"RETIRED_ScheduledDischargeTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,001E)\":{tag:\"(0038,001E)\",vr:\"LO\",name:\"RETIRED_ScheduledPatientInstitutionResidence\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,0030)\":{tag:\"(0038,0030)\",vr:\"DA\",name:\"RETIRED_DischargeDate\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,0032)\":{tag:\"(0038,0032)\",vr:\"TM\",name:\"RETIRED_DischargeTime\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,0040)\":{tag:\"(0038,0040)\",vr:\"LO\",name:\"RETIRED_DischargeDiagnosisDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,0044)\":{tag:\"(0038,0044)\",vr:\"SQ\",name:\"RETIRED_DischargeDiagnosisCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0038,0061)\":{tag:\"(0038,0061)\",vr:\"LO\",name:\"RETIRED_IssuerOfServiceEpisodeID\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,0307)\":{tag:\"(0040,0307)\",vr:\"DS\",name:\"RETIRED_DistanceSourceToSupport\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,0330)\":{tag:\"(0040,0330)\",vr:\"SQ\",name:\"RETIRED_ReferencedProcedureStepSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,050A)\":{tag:\"(0040,050A)\",vr:\"LO\",name:\"RETIRED_SpecimenAccessionNumber\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,0550)\":{tag:\"(0040,0550)\",vr:\"SQ\",name:\"RETIRED_SpecimenSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,0552)\":{tag:\"(0040,0552)\",vr:\"SQ\",name:\"RETIRED_SpecimenDescriptionSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,0553)\":{tag:\"(0040,0553)\",vr:\"ST\",name:\"RETIRED_SpecimenDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,06FA)\":{tag:\"(0040,06FA)\",vr:\"LO\",name:\"RETIRED_SlideIdentifier\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,08D8)\":{tag:\"(0040,08D8)\",vr:\"SQ\",name:\"RETIRED_PixelSpacingSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,08DA)\":{tag:\"(0040,08DA)\",vr:\"SQ\",name:\"RETIRED_CoordinateSystemAxisCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,09F8)\":{tag:\"(0040,09F8)\",vr:\"SQ\",name:\"RETIRED_VitalStainCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,1006)\":{tag:\"(0040,1006)\",vr:\"SH\",name:\"RETIRED_PlacerOrderNumberProcedure\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,1007)\":{tag:\"(0040,1007)\",vr:\"SH\",name:\"RETIRED_FillerOrderNumberProcedure\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,1060)\":{tag:\"(0040,1060)\",vr:\"LO\",name:\"RETIRED_RequestedProcedureDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,2001)\":{tag:\"(0040,2001)\",vr:\"LO\",name:\"RETIRED_ReasonForTheImagingServiceRequest\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,2006)\":{tag:\"(0040,2006)\",vr:\"SH\",name:\"RETIRED_PlacerOrderNumberImagingServiceRequestRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,2007)\":{tag:\"(0040,2007)\",vr:\"SH\",name:\"RETIRED_FillerOrderNumberImagingServiceRequestRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4001)\":{tag:\"(0040,4001)\",vr:\"CS\",name:\"RETIRED_GeneralPurposeScheduledProcedureStepStatus\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4002)\":{tag:\"(0040,4002)\",vr:\"CS\",name:\"RETIRED_GeneralPurposePerformedProcedureStepStatus\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4003)\":{tag:\"(0040,4003)\",vr:\"CS\",name:\"RETIRED_GeneralPurposeScheduledProcedureStepPriority\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4004)\":{tag:\"(0040,4004)\",vr:\"SQ\",name:\"RETIRED_ScheduledProcessingApplicationsCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4006)\":{tag:\"(0040,4006)\",vr:\"CS\",name:\"RETIRED_MultipleCopiesFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4015)\":{tag:\"(0040,4015)\",vr:\"SQ\",name:\"RETIRED_ResultingGeneralPurposePerformedProcedureStepsSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4016)\":{tag:\"(0040,4016)\",vr:\"SQ\",name:\"RETIRED_ReferencedGeneralPurposeScheduledProcedureStepSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4022)\":{tag:\"(0040,4022)\",vr:\"SQ\",name:\"RETIRED_RelevantInformationSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4023)\":{tag:\"(0040,4023)\",vr:\"UI\",name:\"RETIRED_ReferencedGeneralPurposeScheduledProcedureStepTransactionUID\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4031)\":{tag:\"(0040,4031)\",vr:\"SQ\",name:\"RETIRED_RequestedSubsequentWorkitemCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,4032)\":{tag:\"(0040,4032)\",vr:\"SQ\",name:\"RETIRED_NonDICOMOutputCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A007)\":{tag:\"(0040,A007)\",vr:\"CS\",name:\"RETIRED_FindingsFlagTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A020)\":{tag:\"(0040,A020)\",vr:\"SQ\",name:\"RETIRED_FindingsSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A021)\":{tag:\"(0040,A021)\",vr:\"UI\",name:\"RETIRED_FindingsGroupUIDTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A022)\":{tag:\"(0040,A022)\",vr:\"UI\",name:\"RETIRED_ReferencedFindingsGroupUIDTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A023)\":{tag:\"(0040,A023)\",vr:\"DA\",name:\"RETIRED_FindingsGroupRecordingDateTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A024)\":{tag:\"(0040,A024)\",vr:\"TM\",name:\"RETIRED_FindingsGroupRecordingTimeTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A026)\":{tag:\"(0040,A026)\",vr:\"SQ\",name:\"RETIRED_FindingsSourceCategoryCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A028)\":{tag:\"(0040,A028)\",vr:\"SQ\",name:\"RETIRED_DocumentingOrganizationIdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A047)\":{tag:\"(0040,A047)\",vr:\"LO\",name:\"RETIRED_MeasurementPrecisionDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A057)\":{tag:\"(0040,A057)\",vr:\"CS\",name:\"RETIRED_UrgencyOrPriorityAlertsTrial\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0040,A060)\":{tag:\"(0040,A060)\",vr:\"LO\",name:\"RETIRED_SequencingIndicatorTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A066)\":{tag:\"(0040,A066)\",vr:\"SQ\",name:\"RETIRED_DocumentIdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A067)\":{tag:\"(0040,A067)\",vr:\"PN\",name:\"RETIRED_DocumentAuthorTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A068)\":{tag:\"(0040,A068)\",vr:\"SQ\",name:\"RETIRED_DocumentAuthorIdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A070)\":{tag:\"(0040,A070)\",vr:\"SQ\",name:\"RETIRED_IdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A074)\":{tag:\"(0040,A074)\",vr:\"OB\",name:\"RETIRED_ObjectBinaryIdentifierTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A076)\":{tag:\"(0040,A076)\",vr:\"SQ\",name:\"RETIRED_DocumentingObserverIdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A085)\":{tag:\"(0040,A085)\",vr:\"SQ\",name:\"RETIRED_ProcedureIdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A089)\":{tag:\"(0040,A089)\",vr:\"OB\",name:\"RETIRED_ObjectDirectoryBinaryIdentifierTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A090)\":{tag:\"(0040,A090)\",vr:\"SQ\",name:\"RETIRED_EquivalentCDADocumentSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A110)\":{tag:\"(0040,A110)\",vr:\"DA\",name:\"RETIRED_DateOfDocumentOrVerbalTransactionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A112)\":{tag:\"(0040,A112)\",vr:\"TM\",name:\"RETIRED_TimeOfDocumentCreationOrVerbalTransactionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A125)\":{tag:\"(0040,A125)\",vr:\"CS\",name:\"RETIRED_ReportStatusIDTrial\",vm:\"2\",version:\"DICOM/retired\"},\"(0040,A167)\":{tag:\"(0040,A167)\",vr:\"SQ\",name:\"RETIRED_ObservationCategoryCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A16A)\":{tag:\"(0040,A16A)\",vr:\"ST\",name:\"RETIRED_BibliographicCitationTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A172)\":{tag:\"(0040,A172)\",vr:\"UI\",name:\"RETIRED_ReferencedObservationUIDTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A173)\":{tag:\"(0040,A173)\",vr:\"CS\",name:\"RETIRED_ReferencedObservationClassTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A174)\":{tag:\"(0040,A174)\",vr:\"CS\",name:\"RETIRED_ReferencedObjectObservationClassTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A192)\":{tag:\"(0040,A192)\",vr:\"DA\",name:\"RETIRED_ObservationDateTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A193)\":{tag:\"(0040,A193)\",vr:\"TM\",name:\"RETIRED_ObservationTimeTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A194)\":{tag:\"(0040,A194)\",vr:\"CS\",name:\"RETIRED_MeasurementAutomationTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A224)\":{tag:\"(0040,A224)\",vr:\"ST\",name:\"RETIRED_IdentificationDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A290)\":{tag:\"(0040,A290)\",vr:\"CS\",name:\"RETIRED_CoordinatesSetGeometricTypeTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A296)\":{tag:\"(0040,A296)\",vr:\"SQ\",name:\"RETIRED_AlgorithmCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A297)\":{tag:\"(0040,A297)\",vr:\"ST\",name:\"RETIRED_AlgorithmDescriptionTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A29A)\":{tag:\"(0040,A29A)\",vr:\"SL\",name:\"RETIRED_PixelCoordinatesSetTrial\",vm:\"2-2n\",version:\"DICOM/retired\"},\"(0040,A307)\":{tag:\"(0040,A307)\",vr:\"PN\",name:\"RETIRED_CurrentObserverTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A313)\":{tag:\"(0040,A313)\",vr:\"SQ\",name:\"RETIRED_ReferencedAccessionSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A33A)\":{tag:\"(0040,A33A)\",vr:\"ST\",name:\"RETIRED_ReportStatusCommentTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A340)\":{tag:\"(0040,A340)\",vr:\"SQ\",name:\"RETIRED_ProcedureContextSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A352)\":{tag:\"(0040,A352)\",vr:\"PN\",name:\"RETIRED_VerbalSourceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A353)\":{tag:\"(0040,A353)\",vr:\"ST\",name:\"RETIRED_AddressTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A354)\":{tag:\"(0040,A354)\",vr:\"LO\",name:\"RETIRED_TelephoneNumberTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A358)\":{tag:\"(0040,A358)\",vr:\"SQ\",name:\"RETIRED_VerbalSourceIdentifierCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A380)\":{tag:\"(0040,A380)\",vr:\"SQ\",name:\"RETIRED_ReportDetailSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A402)\":{tag:\"(0040,A402)\",vr:\"UI\",name:\"RETIRED_ObservationSubjectUIDTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A403)\":{tag:\"(0040,A403)\",vr:\"CS\",name:\"RETIRED_ObservationSubjectClassTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A404)\":{tag:\"(0040,A404)\",vr:\"SQ\",name:\"RETIRED_ObservationSubjectTypeCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A600)\":{tag:\"(0040,A600)\",vr:\"CS\",name:\"RETIRED_ObservationSubjectContextFlagTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A601)\":{tag:\"(0040,A601)\",vr:\"CS\",name:\"RETIRED_ObserverContextFlagTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A603)\":{tag:\"(0040,A603)\",vr:\"CS\",name:\"RETIRED_ProcedureContextFlagTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A731)\":{tag:\"(0040,A731)\",vr:\"SQ\",name:\"RETIRED_RelationshipSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A732)\":{tag:\"(0040,A732)\",vr:\"SQ\",name:\"RETIRED_RelationshipTypeCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A744)\":{tag:\"(0040,A744)\",vr:\"SQ\",name:\"RETIRED_LanguageCodeSequenceTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,A992)\":{tag:\"(0040,A992)\",vr:\"ST\",name:\"RETIRED_UniformResourceLocatorTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,DB06)\":{tag:\"(0040,DB06)\",vr:\"DT\",name:\"RETIRED_TemplateVersion\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,DB07)\":{tag:\"(0040,DB07)\",vr:\"DT\",name:\"RETIRED_TemplateLocalVersion\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,DB0B)\":{tag:\"(0040,DB0B)\",vr:\"CS\",name:\"RETIRED_TemplateExtensionFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,DB0C)\":{tag:\"(0040,DB0C)\",vr:\"UI\",name:\"RETIRED_TemplateExtensionOrganizationUID\",vm:\"1\",version:\"DICOM/retired\"},\"(0040,DB0D)\":{tag:\"(0040,DB0D)\",vr:\"UI\",name:\"RETIRED_TemplateExtensionCreatorUID\",vm:\"1\",version:\"DICOM/retired\"},\"(0054,1400)\":{tag:\"(0054,1400)\",vr:\"CS\",name:\"RETIRED_CountsIncluded\",vm:\"1-n\",version:\"DICOM/retired\"},\"(0054,1401)\":{tag:\"(0054,1401)\",vr:\"CS\",name:\"RETIRED_DeadTimeCorrectionFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(0070,0040)\":{tag:\"(0070,0040)\",vr:\"IS\",name:\"RETIRED_ImageRotationRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(0070,0050)\":{tag:\"(0070,0050)\",vr:\"US\",name:\"RETIRED_DisplayedAreaTopLeftHandCornerTrial\",vm:\"2\",version:\"DICOM/retired\"},\"(0070,0051)\":{tag:\"(0070,0051)\",vr:\"US\",name:\"RETIRED_DisplayedAreaBottomRightHandCornerTrial\",vm:\"2\",version:\"DICOM/retired\"},\"(0070,0067)\":{tag:\"(0070,0067)\",vr:\"US\",name:\"RETIRED_GraphicLayerRecommendedDisplayRGBValue\",vm:\"3\",version:\"DICOM/retired\"},\"(0074,1024)\":{tag:\"(0074,1024)\",vr:\"IS\",name:\"RETIRED_BeamOrderIndexTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0074,1038)\":{tag:\"(0074,1038)\",vr:\"DS\",name:\"RETIRED_DoubleExposureMetersetTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(0074,103A)\":{tag:\"(0074,103A)\",vr:\"DS\",name:\"RETIRED_DoubleExposureFieldDeltaTrial\",vm:\"4\",version:\"DICOM/retired\"},\"(0074,1220)\":{tag:\"(0074,1220)\",vr:\"SQ\",name:\"RETIRED_RelatedProcedureStepSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(0074,1222)\":{tag:\"(0074,1222)\",vr:\"LO\",name:\"RETIRED_ProcedureStepRelationshipType\",vm:\"1\",version:\"DICOM/retired\"},\"(0088,0904)\":{tag:\"(0088,0904)\",vr:\"LO\",name:\"RETIRED_TopicTitle\",vm:\"1\",version:\"DICOM/retired\"},\"(0088,0906)\":{tag:\"(0088,0906)\",vr:\"ST\",name:\"RETIRED_TopicSubject\",vm:\"1\",version:\"DICOM/retired\"},\"(0088,0910)\":{tag:\"(0088,0910)\",vr:\"LO\",name:\"RETIRED_TopicAuthor\",vm:\"1\",version:\"DICOM/retired\"},\"(0088,0912)\":{tag:\"(0088,0912)\",vr:\"LO\",name:\"RETIRED_TopicKeywords\",vm:\"1-32\",version:\"DICOM/retired\"},\"(0400,0315)\":{tag:\"(0400,0315)\",vr:\"FL\",name:\"RETIRED_undefined\",vm:\"1\",version:\"DICOM/retired\"},\"(1000,0010)\":{tag:\"(1000,0010)\",vr:\"US\",name:\"RETIRED_EscapeTriplet\",vm:\"3\",version:\"DICOM/retired\"},\"(1000,0011)\":{tag:\"(1000,0011)\",vr:\"US\",name:\"RETIRED_RunLengthTriplet\",vm:\"3\",version:\"DICOM/retired\"},\"(1000,0012)\":{tag:\"(1000,0012)\",vr:\"US\",name:\"RETIRED_HuffmanTableSize\",vm:\"1\",version:\"DICOM/retired\"},\"(1000,0013)\":{tag:\"(1000,0013)\",vr:\"US\",name:\"RETIRED_HuffmanTableTriplet\",vm:\"3\",version:\"DICOM/retired\"},\"(1000,0014)\":{tag:\"(1000,0014)\",vr:\"US\",name:\"RETIRED_ShiftTableSize\",vm:\"1\",version:\"DICOM/retired\"},\"(1000,0015)\":{tag:\"(1000,0015)\",vr:\"US\",name:\"RETIRED_ShiftTableTriplet\",vm:\"3\",version:\"DICOM/retired\"},\"(1010,0004)\":{tag:\"(1010,0004)\",vr:\"US\",name:\"RETIRED_ZonalMap\",vm:\"1-n\",version:\"DICOM/retired\"},\"(2000,0062)\":{tag:\"(2000,0062)\",vr:\"CS\",name:\"RETIRED_ColorImagePrintingFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(2000,0063)\":{tag:\"(2000,0063)\",vr:\"CS\",name:\"RETIRED_CollationFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(2000,0065)\":{tag:\"(2000,0065)\",vr:\"CS\",name:\"RETIRED_AnnotationFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(2000,0067)\":{tag:\"(2000,0067)\",vr:\"CS\",name:\"RETIRED_ImageOverlayFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(2000,0069)\":{tag:\"(2000,0069)\",vr:\"CS\",name:\"RETIRED_PresentationLUTFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(2000,006A)\":{tag:\"(2000,006A)\",vr:\"CS\",name:\"RETIRED_ImageBoxPresentationLUTFlag\",vm:\"1\",version:\"DICOM/retired\"},\"(2000,0510)\":{tag:\"(2000,0510)\",vr:\"SQ\",name:\"RETIRED_ReferencedStoredPrintSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2020,0130)\":{tag:\"(2020,0130)\",vr:\"SQ\",name:\"RETIRED_ReferencedImageOverlayBoxSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2020,0140)\":{tag:\"(2020,0140)\",vr:\"SQ\",name:\"RETIRED_ReferencedVOILUTBoxSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0010)\":{tag:\"(2040,0010)\",vr:\"SQ\",name:\"RETIRED_ReferencedOverlayPlaneSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0011)\":{tag:\"(2040,0011)\",vr:\"US\",name:\"RETIRED_ReferencedOverlayPlaneGroups\",vm:\"1-99\",version:\"DICOM/retired\"},\"(2040,0020)\":{tag:\"(2040,0020)\",vr:\"SQ\",name:\"RETIRED_OverlayPixelDataSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0060)\":{tag:\"(2040,0060)\",vr:\"CS\",name:\"RETIRED_OverlayMagnificationType\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0070)\":{tag:\"(2040,0070)\",vr:\"CS\",name:\"RETIRED_OverlaySmoothingType\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0072)\":{tag:\"(2040,0072)\",vr:\"CS\",name:\"RETIRED_OverlayOrImageMagnification\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0074)\":{tag:\"(2040,0074)\",vr:\"US\",name:\"RETIRED_MagnifyToNumberOfColumns\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0080)\":{tag:\"(2040,0080)\",vr:\"CS\",name:\"RETIRED_OverlayForegroundDensity\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0082)\":{tag:\"(2040,0082)\",vr:\"CS\",name:\"RETIRED_OverlayBackgroundDensity\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0090)\":{tag:\"(2040,0090)\",vr:\"CS\",name:\"RETIRED_OverlayMode\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0100)\":{tag:\"(2040,0100)\",vr:\"CS\",name:\"RETIRED_ThresholdDensity\",vm:\"1\",version:\"DICOM/retired\"},\"(2040,0500)\":{tag:\"(2040,0500)\",vr:\"SQ\",name:\"RETIRED_ReferencedImageBoxSequenceRetired\",vm:\"1\",version:\"DICOM/retired\"},\"(2100,0010)\":{tag:\"(2100,0010)\",vr:\"SH\",name:\"RETIRED_PrintJobID\",vm:\"1\",version:\"DICOM/retired\"},\"(2100,0140)\":{tag:\"(2100,0140)\",vr:\"AE\",name:\"RETIRED_DestinationAE\",vm:\"1\",version:\"DICOM/retired\"},\"(2100,0500)\":{tag:\"(2100,0500)\",vr:\"SQ\",name:\"RETIRED_ReferencedPrintJobSequencePullStoredPrint\",vm:\"1\",version:\"DICOM/retired\"},\"(2110,0099)\":{tag:\"(2110,0099)\",vr:\"SH\",name:\"RETIRED_PrintQueueID\",vm:\"1\",version:\"DICOM/retired\"},\"(2120,0010)\":{tag:\"(2120,0010)\",vr:\"CS\",name:\"RETIRED_QueueStatus\",vm:\"1\",version:\"DICOM/retired\"},\"(2120,0050)\":{tag:\"(2120,0050)\",vr:\"SQ\",name:\"RETIRED_PrintJobDescriptionSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2120,0070)\":{tag:\"(2120,0070)\",vr:\"SQ\",name:\"RETIRED_ReferencedPrintJobSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0010)\":{tag:\"(2130,0010)\",vr:\"SQ\",name:\"RETIRED_PrintManagementCapabilitiesSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0015)\":{tag:\"(2130,0015)\",vr:\"SQ\",name:\"RETIRED_PrinterCharacteristicsSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0030)\":{tag:\"(2130,0030)\",vr:\"SQ\",name:\"RETIRED_FilmBoxContentSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0040)\":{tag:\"(2130,0040)\",vr:\"SQ\",name:\"RETIRED_ImageBoxContentSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0050)\":{tag:\"(2130,0050)\",vr:\"SQ\",name:\"RETIRED_AnnotationContentSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0060)\":{tag:\"(2130,0060)\",vr:\"SQ\",name:\"RETIRED_ImageOverlayBoxContentSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,0080)\":{tag:\"(2130,0080)\",vr:\"SQ\",name:\"RETIRED_PresentationLUTContentSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,00A0)\":{tag:\"(2130,00A0)\",vr:\"SQ\",name:\"RETIRED_ProposedStudySequence\",vm:\"1\",version:\"DICOM/retired\"},\"(2130,00C0)\":{tag:\"(2130,00C0)\",vr:\"SQ\",name:\"RETIRED_OriginalImageSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(3006,00C0)\":{tag:\"(3006,00C0)\",vr:\"SQ\",name:\"RETIRED_FrameOfReferenceRelationshipSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(3006,00C2)\":{tag:\"(3006,00C2)\",vr:\"UI\",name:\"RETIRED_RelatedFrameOfReferenceUID\",vm:\"1\",version:\"DICOM/retired\"},\"(3006,00C4)\":{tag:\"(3006,00C4)\",vr:\"CS\",name:\"RETIRED_FrameOfReferenceTransformationType\",vm:\"1\",version:\"DICOM/retired\"},\"(300A,0088)\":{tag:\"(300A,0088)\",vr:\"FL\",name:\"RETIRED_BeamDosePointDepth\",vm:\"1\",version:\"DICOM/retired\"},\"(300A,0089)\":{tag:\"(300A,0089)\",vr:\"FL\",name:\"RETIRED_BeamDosePointEquivalentDepth\",vm:\"1\",version:\"DICOM/retired\"},\"(300A,008A)\":{tag:\"(300A,008A)\",vr:\"FL\",name:\"RETIRED_BeamDosePointSSD\",vm:\"1\",version:\"DICOM/retired\"},\"(300A,0782)\":{tag:\"(300A,0782)\",vr:\"US\",name:\"RETIRED_undefined\",vm:\"1\",version:\"DICOM/retired\"},\"(4000,0010)\":{tag:\"(4000,0010)\",vr:\"LT\",name:\"RETIRED_Arbitrary\",vm:\"1\",version:\"DICOM/retired\"},\"(4000,4000)\":{tag:\"(4000,4000)\",vr:\"LT\",name:\"RETIRED_TextComments\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0040)\":{tag:\"(4008,0040)\",vr:\"SH\",name:\"RETIRED_ResultsID\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0042)\":{tag:\"(4008,0042)\",vr:\"LO\",name:\"RETIRED_ResultsIDIssuer\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0050)\":{tag:\"(4008,0050)\",vr:\"SQ\",name:\"RETIRED_ReferencedInterpretationSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,00FF)\":{tag:\"(4008,00FF)\",vr:\"CS\",name:\"RETIRED_ReportProductionStatusTrial\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0100)\":{tag:\"(4008,0100)\",vr:\"DA\",name:\"RETIRED_InterpretationRecordedDate\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0101)\":{tag:\"(4008,0101)\",vr:\"TM\",name:\"RETIRED_InterpretationRecordedTime\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0102)\":{tag:\"(4008,0102)\",vr:\"PN\",name:\"RETIRED_InterpretationRecorder\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0103)\":{tag:\"(4008,0103)\",vr:\"LO\",name:\"RETIRED_ReferenceToRecordedSound\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0108)\":{tag:\"(4008,0108)\",vr:\"DA\",name:\"RETIRED_InterpretationTranscriptionDate\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0109)\":{tag:\"(4008,0109)\",vr:\"TM\",name:\"RETIRED_InterpretationTranscriptionTime\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,010A)\":{tag:\"(4008,010A)\",vr:\"PN\",name:\"RETIRED_InterpretationTranscriber\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,010B)\":{tag:\"(4008,010B)\",vr:\"ST\",name:\"RETIRED_InterpretationText\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,010C)\":{tag:\"(4008,010C)\",vr:\"PN\",name:\"RETIRED_InterpretationAuthor\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0111)\":{tag:\"(4008,0111)\",vr:\"SQ\",name:\"RETIRED_InterpretationApproverSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0112)\":{tag:\"(4008,0112)\",vr:\"DA\",name:\"RETIRED_InterpretationApprovalDate\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0113)\":{tag:\"(4008,0113)\",vr:\"TM\",name:\"RETIRED_InterpretationApprovalTime\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0114)\":{tag:\"(4008,0114)\",vr:\"PN\",name:\"RETIRED_PhysicianApprovingInterpretation\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0115)\":{tag:\"(4008,0115)\",vr:\"LT\",name:\"RETIRED_InterpretationDiagnosisDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0117)\":{tag:\"(4008,0117)\",vr:\"SQ\",name:\"RETIRED_InterpretationDiagnosisCodeSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0118)\":{tag:\"(4008,0118)\",vr:\"SQ\",name:\"RETIRED_ResultsDistributionListSequence\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0119)\":{tag:\"(4008,0119)\",vr:\"PN\",name:\"RETIRED_DistributionName\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,011A)\":{tag:\"(4008,011A)\",vr:\"LO\",name:\"RETIRED_DistributionAddress\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0200)\":{tag:\"(4008,0200)\",vr:\"SH\",name:\"RETIRED_InterpretationID\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0202)\":{tag:\"(4008,0202)\",vr:\"LO\",name:\"RETIRED_InterpretationIDIssuer\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0210)\":{tag:\"(4008,0210)\",vr:\"CS\",name:\"RETIRED_InterpretationTypeID\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0212)\":{tag:\"(4008,0212)\",vr:\"CS\",name:\"RETIRED_InterpretationStatusID\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,0300)\":{tag:\"(4008,0300)\",vr:\"ST\",name:\"RETIRED_Impressions\",vm:\"1\",version:\"DICOM/retired\"},\"(4008,4000)\":{tag:\"(4008,4000)\",vr:\"ST\",name:\"RETIRED_ResultsComments\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,0005)\":{tag:\"(5000-50FF,0005)\",vr:\"US\",name:\"RETIRED_CurveDimensions\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,0010)\":{tag:\"(5000-50FF,0010)\",vr:\"US\",name:\"RETIRED_NumberOfPoints\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,0020)\":{tag:\"(5000-50FF,0020)\",vr:\"CS\",name:\"RETIRED_TypeOfData\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,0022)\":{tag:\"(5000-50FF,0022)\",vr:\"LO\",name:\"RETIRED_CurveDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,0030)\":{tag:\"(5000-50FF,0030)\",vr:\"SH\",name:\"RETIRED_AxisUnits\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0040)\":{tag:\"(5000-50FF,0040)\",vr:\"SH\",name:\"RETIRED_AxisLabels\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0103)\":{tag:\"(5000-50FF,0103)\",vr:\"US\",name:\"RETIRED_DataValueRepresentation\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,0104)\":{tag:\"(5000-50FF,0104)\",vr:\"US\",name:\"RETIRED_MinimumCoordinateValue\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0105)\":{tag:\"(5000-50FF,0105)\",vr:\"US\",name:\"RETIRED_MaximumCoordinateValue\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0106)\":{tag:\"(5000-50FF,0106)\",vr:\"SH\",name:\"RETIRED_CurveRange\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0110)\":{tag:\"(5000-50FF,0110)\",vr:\"US\",name:\"RETIRED_CurveDataDescriptor\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0112)\":{tag:\"(5000-50FF,0112)\",vr:\"US\",name:\"RETIRED_CoordinateStartValue\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,0114)\":{tag:\"(5000-50FF,0114)\",vr:\"US\",name:\"RETIRED_CoordinateStepValue\",vm:\"1-n\",version:\"DICOM/retired\"},\"(5000-50FF,1001)\":{tag:\"(5000-50FF,1001)\",vr:\"CS\",name:\"RETIRED_CurveActivationLayer\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2000)\":{tag:\"(5000-50FF,2000)\",vr:\"US\",name:\"RETIRED_AudioType\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2002)\":{tag:\"(5000-50FF,2002)\",vr:\"US\",name:\"RETIRED_AudioSampleFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2004)\":{tag:\"(5000-50FF,2004)\",vr:\"US\",name:\"RETIRED_NumberOfChannels\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2006)\":{tag:\"(5000-50FF,2006)\",vr:\"UL\",name:\"RETIRED_NumberOfSamples\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2008)\":{tag:\"(5000-50FF,2008)\",vr:\"UL\",name:\"RETIRED_SampleRate\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,200A)\":{tag:\"(5000-50FF,200A)\",vr:\"UL\",name:\"RETIRED_TotalTime\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,200C)\":{tag:\"(5000-50FF,200C)\",vr:\"ox\",name:\"RETIRED_AudioSampleData\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,200E)\":{tag:\"(5000-50FF,200E)\",vr:\"LT\",name:\"RETIRED_AudioComments\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2500)\":{tag:\"(5000-50FF,2500)\",vr:\"LO\",name:\"RETIRED_CurveLabel\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2600)\":{tag:\"(5000-50FF,2600)\",vr:\"SQ\",name:\"RETIRED_CurveReferencedOverlaySequence\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,2610)\":{tag:\"(5000-50FF,2610)\",vr:\"US\",name:\"RETIRED_CurveReferencedOverlayGroup\",vm:\"1\",version:\"DICOM/retired\"},\"(5000-50FF,3000)\":{tag:\"(5000-50FF,3000)\",vr:\"ox\",name:\"RETIRED_CurveData\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0012)\":{tag:\"(6000-60FF,0012)\",vr:\"US\",name:\"RETIRED_OverlayPlanes\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0052)\":{tag:\"(6000-60FF,0052)\",vr:\"US\",name:\"RETIRED_OverlayPlaneOrigin\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0060)\":{tag:\"(6000-60FF,0060)\",vr:\"CS\",name:\"RETIRED_OverlayCompressionCode\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0061)\":{tag:\"(6000-60FF,0061)\",vr:\"SH\",name:\"RETIRED_OverlayCompressionOriginator\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0062)\":{tag:\"(6000-60FF,0062)\",vr:\"SH\",name:\"RETIRED_OverlayCompressionLabel\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0063)\":{tag:\"(6000-60FF,0063)\",vr:\"CS\",name:\"RETIRED_OverlayCompressionDescription\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0066)\":{tag:\"(6000-60FF,0066)\",vr:\"AT\",name:\"RETIRED_OverlayCompressionStepPointers\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,0068)\":{tag:\"(6000-60FF,0068)\",vr:\"US\",name:\"RETIRED_OverlayRepeatInterval\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0069)\":{tag:\"(6000-60FF,0069)\",vr:\"US\",name:\"RETIRED_OverlayBitsGrouped\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0110)\":{tag:\"(6000-60FF,0110)\",vr:\"CS\",name:\"RETIRED_OverlayFormat\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0200)\":{tag:\"(6000-60FF,0200)\",vr:\"US\",name:\"RETIRED_OverlayLocation\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0800)\":{tag:\"(6000-60FF,0800)\",vr:\"CS\",name:\"RETIRED_OverlayCodeLabel\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,0802)\":{tag:\"(6000-60FF,0802)\",vr:\"US\",name:\"RETIRED_OverlayNumberOfTables\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,0803)\":{tag:\"(6000-60FF,0803)\",vr:\"AT\",name:\"RETIRED_OverlayCodeTableLocation\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,0804)\":{tag:\"(6000-60FF,0804)\",vr:\"US\",name:\"RETIRED_OverlayBitsForCodeWord\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,1100)\":{tag:\"(6000-60FF,1100)\",vr:\"US\",name:\"RETIRED_OverlayDescriptorGray\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,1101)\":{tag:\"(6000-60FF,1101)\",vr:\"US\",name:\"RETIRED_OverlayDescriptorRed\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,1102)\":{tag:\"(6000-60FF,1102)\",vr:\"US\",name:\"RETIRED_OverlayDescriptorGreen\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,1103)\":{tag:\"(6000-60FF,1103)\",vr:\"US\",name:\"RETIRED_OverlayDescriptorBlue\",vm:\"1\",version:\"DICOM/retired\"},\"(6000-60FF,1200)\":{tag:\"(6000-60FF,1200)\",vr:\"US\",name:\"RETIRED_OverlaysGray\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,1201)\":{tag:\"(6000-60FF,1201)\",vr:\"US\",name:\"RETIRED_OverlaysRed\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,1202)\":{tag:\"(6000-60FF,1202)\",vr:\"US\",name:\"RETIRED_OverlaysGreen\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,1203)\":{tag:\"(6000-60FF,1203)\",vr:\"US\",name:\"RETIRED_OverlaysBlue\",vm:\"1-n\",version:\"DICOM/retired\"},\"(6000-60FF,4000)\":{tag:\"(6000-60FF,4000)\",vr:\"LT\",name:\"RETIRED_OverlayComments\",vm:\"1\",version:\"DICOM/retired\"},\"(7FE0,0020)\":{tag:\"(7FE0,0020)\",vr:\"OW\",name:\"RETIRED_CoefficientsSDVN\",vm:\"1\",version:\"DICOM/retired\"},\"(7FE0,0030)\":{tag:\"(7FE0,0030)\",vr:\"OW\",name:\"RETIRED_CoefficientsSDHN\",vm:\"1\",version:\"DICOM/retired\"},\"(7FE0,0040)\":{tag:\"(7FE0,0040)\",vr:\"OW\",name:\"RETIRED_CoefficientsSDDN\",vm:\"1\",version:\"DICOM/retired\"},\"(7F00-7FFF,0010)\":{tag:\"(7F00-7FFF,0010)\",vr:\"ox\",name:\"RETIRED_VariablePixelData\",vm:\"1\",version:\"DICOM/retired\"},\"(7F00-7FFF,0011)\":{tag:\"(7F00-7FFF,0011)\",vr:\"US\",name:\"RETIRED_VariableNextDataGroup\",vm:\"1\",version:\"DICOM/retired\"},\"(7F00-7FFF,0020)\":{tag:\"(7F00-7FFF,0020)\",vr:\"OW\",name:\"RETIRED_VariableCoefficientsSDVN\",vm:\"1\",version:\"DICOM/retired\"},\"(7F00-7FFF,0030)\":{tag:\"(7F00-7FFF,0030)\",vr:\"OW\",name:\"RETIRED_VariableCoefficientsSDHN\",vm:\"1\",version:\"DICOM/retired\"},\"(7F00-7FFF,0040)\":{tag:\"(7F00-7FFF,0040)\",vr:\"OW\",name:\"RETIRED_VariableCoefficientsSDDN\",vm:\"1\",version:\"DICOM/retired\"},\"\":{tag:\"\"},'(0019,\"1.2.840.113681\",10)':{tag:'(0019,\"1.2.840.113681\",10)',vr:\"ST\",name:\"CRImageParamsCommon\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"1.2.840.113681\",11)':{tag:'(0019,\"1.2.840.113681\",11)',vr:\"ST\",name:\"CRImageIPParamsSingle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"1.2.840.113681\",12)':{tag:'(0019,\"1.2.840.113681\",12)',vr:\"ST\",name:\"CRImageIPParamsLeft\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"1.2.840.113681\",13)':{tag:'(0019,\"1.2.840.113681\",13)',vr:\"ST\",name:\"CRImageIPParamsRight\",vm:\"1\",version:\"PrivateTag\"},'(0087,\"1.2.840.113708.794.1.1.2.0\",10)':{tag:'(0087,\"1.2.840.113708.794.1.1.2.0\",10)',vr:\"CS\",name:\"MediaType\",vm:\"1\",version:\"PrivateTag\"},'(0087,\"1.2.840.113708.794.1.1.2.0\",20)':{tag:'(0087,\"1.2.840.113708.794.1.1.2.0\",20)',vr:\"CS\",name:\"MediaLocation\",vm:\"1\",version:\"PrivateTag\"},'(0087,\"1.2.840.113708.794.1.1.2.0\",50)':{tag:'(0087,\"1.2.840.113708.794.1.1.2.0\",50)',vr:\"IS\",name:\"EstimatedRetrieveTime\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",00)':{tag:'(0009,\"ACUSON\",00)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",01)':{tag:'(0009,\"ACUSON\",01)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",02)':{tag:'(0009,\"ACUSON\",02)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",03)':{tag:'(0009,\"ACUSON\",03)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",04)':{tag:'(0009,\"ACUSON\",04)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",05)':{tag:'(0009,\"ACUSON\",05)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",06)':{tag:'(0009,\"ACUSON\",06)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",07)':{tag:'(0009,\"ACUSON\",07)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",08)':{tag:'(0009,\"ACUSON\",08)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",09)':{tag:'(0009,\"ACUSON\",09)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",0a)':{tag:'(0009,\"ACUSON\",0a)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",0b)':{tag:'(0009,\"ACUSON\",0b)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",0c)':{tag:'(0009,\"ACUSON\",0c)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",0d)':{tag:'(0009,\"ACUSON\",0d)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",0e)':{tag:'(0009,\"ACUSON\",0e)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",0f)':{tag:'(0009,\"ACUSON\",0f)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",10)':{tag:'(0009,\"ACUSON\",10)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",11)':{tag:'(0009,\"ACUSON\",11)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",12)':{tag:'(0009,\"ACUSON\",12)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",13)':{tag:'(0009,\"ACUSON\",13)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",14)':{tag:'(0009,\"ACUSON\",14)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ACUSON\",15)':{tag:'(0009,\"ACUSON\",15)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"AEGIS_DICOM_2.00\",00)':{tag:'(0003,\"AEGIS_DICOM_2.00\",00)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0005,\"AEGIS_DICOM_2.00\",00)':{tag:'(0005,\"AEGIS_DICOM_2.00\",00)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0009,\"AEGIS_DICOM_2.00\",00)':{tag:'(0009,\"AEGIS_DICOM_2.00\",00)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"AEGIS_DICOM_2.00\",00)':{tag:'(0019,\"AEGIS_DICOM_2.00\",00)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"AEGIS_DICOM_2.00\",00)':{tag:'(0029,\"AEGIS_DICOM_2.00\",00)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(1369,\"AEGIS_DICOM_2.00\",00)':{tag:'(1369,\"AEGIS_DICOM_2.00\",00)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0009,\"AGFA\",10)':{tag:'(0009,\"AGFA\",10)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"AGFA\",11)':{tag:'(0009,\"AGFA\",11)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"AGFA\",13)':{tag:'(0009,\"AGFA\",13)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"AGFA\",14)':{tag:'(0009,\"AGFA\",14)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"AGFA\",15)':{tag:'(0009,\"AGFA\",15)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"AGFA PACS Archive Mirroring 1.0\",00)':{tag:'(0031,\"AGFA PACS Archive Mirroring 1.0\",00)',vr:\"CS\",name:\"StudyStatus\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"AGFA PACS Archive Mirroring 1.0\",01)':{tag:'(0031,\"AGFA PACS Archive Mirroring 1.0\",01)',vr:\"UL\",name:\"DateTimeVerified\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS IP\",10)':{tag:'(0029,\"CAMTRONICS IP\",10)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS IP\",20)':{tag:'(0029,\"CAMTRONICS IP\",20)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS IP\",30)':{tag:'(0029,\"CAMTRONICS IP\",30)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS IP\",40)':{tag:'(0029,\"CAMTRONICS IP\",40)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",10)':{tag:'(0029,\"CAMTRONICS\",10)',vr:\"LT\",name:\"Commentline\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",20)':{tag:'(0029,\"CAMTRONICS\",20)',vr:\"DS\",name:\"EdgeEnhancementCoefficient\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",50)':{tag:'(0029,\"CAMTRONICS\",50)',vr:\"LT\",name:\"SceneText\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",60)':{tag:'(0029,\"CAMTRONICS\",60)',vr:\"LT\",name:\"ImageText\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",70)':{tag:'(0029,\"CAMTRONICS\",70)',vr:\"IS\",name:\"PixelShiftHorizontal\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",80)':{tag:'(0029,\"CAMTRONICS\",80)',vr:\"IS\",name:\"PixelShiftVertical\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CAMTRONICS\",90)':{tag:'(0029,\"CAMTRONICS\",90)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"CARDIO-D.R. 1.0\",00)':{tag:'(0009,\"CARDIO-D.R. 1.0\",00)',vr:\"UL\",name:\"FileLocation\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"CARDIO-D.R. 1.0\",01)':{tag:'(0009,\"CARDIO-D.R. 1.0\",01)',vr:\"UL\",name:\"FileSize\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"CARDIO-D.R. 1.0\",40)':{tag:'(0009,\"CARDIO-D.R. 1.0\",40)',vr:\"SQ\",name:\"AlternateImageSequence\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",00)':{tag:'(0019,\"CARDIO-D.R. 1.0\",00)',vr:\"CS\",name:\"ImageBlankingShape\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",02)':{tag:'(0019,\"CARDIO-D.R. 1.0\",02)',vr:\"IS\",name:\"ImageBlankingLeftVerticalEdge\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",04)':{tag:'(0019,\"CARDIO-D.R. 1.0\",04)',vr:\"IS\",name:\"ImageBlankingRightVerticalEdge\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",06)':{tag:'(0019,\"CARDIO-D.R. 1.0\",06)',vr:\"IS\",name:\"ImageBlankingUpperHorizontalEdge\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",08)':{tag:'(0019,\"CARDIO-D.R. 1.0\",08)',vr:\"IS\",name:\"ImageBlankingLowerHorizontalEdge\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",10)':{tag:'(0019,\"CARDIO-D.R. 1.0\",10)',vr:\"IS\",name:\"CenterOfCircularImageBlanking\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",12)':{tag:'(0019,\"CARDIO-D.R. 1.0\",12)',vr:\"IS\",name:\"RadiusOfCircularImageBlanking\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"CARDIO-D.R. 1.0\",30)':{tag:'(0019,\"CARDIO-D.R. 1.0\",30)',vr:\"UL\",name:\"MaximumImageFrameSize\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"CARDIO-D.R. 1.0\",13)':{tag:'(0021,\"CARDIO-D.R. 1.0\",13)',vr:\"IS\",name:\"ImageSequenceNumber\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CARDIO-D.R. 1.0\",00)':{tag:'(0029,\"CARDIO-D.R. 1.0\",00)',vr:\"SQ\",name:\"EdgeEnhancementSequence\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"CARDIO-D.R. 1.0\",01)':{tag:'(0029,\"CARDIO-D.R. 1.0\",01)',vr:\"US\",name:\"ConvolutionKernelSize\",vm:\"2\",version:\"PrivateTag\"},'(0029,\"CARDIO-D.R. 1.0\",02)':{tag:'(0029,\"CARDIO-D.R. 1.0\",02)',vr:\"DS\",name:\"ConvolutionKernelCoefficients\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"CARDIO-D.R. 1.0\",03)':{tag:'(0029,\"CARDIO-D.R. 1.0\",03)',vr:\"DS\",name:\"EdgeEnhancementGain\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"CMR42 CIRCLECVI\",1010)':{tag:'(0025,\"CMR42 CIRCLECVI\",1010)',vr:\"LO\",name:\"WorkspaceID\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"CMR42 CIRCLECVI\",1020)':{tag:'(0025,\"CMR42 CIRCLECVI\",1020)',vr:\"LO\",name:\"WorkspaceTimeString\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"CMR42 CIRCLECVI\",1030)':{tag:'(0025,\"CMR42 CIRCLECVI\",1030)',vr:\"OB\",name:\"WorkspaceStream\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"DCMTK_ANONYMIZER\",00)':{tag:'(0009,\"DCMTK_ANONYMIZER\",00)',vr:\"SQ\",name:\"AnonymizerUIDMap\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"DCMTK_ANONYMIZER\",10)':{tag:'(0009,\"DCMTK_ANONYMIZER\",10)',vr:\"UI\",name:\"AnonymizerUIDKey\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"DCMTK_ANONYMIZER\",20)':{tag:'(0009,\"DCMTK_ANONYMIZER\",20)',vr:\"UI\",name:\"AnonymizerUIDValue\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"DCMTK_ANONYMIZER\",30)':{tag:'(0009,\"DCMTK_ANONYMIZER\",30)',vr:\"SQ\",name:\"AnonymizerPatientIDMap\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"DCMTK_ANONYMIZER\",40)':{tag:'(0009,\"DCMTK_ANONYMIZER\",40)',vr:\"LO\",name:\"AnonymizerPatientIDKey\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"DCMTK_ANONYMIZER\",50)':{tag:'(0009,\"DCMTK_ANONYMIZER\",50)',vr:\"LO\",name:\"AnonymizerPatientIDValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",22)':{tag:'(0019,\"DIDI TO PCR 1.1\",22)',vr:\"UN\",name:\"RouteAET\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",23)':{tag:'(0019,\"DIDI TO PCR 1.1\",23)',vr:\"DS\",name:\"PCRPrintScale\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",24)':{tag:'(0019,\"DIDI TO PCR 1.1\",24)',vr:\"UN\",name:\"PCRPrintJobEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",25)':{tag:'(0019,\"DIDI TO PCR 1.1\",25)',vr:\"IS\",name:\"PCRNoFilmCopies\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",26)':{tag:'(0019,\"DIDI TO PCR 1.1\",26)',vr:\"IS\",name:\"PCRFilmLayoutPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",27)':{tag:'(0019,\"DIDI TO PCR 1.1\",27)',vr:\"UN\",name:\"PCRPrintReportName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",70)':{tag:'(0019,\"DIDI TO PCR 1.1\",70)',vr:\"UN\",name:\"RADProtocolPrinter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",71)':{tag:'(0019,\"DIDI TO PCR 1.1\",71)',vr:\"UN\",name:\"RADProtocolMedium\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",90)':{tag:'(0019,\"DIDI TO PCR 1.1\",90)',vr:\"LO\",name:\"UnprocessedFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",91)':{tag:'(0019,\"DIDI TO PCR 1.1\",91)',vr:\"UN\",name:\"KeyValues\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",92)':{tag:'(0019,\"DIDI TO PCR 1.1\",92)',vr:\"UN\",name:\"DestinationPostprocessingFunction\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A0)':{tag:'(0019,\"DIDI TO PCR 1.1\",A0)',vr:\"UN\",name:\"Version\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A1)':{tag:'(0019,\"DIDI TO PCR 1.1\",A1)',vr:\"UN\",name:\"RangingMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A2)':{tag:'(0019,\"DIDI TO PCR 1.1\",A2)',vr:\"UN\",name:\"AbdomenBrightness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A3)':{tag:'(0019,\"DIDI TO PCR 1.1\",A3)',vr:\"UN\",name:\"FixedBrightness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A4)':{tag:'(0019,\"DIDI TO PCR 1.1\",A4)',vr:\"UN\",name:\"DetailContrast\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A5)':{tag:'(0019,\"DIDI TO PCR 1.1\",A5)',vr:\"UN\",name:\"ContrastBalance\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A6)':{tag:'(0019,\"DIDI TO PCR 1.1\",A6)',vr:\"UN\",name:\"StructureBoost\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A7)':{tag:'(0019,\"DIDI TO PCR 1.1\",A7)',vr:\"UN\",name:\"StructurePreference\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A8)':{tag:'(0019,\"DIDI TO PCR 1.1\",A8)',vr:\"UN\",name:\"NoiseRobustness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",A9)':{tag:'(0019,\"DIDI TO PCR 1.1\",A9)',vr:\"UN\",name:\"NoiseDoseLimit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",AA)':{tag:'(0019,\"DIDI TO PCR 1.1\",AA)',vr:\"UN\",name:\"NoiseDoseStep\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",AB)':{tag:'(0019,\"DIDI TO PCR 1.1\",AB)',vr:\"UN\",name:\"NoiseFrequencyLimit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",AC)':{tag:'(0019,\"DIDI TO PCR 1.1\",AC)',vr:\"UN\",name:\"WeakContrastLimit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",AD)':{tag:'(0019,\"DIDI TO PCR 1.1\",AD)',vr:\"UN\",name:\"StrongContrastLimit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",AE)':{tag:'(0019,\"DIDI TO PCR 1.1\",AE)',vr:\"UN\",name:\"StructureBoostOffset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",AF)':{tag:'(0019,\"DIDI TO PCR 1.1\",AF)',vr:\"UN\",name:\"SmoothGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B0)':{tag:'(0019,\"DIDI TO PCR 1.1\",B0)',vr:\"UN\",name:\"MeasureField1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B1)':{tag:'(0019,\"DIDI TO PCR 1.1\",B1)',vr:\"UN\",name:\"MeasureField2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B2)':{tag:'(0019,\"DIDI TO PCR 1.1\",B2)',vr:\"UN\",name:\"KeyPercentile1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B3)':{tag:'(0019,\"DIDI TO PCR 1.1\",B3)',vr:\"UN\",name:\"KeyPercentile2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B4)':{tag:'(0019,\"DIDI TO PCR 1.1\",B4)',vr:\"UN\",name:\"DensityLUT\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B5)':{tag:'(0019,\"DIDI TO PCR 1.1\",B5)',vr:\"UN\",name:\"Brightness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DIDI TO PCR 1.1\",B6)':{tag:'(0019,\"DIDI TO PCR 1.1\",B6)',vr:\"UN\",name:\"Gamma\",vm:\"1\",version:\"PrivateTag\"},'(0089,\"DIDI TO PCR 1.1\",10)':{tag:'(0089,\"DIDI TO PCR 1.1\",10)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"DIGISCAN IMAGE\",31)':{tag:'(0029,\"DIGISCAN IMAGE\",31)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"DIGISCAN IMAGE\",32)':{tag:'(0029,\"DIGISCAN IMAGE\",32)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"DIGISCAN IMAGE\",33)':{tag:'(0029,\"DIGISCAN IMAGE\",33)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"DIGISCAN IMAGE\",34)':{tag:'(0029,\"DIGISCAN IMAGE\",34)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(7001-o-70ff,\"DLX_ANNOT_01\",04)':{tag:'(7001-o-70ff,\"DLX_ANNOT_01\",04)',vr:\"ST\",name:\"TextAnnotation\",vm:\"1\",version:\"PrivateTag\"},'(7001-o-70ff,\"DLX_ANNOT_01\",05)':{tag:'(7001-o-70ff,\"DLX_ANNOT_01\",05)',vr:\"IS\",name:\"Box\",vm:\"2\",version:\"PrivateTag\"},'(7001-o-70ff,\"DLX_ANNOT_01\",07)':{tag:'(7001-o-70ff,\"DLX_ANNOT_01\",07)',vr:\"IS\",name:\"ArrowEnd\",vm:\"2\",version:\"PrivateTag\"},'(0015,\"DLX_EXAMS_01\",01)':{tag:'(0015,\"DLX_EXAMS_01\",01)',vr:\"DS\",name:\"StenosisCalibrationRatio\",vm:\"1\",version:\"PrivateTag\"},'(0015,\"DLX_EXAMS_01\",02)':{tag:'(0015,\"DLX_EXAMS_01\",02)',vr:\"DS\",name:\"StenosisMagnification\",vm:\"1\",version:\"PrivateTag\"},'(0015,\"DLX_EXAMS_01\",03)':{tag:'(0015,\"DLX_EXAMS_01\",03)',vr:\"DS\",name:\"CardiacCalibrationRatio\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"DLX_LKUP_01\",01)':{tag:'(6001-o-60ff,\"DLX_LKUP_01\",01)',vr:\"US\",name:\"GrayPaletteColorLookupTableDescriptor\",vm:\"3\",version:\"PrivateTag\"},'(6001-o-60ff,\"DLX_LKUP_01\",02)':{tag:'(6001-o-60ff,\"DLX_LKUP_01\",02)',vr:\"US\",name:\"GrayPaletteColorLookupTableData\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"DLX_PATNT_01\",01)':{tag:'(0011,\"DLX_PATNT_01\",01)',vr:\"LT\",name:\"PatientDOB\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",01)':{tag:'(0019,\"DLX_SERIE_01\",01)',vr:\"DS\",name:\"AngleValueLArm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",02)':{tag:'(0019,\"DLX_SERIE_01\",02)',vr:\"DS\",name:\"AngleValuePArm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",03)':{tag:'(0019,\"DLX_SERIE_01\",03)',vr:\"DS\",name:\"AngleValueCArm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",04)':{tag:'(0019,\"DLX_SERIE_01\",04)',vr:\"CS\",name:\"AngleLabelLArm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",05)':{tag:'(0019,\"DLX_SERIE_01\",05)',vr:\"CS\",name:\"AngleLabelPArm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",06)':{tag:'(0019,\"DLX_SERIE_01\",06)',vr:\"CS\",name:\"AngleLabelCArm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",07)':{tag:'(0019,\"DLX_SERIE_01\",07)',vr:\"ST\",name:\"ProcedureName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",08)':{tag:'(0019,\"DLX_SERIE_01\",08)',vr:\"ST\",name:\"ExamName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",09)':{tag:'(0019,\"DLX_SERIE_01\",09)',vr:\"SH\",name:\"PatientSize\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",0a)':{tag:'(0019,\"DLX_SERIE_01\",0a)',vr:\"IS\",name:\"RecordView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",10)':{tag:'(0019,\"DLX_SERIE_01\",10)',vr:\"DS\",name:\"InjectorDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",11)':{tag:'(0019,\"DLX_SERIE_01\",11)',vr:\"CS\",name:\"AutoInject\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",14)':{tag:'(0019,\"DLX_SERIE_01\",14)',vr:\"IS\",name:\"AcquisitionMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",15)':{tag:'(0019,\"DLX_SERIE_01\",15)',vr:\"CS\",name:\"CameraRotationEnabled\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",16)':{tag:'(0019,\"DLX_SERIE_01\",16)',vr:\"CS\",name:\"ReverseSweep\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",17)':{tag:'(0019,\"DLX_SERIE_01\",17)',vr:\"IS\",name:\"SpatialFilterStrength\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",18)':{tag:'(0019,\"DLX_SERIE_01\",18)',vr:\"IS\",name:\"ZoomFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",19)':{tag:'(0019,\"DLX_SERIE_01\",19)',vr:\"IS\",name:\"XZoomCenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",1a)':{tag:'(0019,\"DLX_SERIE_01\",1a)',vr:\"IS\",name:\"YZoomCenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",1b)':{tag:'(0019,\"DLX_SERIE_01\",1b)',vr:\"DS\",name:\"Focus\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",1c)':{tag:'(0019,\"DLX_SERIE_01\",1c)',vr:\"CS\",name:\"Dose\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",1d)':{tag:'(0019,\"DLX_SERIE_01\",1d)',vr:\"IS\",name:\"SideMark\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",1e)':{tag:'(0019,\"DLX_SERIE_01\",1e)',vr:\"IS\",name:\"PercentageLandscape\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"DLX_SERIE_01\",1f)':{tag:'(0019,\"DLX_SERIE_01\",1f)',vr:\"DS\",name:\"ExposureDuration\",vm:\"1\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",01)':{tag:'(00E1,\"ELSCINT1\",01)',vr:\"US\",name:\"DataDictionaryVersion\",vm:\"1\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",14)':{tag:'(00E1,\"ELSCINT1\",14)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",22)':{tag:'(00E1,\"ELSCINT1\",22)',vr:\"DS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",23)':{tag:'(00E1,\"ELSCINT1\",23)',vr:\"DS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",24)':{tag:'(00E1,\"ELSCINT1\",24)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",25)':{tag:'(00E1,\"ELSCINT1\",25)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(00E1,\"ELSCINT1\",40)':{tag:'(00E1,\"ELSCINT1\",40)',vr:\"SH\",name:\"OffsetFromCTMRImages\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",00)':{tag:'(0601,\"ELSCINT1\",00)',vr:\"SH\",name:\"ImplementationVersion\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",20)':{tag:'(0601,\"ELSCINT1\",20)',vr:\"DS\",name:\"RelativeTablePosition\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",21)':{tag:'(0601,\"ELSCINT1\",21)',vr:\"DS\",name:\"RelativeTableHeight\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",30)':{tag:'(0601,\"ELSCINT1\",30)',vr:\"SH\",name:\"SurviewDirection\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",31)':{tag:'(0601,\"ELSCINT1\",31)',vr:\"DS\",name:\"SurviewLength\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",50)':{tag:'(0601,\"ELSCINT1\",50)',vr:\"SH\",name:\"ImageViewType\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",70)':{tag:'(0601,\"ELSCINT1\",70)',vr:\"DS\",name:\"BatchNumber\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",71)':{tag:'(0601,\"ELSCINT1\",71)',vr:\"DS\",name:\"BatchSize\",vm:\"1\",version:\"PrivateTag\"},'(0601,\"ELSCINT1\",72)':{tag:'(0601,\"ELSCINT1\",72)',vr:\"DS\",name:\"BatchSliceNumber\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",04)':{tag:'(0009,\"FDMS 1.0\",04)',vr:\"SH\",name:\"ImageControlUnit\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",05)':{tag:'(0009,\"FDMS 1.0\",05)',vr:\"OW\",name:\"ImageUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",06)':{tag:'(0009,\"FDMS 1.0\",06)',vr:\"OW\",name:\"RouteImageUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",08)':{tag:'(0009,\"FDMS 1.0\",08)',vr:\"UL\",name:\"ImageDisplayInformationVersionNo\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",09)':{tag:'(0009,\"FDMS 1.0\",09)',vr:\"UL\",name:\"PatientInformationVersionNo\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",0C)':{tag:'(0009,\"FDMS 1.0\",0C)',vr:\"OW\",name:\"FilmUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",10)':{tag:'(0009,\"FDMS 1.0\",10)',vr:\"CS\",name:\"ExposureUnitTypeCode\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",80)':{tag:'(0009,\"FDMS 1.0\",80)',vr:\"LO\",name:\"KanjiHospitalName\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",90)':{tag:'(0009,\"FDMS 1.0\",90)',vr:\"ST\",name:\"DistributionCode\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",92)':{tag:'(0009,\"FDMS 1.0\",92)',vr:\"SH\",name:\"KanjiDepartmentName\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FDMS 1.0\",F0)':{tag:'(0009,\"FDMS 1.0\",F0)',vr:\"CS\",name:\"BlackeningProcessFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",15)':{tag:'(0019,\"FDMS 1.0\",15)',vr:\"LO\",name:\"KanjiBodyPartForExposure\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",32)':{tag:'(0019,\"FDMS 1.0\",32)',vr:\"LO\",name:\"KanjiMenuName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",40)':{tag:'(0019,\"FDMS 1.0\",40)',vr:\"CS\",name:\"ImageProcessingType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",50)':{tag:'(0019,\"FDMS 1.0\",50)',vr:\"CS\",name:\"EDRMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",60)':{tag:'(0019,\"FDMS 1.0\",60)',vr:\"SH\",name:\"RadiographersCode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",70)':{tag:'(0019,\"FDMS 1.0\",70)',vr:\"IS\",name:\"SplitExposureFormat\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",71)':{tag:'(0019,\"FDMS 1.0\",71)',vr:\"IS\",name:\"NoOfSplitExposureFrames\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",80)':{tag:'(0019,\"FDMS 1.0\",80)',vr:\"IS\",name:\"ReadingPositionSpecification\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",81)':{tag:'(0019,\"FDMS 1.0\",81)',vr:\"IS\",name:\"ReadingSensitivityCenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",90)':{tag:'(0019,\"FDMS 1.0\",90)',vr:\"SH\",name:\"FilmAnnotationCharacterString1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"FDMS 1.0\",91)':{tag:'(0019,\"FDMS 1.0\",91)',vr:\"SH\",name:\"FilmAnnotationCharacterString2\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"FDMS 1.0\",10)':{tag:'(0021,\"FDMS 1.0\",10)',vr:\"CS\",name:\"FCRImageID\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"FDMS 1.0\",30)':{tag:'(0021,\"FDMS 1.0\",30)',vr:\"CS\",name:\"SetNo\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"FDMS 1.0\",40)':{tag:'(0021,\"FDMS 1.0\",40)',vr:\"IS\",name:\"ImageNoInTheSet\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"FDMS 1.0\",50)':{tag:'(0021,\"FDMS 1.0\",50)',vr:\"CS\",name:\"PairProcessingInformation\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"FDMS 1.0\",80)':{tag:'(0021,\"FDMS 1.0\",80)',vr:\"OB\",name:\"EquipmentTypeSpecificInformation\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"FDMS 1.0\",10)':{tag:'(0023,\"FDMS 1.0\",10)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"FDMS 1.0\",20)':{tag:'(0023,\"FDMS 1.0\",20)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"FDMS 1.0\",30)':{tag:'(0023,\"FDMS 1.0\",30)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",10)':{tag:'(0025,\"FDMS 1.0\",10)',vr:\"US\",name:\"RelativeLightEmissionAmountSk\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",11)':{tag:'(0025,\"FDMS 1.0\",11)',vr:\"US\",name:\"TermOfCorrectionForEachIPTypeSt\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",12)':{tag:'(0025,\"FDMS 1.0\",12)',vr:\"US\",name:\"ReadingGainGp\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",13)':{tag:'(0025,\"FDMS 1.0\",13)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",15)':{tag:'(0025,\"FDMS 1.0\",15)',vr:\"CS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",20)':{tag:'(0025,\"FDMS 1.0\",20)',vr:\"US\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",21)':{tag:'(0025,\"FDMS 1.0\",21)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",30)':{tag:'(0025,\"FDMS 1.0\",30)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",31)':{tag:'(0025,\"FDMS 1.0\",31)',vr:\"SS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",32)':{tag:'(0025,\"FDMS 1.0\",32)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",33)':{tag:'(0025,\"FDMS 1.0\",33)',vr:\"SS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",34)':{tag:'(0025,\"FDMS 1.0\",34)',vr:\"SS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",40)':{tag:'(0025,\"FDMS 1.0\",40)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",41)':{tag:'(0025,\"FDMS 1.0\",41)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",42)':{tag:'(0025,\"FDMS 1.0\",42)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",43)':{tag:'(0025,\"FDMS 1.0\",43)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",50)':{tag:'(0025,\"FDMS 1.0\",50)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",51)':{tag:'(0025,\"FDMS 1.0\",51)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",52)':{tag:'(0025,\"FDMS 1.0\",52)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",53)':{tag:'(0025,\"FDMS 1.0\",53)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",60)':{tag:'(0025,\"FDMS 1.0\",60)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",61)':{tag:'(0025,\"FDMS 1.0\",61)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",62)':{tag:'(0025,\"FDMS 1.0\",62)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",63)':{tag:'(0025,\"FDMS 1.0\",63)',vr:\"CS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",70)':{tag:'(0025,\"FDMS 1.0\",70)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",71)':{tag:'(0025,\"FDMS 1.0\",71)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",72)':{tag:'(0025,\"FDMS 1.0\",72)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",73)':{tag:'(0025,\"FDMS 1.0\",73)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",74)':{tag:'(0025,\"FDMS 1.0\",74)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",80)':{tag:'(0025,\"FDMS 1.0\",80)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",81)':{tag:'(0025,\"FDMS 1.0\",81)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",82)':{tag:'(0025,\"FDMS 1.0\",82)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",83)':{tag:'(0025,\"FDMS 1.0\",83)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",84)':{tag:'(0025,\"FDMS 1.0\",84)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",90)':{tag:'(0025,\"FDMS 1.0\",90)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",91)':{tag:'(0025,\"FDMS 1.0\",91)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",92)':{tag:'(0025,\"FDMS 1.0\",92)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",93)':{tag:'(0025,\"FDMS 1.0\",93)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",94)':{tag:'(0025,\"FDMS 1.0\",94)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",95)':{tag:'(0025,\"FDMS 1.0\",95)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",96)':{tag:'(0025,\"FDMS 1.0\",96)',vr:\"CS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",a0)':{tag:'(0025,\"FDMS 1.0\",a0)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",a1)':{tag:'(0025,\"FDMS 1.0\",a1)',vr:\"SS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",a2)':{tag:'(0025,\"FDMS 1.0\",a2)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"FDMS 1.0\",a3)':{tag:'(0025,\"FDMS 1.0\",a3)',vr:\"SS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",10)':{tag:'(0027,\"FDMS 1.0\",10)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",20)':{tag:'(0027,\"FDMS 1.0\",20)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",30)':{tag:'(0027,\"FDMS 1.0\",30)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",40)':{tag:'(0027,\"FDMS 1.0\",40)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",50)':{tag:'(0027,\"FDMS 1.0\",50)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",60)':{tag:'(0027,\"FDMS 1.0\",60)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",70)':{tag:'(0027,\"FDMS 1.0\",70)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",80)':{tag:'(0027,\"FDMS 1.0\",80)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",a0)':{tag:'(0027,\"FDMS 1.0\",a0)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",a1)':{tag:'(0027,\"FDMS 1.0\",a1)',vr:\"CS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",a2)':{tag:'(0027,\"FDMS 1.0\",a2)',vr:\"CS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0027,\"FDMS 1.0\",a3)':{tag:'(0027,\"FDMS 1.0\",a3)',vr:\"SS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"FDMS 1.0\",20)':{tag:'(0029,\"FDMS 1.0\",20)',vr:\"CS\",name:\"ImageScanningDirection\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"FDMS 1.0\",30)':{tag:'(0029,\"FDMS 1.0\",30)',vr:\"CS\",name:\"ExtendedReadingSizeValue\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"FDMS 1.0\",34)':{tag:'(0029,\"FDMS 1.0\",34)',vr:\"US\",name:\"MagnificationReductionRatio\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"FDMS 1.0\",44)':{tag:'(0029,\"FDMS 1.0\",44)',vr:\"CS\",name:\"LineDensityCode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"FDMS 1.0\",50)':{tag:'(0029,\"FDMS 1.0\",50)',vr:\"CS\",name:\"DataCompressionCode\",vm:\"1\",version:\"PrivateTag\"},'(2011,\"FDMS 1.0\",11)':{tag:'(2011,\"FDMS 1.0\",11)',vr:\"CS\",name:\"ImagePosition SpecifyingFlag\",vm:\"1\",version:\"PrivateTag\"},'(50F1,\"FDMS 1.0\",06)':{tag:'(50F1,\"FDMS 1.0\",06)',vr:\"CS\",name:\"EnergySubtractionParam\",vm:\"1\",version:\"PrivateTag\"},'(50F1,\"FDMS 1.0\",07)':{tag:'(50F1,\"FDMS 1.0\",07)',vr:\"CS\",name:\"SubtractionRegistrationResult\",vm:\"1\",version:\"PrivateTag\"},'(50F1,\"FDMS 1.0\",08)':{tag:'(50F1,\"FDMS 1.0\",08)',vr:\"CS\",name:\"EnergySubtractionParam2\",vm:\"1\",version:\"PrivateTag\"},'(50F1,\"FDMS 1.0\",09)':{tag:'(50F1,\"FDMS 1.0\",09)',vr:\"SL\",name:\"AfinConversionCoefficient\",vm:\"1\",version:\"PrivateTag\"},'(50F1,\"FDMS 1.0\",10)':{tag:'(50F1,\"FDMS 1.0\",10)',vr:\"CS\",name:\"FilmOutputFormat\",vm:\"1\",version:\"PrivateTag\"},'(50F1,\"FDMS 1.0\",20)':{tag:'(50F1,\"FDMS 1.0\",20)',vr:\"CS\",name:\"ImageProcessingModificationFlag\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"FFP DATA\",01)':{tag:'(0009,\"FFP DATA\",01)',vr:\"UN\",name:\"CRHeaderInformation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE ??? From Adantage Review CS\",30)':{tag:'(0019,\"GE ??? From Adantage Review CS\",30)',vr:\"LO\",name:\"CREDRMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE ??? From Adantage Review CS\",40)':{tag:'(0019,\"GE ??? From Adantage Review CS\",40)',vr:\"LO\",name:\"CRLatitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE ??? From Adantage Review CS\",50)':{tag:'(0019,\"GE ??? From Adantage Review CS\",50)',vr:\"LO\",name:\"CRGroupNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE ??? From Adantage Review CS\",70)':{tag:'(0019,\"GE ??? From Adantage Review CS\",70)',vr:\"LO\",name:\"CRImageSerialNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE ??? From Adantage Review CS\",80)':{tag:'(0019,\"GE ??? From Adantage Review CS\",80)',vr:\"LO\",name:\"CRBarCodeNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE ??? From Adantage Review CS\",90)':{tag:'(0019,\"GE ??? From Adantage Review CS\",90)',vr:\"LO\",name:\"CRFilmOutputExposures\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",24)':{tag:'(0009,\"GEMS_ACQU_01\",24)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",25)':{tag:'(0009,\"GEMS_ACQU_01\",25)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",3e)':{tag:'(0009,\"GEMS_ACQU_01\",3e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",3f)':{tag:'(0009,\"GEMS_ACQU_01\",3f)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",42)':{tag:'(0009,\"GEMS_ACQU_01\",42)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",43)':{tag:'(0009,\"GEMS_ACQU_01\",43)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",f8)':{tag:'(0009,\"GEMS_ACQU_01\",f8)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_ACQU_01\",fb)':{tag:'(0009,\"GEMS_ACQU_01\",fb)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",01)':{tag:'(0019,\"GEMS_ACQU_01\",01)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",02)':{tag:'(0019,\"GEMS_ACQU_01\",02)',vr:\"SL\",name:\"NumberOfCellsInDetector\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",03)':{tag:'(0019,\"GEMS_ACQU_01\",03)',vr:\"DS\",name:\"CellNumberAtTheta\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",04)':{tag:'(0019,\"GEMS_ACQU_01\",04)',vr:\"DS\",name:\"CellSpacing\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",05)':{tag:'(0019,\"GEMS_ACQU_01\",05)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",06)':{tag:'(0019,\"GEMS_ACQU_01\",06)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",0e)':{tag:'(0019,\"GEMS_ACQU_01\",0e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",0f)':{tag:'(0019,\"GEMS_ACQU_01\",0f)',vr:\"DS\",name:\"HorizontalFrameOfReference\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",11)':{tag:'(0019,\"GEMS_ACQU_01\",11)',vr:\"SS\",name:\"SeriesContrast\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",12)':{tag:'(0019,\"GEMS_ACQU_01\",12)',vr:\"SS\",name:\"LastPseq\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",13)':{tag:'(0019,\"GEMS_ACQU_01\",13)',vr:\"SS\",name:\"StartNumberForBaseline\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",14)':{tag:'(0019,\"GEMS_ACQU_01\",14)',vr:\"SS\",name:\"End NumberForBaseline\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",15)':{tag:'(0019,\"GEMS_ACQU_01\",15)',vr:\"SS\",name:\"StartNumberForEnhancedScans\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",16)':{tag:'(0019,\"GEMS_ACQU_01\",16)',vr:\"SS\",name:\"EndNumberForEnhancedScans\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",17)':{tag:'(0019,\"GEMS_ACQU_01\",17)',vr:\"SS\",name:\"SeriesPlane\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",18)':{tag:'(0019,\"GEMS_ACQU_01\",18)',vr:\"LO\",name:\"FirstScanRAS\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",19)':{tag:'(0019,\"GEMS_ACQU_01\",19)',vr:\"DS\",name:\"FirstScanLocation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",1a)':{tag:'(0019,\"GEMS_ACQU_01\",1a)',vr:\"LO\",name:\"LastScanRAS\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",1b)':{tag:'(0019,\"GEMS_ACQU_01\",1b)',vr:\"DS\",name:\"LastScanLocation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",1e)':{tag:'(0019,\"GEMS_ACQU_01\",1e)',vr:\"DS\",name:\"DisplayFieldOfView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",20)':{tag:'(0019,\"GEMS_ACQU_01\",20)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",22)':{tag:'(0019,\"GEMS_ACQU_01\",22)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",23)':{tag:'(0019,\"GEMS_ACQU_01\",23)',vr:\"DS\",name:\"TableSpeed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",24)':{tag:'(0019,\"GEMS_ACQU_01\",24)',vr:\"DS\",name:\"MidScanTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",25)':{tag:'(0019,\"GEMS_ACQU_01\",25)',vr:\"SS\",name:\"MidScanFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",26)':{tag:'(0019,\"GEMS_ACQU_01\",26)',vr:\"SL\",name:\"DegreesOfAzimuth\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",27)':{tag:'(0019,\"GEMS_ACQU_01\",27)',vr:\"DS\",name:\"GantryPeriod\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",2a)':{tag:'(0019,\"GEMS_ACQU_01\",2a)',vr:\"DS\",name:\"XrayOnPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",2b)':{tag:'(0019,\"GEMS_ACQU_01\",2b)',vr:\"DS\",name:\"XrayOffPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",2c)':{tag:'(0019,\"GEMS_ACQU_01\",2c)',vr:\"SL\",name:\"NumberOfTriggers\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",2d)':{tag:'(0019,\"GEMS_ACQU_01\",2d)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",2e)':{tag:'(0019,\"GEMS_ACQU_01\",2e)',vr:\"DS\",name:\"AngleOfFirstView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",2f)':{tag:'(0019,\"GEMS_ACQU_01\",2f)',vr:\"DS\",name:\"TriggerFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",39)':{tag:'(0019,\"GEMS_ACQU_01\",39)',vr:\"SS\",name:\"ScanFOVType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",3a)':{tag:'(0019,\"GEMS_ACQU_01\",3a)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",3b)':{tag:'(0019,\"GEMS_ACQU_01\",3b)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",3c)':{tag:'(0019,\"GEMS_ACQU_01\",3c)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",3e)':{tag:'(0019,\"GEMS_ACQU_01\",3e)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",3f)':{tag:'(0019,\"GEMS_ACQU_01\",3f)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",40)':{tag:'(0019,\"GEMS_ACQU_01\",40)',vr:\"SS\",name:\"StatReconFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",41)':{tag:'(0019,\"GEMS_ACQU_01\",41)',vr:\"SS\",name:\"ComputeType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",42)':{tag:'(0019,\"GEMS_ACQU_01\",42)',vr:\"SS\",name:\"SegmentNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",43)':{tag:'(0019,\"GEMS_ACQU_01\",43)',vr:\"SS\",name:\"TotalSegmentsRequested\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",44)':{tag:'(0019,\"GEMS_ACQU_01\",44)',vr:\"DS\",name:\"InterscanDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",47)':{tag:'(0019,\"GEMS_ACQU_01\",47)',vr:\"SS\",name:\"ViewCompressionFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",48)':{tag:'(0019,\"GEMS_ACQU_01\",48)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",49)':{tag:'(0019,\"GEMS_ACQU_01\",49)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",4a)':{tag:'(0019,\"GEMS_ACQU_01\",4a)',vr:\"SS\",name:\"TotalNumberOfRefChannels\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",4b)':{tag:'(0019,\"GEMS_ACQU_01\",4b)',vr:\"SL\",name:\"DataSizeForScanData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",52)':{tag:'(0019,\"GEMS_ACQU_01\",52)',vr:\"SS\",name:\"ReconPostProcessingFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",54)':{tag:'(0019,\"GEMS_ACQU_01\",54)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",57)':{tag:'(0019,\"GEMS_ACQU_01\",57)',vr:\"SS\",name:\"CTWaterNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",58)':{tag:'(0019,\"GEMS_ACQU_01\",58)',vr:\"SS\",name:\"CTBoneNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",5a)':{tag:'(0019,\"GEMS_ACQU_01\",5a)',vr:\"FL\",name:\"AcquisitionDuration\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",5d)':{tag:'(0019,\"GEMS_ACQU_01\",5d)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",5e)':{tag:'(0019,\"GEMS_ACQU_01\",5e)',vr:\"SL\",name:\"NumberOfChannels1To512\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",5f)':{tag:'(0019,\"GEMS_ACQU_01\",5f)',vr:\"SL\",name:\"IncrementBetweenChannels\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",60)':{tag:'(0019,\"GEMS_ACQU_01\",60)',vr:\"SL\",name:\"StartingView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",61)':{tag:'(0019,\"GEMS_ACQU_01\",61)',vr:\"SL\",name:\"NumberOfViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",62)':{tag:'(0019,\"GEMS_ACQU_01\",62)',vr:\"SL\",name:\"IncrementBetweenViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",6a)':{tag:'(0019,\"GEMS_ACQU_01\",6a)',vr:\"SS\",name:\"DependantOnNumberOfViewsProcessed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",6b)':{tag:'(0019,\"GEMS_ACQU_01\",6b)',vr:\"SS\",name:\"FieldOfViewInDetectorCells\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",70)':{tag:'(0019,\"GEMS_ACQU_01\",70)',vr:\"SS\",name:\"ValueOfBackProjectionButton\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",71)':{tag:'(0019,\"GEMS_ACQU_01\",71)',vr:\"SS\",name:\"SetIfFatqEstimatesWereUsed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",72)':{tag:'(0019,\"GEMS_ACQU_01\",72)',vr:\"DS\",name:\"ZChannelAvgOverViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",73)':{tag:'(0019,\"GEMS_ACQU_01\",73)',vr:\"DS\",name:\"AvgOfLeftRefChannelsOverViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",74)':{tag:'(0019,\"GEMS_ACQU_01\",74)',vr:\"DS\",name:\"MaxLeftChannelOverViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",75)':{tag:'(0019,\"GEMS_ACQU_01\",75)',vr:\"DS\",name:\"AvgOfRightRefChannelsOverViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",76)':{tag:'(0019,\"GEMS_ACQU_01\",76)',vr:\"DS\",name:\"MaxRightChannelOverViews\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",7d)':{tag:'(0019,\"GEMS_ACQU_01\",7d)',vr:\"DS\",name:\"SecondEcho\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",7e)':{tag:'(0019,\"GEMS_ACQU_01\",7e)',vr:\"SS\",name:\"NumberOfEchos\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",7f)':{tag:'(0019,\"GEMS_ACQU_01\",7f)',vr:\"DS\",name:\"TableDelta\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",81)':{tag:'(0019,\"GEMS_ACQU_01\",81)',vr:\"SS\",name:\"Contiguous\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",82)':{tag:'(0019,\"GEMS_ACQU_01\",82)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",83)':{tag:'(0019,\"GEMS_ACQU_01\",83)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",84)':{tag:'(0019,\"GEMS_ACQU_01\",84)',vr:\"DS\",name:\"PeakSAR\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",85)':{tag:'(0019,\"GEMS_ACQU_01\",85)',vr:\"SS\",name:\"MonitorSAR\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",86)':{tag:'(0019,\"GEMS_ACQU_01\",86)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",87)':{tag:'(0019,\"GEMS_ACQU_01\",87)',vr:\"DS\",name:\"CardiacRepetition Time\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",88)':{tag:'(0019,\"GEMS_ACQU_01\",88)',vr:\"SS\",name:\"ImagesPerCardiacCycle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",8a)':{tag:'(0019,\"GEMS_ACQU_01\",8a)',vr:\"SS\",name:\"ActualReceiveGainAnalog\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",8b)':{tag:'(0019,\"GEMS_ACQU_01\",8b)',vr:\"SS\",name:\"ActualReceiveGainDigital\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",8d)':{tag:'(0019,\"GEMS_ACQU_01\",8d)',vr:\"DS\",name:\"DelayAfterTrigger\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",8f)':{tag:'(0019,\"GEMS_ACQU_01\",8f)',vr:\"SS\",name:\"SwapPhaseFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",90)':{tag:'(0019,\"GEMS_ACQU_01\",90)',vr:\"SS\",name:\"PauseInterval\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",91)':{tag:'(0019,\"GEMS_ACQU_01\",91)',vr:\"DS\",name:\"PulseTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",92)':{tag:'(0019,\"GEMS_ACQU_01\",92)',vr:\"SL\",name:\"SliceOffsetOnFrequencyAxis\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",93)':{tag:'(0019,\"GEMS_ACQU_01\",93)',vr:\"DS\",name:\"CenterFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",94)':{tag:'(0019,\"GEMS_ACQU_01\",94)',vr:\"SS\",name:\"TransmitGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",95)':{tag:'(0019,\"GEMS_ACQU_01\",95)',vr:\"SS\",name:\"AnalogReceiverGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",96)':{tag:'(0019,\"GEMS_ACQU_01\",96)',vr:\"SS\",name:\"DigitalReceiverGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",97)':{tag:'(0019,\"GEMS_ACQU_01\",97)',vr:\"SL\",name:\"BitmapDefiningCVs\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",98)':{tag:'(0019,\"GEMS_ACQU_01\",98)',vr:\"SS\",name:\"CenterFrequencyMethod\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",99)':{tag:'(0019,\"GEMS_ACQU_01\",99)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",9b)':{tag:'(0019,\"GEMS_ACQU_01\",9b)',vr:\"SS\",name:\"PulseSequenceMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",9c)':{tag:'(0019,\"GEMS_ACQU_01\",9c)',vr:\"LO\",name:\"PulseSequenceName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",9d)':{tag:'(0019,\"GEMS_ACQU_01\",9d)',vr:\"DT\",name:\"PulseSequenceDate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",9e)':{tag:'(0019,\"GEMS_ACQU_01\",9e)',vr:\"LO\",name:\"InternalPulseSequenceName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",9f)':{tag:'(0019,\"GEMS_ACQU_01\",9f)',vr:\"SS\",name:\"TransmittingCoil\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a0)':{tag:'(0019,\"GEMS_ACQU_01\",a0)',vr:\"SS\",name:\"SurfaceCoilType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a1)':{tag:'(0019,\"GEMS_ACQU_01\",a1)',vr:\"SS\",name:\"ExtremityCoilFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a2)':{tag:'(0019,\"GEMS_ACQU_01\",a2)',vr:\"SL\",name:\"RawDataRunNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a3)':{tag:'(0019,\"GEMS_ACQU_01\",a3)',vr:\"UL\",name:\"CalibratedFieldStrength\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a4)':{tag:'(0019,\"GEMS_ACQU_01\",a4)',vr:\"SS\",name:\"SATFatWaterBone\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a5)':{tag:'(0019,\"GEMS_ACQU_01\",a5)',vr:\"DS\",name:\"ReceiveBandwidth\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a7)':{tag:'(0019,\"GEMS_ACQU_01\",a7)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a8)':{tag:'(0019,\"GEMS_ACQU_01\",a8)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",a9)':{tag:'(0019,\"GEMS_ACQU_01\",a9)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",aa)':{tag:'(0019,\"GEMS_ACQU_01\",aa)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ab)':{tag:'(0019,\"GEMS_ACQU_01\",ab)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ac)':{tag:'(0019,\"GEMS_ACQU_01\",ac)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ad)':{tag:'(0019,\"GEMS_ACQU_01\",ad)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ae)':{tag:'(0019,\"GEMS_ACQU_01\",ae)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",af)':{tag:'(0019,\"GEMS_ACQU_01\",af)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b0)':{tag:'(0019,\"GEMS_ACQU_01\",b0)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b1)':{tag:'(0019,\"GEMS_ACQU_01\",b1)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b2)':{tag:'(0019,\"GEMS_ACQU_01\",b2)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b3)':{tag:'(0019,\"GEMS_ACQU_01\",b3)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b4)':{tag:'(0019,\"GEMS_ACQU_01\",b4)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b5)':{tag:'(0019,\"GEMS_ACQU_01\",b5)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b6)':{tag:'(0019,\"GEMS_ACQU_01\",b6)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b7)':{tag:'(0019,\"GEMS_ACQU_01\",b7)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b8)':{tag:'(0019,\"GEMS_ACQU_01\",b8)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",b9)':{tag:'(0019,\"GEMS_ACQU_01\",b9)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ba)':{tag:'(0019,\"GEMS_ACQU_01\",ba)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",bb)':{tag:'(0019,\"GEMS_ACQU_01\",bb)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",bc)':{tag:'(0019,\"GEMS_ACQU_01\",bc)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",bd)':{tag:'(0019,\"GEMS_ACQU_01\",bd)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",be)':{tag:'(0019,\"GEMS_ACQU_01\",be)',vr:\"DS\",name:\"ProjectionAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c0)':{tag:'(0019,\"GEMS_ACQU_01\",c0)',vr:\"SS\",name:\"SaturationPlanes\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c1)':{tag:'(0019,\"GEMS_ACQU_01\",c1)',vr:\"SS\",name:\"SurfaceCoilIntensityCorrectionFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c2)':{tag:'(0019,\"GEMS_ACQU_01\",c2)',vr:\"SS\",name:\"SATLocationR\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c3)':{tag:'(0019,\"GEMS_ACQU_01\",c3)',vr:\"SS\",name:\"SATLocationL\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c4)':{tag:'(0019,\"GEMS_ACQU_01\",c4)',vr:\"SS\",name:\"SATLocationA\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c5)':{tag:'(0019,\"GEMS_ACQU_01\",c5)',vr:\"SS\",name:\"SATLocationP\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c6)':{tag:'(0019,\"GEMS_ACQU_01\",c6)',vr:\"SS\",name:\"SATLocationH\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c7)':{tag:'(0019,\"GEMS_ACQU_01\",c7)',vr:\"SS\",name:\"SATLocationF\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c8)':{tag:'(0019,\"GEMS_ACQU_01\",c8)',vr:\"SS\",name:\"SATThicknessRL\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",c9)':{tag:'(0019,\"GEMS_ACQU_01\",c9)',vr:\"SS\",name:\"SATThicknessAP\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ca)':{tag:'(0019,\"GEMS_ACQU_01\",ca)',vr:\"SS\",name:\"SATThicknessHF\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",cb)':{tag:'(0019,\"GEMS_ACQU_01\",cb)',vr:\"SS\",name:\"PrescribedFlowAxis\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",cc)':{tag:'(0019,\"GEMS_ACQU_01\",cc)',vr:\"SS\",name:\"VelocityEncoding\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",cd)':{tag:'(0019,\"GEMS_ACQU_01\",cd)',vr:\"SS\",name:\"ThicknessDisclaimer\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ce)':{tag:'(0019,\"GEMS_ACQU_01\",ce)',vr:\"SS\",name:\"PrescanType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",cf)':{tag:'(0019,\"GEMS_ACQU_01\",cf)',vr:\"SS\",name:\"PrescanStatus\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d0)':{tag:'(0019,\"GEMS_ACQU_01\",d0)',vr:\"SH\",name:\"RawDataType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d2)':{tag:'(0019,\"GEMS_ACQU_01\",d2)',vr:\"SS\",name:\"ProjectionAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d3)':{tag:'(0019,\"GEMS_ACQU_01\",d3)',vr:\"SH\",name:\"ProjectionAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d4)':{tag:'(0019,\"GEMS_ACQU_01\",d4)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d5)':{tag:'(0019,\"GEMS_ACQU_01\",d5)',vr:\"SS\",name:\"FractionalEcho\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d6)':{tag:'(0019,\"GEMS_ACQU_01\",d6)',vr:\"SS\",name:\"PrepPulse\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d7)':{tag:'(0019,\"GEMS_ACQU_01\",d7)',vr:\"SS\",name:\"CardiacPhases\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d8)':{tag:'(0019,\"GEMS_ACQU_01\",d8)',vr:\"SS\",name:\"VariableEchoFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",d9)':{tag:'(0019,\"GEMS_ACQU_01\",d9)',vr:\"DS\",name:\"ConcatenatedSAT\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",da)':{tag:'(0019,\"GEMS_ACQU_01\",da)',vr:\"SS\",name:\"ReferenceChannelUsed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",db)':{tag:'(0019,\"GEMS_ACQU_01\",db)',vr:\"DS\",name:\"BackProjectorCoefficient\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",dc)':{tag:'(0019,\"GEMS_ACQU_01\",dc)',vr:\"SS\",name:\"PrimarySpeedCorrectionUsed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",dd)':{tag:'(0019,\"GEMS_ACQU_01\",dd)',vr:\"SS\",name:\"OverrangeCorrectionUsed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",de)':{tag:'(0019,\"GEMS_ACQU_01\",de)',vr:\"DS\",name:\"DynamicZAlphaValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",df)':{tag:'(0019,\"GEMS_ACQU_01\",df)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e0)':{tag:'(0019,\"GEMS_ACQU_01\",e0)',vr:\"DS\",name:\"UserData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e1)':{tag:'(0019,\"GEMS_ACQU_01\",e1)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e2)':{tag:'(0019,\"GEMS_ACQU_01\",e2)',vr:\"DS\",name:\"VelocityEncodeScale\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e3)':{tag:'(0019,\"GEMS_ACQU_01\",e3)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e4)':{tag:'(0019,\"GEMS_ACQU_01\",e4)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e5)':{tag:'(0019,\"GEMS_ACQU_01\",e5)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e6)':{tag:'(0019,\"GEMS_ACQU_01\",e6)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e8)':{tag:'(0019,\"GEMS_ACQU_01\",e8)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",e9)':{tag:'(0019,\"GEMS_ACQU_01\",e9)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",eb)':{tag:'(0019,\"GEMS_ACQU_01\",eb)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",ec)':{tag:'(0019,\"GEMS_ACQU_01\",ec)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",f0)':{tag:'(0019,\"GEMS_ACQU_01\",f0)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",f1)':{tag:'(0019,\"GEMS_ACQU_01\",f1)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",f2)':{tag:'(0019,\"GEMS_ACQU_01\",f2)',vr:\"SS\",name:\"FastPhases\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",f3)':{tag:'(0019,\"GEMS_ACQU_01\",f3)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",f4)':{tag:'(0019,\"GEMS_ACQU_01\",f4)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GEMS_ACQU_01\",f9)':{tag:'(0019,\"GEMS_ACQU_01\",f9)',vr:\"DS\",name:\"TransmitGain\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",00)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",00)',vr:\"LO\",name:\"CRExposureMenuCode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",10)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",10)',vr:\"LO\",name:\"CRExposureMenuString\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",20)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",20)',vr:\"LO\",name:\"CREDRMode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",30)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",30)',vr:\"LO\",name:\"CRLatitude\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",40)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",40)',vr:\"LO\",name:\"CRGroupNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",50)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",50)',vr:\"US\",name:\"CRImageSerialNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",60)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",60)',vr:\"LO\",name:\"CRBarCodeNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",70)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",70)',vr:\"LO\",name:\"CRFilmOutputExposure\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",80)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",80)',vr:\"LO\",name:\"CRFilmFormat\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",90)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK1\",90)',vr:\"LO\",name:\"CRSShiftString\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",00)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",00)',vr:\"US\",name:\"CRSShift\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",10)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",10)',vr:\"DS\",name:\"CRCShift\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",20)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",20)',vr:\"DS\",name:\"CRGT\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",30)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",30)',vr:\"DS\",name:\"CRGA\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",40)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",40)',vr:\"DS\",name:\"CRGC\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",50)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",50)',vr:\"DS\",name:\"CRGS\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",60)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",60)',vr:\"DS\",name:\"CRRT\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",70)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",70)',vr:\"DS\",name:\"CRRE\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",80)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",80)',vr:\"US\",name:\"CRRN\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",90)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK2\",90)',vr:\"DS\",name:\"CRDRT\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",00)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",00)',vr:\"DS\",name:\"CRDRE\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",10)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",10)',vr:\"US\",name:\"CRDRN\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",20)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",20)',vr:\"DS\",name:\"CRORE\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",30)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",30)',vr:\"US\",name:\"CRORN\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",40)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",40)',vr:\"US\",name:\"CRORD\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",50)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",50)',vr:\"LO\",name:\"CRCassetteSize\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",60)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",60)',vr:\"LO\",name:\"CRMachineID\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",70)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",70)',vr:\"LO\",name:\"CRMachineType\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",80)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",80)',vr:\"LO\",name:\"CRTechnicianCode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",90)':{tag:'(0023,\"GEMS_ACRQA_1.0 BLOCK3\",90)',vr:\"LO\",name:\"CREnergySubtractionParameters\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",00)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",00)',vr:\"LO\",name:\"CRExposureMenuCode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",10)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",10)',vr:\"LO\",name:\"CRExposureMenuString\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",20)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",20)',vr:\"LO\",name:\"CREDRMode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",30)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",30)',vr:\"LO\",name:\"CRLatitude\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",40)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",40)',vr:\"LO\",name:\"CRGroupNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",50)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",50)',vr:\"US\",name:\"CRImageSerialNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",60)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",60)',vr:\"LO\",name:\"CRBarCodeNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",70)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",70)',vr:\"LO\",name:\"CRFilmOutputExposure\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",80)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",80)',vr:\"LO\",name:\"CRFilmFormat\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",90)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK1\",90)',vr:\"LO\",name:\"CRSShiftString\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",00)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",00)',vr:\"US\",name:\"CRSShift\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",10)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",10)',vr:\"LO\",name:\"CRCShift\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",20)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",20)',vr:\"LO\",name:\"CRGT\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",30)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",30)',vr:\"DS\",name:\"CRGA\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",40)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",40)',vr:\"DS\",name:\"CRGC\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",50)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",50)',vr:\"DS\",name:\"CRGS\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",60)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",60)',vr:\"LO\",name:\"CRRT\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",70)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",70)',vr:\"DS\",name:\"CRRE\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",80)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",80)',vr:\"US\",name:\"CRRN\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",90)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK2\",90)',vr:\"DS\",name:\"CRDRT\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",00)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",00)',vr:\"DS\",name:\"CRDRE\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",10)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",10)',vr:\"US\",name:\"CRDRN\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",20)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",20)',vr:\"DS\",name:\"CRORE\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",30)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",30)',vr:\"US\",name:\"CRORN\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",40)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",40)',vr:\"US\",name:\"CRORD\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",50)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",50)',vr:\"LO\",name:\"CRCassetteSize\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",60)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",60)',vr:\"LO\",name:\"CRMachineID\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",70)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",70)',vr:\"LO\",name:\"CRMachineType\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",80)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",80)',vr:\"LO\",name:\"CRTechnicianCode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",90)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",90)',vr:\"LO\",name:\"CREnergySubtractionParameters\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",f0)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",f0)',vr:\"LO\",name:\"CRDistributionCode\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",ff)':{tag:'(0023,\"GEMS_ACRQA_2.0 BLOCK3\",ff)',vr:\"US\",name:\"CRShuttersApplied\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",01)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",01)',vr:\"SQ\",name:\"Reconstruction Parameters Sequence\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",50)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",50)',vr:\"UL\",name:\"VolumeVoxelCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",51)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",51)',vr:\"UL\",name:\"VolumeSegmentCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",53)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",53)',vr:\"US\",name:\"VolumeSliceSize\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",54)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",54)',vr:\"US\",name:\"VolumeSliceCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",55)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",55)',vr:\"SL\",name:\"VolumeThresholdValue\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",57)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",57)',vr:\"DS\",name:\"VolumeVoxelRatio\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",58)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",58)',vr:\"DS\",name:\"VolumeVoxelSize\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",59)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",59)',vr:\"US\",name:\"VolumeZPositionSize\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",60)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",60)',vr:\"DS\",name:\"VolumeBaseLine\",vm:\"9\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",61)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",61)',vr:\"DS\",name:\"VolumeCenterPoint\",vm:\"3\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",63)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",63)',vr:\"SL\",name:\"VolumeSkewBase\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",64)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",64)',vr:\"DS\",name:\"VolumeRegistrationTransformRotationMatrix\",vm:\"9\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",65)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",65)',vr:\"DS\",name:\"VolumeRegistrationTransformTranslationVector\",vm:\"3\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",70)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",70)',vr:\"DS\",name:\"KVPList\",vm:\"1-n\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",71)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",71)',vr:\"IS\",name:\"XRayTubeCurrentList\",vm:\"1-n\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",72)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",72)',vr:\"IS\",name:\"ExposureList\",vm:\"1-n\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",80)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",80)',vr:\"LO\",name:\"AcquisitionDLXIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",85)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",85)',vr:\"SQ\",name:\"AcquisitionDLX2DSeriesSequence\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",89)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",89)',vr:\"DS\",name:\"ContrastAgentVolumeList\",vm:\"1-n\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",8A)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",8A)',vr:\"US\",name:\"NumberOfInjections\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",8B)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",8B)',vr:\"US\",name:\"FrameCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",91)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",91)',vr:\"LO\",name:\"XA3DReconstructionAlgorithmName\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",92)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",92)',vr:\"CS\",name:\"XA3DReconstructionAlgorithmVersion\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",93)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",93)',vr:\"DA\",name:\"DLXCalibrationDate\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",94)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",94)',vr:\"TM\",name:\"DLXCalibrationTime\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",95)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",95)',vr:\"CS\",name:\"DLXCalibrationStatus\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",96)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",96)',vr:\"IS\",name:\"UsedFrames\",vm:\"1-n\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",98)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",98)',vr:\"US\",name:\"TransformCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",99)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",99)',vr:\"SQ\",name:\"TransformSequence\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",9A)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",9A)',vr:\"DS\",name:\"TransformRotationMatrix\",vm:\"9\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",9B)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",9B)',vr:\"DS\",name:\"TransformTranslationVector\",vm:\"3\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",9C)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",9C)',vr:\"LO\",name:\"TransformLabel\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B0)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B0)',vr:\"SQ\",name:\"WireframeList\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B1)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B1)',vr:\"US\",name:\"WireframeCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B2)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B2)',vr:\"US\",name:\"LocationSystem\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B5)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B5)',vr:\"LO\",name:\"WireframeName\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B6)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B6)',vr:\"LO\",name:\"WireframeGroupName\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B7)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B7)',vr:\"LO\",name:\"WireframeColor\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B8)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B8)',vr:\"SL\",name:\"WireframeAttributes\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",B9)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",B9)',vr:\"SL\",name:\"WireframePointCount\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",BA)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",BA)',vr:\"SL\",name:\"WireframeTimestamp\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",BB)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",BB)',vr:\"SQ\",name:\"WireframePointList\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",BC)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",BC)',vr:\"DS\",name:\"WireframePointsCoordinates\",vm:\"3\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",C0)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",C0)',vr:\"DS\",name:\"VolumeUpperLeftHighCornerRAS\",vm:\"3\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",C1)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",C1)',vr:\"DS\",name:\"VolumeSliceToRASRotationMatrix\",vm:\"9\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",C2)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",C2)',vr:\"DS\",name:\"VolumeUpperLeftHighCornerTLOC\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",D1)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",D1)',vr:\"OB\",name:\"VolumeSegmentList\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",D2)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",D2)',vr:\"OB\",name:\"VolumeGradientList\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",D3)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",D3)',vr:\"OB\",name:\"VolumeDensityList\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",D4)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",D4)',vr:\"OB\",name:\"VolumeZPositionList\",vm:\"1\",version:\"PrivateTag\"},'(0047,\"GEMS_ADWSoft_3D1\",D5)':{tag:'(0047,\"GEMS_ADWSoft_3D1\",D5)',vr:\"OB\",name:\"VolumeOriginalIndexList\",vm:\"1\",version:\"PrivateTag\"},'(0039,\"GEMS_ADWSoft_DPO\",80)':{tag:'(0039,\"GEMS_ADWSoft_DPO\",80)',vr:\"IS\",name:\"PrivateEntityNumber\",vm:\"1\",version:\"PrivateTag\"},'(0039,\"GEMS_ADWSoft_DPO\",85)':{tag:'(0039,\"GEMS_ADWSoft_DPO\",85)',vr:\"DA\",name:\"PrivateEntityDate\",vm:\"1\",version:\"PrivateTag\"},'(0039,\"GEMS_ADWSoft_DPO\",90)':{tag:'(0039,\"GEMS_ADWSoft_DPO\",90)',vr:\"TM\",name:\"PrivateEntityTime\",vm:\"1\",version:\"PrivateTag\"},'(0039,\"GEMS_ADWSoft_DPO\",95)':{tag:'(0039,\"GEMS_ADWSoft_DPO\",95)',vr:\"LO\",name:\"PrivateEntityLaunchCommand\",vm:\"1\",version:\"PrivateTag\"},'(0039,\"GEMS_ADWSoft_DPO\",AA)':{tag:'(0039,\"GEMS_ADWSoft_DPO\",AA)',vr:\"CS\",name:\"PrivateEntityType\",vm:\"1\",version:\"PrivateTag\"},'(0033,\"GEMS_CTHD_01\",02)':{tag:'(0033,\"GEMS_CTHD_01\",02)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0037,\"GEMS_DRS_1\",10)':{tag:'(0037,\"GEMS_DRS_1\",10)',vr:\"LO\",name:\"ReferringDepartment\",vm:\"1\",version:\"PrivateTag\"},'(0037,\"GEMS_DRS_1\",20)':{tag:'(0037,\"GEMS_DRS_1\",20)',vr:\"US\",name:\"ScreenNumber\",vm:\"1\",version:\"PrivateTag\"},'(0037,\"GEMS_DRS_1\",40)':{tag:'(0037,\"GEMS_DRS_1\",40)',vr:\"SH\",name:\"LeftOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0037,\"GEMS_DRS_1\",42)':{tag:'(0037,\"GEMS_DRS_1\",42)',vr:\"SH\",name:\"RightOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0037,\"GEMS_DRS_1\",50)':{tag:'(0037,\"GEMS_DRS_1\",50)',vr:\"CS\",name:\"Inversion\",vm:\"1\",version:\"PrivateTag\"},'(0037,\"GEMS_DRS_1\",60)':{tag:'(0037,\"GEMS_DRS_1\",60)',vr:\"US\",name:\"DSA\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",10)':{tag:'(0009,\"GEMS_GENIE_1\",10)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",11)':{tag:'(0009,\"GEMS_GENIE_1\",11)',vr:\"SL\",name:\"StudyFlags\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",12)':{tag:'(0009,\"GEMS_GENIE_1\",12)',vr:\"SL\",name:\"StudyType\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",1e)':{tag:'(0009,\"GEMS_GENIE_1\",1e)',vr:\"UI\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",20)':{tag:'(0009,\"GEMS_GENIE_1\",20)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",21)':{tag:'(0009,\"GEMS_GENIE_1\",21)',vr:\"SL\",name:\"SeriesFlags\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",22)':{tag:'(0009,\"GEMS_GENIE_1\",22)',vr:\"SH\",name:\"UserOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",23)':{tag:'(0009,\"GEMS_GENIE_1\",23)',vr:\"SL\",name:\"InitiationType\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",24)':{tag:'(0009,\"GEMS_GENIE_1\",24)',vr:\"SL\",name:\"InitiationDelay\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",25)':{tag:'(0009,\"GEMS_GENIE_1\",25)',vr:\"SL\",name:\"InitiationCountRate\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",26)':{tag:'(0009,\"GEMS_GENIE_1\",26)',vr:\"SL\",name:\"NumberEnergySets\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",27)':{tag:'(0009,\"GEMS_GENIE_1\",27)',vr:\"SL\",name:\"NumberDetectors\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",29)':{tag:'(0009,\"GEMS_GENIE_1\",29)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",2a)':{tag:'(0009,\"GEMS_GENIE_1\",2a)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",2c)':{tag:'(0009,\"GEMS_GENIE_1\",2c)',vr:\"LO\",name:\"SeriesComments\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",2d)':{tag:'(0009,\"GEMS_GENIE_1\",2d)',vr:\"SL\",name:\"TrackBeatAverage\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",2e)':{tag:'(0009,\"GEMS_GENIE_1\",2e)',vr:\"FD\",name:\"DistancePrescribed\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",30)':{tag:'(0009,\"GEMS_GENIE_1\",30)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",35)':{tag:'(0009,\"GEMS_GENIE_1\",35)',vr:\"SL\",name:\"GantryLocusType\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",37)':{tag:'(0009,\"GEMS_GENIE_1\",37)',vr:\"SL\",name:\"StartingHeartRate\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",38)':{tag:'(0009,\"GEMS_GENIE_1\",38)',vr:\"SL\",name:\"RRWindowWidth\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",39)':{tag:'(0009,\"GEMS_GENIE_1\",39)',vr:\"SL\",name:\"RRWindowOffset\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",3a)':{tag:'(0009,\"GEMS_GENIE_1\",3a)',vr:\"SL\",name:\"PercentCycleImaged\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",40)':{tag:'(0009,\"GEMS_GENIE_1\",40)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",41)':{tag:'(0009,\"GEMS_GENIE_1\",41)',vr:\"SL\",name:\"PatientFlags\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",42)':{tag:'(0009,\"GEMS_GENIE_1\",42)',vr:\"DA\",name:\"PatientCreationDate\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_GENIE_1\",43)':{tag:'(0009,\"GEMS_GENIE_1\",43)',vr:\"TM\",name:\"PatientCreationTime\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",0a)':{tag:'(0011,\"GEMS_GENIE_1\",0a)',vr:\"SL\",name:\"SeriesType\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",0b)':{tag:'(0011,\"GEMS_GENIE_1\",0b)',vr:\"SL\",name:\"EffectiveSeriesDuration\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",0c)':{tag:'(0011,\"GEMS_GENIE_1\",0c)',vr:\"SL\",name:\"NumBeats\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",0d)':{tag:'(0011,\"GEMS_GENIE_1\",0d)',vr:\"LO\",name:\"RadioNuclideName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",10)':{tag:'(0011,\"GEMS_GENIE_1\",10)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",12)':{tag:'(0011,\"GEMS_GENIE_1\",12)',vr:\"LO\",name:\"DatasetName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",13)':{tag:'(0011,\"GEMS_GENIE_1\",13)',vr:\"SL\",name:\"DatasetType\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",15)':{tag:'(0011,\"GEMS_GENIE_1\",15)',vr:\"SL\",name:\"DetectorNumber\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",16)':{tag:'(0011,\"GEMS_GENIE_1\",16)',vr:\"SL\",name:\"EnergyNumber\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",17)':{tag:'(0011,\"GEMS_GENIE_1\",17)',vr:\"SL\",name:\"RRIntervalWindowNumber\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",18)':{tag:'(0011,\"GEMS_GENIE_1\",18)',vr:\"SL\",name:\"MGBinNumber\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",19)':{tag:'(0011,\"GEMS_GENIE_1\",19)',vr:\"FD\",name:\"RadiusOfRotation\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",1a)':{tag:'(0011,\"GEMS_GENIE_1\",1a)',vr:\"SL\",name:\"DetectorCountZone\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",1b)':{tag:'(0011,\"GEMS_GENIE_1\",1b)',vr:\"SL\",name:\"NumEnergyWindows\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",1c)':{tag:'(0011,\"GEMS_GENIE_1\",1c)',vr:\"SL\",name:\"EnergyOffset\",vm:\"4\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",1d)':{tag:'(0011,\"GEMS_GENIE_1\",1d)',vr:\"SL\",name:\"EnergyRange\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",1f)':{tag:'(0011,\"GEMS_GENIE_1\",1f)',vr:\"SL\",name:\"ImageOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",23)':{tag:'(0011,\"GEMS_GENIE_1\",23)',vr:\"SL\",name:\"UseFOVMask\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",24)':{tag:'(0011,\"GEMS_GENIE_1\",24)',vr:\"SL\",name:\"FOVMaskYCutoffAngle\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",25)':{tag:'(0011,\"GEMS_GENIE_1\",25)',vr:\"SL\",name:\"FOVMaskCutoffAngle\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",26)':{tag:'(0011,\"GEMS_GENIE_1\",26)',vr:\"SL\",name:\"TableOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",27)':{tag:'(0011,\"GEMS_GENIE_1\",27)',vr:\"SL\",name:\"ROITopLeft\",vm:\"2\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",28)':{tag:'(0011,\"GEMS_GENIE_1\",28)',vr:\"SL\",name:\"ROIBottomRight\",vm:\"2\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",30)':{tag:'(0011,\"GEMS_GENIE_1\",30)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",33)':{tag:'(0011,\"GEMS_GENIE_1\",33)',vr:\"LO\",name:\"EnergyCorrectName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",34)':{tag:'(0011,\"GEMS_GENIE_1\",34)',vr:\"LO\",name:\"SpatialCorrectName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",35)':{tag:'(0011,\"GEMS_GENIE_1\",35)',vr:\"LO\",name:\"TuningCalibName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",36)':{tag:'(0011,\"GEMS_GENIE_1\",36)',vr:\"LO\",name:\"UniformityCorrectName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",37)':{tag:'(0011,\"GEMS_GENIE_1\",37)',vr:\"LO\",name:\"AcquisitionSpecificCorrectName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",38)':{tag:'(0011,\"GEMS_GENIE_1\",38)',vr:\"SL\",name:\"ByteOrder\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",3a)':{tag:'(0011,\"GEMS_GENIE_1\",3a)',vr:\"SL\",name:\"PictureFormat\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",3b)':{tag:'(0011,\"GEMS_GENIE_1\",3b)',vr:\"FD\",name:\"PixelScale\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",3c)':{tag:'(0011,\"GEMS_GENIE_1\",3c)',vr:\"FD\",name:\"PixelOffset\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",3e)':{tag:'(0011,\"GEMS_GENIE_1\",3e)',vr:\"SL\",name:\"FOVShape\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",3f)':{tag:'(0011,\"GEMS_GENIE_1\",3f)',vr:\"SL\",name:\"DatasetFlags\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",44)':{tag:'(0011,\"GEMS_GENIE_1\",44)',vr:\"FD\",name:\"ThresholdCenter\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",45)':{tag:'(0011,\"GEMS_GENIE_1\",45)',vr:\"FD\",name:\"ThresholdWidth\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",46)':{tag:'(0011,\"GEMS_GENIE_1\",46)',vr:\"SL\",name:\"InterpolationType\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",55)':{tag:'(0011,\"GEMS_GENIE_1\",55)',vr:\"FD\",name:\"Period\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_GENIE_1\",56)':{tag:'(0011,\"GEMS_GENIE_1\",56)',vr:\"FD\",name:\"ElapsedTime\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",10)':{tag:'(0013,\"GEMS_GENIE_1\",10)',vr:\"FD\",name:\"DigitalFOV\",vm:\"2\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",11)':{tag:'(0013,\"GEMS_GENIE_1\",11)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",12)':{tag:'(0013,\"GEMS_GENIE_1\",12)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",16)':{tag:'(0013,\"GEMS_GENIE_1\",16)',vr:\"SL\",name:\"AutoTrackPeak\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",17)':{tag:'(0013,\"GEMS_GENIE_1\",17)',vr:\"SL\",name:\"AutoTrackWidth\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",18)':{tag:'(0013,\"GEMS_GENIE_1\",18)',vr:\"FD\",name:\"TransmissionScanTime\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",19)':{tag:'(0013,\"GEMS_GENIE_1\",19)',vr:\"FD\",name:\"TransmissionMaskWidth\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",1a)':{tag:'(0013,\"GEMS_GENIE_1\",1a)',vr:\"FD\",name:\"CopperAttenuatorThickness\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",1c)':{tag:'(0013,\"GEMS_GENIE_1\",1c)',vr:\"FD\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",1d)':{tag:'(0013,\"GEMS_GENIE_1\",1d)',vr:\"FD\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",1e)':{tag:'(0013,\"GEMS_GENIE_1\",1e)',vr:\"FD\",name:\"TomoViewOffset\",vm:\"1-n\",version:\"PrivateTag\"},'(0013,\"GEMS_GENIE_1\",26)':{tag:'(0013,\"GEMS_GENIE_1\",26)',vr:\"LT\",name:\"StudyComments\",vm:\"1\",version:\"PrivateTag\"},'(0033,\"GEMS_GNHD_01\",01)':{tag:'(0033,\"GEMS_GNHD_01\",01)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0033,\"GEMS_GNHD_01\",02)':{tag:'(0033,\"GEMS_GNHD_01\",02)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",01)':{tag:'(0009,\"GEMS_IDEN_01\",01)',vr:\"LO\",name:\"FullFidelity\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",02)':{tag:'(0009,\"GEMS_IDEN_01\",02)',vr:\"SH\",name:\"SuiteId\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",04)':{tag:'(0009,\"GEMS_IDEN_01\",04)',vr:\"SH\",name:\"ProductId\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",17)':{tag:'(0009,\"GEMS_IDEN_01\",17)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",1a)':{tag:'(0009,\"GEMS_IDEN_01\",1a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",20)':{tag:'(0009,\"GEMS_IDEN_01\",20)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",27)':{tag:'(0009,\"GEMS_IDEN_01\",27)',vr:\"SL\",name:\"ImageActualDate\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",2f)':{tag:'(0009,\"GEMS_IDEN_01\",2f)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",30)':{tag:'(0009,\"GEMS_IDEN_01\",30)',vr:\"SH\",name:\"ServiceId\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",31)':{tag:'(0009,\"GEMS_IDEN_01\",31)',vr:\"SH\",name:\"MobileLocationNumber\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",e2)':{tag:'(0009,\"GEMS_IDEN_01\",e2)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",e3)':{tag:'(0009,\"GEMS_IDEN_01\",e3)',vr:\"UI\",name:\"EquipmentUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",e6)':{tag:'(0009,\"GEMS_IDEN_01\",e6)',vr:\"SH\",name:\"GenesisVersionNow\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",e7)':{tag:'(0009,\"GEMS_IDEN_01\",e7)',vr:\"UL\",name:\"ExamRecordChecksum\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",e8)':{tag:'(0009,\"GEMS_IDEN_01\",e8)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"GEMS_IDEN_01\",e9)':{tag:'(0009,\"GEMS_IDEN_01\",e9)',vr:\"SL\",name:\"ActualSeriesDataTimeStamp\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",06)':{tag:'(0027,\"GEMS_IMAG_01\",06)',vr:\"SL\",name:\"ImageArchiveFlag\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",10)':{tag:'(0027,\"GEMS_IMAG_01\",10)',vr:\"SS\",name:\"ScoutType\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",1c)':{tag:'(0027,\"GEMS_IMAG_01\",1c)',vr:\"SL\",name:\"VmaMamp\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",1d)':{tag:'(0027,\"GEMS_IMAG_01\",1d)',vr:\"SS\",name:\"VmaPhase\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",1e)':{tag:'(0027,\"GEMS_IMAG_01\",1e)',vr:\"SL\",name:\"VmaMod\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",1f)':{tag:'(0027,\"GEMS_IMAG_01\",1f)',vr:\"SL\",name:\"VmaClip\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",20)':{tag:'(0027,\"GEMS_IMAG_01\",20)',vr:\"SS\",name:\"SmartScanOnOffFlag\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",30)':{tag:'(0027,\"GEMS_IMAG_01\",30)',vr:\"SH\",name:\"ForeignImageRevision\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",31)':{tag:'(0027,\"GEMS_IMAG_01\",31)',vr:\"SS\",name:\"ImagingMode\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",32)':{tag:'(0027,\"GEMS_IMAG_01\",32)',vr:\"SS\",name:\"PulseSequence\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",33)':{tag:'(0027,\"GEMS_IMAG_01\",33)',vr:\"SL\",name:\"ImagingOptions\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",35)':{tag:'(0027,\"GEMS_IMAG_01\",35)',vr:\"SS\",name:\"PlaneType\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",36)':{tag:'(0027,\"GEMS_IMAG_01\",36)',vr:\"SL\",name:\"ObliquePlane\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",40)':{tag:'(0027,\"GEMS_IMAG_01\",40)',vr:\"SH\",name:\"RASLetterOfImageLocation\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",41)':{tag:'(0027,\"GEMS_IMAG_01\",41)',vr:\"FL\",name:\"ImageLocation\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",42)':{tag:'(0027,\"GEMS_IMAG_01\",42)',vr:\"FL\",name:\"CenterRCoordOfPlaneImage\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",43)':{tag:'(0027,\"GEMS_IMAG_01\",43)',vr:\"FL\",name:\"CenterACoordOfPlaneImage\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",44)':{tag:'(0027,\"GEMS_IMAG_01\",44)',vr:\"FL\",name:\"CenterSCoordOfPlaneImage\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",45)':{tag:'(0027,\"GEMS_IMAG_01\",45)',vr:\"FL\",name:\"NormalRCoord\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",46)':{tag:'(0027,\"GEMS_IMAG_01\",46)',vr:\"FL\",name:\"NormalACoord\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",47)':{tag:'(0027,\"GEMS_IMAG_01\",47)',vr:\"FL\",name:\"NormalSCoord\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",48)':{tag:'(0027,\"GEMS_IMAG_01\",48)',vr:\"FL\",name:\"RCoordOfTopRightCorner\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",49)':{tag:'(0027,\"GEMS_IMAG_01\",49)',vr:\"FL\",name:\"ACoordOfTopRightCorner\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",4a)':{tag:'(0027,\"GEMS_IMAG_01\",4a)',vr:\"FL\",name:\"SCoordOfTopRightCorner\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",4b)':{tag:'(0027,\"GEMS_IMAG_01\",4b)',vr:\"FL\",name:\"RCoordOfBottomRightCorner\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",4c)':{tag:'(0027,\"GEMS_IMAG_01\",4c)',vr:\"FL\",name:\"ACoordOfBottomRightCorner\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",4d)':{tag:'(0027,\"GEMS_IMAG_01\",4d)',vr:\"FL\",name:\"SCoordOfBottomRightCorner\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",50)':{tag:'(0027,\"GEMS_IMAG_01\",50)',vr:\"FL\",name:\"TableStartLocation\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",51)':{tag:'(0027,\"GEMS_IMAG_01\",51)',vr:\"FL\",name:\"TableEndLocation\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",52)':{tag:'(0027,\"GEMS_IMAG_01\",52)',vr:\"SH\",name:\"RASLetterForSideOfImage\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",53)':{tag:'(0027,\"GEMS_IMAG_01\",53)',vr:\"SH\",name:\"RASLetterForAnteriorPosterior\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",54)':{tag:'(0027,\"GEMS_IMAG_01\",54)',vr:\"SH\",name:\"RASLetterForScoutStartLoc\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",55)':{tag:'(0027,\"GEMS_IMAG_01\",55)',vr:\"SH\",name:\"RASLetterForScoutEndLoc\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",60)':{tag:'(0027,\"GEMS_IMAG_01\",60)',vr:\"FL\",name:\"ImageDimensionX\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",61)':{tag:'(0027,\"GEMS_IMAG_01\",61)',vr:\"FL\",name:\"ImageDimensionY\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"GEMS_IMAG_01\",62)':{tag:'(0027,\"GEMS_IMAG_01\",62)',vr:\"FL\",name:\"NumberOfExcitations\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",04)':{tag:'(0029,\"GEMS_IMPS_01\",04)',vr:\"SL\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",05)':{tag:'(0029,\"GEMS_IMPS_01\",05)',vr:\"DS\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",06)':{tag:'(0029,\"GEMS_IMPS_01\",06)',vr:\"DS\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",07)':{tag:'(0029,\"GEMS_IMPS_01\",07)',vr:\"SL\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",08)':{tag:'(0029,\"GEMS_IMPS_01\",08)',vr:\"SH\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",09)':{tag:'(0029,\"GEMS_IMPS_01\",09)',vr:\"SH\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",0a)':{tag:'(0029,\"GEMS_IMPS_01\",0a)',vr:\"SS\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",15)':{tag:'(0029,\"GEMS_IMPS_01\",15)',vr:\"SL\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",16)':{tag:'(0029,\"GEMS_IMPS_01\",16)',vr:\"SL\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",17)':{tag:'(0029,\"GEMS_IMPS_01\",17)',vr:\"SL\",name:\"LowerRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",18)':{tag:'(0029,\"GEMS_IMPS_01\",18)',vr:\"SL\",name:\"UpperRangeOfPixels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",1a)':{tag:'(0029,\"GEMS_IMPS_01\",1a)',vr:\"SL\",name:\"LengthOfTotalHeaderInBytes\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",26)':{tag:'(0029,\"GEMS_IMPS_01\",26)',vr:\"SS\",name:\"VersionOfHeaderStructure\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",34)':{tag:'(0029,\"GEMS_IMPS_01\",34)',vr:\"SL\",name:\"AdvantageCompOverflow\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"GEMS_IMPS_01\",35)':{tag:'(0029,\"GEMS_IMPS_01\",35)',vr:\"SL\",name:\"AdvantageCompUnderflow\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",01)':{tag:'(0043,\"GEMS_PARM_01\",01)',vr:\"SS\",name:\"BitmapOfPrescanOptions\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",02)':{tag:'(0043,\"GEMS_PARM_01\",02)',vr:\"SS\",name:\"GradientOffsetInX\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",03)':{tag:'(0043,\"GEMS_PARM_01\",03)',vr:\"SS\",name:\"GradientOffsetInY\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",04)':{tag:'(0043,\"GEMS_PARM_01\",04)',vr:\"SS\",name:\"GradientOffsetInZ\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",05)':{tag:'(0043,\"GEMS_PARM_01\",05)',vr:\"SS\",name:\"ImageIsOriginalOrUnoriginal\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",06)':{tag:'(0043,\"GEMS_PARM_01\",06)',vr:\"SS\",name:\"NumberOfEPIShots\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",07)':{tag:'(0043,\"GEMS_PARM_01\",07)',vr:\"SS\",name:\"ViewsPerSegment\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",08)':{tag:'(0043,\"GEMS_PARM_01\",08)',vr:\"SS\",name:\"RespiratoryRateInBPM\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",09)':{tag:'(0043,\"GEMS_PARM_01\",09)',vr:\"SS\",name:\"RespiratoryTriggerPoint\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",0a)':{tag:'(0043,\"GEMS_PARM_01\",0a)',vr:\"SS\",name:\"TypeOfReceiverUsed\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",0b)':{tag:'(0043,\"GEMS_PARM_01\",0b)',vr:\"DS\",name:\"PeakRateOfChangeOfGradientField\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",0c)':{tag:'(0043,\"GEMS_PARM_01\",0c)',vr:\"DS\",name:\"LimitsInUnitsOfPercent\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",0d)':{tag:'(0043,\"GEMS_PARM_01\",0d)',vr:\"DS\",name:\"PSDEstimatedLimit\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",0e)':{tag:'(0043,\"GEMS_PARM_01\",0e)',vr:\"DS\",name:\"PSDEstimatedLimitInTeslaPerSecond\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",0f)':{tag:'(0043,\"GEMS_PARM_01\",0f)',vr:\"DS\",name:\"SARAvgHead\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",10)':{tag:'(0043,\"GEMS_PARM_01\",10)',vr:\"US\",name:\"WindowValue\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",11)':{tag:'(0043,\"GEMS_PARM_01\",11)',vr:\"US\",name:\"TotalInputViews\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",12)':{tag:'(0043,\"GEMS_PARM_01\",12)',vr:\"SS\",name:\"XrayChain\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",13)':{tag:'(0043,\"GEMS_PARM_01\",13)',vr:\"SS\",name:\"ReconKernelParameters\",vm:\"5\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",14)':{tag:'(0043,\"GEMS_PARM_01\",14)',vr:\"SS\",name:\"CalibrationParameters\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",15)':{tag:'(0043,\"GEMS_PARM_01\",15)',vr:\"SS\",name:\"TotalOutputViews\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",16)':{tag:'(0043,\"GEMS_PARM_01\",16)',vr:\"SS\",name:\"NumberOfOverranges\",vm:\"5\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",17)':{tag:'(0043,\"GEMS_PARM_01\",17)',vr:\"DS\",name:\"IBHImageScaleFactors\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",18)':{tag:'(0043,\"GEMS_PARM_01\",18)',vr:\"DS\",name:\"BBHCoefficients\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",19)':{tag:'(0043,\"GEMS_PARM_01\",19)',vr:\"SS\",name:\"NumberOfBBHChainsToBlend\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",1a)':{tag:'(0043,\"GEMS_PARM_01\",1a)',vr:\"SL\",name:\"StartingChannelNumber\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",1b)':{tag:'(0043,\"GEMS_PARM_01\",1b)',vr:\"SS\",name:\"PPScanParameters\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",1c)':{tag:'(0043,\"GEMS_PARM_01\",1c)',vr:\"SS\",name:\"GEImageIntegrity\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",1d)':{tag:'(0043,\"GEMS_PARM_01\",1d)',vr:\"SS\",name:\"LevelValue\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",1e)':{tag:'(0043,\"GEMS_PARM_01\",1e)',vr:\"DS\",name:\"DeltaStartTime\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",1f)':{tag:'(0043,\"GEMS_PARM_01\",1f)',vr:\"SL\",name:\"MaxOverrangesInAView\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",20)':{tag:'(0043,\"GEMS_PARM_01\",20)',vr:\"DS\",name:\"AvgOverrangesAllViews\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",21)':{tag:'(0043,\"GEMS_PARM_01\",21)',vr:\"SS\",name:\"CorrectedAfterglowTerms\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",25)':{tag:'(0043,\"GEMS_PARM_01\",25)',vr:\"SS\",name:\"ReferenceChannels\",vm:\"6\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",26)':{tag:'(0043,\"GEMS_PARM_01\",26)',vr:\"US\",name:\"NoViewsRefChannelsBlocked\",vm:\"6\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",27)':{tag:'(0043,\"GEMS_PARM_01\",27)',vr:\"SH\",name:\"ScanPitchRatio\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",28)':{tag:'(0043,\"GEMS_PARM_01\",28)',vr:\"OB\",name:\"UniqueImageIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",29)':{tag:'(0043,\"GEMS_PARM_01\",29)',vr:\"OB\",name:\"HistogramTables\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",2a)':{tag:'(0043,\"GEMS_PARM_01\",2a)',vr:\"OB\",name:\"UserDefinedData\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",2b)':{tag:'(0043,\"GEMS_PARM_01\",2b)',vr:\"SS\",name:\"PrivateScanOptions\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",2c)':{tag:'(0043,\"GEMS_PARM_01\",2c)',vr:\"SS\",name:\"EffectiveEchoSpacing\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",2d)':{tag:'(0043,\"GEMS_PARM_01\",2d)',vr:\"SH\",name:\"StringSlopField1\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",2e)':{tag:'(0043,\"GEMS_PARM_01\",2e)',vr:\"SH\",name:\"StringSlopField2\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",2f)':{tag:'(0043,\"GEMS_PARM_01\",2f)',vr:\"SS\",name:\"RawDataType\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",30)':{tag:'(0043,\"GEMS_PARM_01\",30)',vr:\"SS\",name:\"RawDataType\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",31)':{tag:'(0043,\"GEMS_PARM_01\",31)',vr:\"DS\",name:\"RACoordOfTargetReconCentre\",vm:\"2\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",32)':{tag:'(0043,\"GEMS_PARM_01\",32)',vr:\"SS\",name:\"RawDataType\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",33)':{tag:'(0043,\"GEMS_PARM_01\",33)',vr:\"FL\",name:\"NegScanSpacing\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",34)':{tag:'(0043,\"GEMS_PARM_01\",34)',vr:\"IS\",name:\"OffsetFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",35)':{tag:'(0043,\"GEMS_PARM_01\",35)',vr:\"UL\",name:\"UserUsageTag\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",36)':{tag:'(0043,\"GEMS_PARM_01\",36)',vr:\"UL\",name:\"UserFillMapMSW\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",37)':{tag:'(0043,\"GEMS_PARM_01\",37)',vr:\"UL\",name:\"UserFillMapLSW\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",38)':{tag:'(0043,\"GEMS_PARM_01\",38)',vr:\"FL\",name:\"User25ToUser48\",vm:\"24\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",39)':{tag:'(0043,\"GEMS_PARM_01\",39)',vr:\"IS\",name:\"SlopInteger6ToSlopInteger9\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",40)':{tag:'(0043,\"GEMS_PARM_01\",40)',vr:\"FL\",name:\"TriggerOnPosition\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",41)':{tag:'(0043,\"GEMS_PARM_01\",41)',vr:\"FL\",name:\"DegreeOfRotation\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",42)':{tag:'(0043,\"GEMS_PARM_01\",42)',vr:\"SL\",name:\"DASTriggerSource\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",43)':{tag:'(0043,\"GEMS_PARM_01\",43)',vr:\"SL\",name:\"DASFpaGain\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",44)':{tag:'(0043,\"GEMS_PARM_01\",44)',vr:\"SL\",name:\"DASOutputSource\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",45)':{tag:'(0043,\"GEMS_PARM_01\",45)',vr:\"SL\",name:\"DASAdInput\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",46)':{tag:'(0043,\"GEMS_PARM_01\",46)',vr:\"SL\",name:\"DASCalMode\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",47)':{tag:'(0043,\"GEMS_PARM_01\",47)',vr:\"SL\",name:\"DASCalFrequency\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",48)':{tag:'(0043,\"GEMS_PARM_01\",48)',vr:\"SL\",name:\"DASRegXm\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",49)':{tag:'(0043,\"GEMS_PARM_01\",49)',vr:\"SL\",name:\"DASAutoZero\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",4a)':{tag:'(0043,\"GEMS_PARM_01\",4a)',vr:\"SS\",name:\"StartingChannelOfView\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",4b)':{tag:'(0043,\"GEMS_PARM_01\",4b)',vr:\"SL\",name:\"DASXmPattern\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",4c)':{tag:'(0043,\"GEMS_PARM_01\",4c)',vr:\"SS\",name:\"TGGCTriggerMode\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",4d)':{tag:'(0043,\"GEMS_PARM_01\",4d)',vr:\"FL\",name:\"StartScanToXrayOnDelay\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",4e)':{tag:'(0043,\"GEMS_PARM_01\",4e)',vr:\"FL\",name:\"DurationOfXrayOn\",vm:\"4\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",60)':{tag:'(0043,\"GEMS_PARM_01\",60)',vr:\"IS\",name:\"SlopInteger10ToSlopInteger17\",vm:\"8\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",61)':{tag:'(0043,\"GEMS_PARM_01\",61)',vr:\"UI\",name:\"ScannerStudyEntityUID\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",62)':{tag:'(0043,\"GEMS_PARM_01\",62)',vr:\"SH\",name:\"ScannerStudyID\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",6f)':{tag:'(0043,\"GEMS_PARM_01\",6f)',vr:\"DS\",name:\"ScannerTableEntry\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",70)':{tag:'(0043,\"GEMS_PARM_01\",70)',vr:\"LO\",name:\"ParadigmName\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",71)':{tag:'(0043,\"GEMS_PARM_01\",71)',vr:\"ST\",name:\"ParadigmDescription\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",72)':{tag:'(0043,\"GEMS_PARM_01\",72)',vr:\"UI\",name:\"ParadigmUID\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",73)':{tag:'(0043,\"GEMS_PARM_01\",73)',vr:\"US\",name:\"ExperimentType\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",74)':{tag:'(0043,\"GEMS_PARM_01\",74)',vr:\"US\",name:\"NumberOfRestVolumes\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",75)':{tag:'(0043,\"GEMS_PARM_01\",75)',vr:\"US\",name:\"NumberOfActiveVolumes\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",76)':{tag:'(0043,\"GEMS_PARM_01\",76)',vr:\"US\",name:\"NumberOfDummyScans\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",77)':{tag:'(0043,\"GEMS_PARM_01\",77)',vr:\"SH\",name:\"ApplicationName\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",78)':{tag:'(0043,\"GEMS_PARM_01\",78)',vr:\"SH\",name:\"ApplicationVersion\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",79)':{tag:'(0043,\"GEMS_PARM_01\",79)',vr:\"US\",name:\"SlicesPerVolume\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",7a)':{tag:'(0043,\"GEMS_PARM_01\",7a)',vr:\"US\",name:\"ExpectedTimePoints\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",7b)':{tag:'(0043,\"GEMS_PARM_01\",7b)',vr:\"FL\",name:\"RegressorValues\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",7c)':{tag:'(0043,\"GEMS_PARM_01\",7c)',vr:\"FL\",name:\"DelayAfterSliceGroup\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",7d)':{tag:'(0043,\"GEMS_PARM_01\",7d)',vr:\"US\",name:\"ReconModeFlagWord\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",7e)':{tag:'(0043,\"GEMS_PARM_01\",7e)',vr:\"LO\",name:\"PACCSpecificInformation\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",7f)':{tag:'(0043,\"GEMS_PARM_01\",7f)',vr:\"DS\",name:\"EDWIScaleFactor\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",80)':{tag:'(0043,\"GEMS_PARM_01\",80)',vr:\"LO\",name:\"CoilIDData\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",81)':{tag:'(0043,\"GEMS_PARM_01\",81)',vr:\"LO\",name:\"GECoilName\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",82)':{tag:'(0043,\"GEMS_PARM_01\",82)',vr:\"LO\",name:\"SystemConfigurationInformation\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",83)':{tag:'(0043,\"GEMS_PARM_01\",83)',vr:\"DS\",name:\"AssetRFactors\",vm:\"1-2\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",84)':{tag:'(0043,\"GEMS_PARM_01\",84)',vr:\"LO\",name:\"AdditionalAssetData\",vm:\"5-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",85)':{tag:'(0043,\"GEMS_PARM_01\",85)',vr:\"UT\",name:\"DebugDataTextFormat\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",86)':{tag:'(0043,\"GEMS_PARM_01\",86)',vr:\"OB\",name:\"DebugDataBinaryFormat\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",87)':{tag:'(0043,\"GEMS_PARM_01\",87)',vr:\"UT\",name:\"ScannerSoftwareVersionLongForm\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",88)':{tag:'(0043,\"GEMS_PARM_01\",88)',vr:\"UI\",name:\"PUREAcquisitionCalibrationSeriesUID\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",89)':{tag:'(0043,\"GEMS_PARM_01\",89)',vr:\"LO\",name:\"GoverningBodydBdtAndSARDefinition\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",8a)':{tag:'(0043,\"GEMS_PARM_01\",8a)',vr:\"CS\",name:\"PrivateInPlanePhaseEncodingDirection\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",8b)':{tag:'(0043,\"GEMS_PARM_01\",8b)',vr:\"OB\",name:\"FMRIBinaryDataBlock\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",8c)':{tag:'(0043,\"GEMS_PARM_01\",8c)',vr:\"DS\",name:\"VoxelLocation\",vm:\"6\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",8d)':{tag:'(0043,\"GEMS_PARM_01\",8d)',vr:\"DS\",name:\"SATBandLocations\",vm:\"7-7n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",8e)':{tag:'(0043,\"GEMS_PARM_01\",8e)',vr:\"DS\",name:\"SpectroPrescanValues\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",8f)':{tag:'(0043,\"GEMS_PARM_01\",8f)',vr:\"DS\",name:\"SpectroParameters\",vm:\"3\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",90)':{tag:'(0043,\"GEMS_PARM_01\",90)',vr:\"LO\",name:\"SARDefinition\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",91)':{tag:'(0043,\"GEMS_PARM_01\",91)',vr:\"DS\",name:\"SARValue\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",92)':{tag:'(0043,\"GEMS_PARM_01\",92)',vr:\"LO\",name:\"ImageErrorText\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",93)':{tag:'(0043,\"GEMS_PARM_01\",93)',vr:\"DS\",name:\"SpectroQuantitationValues\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",94)':{tag:'(0043,\"GEMS_PARM_01\",94)',vr:\"DS\",name:\"SpectroRatioValues\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",95)':{tag:'(0043,\"GEMS_PARM_01\",95)',vr:\"LO\",name:\"PrescanReuseString\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",96)':{tag:'(0043,\"GEMS_PARM_01\",96)',vr:\"CS\",name:\"ContentQualification\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",97)':{tag:'(0043,\"GEMS_PARM_01\",97)',vr:\"LO\",name:\"ImageFilteringParameters\",vm:\"9\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",98)':{tag:'(0043,\"GEMS_PARM_01\",98)',vr:\"UI\",name:\"ASSETAcquisitionCalibrationSeriesUID\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",99)':{tag:'(0043,\"GEMS_PARM_01\",99)',vr:\"LO\",name:\"ExtendedOptions\",vm:\"1-n\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",9a)':{tag:'(0043,\"GEMS_PARM_01\",9a)',vr:\"IS\",name:\"RxStackIdentification\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",9b)':{tag:'(0043,\"GEMS_PARM_01\",9b)',vr:\"DS\",name:\"NPWFactor\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",9c)':{tag:'(0043,\"GEMS_PARM_01\",9c)',vr:\"OB\",name:\"ResearchTag1\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",9d)':{tag:'(0043,\"GEMS_PARM_01\",9d)',vr:\"OB\",name:\"ResearchTag2\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",9e)':{tag:'(0043,\"GEMS_PARM_01\",9e)',vr:\"OB\",name:\"ResearchTag3\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GEMS_PARM_01\",9f)':{tag:'(0043,\"GEMS_PARM_01\",9f)',vr:\"OB\",name:\"ResearchTag4\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"GEMS_PATI_01\",10)':{tag:'(0011,\"GEMS_PATI_01\",10)',vr:\"SS\",name:\"PatientStatus\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",03)':{tag:'(0021,\"GEMS_RELA_01\",03)',vr:\"SS\",name:\"SeriesFromWhichPrescribed\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",05)':{tag:'(0021,\"GEMS_RELA_01\",05)',vr:\"SH\",name:\"GenesisVersionNow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",07)':{tag:'(0021,\"GEMS_RELA_01\",07)',vr:\"UL\",name:\"SeriesRecordChecksum\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",15)':{tag:'(0021,\"GEMS_RELA_01\",15)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",16)':{tag:'(0021,\"GEMS_RELA_01\",16)',vr:\"SS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",18)':{tag:'(0021,\"GEMS_RELA_01\",18)',vr:\"SH\",name:\"GenesisVersionNow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",19)':{tag:'(0021,\"GEMS_RELA_01\",19)',vr:\"UL\",name:\"AcqReconRecordChecksum\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",20)':{tag:'(0021,\"GEMS_RELA_01\",20)',vr:\"DS\",name:\"TableStartLocation\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",35)':{tag:'(0021,\"GEMS_RELA_01\",35)',vr:\"SS\",name:\"SeriesFromWhichPrescribed\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",36)':{tag:'(0021,\"GEMS_RELA_01\",36)',vr:\"SS\",name:\"ImageFromWhichPrescribed\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",37)':{tag:'(0021,\"GEMS_RELA_01\",37)',vr:\"SS\",name:\"ScreenFormat\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",4a)':{tag:'(0021,\"GEMS_RELA_01\",4a)',vr:\"LO\",name:\"AnatomicalReferenceForScout\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",4e)':{tag:'(0021,\"GEMS_RELA_01\",4e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",4f)':{tag:'(0021,\"GEMS_RELA_01\",4f)',vr:\"SS\",name:\"LocationsInAcquisition\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",50)':{tag:'(0021,\"GEMS_RELA_01\",50)',vr:\"SS\",name:\"GraphicallyPrescribed\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",51)':{tag:'(0021,\"GEMS_RELA_01\",51)',vr:\"DS\",name:\"RotationFromSourceXRot\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",52)':{tag:'(0021,\"GEMS_RELA_01\",52)',vr:\"DS\",name:\"RotationFromSourceYRot\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",53)':{tag:'(0021,\"GEMS_RELA_01\",53)',vr:\"DS\",name:\"RotationFromSourceZRot\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",54)':{tag:'(0021,\"GEMS_RELA_01\",54)',vr:\"SH\",name:\"ImagePosition\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",55)':{tag:'(0021,\"GEMS_RELA_01\",55)',vr:\"SH\",name:\"ImageOrientation\",vm:\"6\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",56)':{tag:'(0021,\"GEMS_RELA_01\",56)',vr:\"SL\",name:\"IntegerSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",57)':{tag:'(0021,\"GEMS_RELA_01\",57)',vr:\"SL\",name:\"IntegerSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",58)':{tag:'(0021,\"GEMS_RELA_01\",58)',vr:\"SL\",name:\"IntegerSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",59)':{tag:'(0021,\"GEMS_RELA_01\",59)',vr:\"SL\",name:\"IntegerSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",5a)':{tag:'(0021,\"GEMS_RELA_01\",5a)',vr:\"SL\",name:\"IntegerSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",5b)':{tag:'(0021,\"GEMS_RELA_01\",5b)',vr:\"DS\",name:\"FloatSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",5c)':{tag:'(0021,\"GEMS_RELA_01\",5c)',vr:\"DS\",name:\"FloatSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",5d)':{tag:'(0021,\"GEMS_RELA_01\",5d)',vr:\"DS\",name:\"FloatSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",5e)':{tag:'(0021,\"GEMS_RELA_01\",5e)',vr:\"DS\",name:\"FloatSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",5f)':{tag:'(0021,\"GEMS_RELA_01\",5f)',vr:\"DS\",name:\"FloatSlop\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",70)':{tag:'(0021,\"GEMS_RELA_01\",70)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",71)':{tag:'(0021,\"GEMS_RELA_01\",71)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",81)':{tag:'(0021,\"GEMS_RELA_01\",81)',vr:\"DS\",name:\"AutoWindowLevelAlpha\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",82)':{tag:'(0021,\"GEMS_RELA_01\",82)',vr:\"DS\",name:\"AutoWindowLevelBeta\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",83)':{tag:'(0021,\"GEMS_RELA_01\",83)',vr:\"DS\",name:\"AutoWindowLevelWindow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",84)':{tag:'(0021,\"GEMS_RELA_01\",84)',vr:\"DS\",name:\"AutoWindowLevelLevel\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",90)':{tag:'(0021,\"GEMS_RELA_01\",90)',vr:\"SS\",name:\"TubeFocalSpotPosition\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",91)':{tag:'(0021,\"GEMS_RELA_01\",91)',vr:\"SS\",name:\"BiopsyPosition\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",92)':{tag:'(0021,\"GEMS_RELA_01\",92)',vr:\"FL\",name:\"BiopsyTLocation\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"GEMS_RELA_01\",93)':{tag:'(0021,\"GEMS_RELA_01\",93)',vr:\"FL\",name:\"BiopsyRefLocation\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",04)':{tag:'(0045,\"GEMS_SENO_02\",04)',vr:\"CS\",name:\"AES\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",06)':{tag:'(0045,\"GEMS_SENO_02\",06)',vr:\"DS\",name:\"Angulation\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",09)':{tag:'(0045,\"GEMS_SENO_02\",09)',vr:\"DS\",name:\"RealMagnificationFactor\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",0b)':{tag:'(0045,\"GEMS_SENO_02\",0b)',vr:\"CS\",name:\"SenographType\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",0c)':{tag:'(0045,\"GEMS_SENO_02\",0c)',vr:\"DS\",name:\"IntegrationTime\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",0d)':{tag:'(0045,\"GEMS_SENO_02\",0d)',vr:\"DS\",name:\"ROIOriginXY\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",11)':{tag:'(0045,\"GEMS_SENO_02\",11)',vr:\"DS\",name:\"ReceptorSizeCmXY\",vm:\"2\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",12)':{tag:'(0045,\"GEMS_SENO_02\",12)',vr:\"IS\",name:\"ReceptorSizePixelsXY\",vm:\"2\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",13)':{tag:'(0045,\"GEMS_SENO_02\",13)',vr:\"ST\",name:\"Screen\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",14)':{tag:'(0045,\"GEMS_SENO_02\",14)',vr:\"DS\",name:\"PixelPitchMicrons\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",15)':{tag:'(0045,\"GEMS_SENO_02\",15)',vr:\"IS\",name:\"PixelDepthBits\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",16)':{tag:'(0045,\"GEMS_SENO_02\",16)',vr:\"IS\",name:\"BinningFactorXY\",vm:\"2\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",1B)':{tag:'(0045,\"GEMS_SENO_02\",1B)',vr:\"CS\",name:\"ClinicalView\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",1D)':{tag:'(0045,\"GEMS_SENO_02\",1D)',vr:\"DS\",name:\"MeanOfRawGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",1E)':{tag:'(0045,\"GEMS_SENO_02\",1E)',vr:\"DS\",name:\"MeanOfOffsetGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",1F)':{tag:'(0045,\"GEMS_SENO_02\",1F)',vr:\"DS\",name:\"MeanOfCorrectedGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",20)':{tag:'(0045,\"GEMS_SENO_02\",20)',vr:\"DS\",name:\"MeanOfRegionGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",21)':{tag:'(0045,\"GEMS_SENO_02\",21)',vr:\"DS\",name:\"MeanOfLogRegionGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",22)':{tag:'(0045,\"GEMS_SENO_02\",22)',vr:\"DS\",name:\"StandardDeviationOfRawGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",23)':{tag:'(0045,\"GEMS_SENO_02\",23)',vr:\"DS\",name:\"StandardDeviationOfCorrectedGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",24)':{tag:'(0045,\"GEMS_SENO_02\",24)',vr:\"DS\",name:\"StandardDeviationOfRegionGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",25)':{tag:'(0045,\"GEMS_SENO_02\",25)',vr:\"DS\",name:\"StandardDeviationOfLogRegionGrayLevels\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",26)':{tag:'(0045,\"GEMS_SENO_02\",26)',vr:\"OB\",name:\"MAOBuffer\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",27)':{tag:'(0045,\"GEMS_SENO_02\",27)',vr:\"IS\",name:\"SetNumber\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",28)':{tag:'(0045,\"GEMS_SENO_02\",28)',vr:\"CS\",name:\"WindowingType\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",29)':{tag:'(0045,\"GEMS_SENO_02\",29)',vr:\"DS\",name:\"WindowingParameters\",vm:\"1-n\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",2a)':{tag:'(0045,\"GEMS_SENO_02\",2a)',vr:\"IS\",name:\"CrosshairCursorXCoordinates\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",2b)':{tag:'(0045,\"GEMS_SENO_02\",2b)',vr:\"IS\",name:\"CrosshairCursorYCoordinates\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",39)':{tag:'(0045,\"GEMS_SENO_02\",39)',vr:\"US\",name:\"VignetteRows\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",3a)':{tag:'(0045,\"GEMS_SENO_02\",3a)',vr:\"US\",name:\"VignetteColumns\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",3b)':{tag:'(0045,\"GEMS_SENO_02\",3b)',vr:\"US\",name:\"VignetteBitsAllocated\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",3c)':{tag:'(0045,\"GEMS_SENO_02\",3c)',vr:\"US\",name:\"VignetteBitsStored\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",3d)':{tag:'(0045,\"GEMS_SENO_02\",3d)',vr:\"US\",name:\"VignetteHighBit\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",3e)':{tag:'(0045,\"GEMS_SENO_02\",3e)',vr:\"US\",name:\"VignettePixelRepresentation\",vm:\"1\",version:\"PrivateTag\"},'(0045,\"GEMS_SENO_02\",3f)':{tag:'(0045,\"GEMS_SENO_02\",3f)',vr:\"OB\",name:\"VignettePixelData\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",06)':{tag:'(0025,\"GEMS_SERS_01\",06)',vr:\"SS\",name:\"LastPulseSequenceUsed\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",07)':{tag:'(0025,\"GEMS_SERS_01\",07)',vr:\"SL\",name:\"ImagesInSeries\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",10)':{tag:'(0025,\"GEMS_SERS_01\",10)',vr:\"SL\",name:\"LandmarkCounter\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",11)':{tag:'(0025,\"GEMS_SERS_01\",11)',vr:\"SS\",name:\"NumberOfAcquisitions\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",14)':{tag:'(0025,\"GEMS_SERS_01\",14)',vr:\"SL\",name:\"IndicatesNumberOfUpdatesToHeader\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",17)':{tag:'(0025,\"GEMS_SERS_01\",17)',vr:\"SL\",name:\"SeriesCompleteFlag\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",18)':{tag:'(0025,\"GEMS_SERS_01\",18)',vr:\"SL\",name:\"NumberOfImagesArchived\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",19)':{tag:'(0025,\"GEMS_SERS_01\",19)',vr:\"SL\",name:\"LastImageNumberUsed\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"GEMS_SERS_01\",1a)':{tag:'(0025,\"GEMS_SERS_01\",1a)',vr:\"SH\",name:\"PrimaryReceiverSuiteAndHost\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",01)':{tag:'(0023,\"GEMS_STDY_01\",01)',vr:\"SL\",name:\"NumberOfSeriesInStudy\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",02)':{tag:'(0023,\"GEMS_STDY_01\",02)',vr:\"SL\",name:\"NumberOfUnarchivedSeries\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",10)':{tag:'(0023,\"GEMS_STDY_01\",10)',vr:\"SS\",name:\"ReferenceImageField\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",50)':{tag:'(0023,\"GEMS_STDY_01\",50)',vr:\"SS\",name:\"SummaryImage\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",70)':{tag:'(0023,\"GEMS_STDY_01\",70)',vr:\"FD\",name:\"StartTimeSecsInFirstAxial\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",74)':{tag:'(0023,\"GEMS_STDY_01\",74)',vr:\"SL\",name:\"NumberOfUpdatesToHeader\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"GEMS_STDY_01\",7d)':{tag:'(0023,\"GEMS_STDY_01\",7d)',vr:\"SS\",name:\"IndicatesIfStudyHasCompleteInfo\",vm:\"1\",version:\"PrivateTag\"},'(0033,\"GEMS_YMHD_01\",05)':{tag:'(0033,\"GEMS_YMHD_01\",05)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0033,\"GEMS_YMHD_01\",06)':{tag:'(0033,\"GEMS_YMHD_01\",06)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",39)':{tag:'(0019,\"GE_GENESIS_REV3.0\",39)',vr:\"SS\",name:\"AxialType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",8f)':{tag:'(0019,\"GE_GENESIS_REV3.0\",8f)',vr:\"SS\",name:\"SwapPhaseFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",9c)':{tag:'(0019,\"GE_GENESIS_REV3.0\",9c)',vr:\"SS\",name:\"PulseSequenceName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",9f)':{tag:'(0019,\"GE_GENESIS_REV3.0\",9f)',vr:\"SS\",name:\"CoilType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",a4)':{tag:'(0019,\"GE_GENESIS_REV3.0\",a4)',vr:\"SS\",name:\"SATFatWaterBone\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",c0)':{tag:'(0019,\"GE_GENESIS_REV3.0\",c0)',vr:\"SS\",name:\"BitmapOfSATSelections\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",c1)':{tag:'(0019,\"GE_GENESIS_REV3.0\",c1)',vr:\"SS\",name:\"SurfaceCoilIntensityCorrectionFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",cb)':{tag:'(0019,\"GE_GENESIS_REV3.0\",cb)',vr:\"SS\",name:\"PhaseContrastFlowAxis\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",cc)':{tag:'(0019,\"GE_GENESIS_REV3.0\",cc)',vr:\"SS\",name:\"PhaseContrastVelocityEncoding\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",d5)':{tag:'(0019,\"GE_GENESIS_REV3.0\",d5)',vr:\"SS\",name:\"FractionalEcho\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",d8)':{tag:'(0019,\"GE_GENESIS_REV3.0\",d8)',vr:\"SS\",name:\"VariableEchoFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",d9)':{tag:'(0019,\"GE_GENESIS_REV3.0\",d9)',vr:\"DS\",name:\"ConcatenatedSat\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"GE_GENESIS_REV3.0\",f2)':{tag:'(0019,\"GE_GENESIS_REV3.0\",f2)',vr:\"SS\",name:\"NumberOfPhases\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GE_GENESIS_REV3.0\",1e)':{tag:'(0043,\"GE_GENESIS_REV3.0\",1e)',vr:\"DS\",name:\"DeltaStartTime\",vm:\"1\",version:\"PrivateTag\"},'(0043,\"GE_GENESIS_REV3.0\",27)':{tag:'(0043,\"GE_GENESIS_REV3.0\",27)',vr:\"SH\",name:\"ScanPitchRatio\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",01)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",01)',vr:\"FD\",name:\"ImageCompressionFraction\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",02)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",02)',vr:\"FD\",name:\"ImageQuality\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",03)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",03)',vr:\"FD\",name:\"ImageBytesTransferred\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",10)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",10)',vr:\"SH\",name:\"J2cParameterType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",11)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",11)',vr:\"US\",name:\"J2cPixelRepresentation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",12)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",12)',vr:\"US\",name:\"J2cBitsAllocated\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",13)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",13)',vr:\"US\",name:\"J2cPixelShiftValue\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",14)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",14)',vr:\"US\",name:\"J2cPlanarConfiguration\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",15)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",15)',vr:\"DS\",name:\"J2cRescaleIntercept\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",20)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",20)',vr:\"LO\",name:\"PixelDataMD5SumPerFrame\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",21)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",21)',vr:\"US\",name:\"HistogramPercentileLabels\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTELERAD MEDICAL SYSTEMS\",22)':{tag:'(0029,\"INTELERAD MEDICAL SYSTEMS\",22)',vr:\"FD\",name:\"HistogramPercentileValues\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",01)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",01)',vr:\"LO\",name:\"InstitutionCode\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",02)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",02)',vr:\"LO\",name:\"RoutedTransferAE\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",03)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",03)',vr:\"LO\",name:\"SourceAE\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",04)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",04)',vr:\"SH\",name:\"DeferredValidation\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",05)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",05)',vr:\"LO\",name:\"SeriesOwner\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",06)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",06)',vr:\"LO\",name:\"OrderGroupNumber\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",07)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",07)',vr:\"SH\",name:\"StrippedPixelData\",vm:\"1\",version:\"PrivateTag\"},'(3f01,\"INTELERAD MEDICAL SYSTEMS\",08)':{tag:'(3f01,\"INTELERAD MEDICAL SYSTEMS\",08)',vr:\"SH\",name:\"PendingMoveRequest\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"INTEGRIS 1.0\",20)':{tag:'(0041,\"INTEGRIS 1.0\",20)',vr:\"FL\",name:\"AccumulatedFluoroscopyDose\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"INTEGRIS 1.0\",30)':{tag:'(0041,\"INTEGRIS 1.0\",30)',vr:\"FL\",name:\"AccumulatedExposureDose\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"INTEGRIS 1.0\",40)':{tag:'(0041,\"INTEGRIS 1.0\",40)',vr:\"FL\",name:\"TotalDose\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"INTEGRIS 1.0\",41)':{tag:'(0041,\"INTEGRIS 1.0\",41)',vr:\"FL\",name:\"TotalNumberOfFrames\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"INTEGRIS 1.0\",50)':{tag:'(0041,\"INTEGRIS 1.0\",50)',vr:\"SQ\",name:\"ExposureInformationSequence\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"INTEGRIS 1.0\",08)':{tag:'(0009,\"INTEGRIS 1.0\",08)',vr:\"CS\",name:\"ExposureChannel\",vm:\"1-n\",version:\"PrivateTag\"},'(0009,\"INTEGRIS 1.0\",32)':{tag:'(0009,\"INTEGRIS 1.0\",32)',vr:\"TM\",name:\"ExposureStartTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"INTEGRIS 1.0\",00)':{tag:'(0019,\"INTEGRIS 1.0\",00)',vr:\"LO\",name:\"APRName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"INTEGRIS 1.0\",40)':{tag:'(0019,\"INTEGRIS 1.0\",40)',vr:\"DS\",name:\"FrameRate\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"INTEGRIS 1.0\",12)':{tag:'(0021,\"INTEGRIS 1.0\",12)',vr:\"IS\",name:\"ExposureNumber\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"INTEGRIS 1.0\",08)':{tag:'(0029,\"INTEGRIS 1.0\",08)',vr:\"IS\",name:\"NumberOfExposureResults\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"ISG shadow\",70)':{tag:'(0029,\"ISG shadow\",70)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"ISG shadow\",80)':{tag:'(0029,\"ISG shadow\",80)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"ISG shadow\",90)':{tag:'(0029,\"ISG shadow\",90)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"ISI\",01)':{tag:'(0009,\"ISI\",01)',vr:\"UN\",name:\"SIENETGeneralPurposeIMGEF\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"MERGE TECHNOLOGIES, INC.\",00)':{tag:'(0009,\"MERGE TECHNOLOGIES, INC.\",00)',vr:\"OB\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"OCULUS Optikgeraete GmbH\",1010)':{tag:'(0029,\"OCULUS Optikgeraete GmbH\",1010)',vr:\"OB\",name:\"OriginalMeasuringData\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"OCULUS Optikgeraete GmbH\",1012)':{tag:'(0029,\"OCULUS Optikgeraete GmbH\",1012)',vr:\"UL\",name:\"OriginalMeasuringDataLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"OCULUS Optikgeraete GmbH\",1020)':{tag:'(0029,\"OCULUS Optikgeraete GmbH\",1020)',vr:\"OB\",name:\"OriginalMeasuringRawData\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"OCULUS Optikgeraete GmbH\",1022)':{tag:'(0029,\"OCULUS Optikgeraete GmbH\",1022)',vr:\"UL\",name:\"OriginalMeasuringRawDataLength\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",00)':{tag:'(0041,\"PAPYRUS 3.0\",00)',vr:\"LT\",name:\"PapyrusComments\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",10)':{tag:'(0041,\"PAPYRUS 3.0\",10)',vr:\"SQ\",name:\"PointerSequence\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",11)':{tag:'(0041,\"PAPYRUS 3.0\",11)',vr:\"UL\",name:\"ImagePointer\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",12)':{tag:'(0041,\"PAPYRUS 3.0\",12)',vr:\"UL\",name:\"PixelOffset\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",13)':{tag:'(0041,\"PAPYRUS 3.0\",13)',vr:\"SQ\",name:\"ImageIdentifierSequence\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",14)':{tag:'(0041,\"PAPYRUS 3.0\",14)',vr:\"SQ\",name:\"ExternalFileReferenceSequence\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",15)':{tag:'(0041,\"PAPYRUS 3.0\",15)',vr:\"US\",name:\"NumberOfImages\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",21)':{tag:'(0041,\"PAPYRUS 3.0\",21)',vr:\"UI\",name:\"ReferencedSOPClassUID\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",22)':{tag:'(0041,\"PAPYRUS 3.0\",22)',vr:\"UI\",name:\"ReferencedSOPInstanceUID\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",31)':{tag:'(0041,\"PAPYRUS 3.0\",31)',vr:\"LT\",name:\"ReferencedFileName\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",32)':{tag:'(0041,\"PAPYRUS 3.0\",32)',vr:\"LT\",name:\"ReferencedFilePath\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",41)':{tag:'(0041,\"PAPYRUS 3.0\",41)',vr:\"UI\",name:\"ReferencedImageSOPClassUID\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",42)':{tag:'(0041,\"PAPYRUS 3.0\",42)',vr:\"UI\",name:\"ReferencedImageSOPInstanceUID\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS 3.0\",50)':{tag:'(0041,\"PAPYRUS 3.0\",50)',vr:\"SQ\",name:\"ImageSequence\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",00)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",00)',vr:\"IS\",name:\"OverlayID\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",01)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",01)',vr:\"LT\",name:\"LinkedOverlays\",vm:\"1-n\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",10)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",10)',vr:\"US\",name:\"OverlayRows\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",11)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",11)',vr:\"US\",name:\"OverlayColumns\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",40)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",40)',vr:\"LO\",name:\"OverlayType\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",50)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",50)',vr:\"US\",name:\"OverlayOrigin\",vm:\"1-n\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",60)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",60)',vr:\"LO\",name:\"Editable\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",70)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",70)',vr:\"LO\",name:\"OverlayFont\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",72)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",72)',vr:\"LO\",name:\"OverlayStyle\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",74)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",74)',vr:\"US\",name:\"OverlayFontSize\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",76)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",76)',vr:\"LO\",name:\"OverlayColor\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",78)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",78)',vr:\"US\",name:\"ShadowSize\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",80)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",80)',vr:\"LO\",name:\"FillPattern\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",82)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",82)',vr:\"US\",name:\"OverlayPenSize\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",a0)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",a0)',vr:\"LO\",name:\"Label\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",a2)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",a2)',vr:\"LT\",name:\"PostItText\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",a4)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",a4)',vr:\"US\",name:\"AnchorPoint\",vm:\"2\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",b0)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",b0)',vr:\"LO\",name:\"ROIType\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",b2)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",b2)',vr:\"LT\",name:\"AttachedAnnotation\",vm:\"1\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",ba)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",ba)',vr:\"US\",name:\"ContourPoints\",vm:\"1-n\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",bc)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",bc)',vr:\"US\",name:\"MaskData\",vm:\"1-n\",version:\"PrivateTag\"},'(6001-o-60ff,\"PAPYRUS 3.0\",c0)':{tag:'(6001-o-60ff,\"PAPYRUS 3.0\",c0)',vr:\"SQ\",name:\"UINOverlaySequence\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"PAPYRUS\",00)':{tag:'(0009,\"PAPYRUS\",00)',vr:\"LT\",name:\"OriginalFileName\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"PAPYRUS\",10)':{tag:'(0009,\"PAPYRUS\",10)',vr:\"LT\",name:\"OriginalFileLocation\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"PAPYRUS\",18)':{tag:'(0009,\"PAPYRUS\",18)',vr:\"LT\",name:\"DataSetIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",00)':{tag:'(0041,\"PAPYRUS\",00)',vr:\"LT\",name:\"PapyrusComments\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",10)':{tag:'(0041,\"PAPYRUS\",10)',vr:\"US\",name:\"FolderType\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",11)':{tag:'(0041,\"PAPYRUS\",11)',vr:\"LT\",name:\"PatientFolderDataSetID\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",20)':{tag:'(0041,\"PAPYRUS\",20)',vr:\"LT\",name:\"FolderName\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",30)':{tag:'(0041,\"PAPYRUS\",30)',vr:\"DA\",name:\"CreationDate\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",32)':{tag:'(0041,\"PAPYRUS\",32)',vr:\"TM\",name:\"CreationTime\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",34)':{tag:'(0041,\"PAPYRUS\",34)',vr:\"DA\",name:\"ModifiedDate\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",36)':{tag:'(0041,\"PAPYRUS\",36)',vr:\"TM\",name:\"ModifiedTime\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",40)':{tag:'(0041,\"PAPYRUS\",40)',vr:\"LT\",name:\"OwnerName\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",50)':{tag:'(0041,\"PAPYRUS\",50)',vr:\"LT\",name:\"FolderStatus\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",60)':{tag:'(0041,\"PAPYRUS\",60)',vr:\"UL\",name:\"NumberOfImages\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",62)':{tag:'(0041,\"PAPYRUS\",62)',vr:\"UL\",name:\"NumberOfOther\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",a0)':{tag:'(0041,\"PAPYRUS\",a0)',vr:\"LT\",name:\"ExternalFolderElementDSID\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",a1)':{tag:'(0041,\"PAPYRUS\",a1)',vr:\"US\",name:\"ExternalFolderElementDataSetType\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",a2)':{tag:'(0041,\"PAPYRUS\",a2)',vr:\"LT\",name:\"ExternalFolderElementFileLocation\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",a3)':{tag:'(0041,\"PAPYRUS\",a3)',vr:\"UL\",name:\"ExternalFolderElementLength\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",b0)':{tag:'(0041,\"PAPYRUS\",b0)',vr:\"LT\",name:\"InternalFolderElementDSID\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",b1)':{tag:'(0041,\"PAPYRUS\",b1)',vr:\"US\",name:\"InternalFolderElementDataSetType\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",b2)':{tag:'(0041,\"PAPYRUS\",b2)',vr:\"UL\",name:\"InternalOffsetToDataSet\",vm:\"1-n\",version:\"PrivateTag\"},'(0041,\"PAPYRUS\",b3)':{tag:'(0041,\"PAPYRUS\",b3)',vr:\"UL\",name:\"InternalOffsetToImage\",vm:\"1-n\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",01)':{tag:'(2001,\"Philips Imaging DD 001\",01)',vr:\"FL\",name:\"ChemicalShift\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",02)':{tag:'(2001,\"Philips Imaging DD 001\",02)',vr:\"IS\",name:\"ChemicalShiftNumberMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",03)':{tag:'(2001,\"Philips Imaging DD 001\",03)',vr:\"FL\",name:\"DiffusionBFactor\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",04)':{tag:'(2001,\"Philips Imaging DD 001\",04)',vr:\"CS\",name:\"DiffusionDirection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",06)':{tag:'(2001,\"Philips Imaging DD 001\",06)',vr:\"CS\",name:\"ImageEnhanced\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",07)':{tag:'(2001,\"Philips Imaging DD 001\",07)',vr:\"CS\",name:\"ImageTypeEDES\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",08)':{tag:'(2001,\"Philips Imaging DD 001\",08)',vr:\"IS\",name:\"PhaseNumber\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",09)':{tag:'(2001,\"Philips Imaging DD 001\",09)',vr:\"FL\",name:\"ImagePrepulseDelay\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",0a)':{tag:'(2001,\"Philips Imaging DD 001\",0a)',vr:\"IS\",name:\"SliceNumberMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",0b)':{tag:'(2001,\"Philips Imaging DD 001\",0b)',vr:\"CS\",name:\"SliceOrientation\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",0c)':{tag:'(2001,\"Philips Imaging DD 001\",0c)',vr:\"CS\",name:\"ArrhythmiaRejection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",0e)':{tag:'(2001,\"Philips Imaging DD 001\",0e)',vr:\"CS\",name:\"CardiacCycled\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",0f)':{tag:'(2001,\"Philips Imaging DD 001\",0f)',vr:\"SS\",name:\"CardiacGateWidth\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",10)':{tag:'(2001,\"Philips Imaging DD 001\",10)',vr:\"CS\",name:\"CardiacSync\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",11)':{tag:'(2001,\"Philips Imaging DD 001\",11)',vr:\"FL\",name:\"DiffusionEchoTime\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",12)':{tag:'(2001,\"Philips Imaging DD 001\",12)',vr:\"CS\",name:\"DynamicSeries\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",13)':{tag:'(2001,\"Philips Imaging DD 001\",13)',vr:\"SL\",name:\"EPIFactor\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",14)':{tag:'(2001,\"Philips Imaging DD 001\",14)',vr:\"SL\",name:\"NumberOfEchoes\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",15)':{tag:'(2001,\"Philips Imaging DD 001\",15)',vr:\"SS\",name:\"NumberOfLocations\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",16)':{tag:'(2001,\"Philips Imaging DD 001\",16)',vr:\"SS\",name:\"NumberOfPCDirections\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",17)':{tag:'(2001,\"Philips Imaging DD 001\",17)',vr:\"SL\",name:\"NumberOfPhasesMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",18)':{tag:'(2001,\"Philips Imaging DD 001\",18)',vr:\"SL\",name:\"NumberOfSlicesMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",19)':{tag:'(2001,\"Philips Imaging DD 001\",19)',vr:\"CS\",name:\"PartialMatrixScanned\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",1a)':{tag:'(2001,\"Philips Imaging DD 001\",1a)',vr:\"FL\",name:\"PCVelocity\",vm:\"1-n\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",1b)':{tag:'(2001,\"Philips Imaging DD 001\",1b)',vr:\"FL\",name:\"PrepulseDelay\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",1c)':{tag:'(2001,\"Philips Imaging DD 001\",1c)',vr:\"CS\",name:\"PrepulseType\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",1d)':{tag:'(2001,\"Philips Imaging DD 001\",1d)',vr:\"IS\",name:\"ReconstructionNumberMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",1f)':{tag:'(2001,\"Philips Imaging DD 001\",1f)',vr:\"CS\",name:\"RespirationSync\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",20)':{tag:'(2001,\"Philips Imaging DD 001\",20)',vr:\"LO\",name:\"ScanningTechnique\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",21)':{tag:'(2001,\"Philips Imaging DD 001\",21)',vr:\"CS\",name:\"SPIR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",22)':{tag:'(2001,\"Philips Imaging DD 001\",22)',vr:\"FL\",name:\"WaterFatShift\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",23)':{tag:'(2001,\"Philips Imaging DD 001\",23)',vr:\"DS\",name:\"FlipAnglePhilips\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",24)':{tag:'(2001,\"Philips Imaging DD 001\",24)',vr:\"CS\",name:\"SeriesIsInteractive\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",25)':{tag:'(2001,\"Philips Imaging DD 001\",25)',vr:\"SH\",name:\"EchoTimeDisplayMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",26)':{tag:'(2001,\"Philips Imaging DD 001\",26)',vr:\"CS\",name:\"PresentationStateSubtractionActive\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",2d)':{tag:'(2001,\"Philips Imaging DD 001\",2d)',vr:\"SS\",name:\"StackNumberOfSlices\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",32)':{tag:'(2001,\"Philips Imaging DD 001\",32)',vr:\"FL\",name:\"StackRadialAngle\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",33)':{tag:'(2001,\"Philips Imaging DD 001\",33)',vr:\"CS\",name:\"StackRadialAxis\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",35)':{tag:'(2001,\"Philips Imaging DD 001\",35)',vr:\"SS\",name:\"StackSliceNumber\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",36)':{tag:'(2001,\"Philips Imaging DD 001\",36)',vr:\"CS\",name:\"StackType\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",3f)':{tag:'(2001,\"Philips Imaging DD 001\",3f)',vr:\"CS\",name:\"ZoomMode\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",58)':{tag:'(2001,\"Philips Imaging DD 001\",58)',vr:\"UL\",name:\"ContrastTransferTaste\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",5f)':{tag:'(2001,\"Philips Imaging DD 001\",5f)',vr:\"SQ\",name:\"StackSequence\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",60)':{tag:'(2001,\"Philips Imaging DD 001\",60)',vr:\"SL\",name:\"NumberOfStacks\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",61)':{tag:'(2001,\"Philips Imaging DD 001\",61)',vr:\"CS\",name:\"SeriesTransmitted\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",62)':{tag:'(2001,\"Philips Imaging DD 001\",62)',vr:\"CS\",name:\"SeriesCommitted\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",63)':{tag:'(2001,\"Philips Imaging DD 001\",63)',vr:\"CS\",name:\"ExaminationSource\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",67)':{tag:'(2001,\"Philips Imaging DD 001\",67)',vr:\"CS\",name:\"LinearPresentationGLTrafoShapeSub\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",77)':{tag:'(2001,\"Philips Imaging DD 001\",77)',vr:\"CS\",name:\"GLTrafoType\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",7b)':{tag:'(2001,\"Philips Imaging DD 001\",7b)',vr:\"IS\",name:\"AcquisitionNumber\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",81)':{tag:'(2001,\"Philips Imaging DD 001\",81)',vr:\"IS\",name:\"NumberOfDynamicScans\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",9f)':{tag:'(2001,\"Philips Imaging DD 001\",9f)',vr:\"US\",name:\"PixelProcessingKernelSize\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",a1)':{tag:'(2001,\"Philips Imaging DD 001\",a1)',vr:\"CS\",name:\"IsRawImage\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",f1)':{tag:'(2001,\"Philips Imaging DD 001\",f1)',vr:\"FL\",name:\"ProspectiveMotionCorrection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"Philips Imaging DD 001\",f2)':{tag:'(2001,\"Philips Imaging DD 001\",f2)',vr:\"FL\",name:\"RetrospectiveMotionCorrection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",01)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",01)',vr:\"FL\",name:\"ChemicalShift\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",02)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",02)',vr:\"IS\",name:\"ChemicalShiftNumberMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",03)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",03)',vr:\"FL\",name:\"DiffusionBFactor\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",04)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",04)',vr:\"CS\",name:\"DiffusionDirection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",06)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",06)',vr:\"CS\",name:\"ImageEnhanced\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",07)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",07)',vr:\"CS\",name:\"ImageTypeEDES\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",08)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",08)',vr:\"IS\",name:\"PhaseNumber\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",09)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",09)',vr:\"FL\",name:\"ImagePrepulseDelay\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",0a)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",0a)',vr:\"IS\",name:\"SliceNumberMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",0b)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",0b)',vr:\"CS\",name:\"SliceOrientation\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",0c)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",0c)',vr:\"CS\",name:\"ArrhythmiaRejection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",0e)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",0e)',vr:\"CS\",name:\"CardiacCycled\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",0f)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",0f)',vr:\"SS\",name:\"CardiacGateWidth\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",10)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",10)',vr:\"CS\",name:\"CardiacSync\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",11)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",11)',vr:\"FL\",name:\"DiffusionEchoTime\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",12)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",12)',vr:\"CS\",name:\"DynamicSeries\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",13)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",13)',vr:\"SL\",name:\"EPIFactor\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",14)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",14)',vr:\"SL\",name:\"NumberOfEchoes\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",15)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",15)',vr:\"SS\",name:\"NumberOfLocations\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",16)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",16)',vr:\"SS\",name:\"NumberOfPCDirections\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",17)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",17)',vr:\"SL\",name:\"NumberOfPhasesMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",18)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",18)',vr:\"SL\",name:\"NumberOfSlicesMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",19)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",19)',vr:\"CS\",name:\"PartialMatrixScanned\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",1a)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",1a)',vr:\"FL\",name:\"PCVelocity\",vm:\"1-n\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",1b)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",1b)',vr:\"FL\",name:\"PrepulseDelay\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",1c)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",1c)',vr:\"CS\",name:\"PrepulseType\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",1d)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",1d)',vr:\"IS\",name:\"ReconstructionNumberMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",1f)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",1f)',vr:\"CS\",name:\"RespirationSync\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",20)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",20)',vr:\"LO\",name:\"ScanningTechnique\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",21)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",21)',vr:\"CS\",name:\"SPIR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",22)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",22)',vr:\"FL\",name:\"WaterFatShift\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",23)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",23)',vr:\"DS\",name:\"FlipAnglePhilips\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",24)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",24)',vr:\"CS\",name:\"SeriesIsInteractive\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",25)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",25)',vr:\"SH\",name:\"EchoTimeDisplayMR\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",26)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",26)',vr:\"CS\",name:\"PresentationStateSubtractionActive\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",2d)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",2d)',vr:\"SS\",name:\"StackNumberOfSlices\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",32)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",32)',vr:\"FL\",name:\"StackRadialAngle\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",33)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",33)',vr:\"CS\",name:\"StackRadialAxis\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",35)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",35)',vr:\"SS\",name:\"StackSliceNumber\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",36)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",36)',vr:\"CS\",name:\"StackType\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",3f)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",3f)',vr:\"CS\",name:\"ZoomMode\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",58)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",58)',vr:\"UL\",name:\"ContrastTransferTaste\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",5f)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",5f)',vr:\"SQ\",name:\"StackSequence\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",60)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",60)',vr:\"SL\",name:\"NumberOfStacks\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",61)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",61)',vr:\"CS\",name:\"SeriesTransmitted\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",62)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",62)',vr:\"CS\",name:\"SeriesCommitted\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",63)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",63)',vr:\"CS\",name:\"ExaminationSource\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",67)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",67)',vr:\"CS\",name:\"LinearPresentationGLTrafoShapeSub\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",77)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",77)',vr:\"CS\",name:\"GLTrafoType\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",7b)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",7b)',vr:\"IS\",name:\"AcquisitionNumber\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",81)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",81)',vr:\"IS\",name:\"NumberOfDynamicScans\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",9f)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",9f)',vr:\"US\",name:\"PixelProcessingKernelSize\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",a1)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",a1)',vr:\"CS\",name:\"IsRawImage\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",f1)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",f1)',vr:\"FL\",name:\"ProspectiveMotionCorrection\",vm:\"1\",version:\"PrivateTag\"},'(2001,\"PHILIPS IMAGING DD 001\",f2)':{tag:'(2001,\"PHILIPS IMAGING DD 001\",f2)',vr:\"FL\",name:\"RetrospectiveMotionCorrection\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",05)':{tag:'(2005,\"Philips MR Imaging DD 001\",05)',vr:\"CS\",name:\"SynergyReconstructionType\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",1e)':{tag:'(2005,\"Philips MR Imaging DD 001\",1e)',vr:\"SH\",name:\"MIPProtocol\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",1f)':{tag:'(2005,\"Philips MR Imaging DD 001\",1f)',vr:\"SH\",name:\"MPRProtocol\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",20)':{tag:'(2005,\"Philips MR Imaging DD 001\",20)',vr:\"SL\",name:\"NumberOfChemicalShifts\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",2d)':{tag:'(2005,\"Philips MR Imaging DD 001\",2d)',vr:\"SS\",name:\"NumberOfStackSlices\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",83)':{tag:'(2005,\"Philips MR Imaging DD 001\",83)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",a1)':{tag:'(2005,\"Philips MR Imaging DD 001\",a1)',vr:\"CS\",name:\"SyncraScanType\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",b0)':{tag:'(2005,\"Philips MR Imaging DD 001\",b0)',vr:\"FL\",name:\"DiffusionDirectionRL\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",b1)':{tag:'(2005,\"Philips MR Imaging DD 001\",b1)',vr:\"FL\",name:\"DiffusionDirectionAP\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 001\",b2)':{tag:'(2005,\"Philips MR Imaging DD 001\",b2)',vr:\"FL\",name:\"DiffusionDirectionFH\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"Philips MR Imaging DD 005\",02)':{tag:'(2005,\"Philips MR Imaging DD 005\",02)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",05)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",05)',vr:\"CS\",name:\"SynergyReconstructionType\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",1e)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",1e)',vr:\"SH\",name:\"MIPProtocol\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",1f)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",1f)',vr:\"SH\",name:\"MPRProtocol\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",20)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",20)',vr:\"SL\",name:\"NumberOfChemicalShifts\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",2d)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",2d)',vr:\"SS\",name:\"NumberOfStackSlices\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",83)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",83)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",a1)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",a1)',vr:\"CS\",name:\"SyncraScanType\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",b0)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",b0)',vr:\"FL\",name:\"DiffusionDirectionRL\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",b1)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",b1)',vr:\"FL\",name:\"DiffusionDirectionAP\",vm:\"1\",version:\"PrivateTag\"},'(2005,\"PHILIPS MR IMAGING DD 001\",b2)':{tag:'(2005,\"PHILIPS MR IMAGING DD 001\",b2)',vr:\"FL\",name:\"DiffusionDirectionFH\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR R5.5/PART\",1000)':{tag:'(0019,\"PHILIPS MR R5.5/PART\",1000)',vr:\"DS\",name:\"FieldOfView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR R5.6/PART\",1000)':{tag:'(0019,\"PHILIPS MR R5.6/PART\",1000)',vr:\"DS\",name:\"FieldOfView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",01)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",01)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",02)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",02)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",03)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",03)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",04)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",04)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",05)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",05)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",06)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",06)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",07)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",07)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",08)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",08)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",09)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",09)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",10)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",10)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",12)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",12)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",13)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",13)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",14)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",14)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",15)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",15)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",16)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",16)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",17)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",17)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",18)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",18)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",20)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",20)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",21)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",21)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",22)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",22)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",23)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",23)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",24)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",24)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",25)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",25)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",26)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",26)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",27)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",27)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",28)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",28)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",29)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",29)',vr:\"IS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",31)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",31)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",32)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",32)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",41)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",41)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",42)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",42)',vr:\"IS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",43)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",43)',vr:\"IS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",45)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",45)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",46)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",46)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",47)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",47)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",48)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",48)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",49)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",49)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",50)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",50)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",60)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",60)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",61)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",61)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",70)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",70)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",71)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",71)',vr:\"IS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",72)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",72)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",73)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",73)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",74)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",74)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",76)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",76)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",77)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",77)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",78)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",78)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",79)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",79)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR SPECTRO;1\",80)':{tag:'(0019,\"PHILIPS MR SPECTRO;1\",80)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"PHILIPS MR\",10)':{tag:'(0009,\"PHILIPS MR\",10)',vr:\"LO\",name:\"SPIRelease\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"PHILIPS MR\",12)':{tag:'(0009,\"PHILIPS MR\",12)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",09)':{tag:'(0019,\"PHILIPS MR/LAST\",09)',vr:\"DS\",name:\"MainMagneticField\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",0e)':{tag:'(0019,\"PHILIPS MR/LAST\",0e)',vr:\"IS\",name:\"FlowCompensation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",b1)':{tag:'(0019,\"PHILIPS MR/LAST\",b1)',vr:\"IS\",name:\"MinimumRRInterval\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",b2)':{tag:'(0019,\"PHILIPS MR/LAST\",b2)',vr:\"IS\",name:\"MaximumRRInterval\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",b3)':{tag:'(0019,\"PHILIPS MR/LAST\",b3)',vr:\"IS\",name:\"NumberOfRejections\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",b4)':{tag:'(0019,\"PHILIPS MR/LAST\",b4)',vr:\"IS\",name:\"NumberOfRRIntervals\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",b5)':{tag:'(0019,\"PHILIPS MR/LAST\",b5)',vr:\"IS\",name:\"ArrhythmiaRejection\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",c0)':{tag:'(0019,\"PHILIPS MR/LAST\",c0)',vr:\"DS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",c6)':{tag:'(0019,\"PHILIPS MR/LAST\",c6)',vr:\"IS\",name:\"CycledMultipleSlice\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",ce)':{tag:'(0019,\"PHILIPS MR/LAST\",ce)',vr:\"IS\",name:\"REST\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",d5)':{tag:'(0019,\"PHILIPS MR/LAST\",d5)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",d6)':{tag:'(0019,\"PHILIPS MR/LAST\",d6)',vr:\"IS\",name:\"FourierInterpolation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",d9)':{tag:'(0019,\"PHILIPS MR/LAST\",d9)',vr:\"IS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",e0)':{tag:'(0019,\"PHILIPS MR/LAST\",e0)',vr:\"IS\",name:\"Prepulse\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",e1)':{tag:'(0019,\"PHILIPS MR/LAST\",e1)',vr:\"DS\",name:\"PrepulseDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",e2)':{tag:'(0019,\"PHILIPS MR/LAST\",e2)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",e3)':{tag:'(0019,\"PHILIPS MR/LAST\",e3)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",f0)':{tag:'(0019,\"PHILIPS MR/LAST\",f0)',vr:\"LT\",name:\"WSProtocolString1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",f1)':{tag:'(0019,\"PHILIPS MR/LAST\",f1)',vr:\"LT\",name:\"WSProtocolString2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",f2)':{tag:'(0019,\"PHILIPS MR/LAST\",f2)',vr:\"LT\",name:\"WSProtocolString3\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/LAST\",f3)':{tag:'(0019,\"PHILIPS MR/LAST\",f3)',vr:\"LT\",name:\"WSProtocolString4\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/LAST\",00)':{tag:'(0021,\"PHILIPS MR/LAST\",00)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/LAST\",10)':{tag:'(0021,\"PHILIPS MR/LAST\",10)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/LAST\",20)':{tag:'(0021,\"PHILIPS MR/LAST\",20)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/LAST\",21)':{tag:'(0021,\"PHILIPS MR/LAST\",21)',vr:\"DS\",name:\"SliceGap\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/LAST\",22)':{tag:'(0021,\"PHILIPS MR/LAST\",22)',vr:\"DS\",name:\"StackRadialAngle\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",00)':{tag:'(0027,\"PHILIPS MR/LAST\",00)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",11)':{tag:'(0027,\"PHILIPS MR/LAST\",11)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",12)':{tag:'(0027,\"PHILIPS MR/LAST\",12)',vr:\"DS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",13)':{tag:'(0027,\"PHILIPS MR/LAST\",13)',vr:\"DS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",14)':{tag:'(0027,\"PHILIPS MR/LAST\",14)',vr:\"DS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",15)':{tag:'(0027,\"PHILIPS MR/LAST\",15)',vr:\"DS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0027,\"PHILIPS MR/LAST\",16)':{tag:'(0027,\"PHILIPS MR/LAST\",16)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",10)':{tag:'(0029,\"PHILIPS MR/LAST\",10)',vr:\"DS\",name:\"FPMin\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",20)':{tag:'(0029,\"PHILIPS MR/LAST\",20)',vr:\"DS\",name:\"FPMax\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",30)':{tag:'(0029,\"PHILIPS MR/LAST\",30)',vr:\"DS\",name:\"ScaledMinimum\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",40)':{tag:'(0029,\"PHILIPS MR/LAST\",40)',vr:\"DS\",name:\"ScaledMaximum\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",50)':{tag:'(0029,\"PHILIPS MR/LAST\",50)',vr:\"DS\",name:\"WindowMinimum\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",60)':{tag:'(0029,\"PHILIPS MR/LAST\",60)',vr:\"DS\",name:\"WindowMaximum\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",61)':{tag:'(0029,\"PHILIPS MR/LAST\",61)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",70)':{tag:'(0029,\"PHILIPS MR/LAST\",70)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",71)':{tag:'(0029,\"PHILIPS MR/LAST\",71)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",72)':{tag:'(0029,\"PHILIPS MR/LAST\",72)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",80)':{tag:'(0029,\"PHILIPS MR/LAST\",80)',vr:\"IS\",name:\"ViewCenter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",81)':{tag:'(0029,\"PHILIPS MR/LAST\",81)',vr:\"IS\",name:\"ViewSize\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",82)':{tag:'(0029,\"PHILIPS MR/LAST\",82)',vr:\"IS\",name:\"ViewZoom\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/LAST\",83)':{tag:'(0029,\"PHILIPS MR/LAST\",83)',vr:\"IS\",name:\"ViewTransform\",vm:\"1\",version:\"PrivateTag\"},'(6001,\"PHILIPS MR/LAST\",00)':{tag:'(6001,\"PHILIPS MR/LAST\",00)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1000)':{tag:'(0019,\"PHILIPS MR/PART\",1000)',vr:\"DS\",name:\"FieldOfView\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1005)':{tag:'(0019,\"PHILIPS MR/PART\",1005)',vr:\"DS\",name:\"CCAngulation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1006)':{tag:'(0019,\"PHILIPS MR/PART\",1006)',vr:\"DS\",name:\"APAngulation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1007)':{tag:'(0019,\"PHILIPS MR/PART\",1007)',vr:\"DS\",name:\"LRAngulation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1008)':{tag:'(0019,\"PHILIPS MR/PART\",1008)',vr:\"IS\",name:\"PatientPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1009)':{tag:'(0019,\"PHILIPS MR/PART\",1009)',vr:\"IS\",name:\"PatientOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",100a)':{tag:'(0019,\"PHILIPS MR/PART\",100a)',vr:\"IS\",name:\"SliceOrientation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",100b)':{tag:'(0019,\"PHILIPS MR/PART\",100b)',vr:\"DS\",name:\"LROffcenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",100c)':{tag:'(0019,\"PHILIPS MR/PART\",100c)',vr:\"DS\",name:\"CCOffcenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",100d)':{tag:'(0019,\"PHILIPS MR/PART\",100d)',vr:\"DS\",name:\"APOffcenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",100e)':{tag:'(0019,\"PHILIPS MR/PART\",100e)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",100f)':{tag:'(0019,\"PHILIPS MR/PART\",100f)',vr:\"IS\",name:\"NumberOfSlices\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1010)':{tag:'(0019,\"PHILIPS MR/PART\",1010)',vr:\"DS\",name:\"SliceFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1011)':{tag:'(0019,\"PHILIPS MR/PART\",1011)',vr:\"DS\",name:\"EchoTimes\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1015)':{tag:'(0019,\"PHILIPS MR/PART\",1015)',vr:\"IS\",name:\"DynamicStudy\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1018)':{tag:'(0019,\"PHILIPS MR/PART\",1018)',vr:\"DS\",name:\"HeartbeatInterval\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1019)':{tag:'(0019,\"PHILIPS MR/PART\",1019)',vr:\"DS\",name:\"RepetitionTimeFFE\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",101a)':{tag:'(0019,\"PHILIPS MR/PART\",101a)',vr:\"DS\",name:\"FFEFlipAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",101b)':{tag:'(0019,\"PHILIPS MR/PART\",101b)',vr:\"IS\",name:\"NumberOfScans\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1021)':{tag:'(0019,\"PHILIPS MR/PART\",1021)',vr:\"DS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1022)':{tag:'(0019,\"PHILIPS MR/PART\",1022)',vr:\"DS\",name:\"DynamicScanTimeBegin\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1024)':{tag:'(0019,\"PHILIPS MR/PART\",1024)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1064)':{tag:'(0019,\"PHILIPS MR/PART\",1064)',vr:\"DS\",name:\"RepetitionTimeSE\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1065)':{tag:'(0019,\"PHILIPS MR/PART\",1065)',vr:\"DS\",name:\"RepetitionTimeIR\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1069)':{tag:'(0019,\"PHILIPS MR/PART\",1069)',vr:\"IS\",name:\"NumberOfPhases\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",106a)':{tag:'(0019,\"PHILIPS MR/PART\",106a)',vr:\"IS\",name:\"CardiacFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",106b)':{tag:'(0019,\"PHILIPS MR/PART\",106b)',vr:\"DS\",name:\"InversionDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",106c)':{tag:'(0019,\"PHILIPS MR/PART\",106c)',vr:\"DS\",name:\"GateDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",106d)':{tag:'(0019,\"PHILIPS MR/PART\",106d)',vr:\"DS\",name:\"GateWidth\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",106e)':{tag:'(0019,\"PHILIPS MR/PART\",106e)',vr:\"DS\",name:\"TriggerDelayTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1080)':{tag:'(0019,\"PHILIPS MR/PART\",1080)',vr:\"IS\",name:\"NumberOfChemicalShifts\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1081)':{tag:'(0019,\"PHILIPS MR/PART\",1081)',vr:\"DS\",name:\"ChemicalShift\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1084)':{tag:'(0019,\"PHILIPS MR/PART\",1084)',vr:\"IS\",name:\"NumberOfRows\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1085)':{tag:'(0019,\"PHILIPS MR/PART\",1085)',vr:\"IS\",name:\"NumberOfSamples\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1094)':{tag:'(0019,\"PHILIPS MR/PART\",1094)',vr:\"LO\",name:\"MagnetizationTransferContrast\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1095)':{tag:'(0019,\"PHILIPS MR/PART\",1095)',vr:\"LO\",name:\"SpectralPresaturationWithInversionRecovery\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1096)':{tag:'(0019,\"PHILIPS MR/PART\",1096)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1097)':{tag:'(0019,\"PHILIPS MR/PART\",1097)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10a0)':{tag:'(0019,\"PHILIPS MR/PART\",10a0)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10a1)':{tag:'(0019,\"PHILIPS MR/PART\",10a1)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10a3)':{tag:'(0019,\"PHILIPS MR/PART\",10a3)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10a4)':{tag:'(0019,\"PHILIPS MR/PART\",10a4)',vr:\"CS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10c8)':{tag:'(0019,\"PHILIPS MR/PART\",10c8)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10c9)':{tag:'(0019,\"PHILIPS MR/PART\",10c9)',vr:\"IS\",name:\"FoldoverDirectionTransverse\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10ca)':{tag:'(0019,\"PHILIPS MR/PART\",10ca)',vr:\"IS\",name:\"FoldoverDirectionSagittal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10cb)':{tag:'(0019,\"PHILIPS MR/PART\",10cb)',vr:\"IS\",name:\"FoldoverDirectionCoronal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10cc)':{tag:'(0019,\"PHILIPS MR/PART\",10cc)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10cd)':{tag:'(0019,\"PHILIPS MR/PART\",10cd)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10ce)':{tag:'(0019,\"PHILIPS MR/PART\",10ce)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10cf)':{tag:'(0019,\"PHILIPS MR/PART\",10cf)',vr:\"IS\",name:\"NumberOfEchoes\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d0)':{tag:'(0019,\"PHILIPS MR/PART\",10d0)',vr:\"IS\",name:\"ScanResolution\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d2)':{tag:'(0019,\"PHILIPS MR/PART\",10d2)',vr:\"LO\",name:\"WaterFatShift\",vm:\"2\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d4)':{tag:'(0019,\"PHILIPS MR/PART\",10d4)',vr:\"IS\",name:\"ArtifactReduction\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d5)':{tag:'(0019,\"PHILIPS MR/PART\",10d5)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d6)':{tag:'(0019,\"PHILIPS MR/PART\",10d6)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d7)':{tag:'(0019,\"PHILIPS MR/PART\",10d7)',vr:\"DS\",name:\"ScanPercentage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d8)':{tag:'(0019,\"PHILIPS MR/PART\",10d8)',vr:\"IS\",name:\"Halfscan\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10d9)':{tag:'(0019,\"PHILIPS MR/PART\",10d9)',vr:\"IS\",name:\"EPIFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10da)':{tag:'(0019,\"PHILIPS MR/PART\",10da)',vr:\"IS\",name:\"TurboFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10db)':{tag:'(0019,\"PHILIPS MR/PART\",10db)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10e0)':{tag:'(0019,\"PHILIPS MR/PART\",10e0)',vr:\"IS\",name:\"PercentageOfScanCompleted\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",10e1)':{tag:'(0019,\"PHILIPS MR/PART\",10e1)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1100)':{tag:'(0019,\"PHILIPS MR/PART\",1100)',vr:\"IS\",name:\"NumberOfStacks\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1101)':{tag:'(0019,\"PHILIPS MR/PART\",1101)',vr:\"IS\",name:\"StackType\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1102)':{tag:'(0019,\"PHILIPS MR/PART\",1102)',vr:\"IS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",110b)':{tag:'(0019,\"PHILIPS MR/PART\",110b)',vr:\"DS\",name:\"LROffcenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",110c)':{tag:'(0019,\"PHILIPS MR/PART\",110c)',vr:\"DS\",name:\"CCOffcenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",110d)':{tag:'(0019,\"PHILIPS MR/PART\",110d)',vr:\"DS\",name:\"APOffcenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",1145)':{tag:'(0019,\"PHILIPS MR/PART\",1145)',vr:\"IS\",name:\"ReconstructionResolution\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",11fc)':{tag:'(0019,\"PHILIPS MR/PART\",11fc)',vr:\"IS\",name:\"ResonanceFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",12c0)':{tag:'(0019,\"PHILIPS MR/PART\",12c0)',vr:\"DS\",name:\"TriggerDelayTimes\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",12e0)':{tag:'(0019,\"PHILIPS MR/PART\",12e0)',vr:\"IS\",name:\"PrepulseType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",12e1)':{tag:'(0019,\"PHILIPS MR/PART\",12e1)',vr:\"DS\",name:\"PrepulseDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS MR/PART\",12e3)':{tag:'(0019,\"PHILIPS MR/PART\",12e3)',vr:\"DS\",name:\"PhaseContrastVelocity\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1000)':{tag:'(0021,\"PHILIPS MR/PART\",1000)',vr:\"IS\",name:\"ReconstructionNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1010)':{tag:'(0021,\"PHILIPS MR/PART\",1010)',vr:\"IS\",name:\"ImageType\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1020)':{tag:'(0021,\"PHILIPS MR/PART\",1020)',vr:\"IS\",name:\"SliceNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1030)':{tag:'(0021,\"PHILIPS MR/PART\",1030)',vr:\"IS\",name:\"EchoNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1031)':{tag:'(0021,\"PHILIPS MR/PART\",1031)',vr:\"DS\",name:\"PatientReferenceID\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1035)':{tag:'(0021,\"PHILIPS MR/PART\",1035)',vr:\"IS\",name:\"ChemicalShiftNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1040)':{tag:'(0021,\"PHILIPS MR/PART\",1040)',vr:\"IS\",name:\"PhaseNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1050)':{tag:'(0021,\"PHILIPS MR/PART\",1050)',vr:\"IS\",name:\"DynamicScanNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1060)':{tag:'(0021,\"PHILIPS MR/PART\",1060)',vr:\"IS\",name:\"NumberOfRowsInObject\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1061)':{tag:'(0021,\"PHILIPS MR/PART\",1061)',vr:\"IS\",name:\"RowNumber\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1062)':{tag:'(0021,\"PHILIPS MR/PART\",1062)',vr:\"IS\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1100)':{tag:'(0021,\"PHILIPS MR/PART\",1100)',vr:\"DA\",name:\"ScanDate\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1110)':{tag:'(0021,\"PHILIPS MR/PART\",1110)',vr:\"TM\",name:\"ScanTime\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS MR/PART\",1221)':{tag:'(0021,\"PHILIPS MR/PART\",1221)',vr:\"IS\",name:\"SliceGap\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",00)':{tag:'(0029,\"PHILIPS MR/PART\",00)',vr:\"DS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",04)':{tag:'(0029,\"PHILIPS MR/PART\",04)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",10)':{tag:'(0029,\"PHILIPS MR/PART\",10)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",11)':{tag:'(0029,\"PHILIPS MR/PART\",11)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",20)':{tag:'(0029,\"PHILIPS MR/PART\",20)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",31)':{tag:'(0029,\"PHILIPS MR/PART\",31)',vr:\"DS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",32)':{tag:'(0029,\"PHILIPS MR/PART\",32)',vr:\"DS\",name:\"Unknown\",vm:\"2\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",c3)':{tag:'(0029,\"PHILIPS MR/PART\",c3)',vr:\"IS\",name:\"ScanResolution\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",c4)':{tag:'(0029,\"PHILIPS MR/PART\",c4)',vr:\"IS\",name:\"FieldOfView\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"PHILIPS MR/PART\",d5)':{tag:'(0029,\"PHILIPS MR/PART\",d5)',vr:\"LT\",name:\"SliceThickness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS-MR-1\",11)':{tag:'(0019,\"PHILIPS-MR-1\",11)',vr:\"IS\",name:\"ChemicalShiftNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"PHILIPS-MR-1\",12)':{tag:'(0019,\"PHILIPS-MR-1\",12)',vr:\"IS\",name:\"PhaseNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS-MR-1\",01)':{tag:'(0021,\"PHILIPS-MR-1\",01)',vr:\"IS\",name:\"ReconstructionNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"PHILIPS-MR-1\",02)':{tag:'(0021,\"PHILIPS-MR-1\",02)',vr:\"IS\",name:\"SliceNumber\",vm:\"1\",version:\"PrivateTag\"},'(7001,\"Picker NM Private Group\",01)':{tag:'(7001,\"Picker NM Private Group\",01)',vr:\"UI\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(7001,\"Picker NM Private Group\",02)':{tag:'(7001,\"Picker NM Private Group\",02)',vr:\"OB\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  ACQU\",10)':{tag:'(0019,\"SIEMENS CM VA0  ACQU\",10)',vr:\"LT\",name:\"ParameterFileName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  ACQU\",11)':{tag:'(0019,\"SIEMENS CM VA0  ACQU\",11)',vr:\"LO\",name:\"SequenceFileName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  ACQU\",12)':{tag:'(0019,\"SIEMENS CM VA0  ACQU\",12)',vr:\"LT\",name:\"SequenceFileOwner\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  ACQU\",13)':{tag:'(0019,\"SIEMENS CM VA0  ACQU\",13)',vr:\"LT\",name:\"SequenceDescription\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  ACQU\",14)':{tag:'(0019,\"SIEMENS CM VA0  ACQU\",14)',vr:\"LT\",name:\"EPIFileName\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  CMS\",00)':{tag:'(0009,\"SIEMENS CM VA0  CMS\",00)',vr:\"DS\",name:\"NumberOfMeasurements\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  CMS\",10)':{tag:'(0009,\"SIEMENS CM VA0  CMS\",10)',vr:\"LT\",name:\"StorageMode\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  CMS\",12)':{tag:'(0009,\"SIEMENS CM VA0  CMS\",12)',vr:\"UL\",name:\"EvaluationMaskImage\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  CMS\",26)':{tag:'(0009,\"SIEMENS CM VA0  CMS\",26)',vr:\"DA\",name:\"LastMoveDate\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  CMS\",27)':{tag:'(0009,\"SIEMENS CM VA0  CMS\",27)',vr:\"TM\",name:\"LastMoveTime\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS CM VA0  CMS\",0a)':{tag:'(0011,\"SIEMENS CM VA0  CMS\",0a)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS CM VA0  CMS\",10)':{tag:'(0011,\"SIEMENS CM VA0  CMS\",10)',vr:\"DA\",name:\"RegistrationDate\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS CM VA0  CMS\",11)':{tag:'(0011,\"SIEMENS CM VA0  CMS\",11)',vr:\"TM\",name:\"RegistrationTime\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS CM VA0  CMS\",22)':{tag:'(0011,\"SIEMENS CM VA0  CMS\",22)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS CM VA0  CMS\",23)':{tag:'(0011,\"SIEMENS CM VA0  CMS\",23)',vr:\"DS\",name:\"UsedPatientWeight\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS CM VA0  CMS\",40)':{tag:'(0011,\"SIEMENS CM VA0  CMS\",40)',vr:\"IS\",name:\"OrganCode\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",00)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",00)',vr:\"LT\",name:\"ModifyingPhysician\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",10)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",10)',vr:\"DA\",name:\"ModificationDate\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",12)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",12)',vr:\"TM\",name:\"ModificationTime\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",20)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",20)',vr:\"LO\",name:\"PatientName\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",22)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",22)',vr:\"LO\",name:\"PatientId\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",30)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",30)',vr:\"DA\",name:\"PatientBirthdate\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",31)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",31)',vr:\"DS\",name:\"PatientWeight\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",32)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",32)',vr:\"LT\",name:\"PatientsMaidenName\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",33)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",33)',vr:\"LT\",name:\"ReferringPhysician\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",34)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",34)',vr:\"LT\",name:\"AdmittingDiagnosis\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",35)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",35)',vr:\"LO\",name:\"PatientSex\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",40)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",40)',vr:\"LO\",name:\"ProcedureDescription\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",42)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",42)',vr:\"LO\",name:\"RestDirection\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",44)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",44)',vr:\"LO\",name:\"PatientPosition\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",46)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",46)',vr:\"LT\",name:\"ViewDirection\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",50)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",50)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",51)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",51)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",52)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",52)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",53)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",53)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",54)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",54)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",55)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",55)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0013,\"SIEMENS CM VA0  CMS\",56)':{tag:'(0013,\"SIEMENS CM VA0  CMS\",56)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  CMS\",10)':{tag:'(0019,\"SIEMENS CM VA0  CMS\",10)',vr:\"DS\",name:\"NetFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  CMS\",20)':{tag:'(0019,\"SIEMENS CM VA0  CMS\",20)',vr:\"LT\",name:\"MeasurementMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  CMS\",30)':{tag:'(0019,\"SIEMENS CM VA0  CMS\",30)',vr:\"LT\",name:\"CalculationMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  CMS\",50)':{tag:'(0019,\"SIEMENS CM VA0  CMS\",50)',vr:\"IS\",name:\"NoiseLevel\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CM VA0  CMS\",60)':{tag:'(0019,\"SIEMENS CM VA0  CMS\",60)',vr:\"IS\",name:\"NumberOfDataBytes\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",20)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",20)',vr:\"DS\",name:\"FoV\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",22)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",22)',vr:\"DS\",name:\"ImageMagnificationFactor\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",24)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",24)',vr:\"DS\",name:\"ImageScrollOffset\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",26)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",26)',vr:\"IS\",name:\"ImagePixelOffset\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",30)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",30)',vr:\"LT\",name:\"ViewDirection\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",32)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",32)',vr:\"CS\",name:\"PatientRestDirection\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",60)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",60)',vr:\"DS\",name:\"ImagePosition\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",61)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",61)',vr:\"DS\",name:\"ImageNormal\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",63)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",63)',vr:\"DS\",name:\"ImageDistance\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",65)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",65)',vr:\"US\",name:\"ImagePositioningHistoryMask\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",6a)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",6a)',vr:\"DS\",name:\"ImageRow\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",6b)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",6b)',vr:\"DS\",name:\"ImageColumn\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",70)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",70)',vr:\"LT\",name:\"PatientOrientationSet1\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",71)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",71)',vr:\"LT\",name:\"PatientOrientationSet2\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",80)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",80)',vr:\"LT\",name:\"StudyName\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CM VA0  CMS\",82)':{tag:'(0021,\"SIEMENS CM VA0  CMS\",82)',vr:\"LT\",name:\"StudyType\",vm:\"3\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",10)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",10)',vr:\"LT\",name:\"WindowStyle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",11)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",11)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",13)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",13)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",20)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",20)',vr:\"LT\",name:\"PixelQualityCode\",vm:\"3\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",22)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",22)',vr:\"IS\",name:\"PixelQualityValue\",vm:\"3\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",50)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",50)',vr:\"LT\",name:\"ArchiveCode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",51)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",51)',vr:\"LT\",name:\"ExposureCode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",52)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",52)',vr:\"LT\",name:\"SortCode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",53)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",53)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CM VA0  CMS\",60)':{tag:'(0029,\"SIEMENS CM VA0  CMS\",60)',vr:\"LT\",name:\"Splash\",vm:\"1\",version:\"PrivateTag\"},'(0051,\"SIEMENS CM VA0  CMS\",10)':{tag:'(0051,\"SIEMENS CM VA0  CMS\",10)',vr:\"LT\",name:\"ImageText\",vm:\"1-n\",version:\"PrivateTag\"},'(6021,\"SIEMENS CM VA0  CMS\",00)':{tag:'(6021,\"SIEMENS CM VA0  CMS\",00)',vr:\"LT\",name:\"ImageGraphicsFormatCode\",vm:\"1\",version:\"PrivateTag\"},'(6021,\"SIEMENS CM VA0  CMS\",10)':{tag:'(6021,\"SIEMENS CM VA0  CMS\",10)',vr:\"LT\",name:\"ImageGraphics\",vm:\"1\",version:\"PrivateTag\"},'(7fe1,\"SIEMENS CM VA0  CMS\",00)':{tag:'(7fe1,\"SIEMENS CM VA0  CMS\",00)',vr:\"OB\",name:\"BinaryData\",vm:\"1-n\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",10)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",10)',vr:\"LT\",name:\"GeneratorIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",11)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",11)',vr:\"LT\",name:\"GantryIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",12)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",12)',vr:\"LT\",name:\"X-RayTubeIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",13)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",13)',vr:\"LT\",name:\"DetectorIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",14)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",14)',vr:\"LT\",name:\"DASIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",15)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",15)',vr:\"LT\",name:\"SMIIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",16)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",16)',vr:\"LT\",name:\"CPUIdentificationLabel\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CM VA0  LAB\",20)':{tag:'(0009,\"SIEMENS CM VA0  LAB\",20)',vr:\"LT\",name:\"HeaderVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA HEADER\",08)':{tag:'(0029,\"SIEMENS CSA HEADER\",08)',vr:\"CS\",name:\"CSAImageHeaderType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA HEADER\",09)':{tag:'(0029,\"SIEMENS CSA HEADER\",09)',vr:\"LO\",name:\"CSAImageHeaderVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA HEADER\",10)':{tag:'(0029,\"SIEMENS CSA HEADER\",10)',vr:\"OB\",name:\"CSAImageHeaderInfo\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA HEADER\",18)':{tag:'(0029,\"SIEMENS CSA HEADER\",18)',vr:\"CS\",name:\"CSASeriesHeaderType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA HEADER\",19)':{tag:'(0029,\"SIEMENS CSA HEADER\",19)',vr:\"LO\",name:\"CSASeriesHeaderVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA HEADER\",20)':{tag:'(0029,\"SIEMENS CSA HEADER\",20)',vr:\"OB\",name:\"CSASeriesHeaderInfo\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA NON-IMAGE\",08)':{tag:'(0029,\"SIEMENS CSA NON-IMAGE\",08)',vr:\"CS\",name:\"CSADataType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA NON-IMAGE\",09)':{tag:'(0029,\"SIEMENS CSA NON-IMAGE\",09)',vr:\"LO\",name:\"CSADataVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS CSA NON-IMAGE\",10)':{tag:'(0029,\"SIEMENS CSA NON-IMAGE\",10)',vr:\"OB\",name:\"CSADataInfo\",vm:\"1\",version:\"PrivateTag\"},'(7FE1,\"SIEMENS CSA NON-IMAGE\",10)':{tag:'(7FE1,\"SIEMENS CSA NON-IMAGE\",10)',vr:\"OB\",name:\"CSAData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",10)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",10)',vr:\"DS\",name:\"DistanceSourceToSourceSideCollimator\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",11)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",11)',vr:\"DS\",name:\"DistanceSourceToDetectorSideCollimator\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",20)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",20)',vr:\"IS\",name:\"NumberOfPossibleChannels\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",21)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",21)',vr:\"IS\",name:\"MeanChannelNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",22)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",22)',vr:\"DS\",name:\"DetectorSpacing\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",23)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",23)',vr:\"DS\",name:\"DetectorCenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",24)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",24)',vr:\"DS\",name:\"ReadingIntegrationTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",50)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",50)',vr:\"DS\",name:\"DetectorAlignment\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",52)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",52)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",54)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",54)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",60)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",60)',vr:\"DS\",name:\"FocusAlignment\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",65)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",65)',vr:\"UL\",name:\"FocalSpotDeflectionAmplitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",66)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",66)',vr:\"UL\",name:\"FocalSpotDeflectionPhase\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",67)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",67)',vr:\"UL\",name:\"FocalSpotDeflectionOffset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",70)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",70)',vr:\"DS\",name:\"WaterScalingFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",71)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",71)',vr:\"DS\",name:\"InterpolationFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",80)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",80)',vr:\"LT\",name:\"PatientRegion\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",82)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",82)',vr:\"LT\",name:\"PatientPhaseOfLife\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",90)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",90)',vr:\"DS\",name:\"OsteoOffset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",92)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",92)',vr:\"DS\",name:\"OsteoRegressionLineSlope\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",93)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",93)',vr:\"DS\",name:\"OsteoRegressionLineIntercept\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",94)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",94)',vr:\"DS\",name:\"OsteoStandardizationCode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",96)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",96)',vr:\"IS\",name:\"OsteoPhantomNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A3)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A3)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A4)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A4)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A5)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A5)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A6)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A6)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A7)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A7)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A8)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A8)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",A9)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",A9)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",AA)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",AA)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",AB)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",AB)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",AC)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",AC)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",AD)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",AD)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",AE)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",AE)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",AF)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",AF)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",B0)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",B0)',vr:\"DS\",name:\"FeedPerRotation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",BD)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",BD)',vr:\"IS\",name:\"PulmoTriggerLevel\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",BE)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",BE)',vr:\"DS\",name:\"ExpiratoricReserveVolume\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",BF)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",BF)',vr:\"DS\",name:\"VitalCapacity\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",C0)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",C0)',vr:\"DS\",name:\"PulmoWater\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",C1)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",C1)',vr:\"DS\",name:\"PulmoAir\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",C2)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",C2)',vr:\"DA\",name:\"PulmoDate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  COAD\",C3)':{tag:'(0019,\"SIEMENS CT VA0  COAD\",C3)',vr:\"TM\",name:\"PulmoTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",10)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",10)',vr:\"DS\",name:\"SourceSideCollimatorAperture\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",11)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",11)',vr:\"DS\",name:\"DetectorSideCollimatorAperture\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",20)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",20)',vr:\"DS\",name:\"ExposureTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",21)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",21)',vr:\"DS\",name:\"ExposureCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",25)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",25)',vr:\"DS\",name:\"KVPGeneratorPowerCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",26)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",26)',vr:\"DS\",name:\"GeneratorVoltage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",40)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",40)',vr:\"UL\",name:\"MasterControlMask\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",42)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",42)',vr:\"US\",name:\"ProcessingMask\",vm:\"5\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",44)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",44)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",45)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",45)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",62)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",62)',vr:\"IS\",name:\"NumberOfVirtuellChannels\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",70)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",70)',vr:\"IS\",name:\"NumberOfReadings\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",71)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",71)',vr:\"LT\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",74)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",74)',vr:\"IS\",name:\"NumberOfProjections\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",75)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",75)',vr:\"IS\",name:\"NumberOfBytes\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",80)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",80)',vr:\"LT\",name:\"ReconstructionAlgorithmSet\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",81)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",81)',vr:\"LT\",name:\"ReconstructionAlgorithmIndex\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",82)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",82)',vr:\"LT\",name:\"RegenerationSoftwareVersion\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS CT VA0  GEN\",88)':{tag:'(0019,\"SIEMENS CT VA0  GEN\",88)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",10)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",10)',vr:\"IS\",name:\"RotationAngle\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",11)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",11)',vr:\"IS\",name:\"StartAngle\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",20)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",20)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",30)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",30)',vr:\"IS\",name:\"TopogramTubePosition\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",32)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",32)',vr:\"DS\",name:\"LengthOfTopogram\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",34)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",34)',vr:\"DS\",name:\"TopogramCorrectionFactor\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",36)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",36)',vr:\"DS\",name:\"MaximumTablePosition\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",40)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",40)',vr:\"IS\",name:\"TableMoveDirectionCode\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",45)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",45)',vr:\"IS\",name:\"VOIStartRow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",46)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",46)',vr:\"IS\",name:\"VOIStopRow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",47)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",47)',vr:\"IS\",name:\"VOIStartColumn\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",48)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",48)',vr:\"IS\",name:\"VOIStopColumn\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",49)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",49)',vr:\"IS\",name:\"VOIStartSlice\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",4a)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",4a)',vr:\"IS\",name:\"VOIStopSlice\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",50)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",50)',vr:\"IS\",name:\"VectorStartRow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",51)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",51)',vr:\"IS\",name:\"VectorRowStep\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",52)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",52)',vr:\"IS\",name:\"VectorStartColumn\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",53)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",53)',vr:\"IS\",name:\"VectorColumnStep\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",60)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",60)',vr:\"IS\",name:\"RangeTypeCode\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",62)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",62)',vr:\"IS\",name:\"ReferenceTypeCode\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",70)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",70)',vr:\"DS\",name:\"ObjectOrientation\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",72)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",72)',vr:\"DS\",name:\"LightOrientation\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",75)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",75)',vr:\"DS\",name:\"LightBrightness\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",76)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",76)',vr:\"DS\",name:\"LightContrast\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",7a)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",7a)',vr:\"IS\",name:\"OverlayThreshold\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",7b)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",7b)',vr:\"IS\",name:\"SurfaceThreshold\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",7c)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",7c)',vr:\"IS\",name:\"GreyScaleThreshold\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",a0)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",a0)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",a2)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",a2)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  GEN\",a7)':{tag:'(0021,\"SIEMENS CT VA0  GEN\",a7)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",10)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",10)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",30)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",30)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",31)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",31)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",32)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",32)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",34)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",34)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",40)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",40)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",42)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",42)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",50)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",50)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  IDE\",51)':{tag:'(0009,\"SIEMENS CT VA0  IDE\",51)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  ORI\",20)':{tag:'(0009,\"SIEMENS CT VA0  ORI\",20)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS CT VA0  ORI\",30)':{tag:'(0009,\"SIEMENS CT VA0  ORI\",30)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(6021,\"SIEMENS CT VA0  OST\",00)':{tag:'(6021,\"SIEMENS CT VA0  OST\",00)',vr:\"LT\",name:\"OsteoContourComment\",vm:\"1\",version:\"PrivateTag\"},'(6021,\"SIEMENS CT VA0  OST\",10)':{tag:'(6021,\"SIEMENS CT VA0  OST\",10)',vr:\"US\",name:\"OsteoContourBuffer\",vm:\"256\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",10)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",10)',vr:\"UL\",name:\"CreationMask\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",20)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",20)',vr:\"UL\",name:\"EvaluationMask\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",30)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",30)',vr:\"US\",name:\"ExtendedProcessingMask\",vm:\"7\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",40)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",40)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",41)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",41)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",42)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",42)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",43)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",43)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",44)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",44)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS CT VA0  RAW\",50)':{tag:'(0021,\"SIEMENS CT VA0  RAW\",50)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS DICOM\",10)':{tag:'(0009,\"SIEMENS DICOM\",10)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS DICOM\",12)':{tag:'(0009,\"SIEMENS DICOM\",12)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",10)':{tag:'(0019,\"SIEMENS DLR.01\",10)',vr:\"LT\",name:\"MeasurementMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",11)':{tag:'(0019,\"SIEMENS DLR.01\",11)',vr:\"LT\",name:\"ImageType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",15)':{tag:'(0019,\"SIEMENS DLR.01\",15)',vr:\"LT\",name:\"SoftwareVersion\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",20)':{tag:'(0019,\"SIEMENS DLR.01\",20)',vr:\"LT\",name:\"MPMCode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",21)':{tag:'(0019,\"SIEMENS DLR.01\",21)',vr:\"LT\",name:\"Latitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",22)':{tag:'(0019,\"SIEMENS DLR.01\",22)',vr:\"LT\",name:\"Sensitivity\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",23)':{tag:'(0019,\"SIEMENS DLR.01\",23)',vr:\"LT\",name:\"EDR\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",24)':{tag:'(0019,\"SIEMENS DLR.01\",24)',vr:\"LT\",name:\"LFix\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",25)':{tag:'(0019,\"SIEMENS DLR.01\",25)',vr:\"LT\",name:\"SFix\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",26)':{tag:'(0019,\"SIEMENS DLR.01\",26)',vr:\"LT\",name:\"PresetMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",27)':{tag:'(0019,\"SIEMENS DLR.01\",27)',vr:\"LT\",name:\"Region\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",28)':{tag:'(0019,\"SIEMENS DLR.01\",28)',vr:\"LT\",name:\"Subregion\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",30)':{tag:'(0019,\"SIEMENS DLR.01\",30)',vr:\"LT\",name:\"Orientation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",31)':{tag:'(0019,\"SIEMENS DLR.01\",31)',vr:\"LT\",name:\"MarkOnFilm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",32)':{tag:'(0019,\"SIEMENS DLR.01\",32)',vr:\"LT\",name:\"RotationOnDRC\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",40)':{tag:'(0019,\"SIEMENS DLR.01\",40)',vr:\"LT\",name:\"ReaderType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",41)':{tag:'(0019,\"SIEMENS DLR.01\",41)',vr:\"LT\",name:\"SubModality\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",42)':{tag:'(0019,\"SIEMENS DLR.01\",42)',vr:\"LT\",name:\"ReaderSerialNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",50)':{tag:'(0019,\"SIEMENS DLR.01\",50)',vr:\"LT\",name:\"CassetteScale\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",51)':{tag:'(0019,\"SIEMENS DLR.01\",51)',vr:\"LT\",name:\"CassetteMatrix\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",52)':{tag:'(0019,\"SIEMENS DLR.01\",52)',vr:\"LT\",name:\"CassetteSubmatrix\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",53)':{tag:'(0019,\"SIEMENS DLR.01\",53)',vr:\"LT\",name:\"Barcode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",60)':{tag:'(0019,\"SIEMENS DLR.01\",60)',vr:\"LT\",name:\"ContrastType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",61)':{tag:'(0019,\"SIEMENS DLR.01\",61)',vr:\"LT\",name:\"RotationAmount\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",62)':{tag:'(0019,\"SIEMENS DLR.01\",62)',vr:\"LT\",name:\"RotationCenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",63)':{tag:'(0019,\"SIEMENS DLR.01\",63)',vr:\"LT\",name:\"DensityShift\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",64)':{tag:'(0019,\"SIEMENS DLR.01\",64)',vr:\"US\",name:\"FrequencyRank\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",65)':{tag:'(0019,\"SIEMENS DLR.01\",65)',vr:\"LT\",name:\"FrequencyEnhancement\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",66)':{tag:'(0019,\"SIEMENS DLR.01\",66)',vr:\"LT\",name:\"FrequencyType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",67)':{tag:'(0019,\"SIEMENS DLR.01\",67)',vr:\"LT\",name:\"KernelLength\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",68)':{tag:'(0019,\"SIEMENS DLR.01\",68)',vr:\"UL\",name:\"KernelMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",69)':{tag:'(0019,\"SIEMENS DLR.01\",69)',vr:\"UL\",name:\"ConvolutionMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",70)':{tag:'(0019,\"SIEMENS DLR.01\",70)',vr:\"LT\",name:\"PLASource\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",71)':{tag:'(0019,\"SIEMENS DLR.01\",71)',vr:\"LT\",name:\"PLADestination\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",75)':{tag:'(0019,\"SIEMENS DLR.01\",75)',vr:\"LT\",name:\"UIDOriginalImage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",76)':{tag:'(0019,\"SIEMENS DLR.01\",76)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",80)':{tag:'(0019,\"SIEMENS DLR.01\",80)',vr:\"LT\",name:\"ReaderHeader\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",90)':{tag:'(0019,\"SIEMENS DLR.01\",90)',vr:\"LT\",name:\"PLAOfSecondaryDestination\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",a0)':{tag:'(0019,\"SIEMENS DLR.01\",a0)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS DLR.01\",a1)':{tag:'(0019,\"SIEMENS DLR.01\",a1)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"SIEMENS DLR.01\",10)':{tag:'(0041,\"SIEMENS DLR.01\",10)',vr:\"US\",name:\"NumberOfHardcopies\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"SIEMENS DLR.01\",20)':{tag:'(0041,\"SIEMENS DLR.01\",20)',vr:\"LT\",name:\"FilmFormat\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"SIEMENS DLR.01\",30)':{tag:'(0041,\"SIEMENS DLR.01\",30)',vr:\"LT\",name:\"FilmSize\",vm:\"1\",version:\"PrivateTag\"},'(0041,\"SIEMENS DLR.01\",31)':{tag:'(0041,\"SIEMENS DLR.01\",31)',vr:\"LT\",name:\"FullFilmFormat\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",08)':{tag:'(0003,\"SIEMENS ISI\",08)',vr:\"US\",name:\"ISICommandField\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",11)':{tag:'(0003,\"SIEMENS ISI\",11)',vr:\"US\",name:\"AttachIDApplicationCode\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",12)':{tag:'(0003,\"SIEMENS ISI\",12)',vr:\"UL\",name:\"AttachIDMessageCount\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",13)':{tag:'(0003,\"SIEMENS ISI\",13)',vr:\"DA\",name:\"AttachIDDate\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",14)':{tag:'(0003,\"SIEMENS ISI\",14)',vr:\"TM\",name:\"AttachIDTime\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",20)':{tag:'(0003,\"SIEMENS ISI\",20)',vr:\"US\",name:\"MessageType\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",30)':{tag:'(0003,\"SIEMENS ISI\",30)',vr:\"DA\",name:\"MaxWaitingDate\",vm:\"1\",version:\"PrivateTag\"},'(0003,\"SIEMENS ISI\",31)':{tag:'(0003,\"SIEMENS ISI\",31)',vr:\"TM\",name:\"MaxWaitingTime\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS ISI\",01)':{tag:'(0009,\"SIEMENS ISI\",01)',vr:\"UN\",name:\"RISPatientInfoIMGEF\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",03)':{tag:'(0011,\"SIEMENS ISI\",03)',vr:\"LT\",name:\"PatientUID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",04)':{tag:'(0011,\"SIEMENS ISI\",04)',vr:\"LT\",name:\"PatientID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",0a)':{tag:'(0011,\"SIEMENS ISI\",0a)',vr:\"LT\",name:\"CaseID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",22)':{tag:'(0011,\"SIEMENS ISI\",22)',vr:\"LT\",name:\"RequestID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",23)':{tag:'(0011,\"SIEMENS ISI\",23)',vr:\"LT\",name:\"ExaminationUID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",a1)':{tag:'(0011,\"SIEMENS ISI\",a1)',vr:\"DA\",name:\"PatientRegistrationDate\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",a2)':{tag:'(0011,\"SIEMENS ISI\",a2)',vr:\"TM\",name:\"PatientRegistrationTime\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",b0)':{tag:'(0011,\"SIEMENS ISI\",b0)',vr:\"LT\",name:\"PatientLastName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",b2)':{tag:'(0011,\"SIEMENS ISI\",b2)',vr:\"LT\",name:\"PatientFirstName\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",b4)':{tag:'(0011,\"SIEMENS ISI\",b4)',vr:\"LT\",name:\"PatientHospitalStatus\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",bc)':{tag:'(0011,\"SIEMENS ISI\",bc)',vr:\"TM\",name:\"CurrentLocationTime\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",c0)':{tag:'(0011,\"SIEMENS ISI\",c0)',vr:\"LT\",name:\"PatientInsuranceStatus\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",d0)':{tag:'(0011,\"SIEMENS ISI\",d0)',vr:\"LT\",name:\"PatientBillingType\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS ISI\",d2)':{tag:'(0011,\"SIEMENS ISI\",d2)',vr:\"LT\",name:\"PatientBillingAddress\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS ISI\",12)':{tag:'(0031,\"SIEMENS ISI\",12)',vr:\"LT\",name:\"ExaminationReason\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS ISI\",30)':{tag:'(0031,\"SIEMENS ISI\",30)',vr:\"DA\",name:\"RequestedDate\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS ISI\",32)':{tag:'(0031,\"SIEMENS ISI\",32)',vr:\"TM\",name:\"WorklistRequestStartTime\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS ISI\",33)':{tag:'(0031,\"SIEMENS ISI\",33)',vr:\"TM\",name:\"WorklistRequestEndTime\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS ISI\",4a)':{tag:'(0031,\"SIEMENS ISI\",4a)',vr:\"TM\",name:\"RequestedTime\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS ISI\",80)':{tag:'(0031,\"SIEMENS ISI\",80)',vr:\"LT\",name:\"RequestedLocation\",vm:\"1\",version:\"PrivateTag\"},'(0055,\"SIEMENS ISI\",46)':{tag:'(0055,\"SIEMENS ISI\",46)',vr:\"LT\",name:\"CurrentWard\",vm:\"1\",version:\"PrivateTag\"},'(0193,\"SIEMENS ISI\",02)':{tag:'(0193,\"SIEMENS ISI\",02)',vr:\"DS\",name:\"RISKey\",vm:\"1\",version:\"PrivateTag\"},'(0307,\"SIEMENS ISI\",01)':{tag:'(0307,\"SIEMENS ISI\",01)',vr:\"UN\",name:\"RISWorklistIMGEF\",vm:\"1\",version:\"PrivateTag\"},'(0309,\"SIEMENS ISI\",01)':{tag:'(0309,\"SIEMENS ISI\",01)',vr:\"UN\",name:\"RISReportIMGEF\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",01)':{tag:'(4009,\"SIEMENS ISI\",01)',vr:\"LT\",name:\"ReportID\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",20)':{tag:'(4009,\"SIEMENS ISI\",20)',vr:\"LT\",name:\"ReportStatus\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",30)':{tag:'(4009,\"SIEMENS ISI\",30)',vr:\"DA\",name:\"ReportCreationDate\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",70)':{tag:'(4009,\"SIEMENS ISI\",70)',vr:\"LT\",name:\"ReportApprovingPhysician\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",e0)':{tag:'(4009,\"SIEMENS ISI\",e0)',vr:\"LT\",name:\"ReportText\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",e1)':{tag:'(4009,\"SIEMENS ISI\",e1)',vr:\"LT\",name:\"ReportAuthor\",vm:\"1\",version:\"PrivateTag\"},'(4009,\"SIEMENS ISI\",e3)':{tag:'(4009,\"SIEMENS ISI\",e3)',vr:\"LT\",name:\"ReportingRadiologist\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",04)':{tag:'(0029,\"SIEMENS MED DISPLAY\",04)',vr:\"LT\",name:\"PhotometricInterpretation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",10)':{tag:'(0029,\"SIEMENS MED DISPLAY\",10)',vr:\"US\",name:\"RowsOfSubmatrix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",11)':{tag:'(0029,\"SIEMENS MED DISPLAY\",11)',vr:\"US\",name:\"ColumnsOfSubmatrix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",20)':{tag:'(0029,\"SIEMENS MED DISPLAY\",20)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",21)':{tag:'(0029,\"SIEMENS MED DISPLAY\",21)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",50)':{tag:'(0029,\"SIEMENS MED DISPLAY\",50)',vr:\"US\",name:\"OriginOfSubmatrix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",99)':{tag:'(0029,\"SIEMENS MED DISPLAY\",99)',vr:\"LT\",name:\"ShutterType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",a0)':{tag:'(0029,\"SIEMENS MED DISPLAY\",a0)',vr:\"US\",name:\"RowsOfRectangularShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",a1)':{tag:'(0029,\"SIEMENS MED DISPLAY\",a1)',vr:\"US\",name:\"ColumnsOfRectangularShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",a2)':{tag:'(0029,\"SIEMENS MED DISPLAY\",a2)',vr:\"US\",name:\"OriginOfRectangularShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",b0)':{tag:'(0029,\"SIEMENS MED DISPLAY\",b0)',vr:\"US\",name:\"RadiusOfCircularShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",b2)':{tag:'(0029,\"SIEMENS MED DISPLAY\",b2)',vr:\"US\",name:\"OriginOfCircularShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED DISPLAY\",c1)':{tag:'(0029,\"SIEMENS MED DISPLAY\",c1)',vr:\"US\",name:\"ContourOfIrregularShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",10)':{tag:'(0029,\"SIEMENS MED HG\",10)',vr:\"US\",name:\"ListOfGroupNumbers\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",15)':{tag:'(0029,\"SIEMENS MED HG\",15)',vr:\"LT\",name:\"ListOfShadowOwnerCodes\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",20)':{tag:'(0029,\"SIEMENS MED HG\",20)',vr:\"US\",name:\"ListOfElementNumbers\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",30)':{tag:'(0029,\"SIEMENS MED HG\",30)',vr:\"US\",name:\"ListOfTotalDisplayLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",40)':{tag:'(0029,\"SIEMENS MED HG\",40)',vr:\"LT\",name:\"ListOfDisplayPrefix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",50)':{tag:'(0029,\"SIEMENS MED HG\",50)',vr:\"LT\",name:\"ListOfDisplayPostfix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",60)':{tag:'(0029,\"SIEMENS MED HG\",60)',vr:\"US\",name:\"ListOfTextPosition\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED HG\",70)':{tag:'(0029,\"SIEMENS MED HG\",70)',vr:\"LT\",name:\"ListOfTextConcatenation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",10)':{tag:'(0029,\"SIEMENS MED MG\",10)',vr:\"US\",name:\"ListOfGroupNumbers\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",15)':{tag:'(0029,\"SIEMENS MED MG\",15)',vr:\"LT\",name:\"ListOfShadowOwnerCodes\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",20)':{tag:'(0029,\"SIEMENS MED MG\",20)',vr:\"US\",name:\"ListOfElementNumbers\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",30)':{tag:'(0029,\"SIEMENS MED MG\",30)',vr:\"US\",name:\"ListOfTotalDisplayLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",40)':{tag:'(0029,\"SIEMENS MED MG\",40)',vr:\"LT\",name:\"ListOfDisplayPrefix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",50)':{tag:'(0029,\"SIEMENS MED MG\",50)',vr:\"LT\",name:\"ListOfDisplayPostfix\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",60)':{tag:'(0029,\"SIEMENS MED MG\",60)',vr:\"US\",name:\"ListOfTextPosition\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MED MG\",70)':{tag:'(0029,\"SIEMENS MED MG\",70)',vr:\"LT\",name:\"ListOfTextConcatenation\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",10)':{tag:'(0009,\"SIEMENS MED\",10)',vr:\"LO\",name:\"RecognitionCode\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",30)':{tag:'(0009,\"SIEMENS MED\",30)',vr:\"UL\",name:\"ByteOffsetOfOriginalHeader\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",31)':{tag:'(0009,\"SIEMENS MED\",31)',vr:\"UL\",name:\"LengthOfOriginalHeader\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",40)':{tag:'(0009,\"SIEMENS MED\",40)',vr:\"UL\",name:\"ByteOffsetOfPixelmatrix\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",41)':{tag:'(0009,\"SIEMENS MED\",41)',vr:\"UL\",name:\"LengthOfPixelmatrixInBytes\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",50)':{tag:'(0009,\"SIEMENS MED\",50)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",51)':{tag:'(0009,\"SIEMENS MED\",51)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",f5)':{tag:'(0009,\"SIEMENS MED\",f5)',vr:\"LT\",name:\"PDMEFIDPlaceholder\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIEMENS MED\",f6)':{tag:'(0009,\"SIEMENS MED\",f6)',vr:\"LT\",name:\"PDMDataObjectTypeExtension\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MED\",10)':{tag:'(0021,\"SIEMENS MED\",10)',vr:\"DS\",name:\"Zoom\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MED\",11)':{tag:'(0021,\"SIEMENS MED\",11)',vr:\"DS\",name:\"Target\",vm:\"2\",version:\"PrivateTag\"},'(0021,\"SIEMENS MED\",12)':{tag:'(0021,\"SIEMENS MED\",12)',vr:\"IS\",name:\"TubeAngle\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MED\",20)':{tag:'(0021,\"SIEMENS MED\",20)',vr:\"US\",name:\"ROIMask\",vm:\"1\",version:\"PrivateTag\"},'(7001,\"SIEMENS MED\",10)':{tag:'(7001,\"SIEMENS MED\",10)',vr:\"LT\",name:\"Dummy\",vm:\"1\",version:\"PrivateTag\"},'(7003,\"SIEMENS MED\",10)':{tag:'(7003,\"SIEMENS MED\",10)',vr:\"LT\",name:\"Header\",vm:\"1\",version:\"PrivateTag\"},'(7005,\"SIEMENS MED\",10)':{tag:'(7005,\"SIEMENS MED\",10)',vr:\"LT\",name:\"Dummy\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",08)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",08)',vr:\"CS\",name:\"MedComHeaderType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",09)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",09)',vr:\"LO\",name:\"MedComHeaderVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",10)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",10)',vr:\"OB\",name:\"MedComHeaderInfo\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",20)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",20)',vr:\"OB\",name:\"MedComHistoryInformation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",31)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",31)',vr:\"LO\",name:\"PMTFInformation1\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",32)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",32)',vr:\"UL\",name:\"PMTFInformation2\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",33)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",33)',vr:\"UL\",name:\"PMTFInformation3\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",34)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",34)',vr:\"CS\",name:\"PMTFInformation4\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",35)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",35)',vr:\"UL\",name:\"PMTFInformation5\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",40)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",40)',vr:\"SQ\",name:\"ApplicationHeaderSequence\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",41)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",41)',vr:\"CS\",name:\"ApplicationHeaderType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",42)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",42)',vr:\"LO\",name:\"ApplicationHeaderID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",43)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",43)',vr:\"LO\",name:\"ApplicationHeaderVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",44)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",44)',vr:\"OB\",name:\"ApplicationHeaderInfo\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",50)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",50)',vr:\"LO\",name:\"WorkflowControlFlags\",vm:\"8\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",51)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",51)',vr:\"CS\",name:\"ArchiveManagementFlagKeepOnline\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",52)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",52)',vr:\"CS\",name:\"ArchiveManagementFlagDoNotArchive\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",53)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",53)',vr:\"CS\",name:\"ImageLocationStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",54)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",54)',vr:\"DS\",name:\"EstimatedRetrieveTime\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",55)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",55)',vr:\"DS\",name:\"DataSizeOfRetrievedImages\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",70)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",70)',vr:\"SQ\",name:\"SiemensLinkSequence\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",71)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",71)',vr:\"AT\",name:\"ReferencedTag\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",72)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",72)',vr:\"CS\",name:\"ReferencedTagType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",73)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",73)',vr:\"UL\",name:\"ReferencedValueLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",74)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",74)',vr:\"CS\",name:\"ReferencedObjectDeviceType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",75)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",75)',vr:\"OB\",name:\"ReferencedObjectDeviceLocation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER\",76)':{tag:'(0029,\"SIEMENS MEDCOM HEADER\",76)',vr:\"OB\",name:\"ReferencedObjectDeviceID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM HEADER2\",60)':{tag:'(0029,\"SIEMENS MEDCOM HEADER2\",60)',vr:\"LO\",name:\"SeriesWorkflowStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM OOG\",08)':{tag:'(0029,\"SIEMENS MEDCOM OOG\",08)',vr:\"CS\",name:\"MEDCOMOOGType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM OOG\",09)':{tag:'(0029,\"SIEMENS MEDCOM OOG\",09)',vr:\"LO\",name:\"MEDCOMOOGVersion\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SIEMENS MEDCOM OOG\",10)':{tag:'(0029,\"SIEMENS MEDCOM OOG\",10)',vr:\"OB\",name:\"MEDCOMOOGInfo\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",12)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",12)',vr:\"DS\",name:\"MagneticFieldStrength\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",14)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",14)',vr:\"DS\",name:\"ADCVoltage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",16)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",16)',vr:\"DS\",name:\"ADCOffset\",vm:\"2\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",20)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",20)',vr:\"DS\",name:\"TransmitterAmplitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",21)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",21)',vr:\"IS\",name:\"NumberOfTransmitterAmplitudes\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",22)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",22)',vr:\"DS\",name:\"TransmitterAttenuator\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",24)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",24)',vr:\"DS\",name:\"TransmitterCalibration\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",26)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",26)',vr:\"DS\",name:\"TransmitterReference\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",50)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",50)',vr:\"DS\",name:\"ReceiverTotalGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",51)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",51)',vr:\"DS\",name:\"ReceiverAmplifierGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",52)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",52)',vr:\"DS\",name:\"ReceiverPreamplifierGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",54)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",54)',vr:\"DS\",name:\"ReceiverCableAttenuation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",55)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",55)',vr:\"DS\",name:\"ReceiverReferenceGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",56)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",56)',vr:\"DS\",name:\"ReceiverFilterFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",60)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",60)',vr:\"DS\",name:\"ReconstructionScaleFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",62)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",62)',vr:\"DS\",name:\"ReferenceScaleFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",70)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",70)',vr:\"DS\",name:\"PhaseGradientAmplitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",71)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",71)',vr:\"DS\",name:\"ReadoutGradientAmplitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",72)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",72)',vr:\"DS\",name:\"SelectionGradientAmplitude\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",80)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",80)',vr:\"DS\",name:\"GradientDelayTime\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",82)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",82)',vr:\"DS\",name:\"TotalGradientDelayTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",90)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",90)',vr:\"LT\",name:\"SensitivityCorrectionLabel\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",91)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",91)',vr:\"DS\",name:\"SaturationPhaseEncodingVectorCoronalComponent\",vm:\"6\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",92)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",92)',vr:\"DS\",name:\"SaturationReadoutVectorCoronalComponent\",vm:\"6\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",a0)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",a0)',vr:\"US\",name:\"RFWatchdogMask\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",a1)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",a1)',vr:\"DS\",name:\"EPIReconstructionSlope\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",a2)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",a2)',vr:\"DS\",name:\"RFPowerErrorIndicator\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",a5)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",a5)',vr:\"DS\",name:\"SpecificAbsorptionRateWholeBody\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",a6)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",a6)',vr:\"DS\",name:\"SpecificEnergyDose\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",b0)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",b0)',vr:\"UL\",name:\"AdjustmentStatusMask\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",c1)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",c1)',vr:\"DS\",name:\"EPICapacity\",vm:\"6\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",c2)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",c2)',vr:\"DS\",name:\"EPIInductance\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",c3)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",c3)',vr:\"IS\",name:\"EPISwitchConfigurationCode\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",c4)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",c4)',vr:\"IS\",name:\"EPISwitchHardwareCode\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",c5)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",c5)',vr:\"DS\",name:\"EPISwitchDelayTime\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d1)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d1)',vr:\"DS\",name:\"FlowSensitivity\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d2)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d2)',vr:\"LT\",name:\"CalculationSubmode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d3)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d3)',vr:\"DS\",name:\"FieldOfViewRatio\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d4)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d4)',vr:\"IS\",name:\"BaseRawMatrixSize\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d5)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d5)',vr:\"IS\",name:\"2DOversamplingLines\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d6)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d6)',vr:\"IS\",name:\"3DPhaseOversamplingPartitions\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d7)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d7)',vr:\"IS\",name:\"EchoLinePosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d8)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d8)',vr:\"IS\",name:\"EchoColumnPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",d9)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",d9)',vr:\"IS\",name:\"LinesPerSegment\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  COAD\",da)':{tag:'(0019,\"SIEMENS MR VA0  COAD\",da)',vr:\"LT\",name:\"PhaseCodingDirection\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",10)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",10)',vr:\"DS\",name:\"TotalMeasurementTimeNominal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",11)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",11)',vr:\"DS\",name:\"TotalMeasurementTimeCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",12)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",12)',vr:\"DS\",name:\"StartDelayTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",13)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",13)',vr:\"DS\",name:\"DwellTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",14)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",14)',vr:\"IS\",name:\"NumberOfPhases\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",16)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",16)',vr:\"UL\",name:\"SequenceControlMask\",vm:\"2\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",18)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",18)',vr:\"UL\",name:\"MeasurementStatusMask\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",20)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",20)',vr:\"IS\",name:\"NumberOfFourierLinesNominal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",21)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",21)',vr:\"IS\",name:\"NumberOfFourierLinesCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",26)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",26)',vr:\"IS\",name:\"NumberOfFourierLinesAfterZero\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",28)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",28)',vr:\"IS\",name:\"FirstMeasuredFourierLine\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",30)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",30)',vr:\"IS\",name:\"AcquisitionColumns\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",31)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",31)',vr:\"IS\",name:\"ReconstructionColumns\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",40)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",40)',vr:\"IS\",name:\"ArrayCoilElementNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",41)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",41)',vr:\"UL\",name:\"ArrayCoilElementSelectMask\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",42)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",42)',vr:\"UL\",name:\"ArrayCoilElementDataMask\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",43)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",43)',vr:\"IS\",name:\"ArrayCoilElementToADCConnect\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",44)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",44)',vr:\"DS\",name:\"ArrayCoilElementNoiseLevel\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",45)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",45)',vr:\"IS\",name:\"ArrayCoilADCPairNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",46)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",46)',vr:\"UL\",name:\"ArrayCoilCombinationMask\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",50)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",50)',vr:\"IS\",name:\"NumberOfAverages\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",60)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",60)',vr:\"DS\",name:\"FlipAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",70)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",70)',vr:\"IS\",name:\"NumberOfPrescans\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",81)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",81)',vr:\"LT\",name:\"FilterTypeForRawData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",82)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",82)',vr:\"DS\",name:\"FilterParameterForRawData\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",83)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",83)',vr:\"LT\",name:\"FilterTypeForImageData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",84)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",84)',vr:\"DS\",name:\"FilterParameterForImageData\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",85)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",85)',vr:\"LT\",name:\"FilterTypeForPhaseCorrection\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",86)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",86)',vr:\"DS\",name:\"FilterParameterForPhaseCorrection\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",87)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",87)',vr:\"LT\",name:\"NormalizationFilterTypeForImageData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",88)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",88)',vr:\"DS\",name:\"NormalizationFilterParameterForImageData\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",90)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",90)',vr:\"IS\",name:\"NumberOfSaturationRegions\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",91)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",91)',vr:\"DS\",name:\"SaturationPhaseEncodingVectorSagittalComponent\",vm:\"6\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",92)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",92)',vr:\"DS\",name:\"SaturationReadoutVectorSagittalComponent\",vm:\"6\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",93)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",93)',vr:\"DS\",name:\"EPIStimulationMonitorMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",94)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",94)',vr:\"DS\",name:\"ImageRotationAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",96)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",96)',vr:\"UL\",name:\"CoilIDMask\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",97)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",97)',vr:\"UL\",name:\"CoilClassMask\",vm:\"2\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",98)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",98)',vr:\"DS\",name:\"CoilPosition\",vm:\"3\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",a0)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",a0)',vr:\"DS\",name:\"EPIReconstructionPhase\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS MR VA0  GEN\",a1)':{tag:'(0019,\"SIEMENS MR VA0  GEN\",a1)',vr:\"DS\",name:\"EPIReconstructionSlope\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",20)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",20)',vr:\"IS\",name:\"PhaseCorrectionRowsSequence\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",21)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",21)',vr:\"IS\",name:\"PhaseCorrectionColumnsSequence\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",22)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",22)',vr:\"IS\",name:\"PhaseCorrectionRowsReconstruction\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",24)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",24)',vr:\"IS\",name:\"PhaseCorrectionColumnsReconstruction\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",30)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",30)',vr:\"IS\",name:\"NumberOf3DRawPartitionsNominal\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",31)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",31)',vr:\"IS\",name:\"NumberOf3DRawPartitionsCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",34)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",34)',vr:\"IS\",name:\"NumberOf3DImagePartitions\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",36)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",36)',vr:\"IS\",name:\"Actual3DImagePartitionNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",39)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",39)',vr:\"DS\",name:\"SlabThickness\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",40)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",40)',vr:\"IS\",name:\"NumberOfSlicesNominal\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",41)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",41)',vr:\"IS\",name:\"NumberOfSlicesCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",42)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",42)',vr:\"IS\",name:\"CurrentSliceNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",43)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",43)',vr:\"IS\",name:\"CurrentGroupNumber\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",44)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",44)',vr:\"DS\",name:\"CurrentSliceDistanceFactor\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",45)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",45)',vr:\"IS\",name:\"MIPStartRow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",46)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",46)',vr:\"IS\",name:\"MIPStopRow\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",47)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",47)',vr:\"IS\",name:\"MIPStartColumn\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",48)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",48)',vr:\"IS\",name:\"MIPStartColumn\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",49)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",49)',vr:\"IS\",name:\"MIPStartSlice Name=\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",4a)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",4a)',vr:\"IS\",name:\"MIPStartSlice\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",4f)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",4f)',vr:\"LT\",name:\"OrderofSlices\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",50)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",50)',vr:\"US\",name:\"SignalMask\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",52)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",52)',vr:\"DS\",name:\"DelayAfterTrigger\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",53)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",53)',vr:\"IS\",name:\"RRInterval\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",54)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",54)',vr:\"DS\",name:\"NumberOfTriggerPulses\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",56)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",56)',vr:\"DS\",name:\"RepetitionTimeEffective\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",57)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",57)',vr:\"LT\",name:\"GatePhase\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",58)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",58)',vr:\"DS\",name:\"GateThreshold\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",59)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",59)',vr:\"DS\",name:\"GatedRatio\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",60)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",60)',vr:\"IS\",name:\"NumberOfInterpolatedImages\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",70)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",70)',vr:\"IS\",name:\"NumberOfEchoes\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",72)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",72)',vr:\"DS\",name:\"SecondEchoTime\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",73)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",73)',vr:\"DS\",name:\"SecondRepetitionTime\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",80)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",80)',vr:\"IS\",name:\"CardiacCode\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",91)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",91)',vr:\"DS\",name:\"SaturationPhaseEncodingVectorTransverseComponent\",vm:\"6\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",92)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",92)',vr:\"DS\",name:\"SaturationReadoutVectorTransverseComponent\",vm:\"6\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",93)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",93)',vr:\"DS\",name:\"EPIChangeValueOfMagnitude\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",94)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",94)',vr:\"DS\",name:\"EPIChangeValueOfXComponent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",95)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",95)',vr:\"DS\",name:\"EPIChangeValueOfYComponent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  GEN\",96)':{tag:'(0021,\"SIEMENS MR VA0  GEN\",96)',vr:\"DS\",name:\"EPIChangeValueOfZComponent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",00)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",00)',vr:\"LT\",name:\"SequenceType\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",01)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",01)',vr:\"IS\",name:\"VectorSizeOriginal\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",02)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",02)',vr:\"IS\",name:\"VectorSizeExtended\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",03)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",03)',vr:\"DS\",name:\"AcquiredSpectralRange\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",04)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",04)',vr:\"DS\",name:\"VOIPosition\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",05)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",05)',vr:\"DS\",name:\"VOISize\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",06)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",06)',vr:\"IS\",name:\"CSIMatrixSizeOriginal\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",07)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",07)',vr:\"IS\",name:\"CSIMatrixSizeExtended\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",08)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",08)',vr:\"DS\",name:\"SpatialGridShift\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",09)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",09)',vr:\"DS\",name:\"SignalLimitsMinimum\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",10)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",10)',vr:\"DS\",name:\"SignalLimitsMaximum\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",11)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",11)',vr:\"DS\",name:\"SpecInfoMask\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",12)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",12)',vr:\"DS\",name:\"EPITimeRateOfChangeOfMagnitude\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",13)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",13)',vr:\"DS\",name:\"EPITimeRateOfChangeOfXComponent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",14)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",14)',vr:\"DS\",name:\"EPITimeRateOfChangeOfYComponent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",15)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",15)',vr:\"DS\",name:\"EPITimeRateOfChangeOfZComponent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",16)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",16)',vr:\"DS\",name:\"EPITimeRateOfChangeLegalLimit1\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",17)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",17)',vr:\"DS\",name:\"EPIOperationModeFlag\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",18)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",18)',vr:\"DS\",name:\"EPIFieldCalculationSafetyFactor\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",19)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",19)',vr:\"DS\",name:\"EPILegalLimit1OfChangeValue\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",20)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",20)',vr:\"DS\",name:\"EPILegalLimit2OfChangeValue\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",21)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",21)',vr:\"DS\",name:\"EPIRiseTime\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",30)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",30)',vr:\"DS\",name:\"ArrayCoilADCOffset\",vm:\"16\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",31)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",31)',vr:\"DS\",name:\"ArrayCoilPreamplifierGain\",vm:\"16\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",50)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",50)',vr:\"LT\",name:\"SaturationType\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",51)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",51)',vr:\"DS\",name:\"SaturationNormalVector\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",52)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",52)',vr:\"DS\",name:\"SaturationPositionVector\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",53)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",53)',vr:\"DS\",name:\"SaturationThickness\",vm:\"6\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",54)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",54)',vr:\"DS\",name:\"SaturationWidth\",vm:\"6\",version:\"PrivateTag\"},'(0021,\"SIEMENS MR VA0  RAW\",55)':{tag:'(0021,\"SIEMENS MR VA0  RAW\",55)',vr:\"DS\",name:\"SaturationDistance\",vm:\"6\",version:\"PrivateTag\"},'(7fe3,\"SIEMENS NUMARIS II\",00)':{tag:'(7fe3,\"SIEMENS NUMARIS II\",00)',vr:\"LT\",name:\"ImageGraphicsFormatCode\",vm:\"1\",version:\"PrivateTag\"},'(7fe3,\"SIEMENS NUMARIS II\",10)':{tag:'(7fe3,\"SIEMENS NUMARIS II\",10)',vr:\"OB\",name:\"ImageGraphics\",vm:\"1\",version:\"PrivateTag\"},'(7fe3,\"SIEMENS NUMARIS II\",20)':{tag:'(7fe3,\"SIEMENS NUMARIS II\",20)',vr:\"OB\",name:\"ImageGraphicsDummy\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA GEN\",20)':{tag:'(0011,\"SIEMENS RA GEN\",20)',vr:\"SL\",name:\"FluoroTimer\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA GEN\",25)':{tag:'(0011,\"SIEMENS RA GEN\",25)',vr:\"SL\",name:\"PtopDoseAreaProduct\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA GEN\",26)':{tag:'(0011,\"SIEMENS RA GEN\",26)',vr:\"SL\",name:\"PtopTotalSkinDose\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA GEN\",30)':{tag:'(0011,\"SIEMENS RA GEN\",30)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA GEN\",35)':{tag:'(0011,\"SIEMENS RA GEN\",35)',vr:\"LO\",name:\"PatientInitialPuckCounter\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA GEN\",40)':{tag:'(0011,\"SIEMENS RA GEN\",40)',vr:\"SS\",name:\"SPIDataObjectType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",15)':{tag:'(0019,\"SIEMENS RA GEN\",15)',vr:\"LO\",name:\"AcquiredPlane\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",1f)':{tag:'(0019,\"SIEMENS RA GEN\",1f)',vr:\"SS\",name:\"DefaultTableIsoCenterHeight\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",20)':{tag:'(0019,\"SIEMENS RA GEN\",20)',vr:\"SL\",name:\"SceneFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",22)':{tag:'(0019,\"SIEMENS RA GEN\",22)',vr:\"SL\",name:\"RefPhotofileFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",24)':{tag:'(0019,\"SIEMENS RA GEN\",24)',vr:\"LO\",name:\"SceneName\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",26)':{tag:'(0019,\"SIEMENS RA GEN\",26)',vr:\"SS\",name:\"AcquisitionIndex\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",28)':{tag:'(0019,\"SIEMENS RA GEN\",28)',vr:\"SS\",name:\"MixedPulseMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",2a)':{tag:'(0019,\"SIEMENS RA GEN\",2a)',vr:\"SS\",name:\"NoOfPositions\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",2c)':{tag:'(0019,\"SIEMENS RA GEN\",2c)',vr:\"SS\",name:\"NoOfPhases\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",2e)':{tag:'(0019,\"SIEMENS RA GEN\",2e)',vr:\"SS\",name:\"FrameRateForPositions\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",30)':{tag:'(0019,\"SIEMENS RA GEN\",30)',vr:\"SS\",name:\"NoOfFramesForPositions\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",32)':{tag:'(0019,\"SIEMENS RA GEN\",32)',vr:\"SS\",name:\"SteppingDirection\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",34)':{tag:'(0019,\"SIEMENS RA GEN\",34)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",36)':{tag:'(0019,\"SIEMENS RA GEN\",36)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",38)':{tag:'(0019,\"SIEMENS RA GEN\",38)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",3a)':{tag:'(0019,\"SIEMENS RA GEN\",3a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",3c)':{tag:'(0019,\"SIEMENS RA GEN\",3c)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",3e)':{tag:'(0019,\"SIEMENS RA GEN\",3e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",40)':{tag:'(0019,\"SIEMENS RA GEN\",40)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",42)':{tag:'(0019,\"SIEMENS RA GEN\",42)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",44)':{tag:'(0019,\"SIEMENS RA GEN\",44)',vr:\"SS\",name:\"ImageTransferDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",46)':{tag:'(0019,\"SIEMENS RA GEN\",46)',vr:\"SL\",name:\"InversFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",48)':{tag:'(0019,\"SIEMENS RA GEN\",48)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",4a)':{tag:'(0019,\"SIEMENS RA GEN\",4a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",4c)':{tag:'(0019,\"SIEMENS RA GEN\",4c)',vr:\"SS\",name:\"BlankingCircleDiameter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",50)':{tag:'(0019,\"SIEMENS RA GEN\",50)',vr:\"SL\",name:\"StandDataValid\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",52)':{tag:'(0019,\"SIEMENS RA GEN\",52)',vr:\"SS\",name:\"TableTilt\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",54)':{tag:'(0019,\"SIEMENS RA GEN\",54)',vr:\"SS\",name:\"TableAxisRotation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",56)':{tag:'(0019,\"SIEMENS RA GEN\",56)',vr:\"SS\",name:\"TableLongitudalPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",58)':{tag:'(0019,\"SIEMENS RA GEN\",58)',vr:\"SS\",name:\"TableSideOffset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",5a)':{tag:'(0019,\"SIEMENS RA GEN\",5a)',vr:\"SS\",name:\"TableIsoCenterHeight\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",5c)':{tag:'(0019,\"SIEMENS RA GEN\",5c)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",5e)':{tag:'(0019,\"SIEMENS RA GEN\",5e)',vr:\"SL\",name:\"CollimationDataValid\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",60)':{tag:'(0019,\"SIEMENS RA GEN\",60)',vr:\"SL\",name:\"PeriSequenceNo\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",62)':{tag:'(0019,\"SIEMENS RA GEN\",62)',vr:\"SL\",name:\"PeriTotalScenes\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",64)':{tag:'(0019,\"SIEMENS RA GEN\",64)',vr:\"SL\",name:\"PeriOverlapTop\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",66)':{tag:'(0019,\"SIEMENS RA GEN\",66)',vr:\"SL\",name:\"PeriOverlapBottom\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",68)':{tag:'(0019,\"SIEMENS RA GEN\",68)',vr:\"SL\",name:\"RawImageNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",6a)':{tag:'(0019,\"SIEMENS RA GEN\",6a)',vr:\"SL\",name:\"XRayDataValid\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",70)':{tag:'(0019,\"SIEMENS RA GEN\",70)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",72)':{tag:'(0019,\"SIEMENS RA GEN\",72)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",74)':{tag:'(0019,\"SIEMENS RA GEN\",74)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",76)':{tag:'(0019,\"SIEMENS RA GEN\",76)',vr:\"SL\",name:\"FillingAverageFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",78)':{tag:'(0019,\"SIEMENS RA GEN\",78)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",7a)':{tag:'(0019,\"SIEMENS RA GEN\",7a)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",7c)':{tag:'(0019,\"SIEMENS RA GEN\",7c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",7e)':{tag:'(0019,\"SIEMENS RA GEN\",7e)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",80)':{tag:'(0019,\"SIEMENS RA GEN\",80)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",82)':{tag:'(0019,\"SIEMENS RA GEN\",82)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",84)':{tag:'(0019,\"SIEMENS RA GEN\",84)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",86)':{tag:'(0019,\"SIEMENS RA GEN\",86)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",88)':{tag:'(0019,\"SIEMENS RA GEN\",88)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",8a)':{tag:'(0019,\"SIEMENS RA GEN\",8a)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",8c)':{tag:'(0019,\"SIEMENS RA GEN\",8c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",8e)':{tag:'(0019,\"SIEMENS RA GEN\",8e)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",92)':{tag:'(0019,\"SIEMENS RA GEN\",92)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",94)':{tag:'(0019,\"SIEMENS RA GEN\",94)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",96)':{tag:'(0019,\"SIEMENS RA GEN\",96)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",98)':{tag:'(0019,\"SIEMENS RA GEN\",98)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",9a)':{tag:'(0019,\"SIEMENS RA GEN\",9a)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",9c)':{tag:'(0019,\"SIEMENS RA GEN\",9c)',vr:\"SL\",name:\"IntensifierLevelCalibrationFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",9e)':{tag:'(0019,\"SIEMENS RA GEN\",9e)',vr:\"SL\",name:\"NativeReviewFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a2)':{tag:'(0019,\"SIEMENS RA GEN\",a2)',vr:\"SL\",name:\"SceneNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a4)':{tag:'(0019,\"SIEMENS RA GEN\",a4)',vr:\"SS\",name:\"AcquisitionMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a5)':{tag:'(0019,\"SIEMENS RA GEN\",a5)',vr:\"SS\",name:\"AcquisitonFrameRate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a6)':{tag:'(0019,\"SIEMENS RA GEN\",a6)',vr:\"SL\",name:\"ECGFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a7)':{tag:'(0019,\"SIEMENS RA GEN\",a7)',vr:\"SL\",name:\"AdditionalSceneData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a8)':{tag:'(0019,\"SIEMENS RA GEN\",a8)',vr:\"SL\",name:\"FileCopyFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",a9)':{tag:'(0019,\"SIEMENS RA GEN\",a9)',vr:\"SL\",name:\"PhlebovisionFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",aa)':{tag:'(0019,\"SIEMENS RA GEN\",aa)',vr:\"SL\",name:\"Co2Flag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",ab)':{tag:'(0019,\"SIEMENS RA GEN\",ab)',vr:\"SS\",name:\"MaxSpeed\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",ac)':{tag:'(0019,\"SIEMENS RA GEN\",ac)',vr:\"SS\",name:\"StepWidth\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",ad)':{tag:'(0019,\"SIEMENS RA GEN\",ad)',vr:\"SL\",name:\"DigitalAcquisitionZoom\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA GEN\",ff)':{tag:'(0019,\"SIEMENS RA GEN\",ff)',vr:\"SS\",name:\"Internal\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",15)':{tag:'(0021,\"SIEMENS RA GEN\",15)',vr:\"SS\",name:\"ImagesInStudy\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",20)':{tag:'(0021,\"SIEMENS RA GEN\",20)',vr:\"SS\",name:\"ScenesInStudy\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",25)':{tag:'(0021,\"SIEMENS RA GEN\",25)',vr:\"SS\",name:\"ImagesInPhotofile\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",27)':{tag:'(0021,\"SIEMENS RA GEN\",27)',vr:\"SS\",name:\"PlaneBImagesExist\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",28)':{tag:'(0021,\"SIEMENS RA GEN\",28)',vr:\"SS\",name:\"NoOf2MBChunks\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",30)':{tag:'(0021,\"SIEMENS RA GEN\",30)',vr:\"SS\",name:\"ImagesInAllScenes\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS RA GEN\",40)':{tag:'(0021,\"SIEMENS RA GEN\",40)',vr:\"SS\",name:\"ArchiveSWInternalVersion\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE A\",28)':{tag:'(0011,\"SIEMENS RA PLANE A\",28)',vr:\"SL\",name:\"FluoroTimerA\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE A\",29)':{tag:'(0011,\"SIEMENS RA PLANE A\",29)',vr:\"SL\",name:\"FluoroSkinDoseA\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE A\",2a)':{tag:'(0011,\"SIEMENS RA PLANE A\",2a)',vr:\"SL\",name:\"TotalSkinDoseA\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE A\",2b)':{tag:'(0011,\"SIEMENS RA PLANE A\",2b)',vr:\"SL\",name:\"FluoroDoseAreaProductA\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE A\",2c)':{tag:'(0011,\"SIEMENS RA PLANE A\",2c)',vr:\"SL\",name:\"TotalDoseAreaProductA\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",15)':{tag:'(0019,\"SIEMENS RA PLANE A\",15)',vr:\"LT\",name:\"OfflineUID\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",18)':{tag:'(0019,\"SIEMENS RA PLANE A\",18)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",19)':{tag:'(0019,\"SIEMENS RA PLANE A\",19)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",1a)':{tag:'(0019,\"SIEMENS RA PLANE A\",1a)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",1b)':{tag:'(0019,\"SIEMENS RA PLANE A\",1b)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",1c)':{tag:'(0019,\"SIEMENS RA PLANE A\",1c)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",1d)':{tag:'(0019,\"SIEMENS RA PLANE A\",1d)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",1e)':{tag:'(0019,\"SIEMENS RA PLANE A\",1e)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",1f)':{tag:'(0019,\"SIEMENS RA PLANE A\",1f)',vr:\"SS\",name:\"Internal\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",20)':{tag:'(0019,\"SIEMENS RA PLANE A\",20)',vr:\"SS\",name:\"SystemCalibFactorPlaneA\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",22)':{tag:'(0019,\"SIEMENS RA PLANE A\",22)',vr:\"SS\",name:\"XRayParameterSetNo\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",24)':{tag:'(0019,\"SIEMENS RA PLANE A\",24)',vr:\"SS\",name:\"XRaySystem\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",26)':{tag:'(0019,\"SIEMENS RA PLANE A\",26)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",28)':{tag:'(0019,\"SIEMENS RA PLANE A\",28)',vr:\"SS\",name:\"AcquiredDisplayMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",2a)':{tag:'(0019,\"SIEMENS RA PLANE A\",2a)',vr:\"SS\",name:\"AcquisitionDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",2c)':{tag:'(0019,\"SIEMENS RA PLANE A\",2c)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",2e)':{tag:'(0019,\"SIEMENS RA PLANE A\",2e)',vr:\"SS\",name:\"MaxFramesLimit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",30)':{tag:'(0019,\"SIEMENS RA PLANE A\",30)',vr:\"US\",name:\"MaximumFrameSizeNIU\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",32)':{tag:'(0019,\"SIEMENS RA PLANE A\",32)',vr:\"SS\",name:\"SubtractedFilterType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",34)':{tag:'(0019,\"SIEMENS RA PLANE A\",34)',vr:\"SS\",name:\"FilterFactorNative\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",36)':{tag:'(0019,\"SIEMENS RA PLANE A\",36)',vr:\"SS\",name:\"AnatomicBackgroundFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",38)':{tag:'(0019,\"SIEMENS RA PLANE A\",38)',vr:\"SS\",name:\"WindowUpperLimitNative\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",3a)':{tag:'(0019,\"SIEMENS RA PLANE A\",3a)',vr:\"SS\",name:\"WindowLowerLimitNative\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",3c)':{tag:'(0019,\"SIEMENS RA PLANE A\",3c)',vr:\"SS\",name:\"WindowBrightnessPhase1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",3e)':{tag:'(0019,\"SIEMENS RA PLANE A\",3e)',vr:\"SS\",name:\"WindowBrightnessPhase2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",40)':{tag:'(0019,\"SIEMENS RA PLANE A\",40)',vr:\"SS\",name:\"WindowContrastPhase1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",42)':{tag:'(0019,\"SIEMENS RA PLANE A\",42)',vr:\"SS\",name:\"WindowContrastPhase2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",44)':{tag:'(0019,\"SIEMENS RA PLANE A\",44)',vr:\"SS\",name:\"FilterFactorSub\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",46)':{tag:'(0019,\"SIEMENS RA PLANE A\",46)',vr:\"SS\",name:\"PeakOpacified\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",48)':{tag:'(0019,\"SIEMENS RA PLANE A\",48)',vr:\"SL\",name:\"MaskFrame\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",4a)':{tag:'(0019,\"SIEMENS RA PLANE A\",4a)',vr:\"SL\",name:\"BIHFrame\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",4c)':{tag:'(0019,\"SIEMENS RA PLANE A\",4c)',vr:\"SS\",name:\"CentBeamAngulationCaudCran\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",4e)':{tag:'(0019,\"SIEMENS RA PLANE A\",4e)',vr:\"SS\",name:\"CentBeamAngulationLRAnterior\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",50)':{tag:'(0019,\"SIEMENS RA PLANE A\",50)',vr:\"SS\",name:\"LongitudinalPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",52)':{tag:'(0019,\"SIEMENS RA PLANE A\",52)',vr:\"SS\",name:\"SideOffset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",54)':{tag:'(0019,\"SIEMENS RA PLANE A\",54)',vr:\"SS\",name:\"IsoCenterHeight\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",56)':{tag:'(0019,\"SIEMENS RA PLANE A\",56)',vr:\"SS\",name:\"ImageTwist\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",58)':{tag:'(0019,\"SIEMENS RA PLANE A\",58)',vr:\"SS\",name:\"SourceImageDistance\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",5a)':{tag:'(0019,\"SIEMENS RA PLANE A\",5a)',vr:\"SS\",name:\"MechanicalMagnificationFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",5c)':{tag:'(0019,\"SIEMENS RA PLANE A\",5c)',vr:\"SL\",name:\"CalibrationFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",5e)':{tag:'(0019,\"SIEMENS RA PLANE A\",5e)',vr:\"SL\",name:\"CalibrationAngleCranCaud\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",60)':{tag:'(0019,\"SIEMENS RA PLANE A\",60)',vr:\"SL\",name:\"CalibrationAngleRAOLAO\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",62)':{tag:'(0019,\"SIEMENS RA PLANE A\",62)',vr:\"SL\",name:\"CalibrationTableToFloorDist\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",64)':{tag:'(0019,\"SIEMENS RA PLANE A\",64)',vr:\"SL\",name:\"CalibrationIsocenterToFloorDist\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",66)':{tag:'(0019,\"SIEMENS RA PLANE A\",66)',vr:\"SL\",name:\"CalibrationIsocenterToSourceDist\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",68)':{tag:'(0019,\"SIEMENS RA PLANE A\",68)',vr:\"SL\",name:\"CalibrationSourceToII\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",6a)':{tag:'(0019,\"SIEMENS RA PLANE A\",6a)',vr:\"SL\",name:\"CalibrationIIZoom\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",6c)':{tag:'(0019,\"SIEMENS RA PLANE A\",6c)',vr:\"SL\",name:\"CalibrationIIField\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",6e)':{tag:'(0019,\"SIEMENS RA PLANE A\",6e)',vr:\"SL\",name:\"CalibrationFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",70)':{tag:'(0019,\"SIEMENS RA PLANE A\",70)',vr:\"SL\",name:\"CalibrationObjectToImageDistance\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",72)':{tag:'(0019,\"SIEMENS RA PLANE A\",72)',vr:\"SL\",name:\"CalibrationSystemFactor\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",74)':{tag:'(0019,\"SIEMENS RA PLANE A\",74)',vr:\"SL\",name:\"CalibrationSystemCorrection\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",76)':{tag:'(0019,\"SIEMENS RA PLANE A\",76)',vr:\"SL\",name:\"CalibrationSystemIIFormats\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",78)':{tag:'(0019,\"SIEMENS RA PLANE A\",78)',vr:\"SL\",name:\"CalibrationGantryDataValid\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",7a)':{tag:'(0019,\"SIEMENS RA PLANE A\",7a)',vr:\"SS\",name:\"CollimatorSquareBreadth\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",7c)':{tag:'(0019,\"SIEMENS RA PLANE A\",7c)',vr:\"SS\",name:\"CollimatorSquareHeight\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",7e)':{tag:'(0019,\"SIEMENS RA PLANE A\",7e)',vr:\"SS\",name:\"CollimatorSquareDiameter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",80)':{tag:'(0019,\"SIEMENS RA PLANE A\",80)',vr:\"SS\",name:\"CollimaterFingerTurnAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",82)':{tag:'(0019,\"SIEMENS RA PLANE A\",82)',vr:\"SS\",name:\"CollimaterFingerPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",84)':{tag:'(0019,\"SIEMENS RA PLANE A\",84)',vr:\"SS\",name:\"CollimaterDiaphragmTurnAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",86)':{tag:'(0019,\"SIEMENS RA PLANE A\",86)',vr:\"SS\",name:\"CollimaterDiaphragmPosition1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",88)':{tag:'(0019,\"SIEMENS RA PLANE A\",88)',vr:\"SS\",name:\"CollimaterDiaphragmPosition2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",8a)':{tag:'(0019,\"SIEMENS RA PLANE A\",8a)',vr:\"SS\",name:\"CollimaterDiaphragmMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",8c)':{tag:'(0019,\"SIEMENS RA PLANE A\",8c)',vr:\"SS\",name:\"CollimaterBeamLimitBreadth\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",8e)':{tag:'(0019,\"SIEMENS RA PLANE A\",8e)',vr:\"SS\",name:\"CollimaterBeamLimitHeight\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",90)':{tag:'(0019,\"SIEMENS RA PLANE A\",90)',vr:\"SS\",name:\"CollimaterBeamLimitDiameter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",92)':{tag:'(0019,\"SIEMENS RA PLANE A\",92)',vr:\"SS\",name:\"X-RayControlMOde\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",94)':{tag:'(0019,\"SIEMENS RA PLANE A\",94)',vr:\"SS\",name:\"X-RaySystem\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",96)':{tag:'(0019,\"SIEMENS RA PLANE A\",96)',vr:\"SS\",name:\"FocalSpot\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",98)':{tag:'(0019,\"SIEMENS RA PLANE A\",98)',vr:\"SS\",name:\"ExposureControl\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",9a)':{tag:'(0019,\"SIEMENS RA PLANE A\",9a)',vr:\"SL\",name:\"XRayVoltage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",9c)':{tag:'(0019,\"SIEMENS RA PLANE A\",9c)',vr:\"SL\",name:\"XRayCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",9e)':{tag:'(0019,\"SIEMENS RA PLANE A\",9e)',vr:\"SL\",name:\"XRayCurrentTimeProduct\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",a0)':{tag:'(0019,\"SIEMENS RA PLANE A\",a0)',vr:\"SL\",name:\"XRayPulseTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",a2)':{tag:'(0019,\"SIEMENS RA PLANE A\",a2)',vr:\"SL\",name:\"XRaySceneTimeFluoroClock\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",a4)':{tag:'(0019,\"SIEMENS RA PLANE A\",a4)',vr:\"SS\",name:\"MaximumPulseRate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",a6)':{tag:'(0019,\"SIEMENS RA PLANE A\",a6)',vr:\"SS\",name:\"PulsesPerScene\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",a8)':{tag:'(0019,\"SIEMENS RA PLANE A\",a8)',vr:\"SL\",name:\"DoseAreaProductOfScene\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",aa)':{tag:'(0019,\"SIEMENS RA PLANE A\",aa)',vr:\"SS\",name:\"Dose\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",ac)':{tag:'(0019,\"SIEMENS RA PLANE A\",ac)',vr:\"SS\",name:\"DoseRate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",ae)':{tag:'(0019,\"SIEMENS RA PLANE A\",ae)',vr:\"SL\",name:\"IIToCoverDistance\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b0)':{tag:'(0019,\"SIEMENS RA PLANE A\",b0)',vr:\"SS\",name:\"LastFramePhase1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b1)':{tag:'(0019,\"SIEMENS RA PLANE A\",b1)',vr:\"SS\",name:\"FrameRatePhase1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b2)':{tag:'(0019,\"SIEMENS RA PLANE A\",b2)',vr:\"SS\",name:\"LastFramePhase2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b3)':{tag:'(0019,\"SIEMENS RA PLANE A\",b3)',vr:\"SS\",name:\"FrameRatePhase2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b4)':{tag:'(0019,\"SIEMENS RA PLANE A\",b4)',vr:\"SS\",name:\"LastFramePhase3\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b5)':{tag:'(0019,\"SIEMENS RA PLANE A\",b5)',vr:\"SS\",name:\"FrameRatePhase3\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b6)':{tag:'(0019,\"SIEMENS RA PLANE A\",b6)',vr:\"SS\",name:\"LastFramePhase4\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b7)':{tag:'(0019,\"SIEMENS RA PLANE A\",b7)',vr:\"SS\",name:\"FrameRatePhase4\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b8)':{tag:'(0019,\"SIEMENS RA PLANE A\",b8)',vr:\"SS\",name:\"GammaOfNativeImage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",b9)':{tag:'(0019,\"SIEMENS RA PLANE A\",b9)',vr:\"SS\",name:\"GammaOfTVSystem\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",bb)':{tag:'(0019,\"SIEMENS RA PLANE A\",bb)',vr:\"SL\",name:\"PixelshiftX\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",bc)':{tag:'(0019,\"SIEMENS RA PLANE A\",bc)',vr:\"SL\",name:\"PixelshiftY\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",bd)':{tag:'(0019,\"SIEMENS RA PLANE A\",bd)',vr:\"SL\",name:\"MaskAverageFactor\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",be)':{tag:'(0019,\"SIEMENS RA PLANE A\",be)',vr:\"SL\",name:\"BlankingCircleFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",bf)':{tag:'(0019,\"SIEMENS RA PLANE A\",bf)',vr:\"SL\",name:\"CircleRowStart\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c0)':{tag:'(0019,\"SIEMENS RA PLANE A\",c0)',vr:\"SL\",name:\"CircleRowEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c1)':{tag:'(0019,\"SIEMENS RA PLANE A\",c1)',vr:\"SL\",name:\"CircleColumnStart\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c2)':{tag:'(0019,\"SIEMENS RA PLANE A\",c2)',vr:\"SL\",name:\"CircleColumnEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c3)':{tag:'(0019,\"SIEMENS RA PLANE A\",c3)',vr:\"SL\",name:\"CircleDiameter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c4)':{tag:'(0019,\"SIEMENS RA PLANE A\",c4)',vr:\"SL\",name:\"RectangularCollimaterFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c5)':{tag:'(0019,\"SIEMENS RA PLANE A\",c5)',vr:\"SL\",name:\"RectangleRowStart\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c6)':{tag:'(0019,\"SIEMENS RA PLANE A\",c6)',vr:\"SL\",name:\"RectangleRowEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c7)':{tag:'(0019,\"SIEMENS RA PLANE A\",c7)',vr:\"SL\",name:\"RectangleColumnStart\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c8)':{tag:'(0019,\"SIEMENS RA PLANE A\",c8)',vr:\"SL\",name:\"RectangleColumnEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",c9)':{tag:'(0019,\"SIEMENS RA PLANE A\",c9)',vr:\"SL\",name:\"RectangleAngulation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",ca)':{tag:'(0019,\"SIEMENS RA PLANE A\",ca)',vr:\"SL\",name:\"IrisCollimatorFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",cb)':{tag:'(0019,\"SIEMENS RA PLANE A\",cb)',vr:\"SL\",name:\"IrisRowStart\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",cc)':{tag:'(0019,\"SIEMENS RA PLANE A\",cc)',vr:\"SL\",name:\"IrisRowEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",cd)':{tag:'(0019,\"SIEMENS RA PLANE A\",cd)',vr:\"SL\",name:\"IrisColumnStart\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",ce)':{tag:'(0019,\"SIEMENS RA PLANE A\",ce)',vr:\"SL\",name:\"IrisColumnEnd\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",cf)':{tag:'(0019,\"SIEMENS RA PLANE A\",cf)',vr:\"SL\",name:\"IrisAngulation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d1)':{tag:'(0019,\"SIEMENS RA PLANE A\",d1)',vr:\"SS\",name:\"NumberOfFramesPlane\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d2)':{tag:'(0019,\"SIEMENS RA PLANE A\",d2)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d3)':{tag:'(0019,\"SIEMENS RA PLANE A\",d3)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d4)':{tag:'(0019,\"SIEMENS RA PLANE A\",d4)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d5)':{tag:'(0019,\"SIEMENS RA PLANE A\",d5)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d6)':{tag:'(0019,\"SIEMENS RA PLANE A\",d6)',vr:\"SS\",name:\"Internal\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d7)':{tag:'(0019,\"SIEMENS RA PLANE A\",d7)',vr:\"SS\",name:\"Internal\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d8)':{tag:'(0019,\"SIEMENS RA PLANE A\",d8)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",d9)':{tag:'(0019,\"SIEMENS RA PLANE A\",d9)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",da)':{tag:'(0019,\"SIEMENS RA PLANE A\",da)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",db)':{tag:'(0019,\"SIEMENS RA PLANE A\",db)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",dc)':{tag:'(0019,\"SIEMENS RA PLANE A\",dc)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",dd)':{tag:'(0019,\"SIEMENS RA PLANE A\",dd)',vr:\"SL\",name:\"AnatomicBackground\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",de)':{tag:'(0019,\"SIEMENS RA PLANE A\",de)',vr:\"SL\",name:\"AutoWindowBase\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",df)':{tag:'(0019,\"SIEMENS RA PLANE A\",df)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE A\",e0)':{tag:'(0019,\"SIEMENS RA PLANE A\",e0)',vr:\"SL\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE B\",28)':{tag:'(0011,\"SIEMENS RA PLANE B\",28)',vr:\"SL\",name:\"FluoroTimerB\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE B\",29)':{tag:'(0011,\"SIEMENS RA PLANE B\",29)',vr:\"SL\",name:\"FluoroSkinDoseB\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE B\",2a)':{tag:'(0011,\"SIEMENS RA PLANE B\",2a)',vr:\"SL\",name:\"TotalSkinDoseB\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE B\",2b)':{tag:'(0011,\"SIEMENS RA PLANE B\",2b)',vr:\"SL\",name:\"FluoroDoseAreaProductB\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RA PLANE B\",2c)':{tag:'(0011,\"SIEMENS RA PLANE B\",2c)',vr:\"SL\",name:\"TotalDoseAreaProductB\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",18)':{tag:'(0019,\"SIEMENS RA PLANE B\",18)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",19)':{tag:'(0019,\"SIEMENS RA PLANE B\",19)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",1a)':{tag:'(0019,\"SIEMENS RA PLANE B\",1a)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",1b)':{tag:'(0019,\"SIEMENS RA PLANE B\",1b)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",1c)':{tag:'(0019,\"SIEMENS RA PLANE B\",1c)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",1d)':{tag:'(0019,\"SIEMENS RA PLANE B\",1d)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",1e)':{tag:'(0019,\"SIEMENS RA PLANE B\",1e)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",1f)':{tag:'(0019,\"SIEMENS RA PLANE B\",1f)',vr:\"SS\",name:\"Internal\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",20)':{tag:'(0019,\"SIEMENS RA PLANE B\",20)',vr:\"SL\",name:\"SystemCalibFactorPlaneB\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",22)':{tag:'(0019,\"SIEMENS RA PLANE B\",22)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",24)':{tag:'(0019,\"SIEMENS RA PLANE B\",24)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",26)':{tag:'(0019,\"SIEMENS RA PLANE B\",26)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",28)':{tag:'(0019,\"SIEMENS RA PLANE B\",28)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",2a)':{tag:'(0019,\"SIEMENS RA PLANE B\",2a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",2c)':{tag:'(0019,\"SIEMENS RA PLANE B\",2c)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",2e)':{tag:'(0019,\"SIEMENS RA PLANE B\",2e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",30)':{tag:'(0019,\"SIEMENS RA PLANE B\",30)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",32)':{tag:'(0019,\"SIEMENS RA PLANE B\",32)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",34)':{tag:'(0019,\"SIEMENS RA PLANE B\",34)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",36)':{tag:'(0019,\"SIEMENS RA PLANE B\",36)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",38)':{tag:'(0019,\"SIEMENS RA PLANE B\",38)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",3a)':{tag:'(0019,\"SIEMENS RA PLANE B\",3a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",3c)':{tag:'(0019,\"SIEMENS RA PLANE B\",3c)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",3e)':{tag:'(0019,\"SIEMENS RA PLANE B\",3e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",40)':{tag:'(0019,\"SIEMENS RA PLANE B\",40)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",42)':{tag:'(0019,\"SIEMENS RA PLANE B\",42)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",44)':{tag:'(0019,\"SIEMENS RA PLANE B\",44)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",46)':{tag:'(0019,\"SIEMENS RA PLANE B\",46)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",48)':{tag:'(0019,\"SIEMENS RA PLANE B\",48)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",4a)':{tag:'(0019,\"SIEMENS RA PLANE B\",4a)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",4c)':{tag:'(0019,\"SIEMENS RA PLANE B\",4c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",4e)':{tag:'(0019,\"SIEMENS RA PLANE B\",4e)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",50)':{tag:'(0019,\"SIEMENS RA PLANE B\",50)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",52)':{tag:'(0019,\"SIEMENS RA PLANE B\",52)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",54)':{tag:'(0019,\"SIEMENS RA PLANE B\",54)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",56)':{tag:'(0019,\"SIEMENS RA PLANE B\",56)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",58)':{tag:'(0019,\"SIEMENS RA PLANE B\",58)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",5a)':{tag:'(0019,\"SIEMENS RA PLANE B\",5a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",5c)':{tag:'(0019,\"SIEMENS RA PLANE B\",5c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",5e)':{tag:'(0019,\"SIEMENS RA PLANE B\",5e)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",60)':{tag:'(0019,\"SIEMENS RA PLANE B\",60)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",62)':{tag:'(0019,\"SIEMENS RA PLANE B\",62)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",64)':{tag:'(0019,\"SIEMENS RA PLANE B\",64)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",66)':{tag:'(0019,\"SIEMENS RA PLANE B\",66)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",68)':{tag:'(0019,\"SIEMENS RA PLANE B\",68)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",6a)':{tag:'(0019,\"SIEMENS RA PLANE B\",6a)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",6c)':{tag:'(0019,\"SIEMENS RA PLANE B\",6c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",6e)':{tag:'(0019,\"SIEMENS RA PLANE B\",6e)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",70)':{tag:'(0019,\"SIEMENS RA PLANE B\",70)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",72)':{tag:'(0019,\"SIEMENS RA PLANE B\",72)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",74)':{tag:'(0019,\"SIEMENS RA PLANE B\",74)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",76)':{tag:'(0019,\"SIEMENS RA PLANE B\",76)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",78)':{tag:'(0019,\"SIEMENS RA PLANE B\",78)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",7a)':{tag:'(0019,\"SIEMENS RA PLANE B\",7a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",7c)':{tag:'(0019,\"SIEMENS RA PLANE B\",7c)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",7e)':{tag:'(0019,\"SIEMENS RA PLANE B\",7e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",80)':{tag:'(0019,\"SIEMENS RA PLANE B\",80)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",82)':{tag:'(0019,\"SIEMENS RA PLANE B\",82)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",84)':{tag:'(0019,\"SIEMENS RA PLANE B\",84)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",86)':{tag:'(0019,\"SIEMENS RA PLANE B\",86)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",88)':{tag:'(0019,\"SIEMENS RA PLANE B\",88)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",8a)':{tag:'(0019,\"SIEMENS RA PLANE B\",8a)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",8c)':{tag:'(0019,\"SIEMENS RA PLANE B\",8c)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",8e)':{tag:'(0019,\"SIEMENS RA PLANE B\",8e)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",90)':{tag:'(0019,\"SIEMENS RA PLANE B\",90)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",92)':{tag:'(0019,\"SIEMENS RA PLANE B\",92)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",94)':{tag:'(0019,\"SIEMENS RA PLANE B\",94)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",96)':{tag:'(0019,\"SIEMENS RA PLANE B\",96)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",98)':{tag:'(0019,\"SIEMENS RA PLANE B\",98)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",9a)':{tag:'(0019,\"SIEMENS RA PLANE B\",9a)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",9c)':{tag:'(0019,\"SIEMENS RA PLANE B\",9c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",9e)':{tag:'(0019,\"SIEMENS RA PLANE B\",9e)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",a0)':{tag:'(0019,\"SIEMENS RA PLANE B\",a0)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",a2)':{tag:'(0019,\"SIEMENS RA PLANE B\",a2)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",a4)':{tag:'(0019,\"SIEMENS RA PLANE B\",a4)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",a6)':{tag:'(0019,\"SIEMENS RA PLANE B\",a6)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",a8)':{tag:'(0019,\"SIEMENS RA PLANE B\",a8)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",aa)':{tag:'(0019,\"SIEMENS RA PLANE B\",aa)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS RA PLANE B\",ac)':{tag:'(0019,\"SIEMENS RA PLANE B\",ac)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",10)':{tag:'(0011,\"SIEMENS RIS\",10)',vr:\"LT\",name:\"PatientUID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",11)':{tag:'(0011,\"SIEMENS RIS\",11)',vr:\"LT\",name:\"PatientID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",20)':{tag:'(0011,\"SIEMENS RIS\",20)',vr:\"DA\",name:\"PatientRegistrationDate\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",21)':{tag:'(0011,\"SIEMENS RIS\",21)',vr:\"TM\",name:\"PatientRegistrationTime\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",30)':{tag:'(0011,\"SIEMENS RIS\",30)',vr:\"LT\",name:\"PatientnameRIS\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",31)':{tag:'(0011,\"SIEMENS RIS\",31)',vr:\"LT\",name:\"PatientprenameRIS\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",40)':{tag:'(0011,\"SIEMENS RIS\",40)',vr:\"LT\",name:\"PatientHospitalStatus\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",41)':{tag:'(0011,\"SIEMENS RIS\",41)',vr:\"LT\",name:\"MedicalAlerts\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SIEMENS RIS\",42)':{tag:'(0011,\"SIEMENS RIS\",42)',vr:\"LT\",name:\"ContrastAllergies\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS RIS\",10)':{tag:'(0031,\"SIEMENS RIS\",10)',vr:\"LT\",name:\"RequestUID\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS RIS\",45)':{tag:'(0031,\"SIEMENS RIS\",45)',vr:\"LT\",name:\"RequestingPhysician\",vm:\"1\",version:\"PrivateTag\"},'(0031,\"SIEMENS RIS\",50)':{tag:'(0031,\"SIEMENS RIS\",50)',vr:\"LT\",name:\"RequestedPhysician\",vm:\"1\",version:\"PrivateTag\"},'(0033,\"SIEMENS RIS\",10)':{tag:'(0033,\"SIEMENS RIS\",10)',vr:\"LT\",name:\"PatientStudyUID\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",00)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",00)',vr:\"US\",name:\"AcquisitionType\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",01)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",01)',vr:\"US\",name:\"AcquisitionMode\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",02)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",02)',vr:\"US\",name:\"FootswitchIndex\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",03)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",03)',vr:\"US\",name:\"AcquisitionRoom\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",04)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",04)',vr:\"SL\",name:\"CurrentTimeProduct\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",05)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",05)',vr:\"SL\",name:\"Dose\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",06)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",06)',vr:\"SL\",name:\"SkinDosePercent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",07)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",07)',vr:\"SL\",name:\"SkinDoseAccumulation\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",08)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",08)',vr:\"SL\",name:\"SkinDoseRate\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0A)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0A)',vr:\"UL\",name:\"CopperFilter\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0B)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0B)',vr:\"US\",name:\"MeasuringField\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0C)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0C)',vr:\"SS\",name:\"PostBlankingCircle\",vm:\"3\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0D)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0D)',vr:\"SS\",name:\"DynaAngles\",vm:\"2-2n\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0E)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0E)',vr:\"SS\",name:\"TotalSteps\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0F)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",0F)',vr:\"SL\",name:\"DynaXRayInfo\",vm:\"3-3n\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",10)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",10)',vr:\"US\",name:\"ModalityLUTInputGamma\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",11)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",11)',vr:\"US\",name:\"ModalityLUTOutputGamma\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",12)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",12)',vr:\"OB\",name:\"SH_STPAR\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",13)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",13)',vr:\"US\",name:\"AcquisitionZoom\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",14)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",14)',vr:\"SS\",name:\"DynaAngulationStepWidth\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",15)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",15)',vr:\"US\",name:\"Harmonization\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",16)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",16)',vr:\"US\",name:\"DRSingleFlag\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",17)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",17)',vr:\"SL\",name:\"SourceToIsocenter\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",18)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",18)',vr:\"US\",name:\"PressureData\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",19)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",19)',vr:\"SL\",name:\"ECGIndexArray\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1A)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1A)',vr:\"US\",name:\"FDFlag\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1B)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1B)',vr:\"OB\",name:\"SH_ZOOM\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1C)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1C)',vr:\"OB\",name:\"SH_COLPAR\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1D)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1D)',vr:\"US\",name:\"K_Factor\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1E)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1E)',vr:\"US\",name:\"EVE\",vm:\"8\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1F)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",1F)',vr:\"SL\",name:\"TotalSceneTime\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",20)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",20)',vr:\"US\",name:\"RestoreFlag\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",21)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",21)',vr:\"US\",name:\"StandMovementFlag\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",22)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",22)',vr:\"US\",name:\"FDRows\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",23)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",23)',vr:\"US\",name:\"FDColumns\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",24)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",24)',vr:\"US\",name:\"TableMovementFlag\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",25)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",25)',vr:\"LO\",name:\"OriginalOrganProgramName\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",26)':{tag:'(0021,\"SIEMENS SMS-AX  ACQ 1.0\",26)',vr:\"DS\",name:\"CrispyXPIFilter\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",00)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",00)',vr:\"US\",name:\"ViewNative\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",01)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",01)',vr:\"US\",name:\"OriginalSeriesNumber\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",02)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",02)',vr:\"US\",name:\"OriginalImageNumber\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",03)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",03)',vr:\"US\",name:\"WinCenter\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",04)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",04)',vr:\"US\",name:\"WinWidth\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",05)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",05)',vr:\"US\",name:\"WinBrightness\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",06)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",06)',vr:\"US\",name:\"WinContrast\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",07)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",07)',vr:\"US\",name:\"OriginalFrameNumber\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",08)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",08)',vr:\"US\",name:\"OriginalMaskFrameNumber\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",09)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",09)',vr:\"US\",name:\"Opac\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0A)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0A)',vr:\"US\",name:\"OriginalNumberOfFrames\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0B)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0B)',vr:\"DS\",name:\"OriginalSceneDuration\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0C)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0C)',vr:\"LO\",name:\"IdentifierLOID\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0D)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0D)',vr:\"SS\",name:\"OriginalSceneVFRInfo\",vm:\"1-n\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0E)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0E)',vr:\"SS\",name:\"OriginalFrameECGPosition\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0F)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",0F)',vr:\"SS\",name:\"OriginalECG1stFrameOffset_retired\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",10)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",10)',vr:\"SS\",name:\"ZoomFlag\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",11)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",11)',vr:\"US\",name:\"Flex\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",12)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",12)',vr:\"US\",name:\"NumberOfMaskFrames\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",13)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",13)',vr:\"US\",name:\"NumberOfFillFrames\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",14)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",14)',vr:\"US\",name:\"SeriesNumber\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",15)':{tag:'(0025,\"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0\",15)',vr:\"IS\",name:\"ImageNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",00)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",00)',vr:\"DS\",name:\"HorizontalCalibrationPixelSize\",vm:\"2\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",01)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",01)',vr:\"DS\",name:\"VerticalCalibrationPixelSize\",vm:\"2\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",02)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",02)',vr:\"LO\",name:\"CalibrationObject\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",03)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",03)',vr:\"DS\",name:\"CalibrationObjectSize\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",04)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",04)',vr:\"LO\",name:\"CalibrationMethod\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",05)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",05)',vr:\"ST\",name:\"Filename\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",06)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",06)',vr:\"IS\",name:\"FrameNumber\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",07)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",07)',vr:\"IS\",name:\"CalibrationFactorMultiplicity\",vm:\"2\",version:\"PrivateTag\"},'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",08)':{tag:'(0023,\"SIEMENS SMS-AX  QUANT 1.0\",08)',vr:\"IS\",name:\"CalibrationTODValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",00)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",00)',vr:\"US\",name:\"ReviewMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",01)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",01)',vr:\"US\",name:\"AnatomicalBackgroundPercent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",02)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",02)',vr:\"US\",name:\"NumberOfPhases\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",03)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",03)',vr:\"US\",name:\"ApplyAnatomicalBackground\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",04)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",04)',vr:\"SS\",name:\"PixelShiftArray\",vm:\"4-4n\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",05)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",05)',vr:\"US\",name:\"Brightness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",06)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",06)',vr:\"US\",name:\"Contrast\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",07)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",07)',vr:\"US\",name:\"Enabled\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",08)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",08)',vr:\"US\",name:\"NativeEdgeEnhancementPercentGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",09)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",09)',vr:\"SS\",name:\"NativeEdgeEnhancementLUTIndex\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0A)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0A)',vr:\"SS\",name:\"NativeEdgeEnhancementKernelSize\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0B)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0B)',vr:\"US\",name:\"SubtrEdgeEnhancementPercentGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0C)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0C)',vr:\"SS\",name:\"SubtrEdgeEnhancementLUTIndex\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0D)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0D)',vr:\"SS\",name:\"SubtrEdgeEnhancementKernelSize\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0E)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0E)',vr:\"US\",name:\"FadePercent\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0F)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",0F)',vr:\"US\",name:\"FlippedBeforeLateralityApplied\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",10)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",10)',vr:\"US\",name:\"ApplyFade\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",12)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",12)',vr:\"US\",name:\"Zoom\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",13)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",13)',vr:\"SS\",name:\"PanX\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",14)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",14)',vr:\"SS\",name:\"PanY\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",15)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",15)',vr:\"SS\",name:\"NativeEdgeEnhancementAdvPercGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",16)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",16)',vr:\"SS\",name:\"SubtrEdgeEnhancementAdvPercGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",17)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",17)',vr:\"US\",name:\"InvertFlag\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1A)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1A)',vr:\"OB\",name:\"Quant1KOverlay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1B)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1B)',vr:\"US\",name:\"OriginalResolution\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1C)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1C)',vr:\"DS\",name:\"AutoWindowCenter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1D)':{tag:'(0019,\"SIEMENS SMS-AX  VIEW 1.0\",1D)',vr:\"DS\",name:\"AutoWindowWidth\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIENET\",01)':{tag:'(0009,\"SIENET\",01)',vr:\"US\",name:\"SIENETCommandField\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIENET\",14)':{tag:'(0009,\"SIENET\",14)',vr:\"LT\",name:\"ReceiverPLA\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIENET\",16)':{tag:'(0009,\"SIENET\",16)',vr:\"US\",name:\"TransferPriority\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SIENET\",29)':{tag:'(0009,\"SIENET\",29)',vr:\"LT\",name:\"ActualUser\",vm:\"1\",version:\"PrivateTag\"},'(0095,\"SIENET\",01)':{tag:'(0095,\"SIENET\",01)',vr:\"LT\",name:\"ExaminationFolderID\",vm:\"1\",version:\"PrivateTag\"},'(0095,\"SIENET\",04)':{tag:'(0095,\"SIENET\",04)',vr:\"UL\",name:\"FolderReportedStatus\",vm:\"1\",version:\"PrivateTag\"},'(0095,\"SIENET\",05)':{tag:'(0095,\"SIENET\",05)',vr:\"LT\",name:\"FolderReportingRadiologist\",vm:\"1\",version:\"PrivateTag\"},'(0095,\"SIENET\",07)':{tag:'(0095,\"SIENET\",07)',vr:\"LT\",name:\"SIENETISAPLA\",vm:\"1\",version:\"PrivateTag\"},'(0099,\"SIENET\",02)':{tag:'(0099,\"SIENET\",02)',vr:\"UL\",name:\"DataObjectAttributes\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI RELEASE 1\",10)':{tag:'(0009,\"SPI RELEASE 1\",10)',vr:\"LT\",name:\"Comments\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI RELEASE 1\",15)':{tag:'(0009,\"SPI RELEASE 1\",15)',vr:\"LO\",name:\"SPIImageUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI RELEASE 1\",40)':{tag:'(0009,\"SPI RELEASE 1\",40)',vr:\"US\",name:\"DataObjectType\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI RELEASE 1\",41)':{tag:'(0009,\"SPI RELEASE 1\",41)',vr:\"LO\",name:\"DataObjectSubtype\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI RELEASE 1\",10)':{tag:'(0011,\"SPI RELEASE 1\",10)',vr:\"LO\",name:\"Organ\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI RELEASE 1\",15)':{tag:'(0011,\"SPI RELEASE 1\",15)',vr:\"LO\",name:\"AllergyIndication\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI RELEASE 1\",20)':{tag:'(0011,\"SPI RELEASE 1\",20)',vr:\"LO\",name:\"Pregnancy\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI RELEASE 1\",60)':{tag:'(0029,\"SPI RELEASE 1\",60)',vr:\"LT\",name:\"CompressionAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI Release 1\",10)':{tag:'(0009,\"SPI Release 1\",10)',vr:\"LT\",name:\"Comments\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI Release 1\",15)':{tag:'(0009,\"SPI Release 1\",15)',vr:\"LO\",name:\"SPIImageUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI Release 1\",40)':{tag:'(0009,\"SPI Release 1\",40)',vr:\"US\",name:\"DataObjectType\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI Release 1\",41)':{tag:'(0009,\"SPI Release 1\",41)',vr:\"LO\",name:\"DataObjectSubtype\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI Release 1\",10)':{tag:'(0011,\"SPI Release 1\",10)',vr:\"LO\",name:\"Organ\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI Release 1\",15)':{tag:'(0011,\"SPI Release 1\",15)',vr:\"LO\",name:\"AllergyIndication\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI Release 1\",20)':{tag:'(0011,\"SPI Release 1\",20)',vr:\"LO\",name:\"Pregnancy\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI Release 1\",60)':{tag:'(0029,\"SPI Release 1\",60)',vr:\"LT\",name:\"CompressionAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI\",10)':{tag:'(0009,\"SPI\",10)',vr:\"LO\",name:\"Comments\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI\",15)':{tag:'(0009,\"SPI\",15)',vr:\"LO\",name:\"SPIImageUID\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI\",40)':{tag:'(0009,\"SPI\",40)',vr:\"US\",name:\"DataObjectType\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI\",41)':{tag:'(0009,\"SPI\",41)',vr:\"LT\",name:\"DataObjectSubtype\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI\",10)':{tag:'(0011,\"SPI\",10)',vr:\"LT\",name:\"Organ\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI\",15)':{tag:'(0011,\"SPI\",15)',vr:\"LT\",name:\"AllergyIndication\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI\",20)':{tag:'(0011,\"SPI\",20)',vr:\"LT\",name:\"Pregnancy\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI\",60)':{tag:'(0029,\"SPI\",60)',vr:\"LT\",name:\"CompressionAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",00)':{tag:'(0009,\"SPI-P Release 1\",00)',vr:\"LT\",name:\"DataObjectRecognitionCode\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",04)':{tag:'(0009,\"SPI-P Release 1\",04)',vr:\"LO\",name:\"ImageDataConsistence\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",08)':{tag:'(0009,\"SPI-P Release 1\",08)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",12)':{tag:'(0009,\"SPI-P Release 1\",12)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",15)':{tag:'(0009,\"SPI-P Release 1\",15)',vr:\"LO\",name:\"UniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",16)':{tag:'(0009,\"SPI-P Release 1\",16)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",18)':{tag:'(0009,\"SPI-P Release 1\",18)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",21)':{tag:'(0009,\"SPI-P Release 1\",21)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",31)':{tag:'(0009,\"SPI-P Release 1\",31)',vr:\"LT\",name:\"PACSUniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",34)':{tag:'(0009,\"SPI-P Release 1\",34)',vr:\"LT\",name:\"ClusterUniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",38)':{tag:'(0009,\"SPI-P Release 1\",38)',vr:\"LT\",name:\"SystemUniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",39)':{tag:'(0009,\"SPI-P Release 1\",39)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",51)':{tag:'(0009,\"SPI-P Release 1\",51)',vr:\"LT\",name:\"StudyUniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",61)':{tag:'(0009,\"SPI-P Release 1\",61)',vr:\"LT\",name:\"SeriesUniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",91)':{tag:'(0009,\"SPI-P Release 1\",91)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",f2)':{tag:'(0009,\"SPI-P Release 1\",f2)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",f3)':{tag:'(0009,\"SPI-P Release 1\",f3)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",f4)':{tag:'(0009,\"SPI-P Release 1\",f4)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",f5)':{tag:'(0009,\"SPI-P Release 1\",f5)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1\",f7)':{tag:'(0009,\"SPI-P Release 1\",f7)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI-P Release 1\",10)':{tag:'(0011,\"SPI-P Release 1\",10)',vr:\"LT\",name:\"PatientEntryID\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI-P Release 1\",21)':{tag:'(0011,\"SPI-P Release 1\",21)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI-P Release 1\",22)':{tag:'(0011,\"SPI-P Release 1\",22)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI-P Release 1\",31)':{tag:'(0011,\"SPI-P Release 1\",31)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI-P Release 1\",32)':{tag:'(0011,\"SPI-P Release 1\",32)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",00)':{tag:'(0019,\"SPI-P Release 1\",00)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",01)':{tag:'(0019,\"SPI-P Release 1\",01)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",02)':{tag:'(0019,\"SPI-P Release 1\",02)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",10)':{tag:'(0019,\"SPI-P Release 1\",10)',vr:\"US\",name:\"MainsFrequency\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",25)':{tag:'(0019,\"SPI-P Release 1\",25)',vr:\"LT\",name:\"OriginalPixelDataQuality\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",30)':{tag:'(0019,\"SPI-P Release 1\",30)',vr:\"US\",name:\"ECGTriggering\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",31)':{tag:'(0019,\"SPI-P Release 1\",31)',vr:\"UN\",name:\"ECG1Offset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",32)':{tag:'(0019,\"SPI-P Release 1\",32)',vr:\"UN\",name:\"ECG2Offset1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",33)':{tag:'(0019,\"SPI-P Release 1\",33)',vr:\"UN\",name:\"ECG2Offset2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",50)':{tag:'(0019,\"SPI-P Release 1\",50)',vr:\"US\",name:\"VideoScanMode\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",51)':{tag:'(0019,\"SPI-P Release 1\",51)',vr:\"US\",name:\"VideoLineRate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",60)':{tag:'(0019,\"SPI-P Release 1\",60)',vr:\"US\",name:\"XrayTechnique\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",61)':{tag:'(0019,\"SPI-P Release 1\",61)',vr:\"DS\",name:\"ImageIdentifierFromat\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",62)':{tag:'(0019,\"SPI-P Release 1\",62)',vr:\"US\",name:\"IrisDiaphragm\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",63)':{tag:'(0019,\"SPI-P Release 1\",63)',vr:\"CS\",name:\"Filter\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",64)':{tag:'(0019,\"SPI-P Release 1\",64)',vr:\"CS\",name:\"CineParallel\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",65)':{tag:'(0019,\"SPI-P Release 1\",65)',vr:\"CS\",name:\"CineMaster\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",70)':{tag:'(0019,\"SPI-P Release 1\",70)',vr:\"US\",name:\"ExposureChannel\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",71)':{tag:'(0019,\"SPI-P Release 1\",71)',vr:\"UN\",name:\"ExposureChannelFirstImage\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",72)':{tag:'(0019,\"SPI-P Release 1\",72)',vr:\"US\",name:\"ProcessingChannel\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",80)':{tag:'(0019,\"SPI-P Release 1\",80)',vr:\"DS\",name:\"AcquisitionDelay\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",81)':{tag:'(0019,\"SPI-P Release 1\",81)',vr:\"UN\",name:\"RelativeImageTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",90)':{tag:'(0019,\"SPI-P Release 1\",90)',vr:\"CS\",name:\"VideoWhiteCompression\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",a0)':{tag:'(0019,\"SPI-P Release 1\",a0)',vr:\"US\",name:\"Angulation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1\",a1)':{tag:'(0019,\"SPI-P Release 1\",a1)',vr:\"US\",name:\"Rotation\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P Release 1\",12)':{tag:'(0021,\"SPI-P Release 1\",12)',vr:\"LT\",name:\"SeriesUniqueIdentifier\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P Release 1\",14)':{tag:'(0021,\"SPI-P Release 1\",14)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",00)':{tag:'(0029,\"SPI-P Release 1\",00)',vr:\"DS\",name:\"Unknown\",vm:\"4\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",20)':{tag:'(0029,\"SPI-P Release 1\",20)',vr:\"DS\",name:\"PixelAspectRatio\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",25)':{tag:'(0029,\"SPI-P Release 1\",25)',vr:\"LO\",name:\"ProcessedPixelDataQuality\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",30)':{tag:'(0029,\"SPI-P Release 1\",30)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",38)':{tag:'(0029,\"SPI-P Release 1\",38)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",60)':{tag:'(0029,\"SPI-P Release 1\",60)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",61)':{tag:'(0029,\"SPI-P Release 1\",61)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",67)':{tag:'(0029,\"SPI-P Release 1\",67)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",70)':{tag:'(0029,\"SPI-P Release 1\",70)',vr:\"LT\",name:\"WindowID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",71)':{tag:'(0029,\"SPI-P Release 1\",71)',vr:\"CS\",name:\"VideoInvertSubtracted\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",72)':{tag:'(0029,\"SPI-P Release 1\",72)',vr:\"CS\",name:\"VideoInvertNonsubtracted\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",77)':{tag:'(0029,\"SPI-P Release 1\",77)',vr:\"CS\",name:\"WindowSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",78)':{tag:'(0029,\"SPI-P Release 1\",78)',vr:\"LT\",name:\"ECGDisplayPrintingID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",79)':{tag:'(0029,\"SPI-P Release 1\",79)',vr:\"CS\",name:\"ECGDisplayPrinting\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",7e)':{tag:'(0029,\"SPI-P Release 1\",7e)',vr:\"CS\",name:\"ECGDisplayPrintingEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",7f)':{tag:'(0029,\"SPI-P Release 1\",7f)',vr:\"CS\",name:\"ECGDisplayPrintingSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",80)':{tag:'(0029,\"SPI-P Release 1\",80)',vr:\"LT\",name:\"PhysiologicalDisplayID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",81)':{tag:'(0029,\"SPI-P Release 1\",81)',vr:\"US\",name:\"PreferredPhysiologicalChannelDisplay\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",8e)':{tag:'(0029,\"SPI-P Release 1\",8e)',vr:\"CS\",name:\"PhysiologicalDisplayEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",8f)':{tag:'(0029,\"SPI-P Release 1\",8f)',vr:\"CS\",name:\"PhysiologicalDisplaySelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",c0)':{tag:'(0029,\"SPI-P Release 1\",c0)',vr:\"LT\",name:\"FunctionalShutterID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",c1)':{tag:'(0029,\"SPI-P Release 1\",c1)',vr:\"US\",name:\"FieldOfShutter\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",c5)':{tag:'(0029,\"SPI-P Release 1\",c5)',vr:\"LT\",name:\"FieldOfShutterRectangle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",ce)':{tag:'(0029,\"SPI-P Release 1\",ce)',vr:\"CS\",name:\"ShutterEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1\",cf)':{tag:'(0029,\"SPI-P Release 1\",cf)',vr:\"CS\",name:\"ShutterSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(7FE1,\"SPI-P Release 1\",10)':{tag:'(7FE1,\"SPI-P Release 1\",10)',vr:\"ox\",name:\"PixelData\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1;1\",c0)':{tag:'(0009,\"SPI-P Release 1;1\",c0)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P Release 1;1\",c1)':{tag:'(0009,\"SPI-P Release 1;1\",c1)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",00)':{tag:'(0019,\"SPI-P Release 1;1\",00)',vr:\"UN\",name:\"PhysiologicalDataType\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",01)':{tag:'(0019,\"SPI-P Release 1;1\",01)',vr:\"UN\",name:\"PhysiologicalDataChannelAndKind\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",02)':{tag:'(0019,\"SPI-P Release 1;1\",02)',vr:\"US\",name:\"SampleBitsAllocated\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",03)':{tag:'(0019,\"SPI-P Release 1;1\",03)',vr:\"US\",name:\"SampleBitsStored\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",04)':{tag:'(0019,\"SPI-P Release 1;1\",04)',vr:\"US\",name:\"SampleHighBit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",05)':{tag:'(0019,\"SPI-P Release 1;1\",05)',vr:\"US\",name:\"SampleRepresentation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",06)':{tag:'(0019,\"SPI-P Release 1;1\",06)',vr:\"UN\",name:\"SmallestSampleValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",07)':{tag:'(0019,\"SPI-P Release 1;1\",07)',vr:\"UN\",name:\"LargestSampleValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",08)':{tag:'(0019,\"SPI-P Release 1;1\",08)',vr:\"UN\",name:\"NumberOfSamples\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",09)':{tag:'(0019,\"SPI-P Release 1;1\",09)',vr:\"UN\",name:\"SampleData\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",0a)':{tag:'(0019,\"SPI-P Release 1;1\",0a)',vr:\"UN\",name:\"SampleRate\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",10)':{tag:'(0019,\"SPI-P Release 1;1\",10)',vr:\"UN\",name:\"PhysiologicalDataType2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",11)':{tag:'(0019,\"SPI-P Release 1;1\",11)',vr:\"UN\",name:\"PhysiologicalDataChannelAndKind2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",12)':{tag:'(0019,\"SPI-P Release 1;1\",12)',vr:\"US\",name:\"SampleBitsAllocated2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",13)':{tag:'(0019,\"SPI-P Release 1;1\",13)',vr:\"US\",name:\"SampleBitsStored2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",14)':{tag:'(0019,\"SPI-P Release 1;1\",14)',vr:\"US\",name:\"SampleHighBit2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",15)':{tag:'(0019,\"SPI-P Release 1;1\",15)',vr:\"US\",name:\"SampleRepresentation2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",16)':{tag:'(0019,\"SPI-P Release 1;1\",16)',vr:\"UN\",name:\"SmallestSampleValue2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",17)':{tag:'(0019,\"SPI-P Release 1;1\",17)',vr:\"UN\",name:\"LargestSampleValue2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",18)':{tag:'(0019,\"SPI-P Release 1;1\",18)',vr:\"UN\",name:\"NumberOfSamples2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",19)':{tag:'(0019,\"SPI-P Release 1;1\",19)',vr:\"UN\",name:\"SampleData2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P Release 1;1\",1a)':{tag:'(0019,\"SPI-P Release 1;1\",1a)',vr:\"UN\",name:\"SampleRate2\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",00)':{tag:'(0029,\"SPI-P Release 1;1\",00)',vr:\"LT\",name:\"ZoomID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",01)':{tag:'(0029,\"SPI-P Release 1;1\",01)',vr:\"DS\",name:\"ZoomRectangle\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",03)':{tag:'(0029,\"SPI-P Release 1;1\",03)',vr:\"DS\",name:\"ZoomFactor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",04)':{tag:'(0029,\"SPI-P Release 1;1\",04)',vr:\"US\",name:\"ZoomFunction\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",0e)':{tag:'(0029,\"SPI-P Release 1;1\",0e)',vr:\"CS\",name:\"ZoomEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",0f)':{tag:'(0029,\"SPI-P Release 1;1\",0f)',vr:\"CS\",name:\"ZoomSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",40)':{tag:'(0029,\"SPI-P Release 1;1\",40)',vr:\"LT\",name:\"MagnifyingGlassID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",41)':{tag:'(0029,\"SPI-P Release 1;1\",41)',vr:\"DS\",name:\"MagnifyingGlassRectangle\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",43)':{tag:'(0029,\"SPI-P Release 1;1\",43)',vr:\"DS\",name:\"MagnifyingGlassFactor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",44)':{tag:'(0029,\"SPI-P Release 1;1\",44)',vr:\"US\",name:\"MagnifyingGlassFunction\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",4e)':{tag:'(0029,\"SPI-P Release 1;1\",4e)',vr:\"CS\",name:\"MagnifyingGlassEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;1\",4f)':{tag:'(0029,\"SPI-P Release 1;1\",4f)',vr:\"CS\",name:\"MagnifyingGlassSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;2\",00)':{tag:'(0029,\"SPI-P Release 1;2\",00)',vr:\"LT\",name:\"SubtractionMaskID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;2\",04)':{tag:'(0029,\"SPI-P Release 1;2\",04)',vr:\"UN\",name:\"MaskingFunction\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;2\",0c)':{tag:'(0029,\"SPI-P Release 1;2\",0c)',vr:\"UN\",name:\"ProprietaryMaskingParameters\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;2\",1e)':{tag:'(0029,\"SPI-P Release 1;2\",1e)',vr:\"CS\",name:\"SubtractionMaskEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;2\",1f)':{tag:'(0029,\"SPI-P Release 1;2\",1f)',vr:\"CS\",name:\"SubtractionMaskSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",00)':{tag:'(0029,\"SPI-P Release 1;3\",00)',vr:\"LT\",name:\"ImageEnhancementID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",01)':{tag:'(0029,\"SPI-P Release 1;3\",01)',vr:\"LT\",name:\"ImageEnhancement\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",02)':{tag:'(0029,\"SPI-P Release 1;3\",02)',vr:\"LT\",name:\"ConvolutionID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",03)':{tag:'(0029,\"SPI-P Release 1;3\",03)',vr:\"LT\",name:\"ConvolutionType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",04)':{tag:'(0029,\"SPI-P Release 1;3\",04)',vr:\"LT\",name:\"ConvolutionKernelSizeID\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",05)':{tag:'(0029,\"SPI-P Release 1;3\",05)',vr:\"US\",name:\"ConvolutionKernelSize\",vm:\"2\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",06)':{tag:'(0029,\"SPI-P Release 1;3\",06)',vr:\"US\",name:\"ConvolutionKernel\",vm:\"1-n\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",0c)':{tag:'(0029,\"SPI-P Release 1;3\",0c)',vr:\"DS\",name:\"EnhancementGain\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",1e)':{tag:'(0029,\"SPI-P Release 1;3\",1e)',vr:\"CS\",name:\"ImageEnhancementEnableStatus\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P Release 1;3\",1f)':{tag:'(0029,\"SPI-P Release 1;3\",1f)',vr:\"CS\",name:\"ImageEnhancementSelectStatus\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"SPI-P Release 2;1\",18)':{tag:'(0011,\"SPI-P Release 2;1\",18)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SPI-P Release 2;1\",0d)':{tag:'(0023,\"SPI-P Release 2;1\",0d)',vr:\"UI\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SPI-P Release 2;1\",0e)':{tag:'(0023,\"SPI-P Release 2;1\",0e)',vr:\"UI\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",00)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",00)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",10)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",10)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",20)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",20)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",30)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",30)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",40)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",40)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",50)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",50)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",60)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",60)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",70)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",70)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",75)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",75)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",80)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",80)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"SPI-P-GV-CT Release 1\",90)':{tag:'(0009,\"SPI-P-GV-CT Release 1\",90)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",08)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",08)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",09)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",09)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",0a)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",0a)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",10)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",10)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",20)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",20)',vr:\"TM\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",50)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",50)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",60)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",60)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",61)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",61)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",63)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",63)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",64)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",64)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",65)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",65)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",70)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",70)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",80)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",80)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",81)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",81)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",90)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",90)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",a0)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",a0)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",a1)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",a1)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",a2)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",a2)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",a3)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",a3)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",b0)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",b0)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-GV-CT Release 1\",b1)':{tag:'(0019,\"SPI-P-GV-CT Release 1\",b1)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",20)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",20)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",30)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",30)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",40)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",40)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",50)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",50)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",60)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",60)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",70)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",70)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",80)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",80)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",90)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",90)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",a0)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",a0)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",a1)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",a1)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",a2)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",a2)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",a3)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",a3)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",a4)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",a4)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",b0)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",b0)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-GV-CT Release 1\",c0)':{tag:'(0021,\"SPI-P-GV-CT Release 1\",c0)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",10)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",10)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",30)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",30)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",31)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",31)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",32)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",32)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",33)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",33)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",80)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",80)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",90)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",90)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",d0)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",d0)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-GV-CT Release 1\",d1)':{tag:'(0029,\"SPI-P-GV-CT Release 1\",d1)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-PCR Release 2\",30)':{tag:'(0019,\"SPI-P-PCR Release 2\",30)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-Private-CWS Release 1\",00)':{tag:'(0021,\"SPI-P-Private-CWS Release 1\",00)',vr:\"LT\",name:\"WindowOfImagesID\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-Private-CWS Release 1\",01)':{tag:'(0021,\"SPI-P-Private-CWS Release 1\",01)',vr:\"CS\",name:\"WindowOfImagesType\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-Private-CWS Release 1\",02)':{tag:'(0021,\"SPI-P-Private-CWS Release 1\",02)',vr:\"IS\",name:\"WindowOfImagesScope\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",10)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",10)',vr:\"UN\",name:\"ECGTimeMapDataBitsAllocated\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",11)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",11)',vr:\"UN\",name:\"ECGTimeMapDataBitsStored\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",12)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",12)',vr:\"UN\",name:\"ECGTimeMapDataHighBit\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",13)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",13)',vr:\"UN\",name:\"ECGTimeMapDataRepresentation\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",14)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",14)',vr:\"UN\",name:\"ECGTimeMapDataSmallestDataValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",15)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",15)',vr:\"UN\",name:\"ECGTimeMapDataLargestDataValue\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",16)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",16)',vr:\"UN\",name:\"ECGTimeMapDataNumberOfDataValues\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private-DCI Release 1\",17)':{tag:'(0019,\"SPI-P-Private-DCI Release 1\",17)',vr:\"UN\",name:\"ECGTimeMapData\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SPI-P-Private_CDS Release 1\",40)':{tag:'(0021,\"SPI-P-Private_CDS Release 1\",40)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_CDS Release 1\",00)':{tag:'(0029,\"SPI-P-Private_CDS Release 1\",00)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private_ICS Release 1\",30)':{tag:'(0019,\"SPI-P-Private_ICS Release 1\",30)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-Private_ICS Release 1\",31)':{tag:'(0019,\"SPI-P-Private_ICS Release 1\",31)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",08)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",08)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",0f)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",0f)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",10)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",10)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",1b)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",1b)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",1c)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",1c)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",21)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",21)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",43)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",43)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",44)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",44)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",4C)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",4C)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",67)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",67)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",68)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",68)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",6A)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",6A)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1\",6B)':{tag:'(0029,\"SPI-P-Private_ICS Release 1\",6B)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;1\",00)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;1\",00)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;1\",05)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;1\",05)',vr:\"FL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;1\",06)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;1\",06)',vr:\"FL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;1\",20)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;1\",20)',vr:\"FL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;1\",21)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;1\",21)',vr:\"FL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;1\",CD)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;1\",CD)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;2\",00)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;2\",00)',vr:\"FD\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;2\",01)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;2\",01)',vr:\"FD\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;2\",02)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;2\",02)',vr:\"FD\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;2\",03)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;2\",03)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;2\",04)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;2\",04)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;2\",05)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;2\",05)',vr:\"SL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;3\",C0)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;3\",C0)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;3\",C1)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;3\",C1)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;3\",C2)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;3\",C2)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;3\",C3)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;3\",C3)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;3\",C4)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;3\",C4)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;3\",C5)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;3\",C5)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;4\",02)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;4\",02)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;4\",9A)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;4\",9A)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;4\",E0)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;4\",E0)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;5\",50)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;5\",50)',vr:\"CS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"SPI-P-Private_ICS Release 1;5\",55)':{tag:'(0029,\"SPI-P-Private_ICS Release 1;5\",55)',vr:\"CS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-XSB-DCI Release 1\",10)':{tag:'(0019,\"SPI-P-XSB-DCI Release 1\",10)',vr:\"LT\",name:\"VideoBeamBoost\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-XSB-DCI Release 1\",11)':{tag:'(0019,\"SPI-P-XSB-DCI Release 1\",11)',vr:\"US\",name:\"ChannelGeneratingVideoSync\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-XSB-DCI Release 1\",12)':{tag:'(0019,\"SPI-P-XSB-DCI Release 1\",12)',vr:\"US\",name:\"VideoGain\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-XSB-DCI Release 1\",13)':{tag:'(0019,\"SPI-P-XSB-DCI Release 1\",13)',vr:\"US\",name:\"VideoOffset\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SPI-P-XSB-DCI Release 1\",20)':{tag:'(0019,\"SPI-P-XSB-DCI Release 1\",20)',vr:\"DS\",name:\"RTDDataCompressionFactor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",11)':{tag:'(0029,\"Silhouette Annot V1.0\",11)',vr:\"IS\",name:\"AnnotationName\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",12)':{tag:'(0029,\"Silhouette Annot V1.0\",12)',vr:\"LT\",name:\"AnnotationFont\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",13)':{tag:'(0029,\"Silhouette Annot V1.0\",13)',vr:\"LT\",name:\"AnnotationTextForegroundColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",14)':{tag:'(0029,\"Silhouette Annot V1.0\",14)',vr:\"LT\",name:\"AnnotationTextBackgroundColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",15)':{tag:'(0029,\"Silhouette Annot V1.0\",15)',vr:\"UL\",name:\"AnnotationTextBackingMode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",16)':{tag:'(0029,\"Silhouette Annot V1.0\",16)',vr:\"UL\",name:\"AnnotationTextJustification\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",17)':{tag:'(0029,\"Silhouette Annot V1.0\",17)',vr:\"UL\",name:\"AnnotationTextLocation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",18)':{tag:'(0029,\"Silhouette Annot V1.0\",18)',vr:\"LT\",name:\"AnnotationTextString\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",19)':{tag:'(0029,\"Silhouette Annot V1.0\",19)',vr:\"UL\",name:\"AnnotationTextAttachMode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",20)':{tag:'(0029,\"Silhouette Annot V1.0\",20)',vr:\"UL\",name:\"AnnotationTextCursorMode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",21)':{tag:'(0029,\"Silhouette Annot V1.0\",21)',vr:\"UL\",name:\"AnnotationTextShadowOffsetX\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",22)':{tag:'(0029,\"Silhouette Annot V1.0\",22)',vr:\"UL\",name:\"AnnotationTextShadowOffsetY\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",23)':{tag:'(0029,\"Silhouette Annot V1.0\",23)',vr:\"LT\",name:\"AnnotationLineColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",24)':{tag:'(0029,\"Silhouette Annot V1.0\",24)',vr:\"UL\",name:\"AnnotationLineThickness\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",25)':{tag:'(0029,\"Silhouette Annot V1.0\",25)',vr:\"UL\",name:\"AnnotationLineType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",26)':{tag:'(0029,\"Silhouette Annot V1.0\",26)',vr:\"UL\",name:\"AnnotationLineStyle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",27)':{tag:'(0029,\"Silhouette Annot V1.0\",27)',vr:\"UL\",name:\"AnnotationLineDashLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",28)':{tag:'(0029,\"Silhouette Annot V1.0\",28)',vr:\"UL\",name:\"AnnotationLineAttachMode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",29)':{tag:'(0029,\"Silhouette Annot V1.0\",29)',vr:\"UL\",name:\"AnnotationLinePointCount\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",30)':{tag:'(0029,\"Silhouette Annot V1.0\",30)',vr:\"FD\",name:\"AnnotationLinePoints\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",31)':{tag:'(0029,\"Silhouette Annot V1.0\",31)',vr:\"UL\",name:\"AnnotationLineControlSize\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",32)':{tag:'(0029,\"Silhouette Annot V1.0\",32)',vr:\"LT\",name:\"AnnotationMarkerColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",33)':{tag:'(0029,\"Silhouette Annot V1.0\",33)',vr:\"UL\",name:\"AnnotationMarkerType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",34)':{tag:'(0029,\"Silhouette Annot V1.0\",34)',vr:\"UL\",name:\"AnnotationMarkerSize\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",35)':{tag:'(0029,\"Silhouette Annot V1.0\",35)',vr:\"FD\",name:\"AnnotationMarkerLocation\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",36)':{tag:'(0029,\"Silhouette Annot V1.0\",36)',vr:\"UL\",name:\"AnnotationMarkerAttachMode\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",37)':{tag:'(0029,\"Silhouette Annot V1.0\",37)',vr:\"LT\",name:\"AnnotationGeomColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",38)':{tag:'(0029,\"Silhouette Annot V1.0\",38)',vr:\"UL\",name:\"AnnotationGeomThickness\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",39)':{tag:'(0029,\"Silhouette Annot V1.0\",39)',vr:\"UL\",name:\"AnnotationGeomLineStyle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",40)':{tag:'(0029,\"Silhouette Annot V1.0\",40)',vr:\"UL\",name:\"AnnotationGeomDashLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",41)':{tag:'(0029,\"Silhouette Annot V1.0\",41)',vr:\"UL\",name:\"AnnotationGeomFillPattern\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",42)':{tag:'(0029,\"Silhouette Annot V1.0\",42)',vr:\"UL\",name:\"AnnotationInteractivity\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",43)':{tag:'(0029,\"Silhouette Annot V1.0\",43)',vr:\"FD\",name:\"AnnotationArrowLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",44)':{tag:'(0029,\"Silhouette Annot V1.0\",44)',vr:\"FD\",name:\"AnnotationArrowAngle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Annot V1.0\",45)':{tag:'(0029,\"Silhouette Annot V1.0\",45)',vr:\"UL\",name:\"AnnotationDontSave\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Graphics Export V1.0\",00)':{tag:'(0029,\"Silhouette Graphics Export V1.0\",00)',vr:\"UI\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",11)':{tag:'(0029,\"Silhouette Line V1.0\",11)',vr:\"IS\",name:\"LineName\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",12)':{tag:'(0029,\"Silhouette Line V1.0\",12)',vr:\"LT\",name:\"LineNameFont\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",13)':{tag:'(0029,\"Silhouette Line V1.0\",13)',vr:\"UL\",name:\"LineNameDisplay\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",14)':{tag:'(0029,\"Silhouette Line V1.0\",14)',vr:\"LT\",name:\"LineNormalColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",15)':{tag:'(0029,\"Silhouette Line V1.0\",15)',vr:\"UL\",name:\"LineType\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",16)':{tag:'(0029,\"Silhouette Line V1.0\",16)',vr:\"UL\",name:\"LineThickness\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",17)':{tag:'(0029,\"Silhouette Line V1.0\",17)',vr:\"UL\",name:\"LineStyle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",18)':{tag:'(0029,\"Silhouette Line V1.0\",18)',vr:\"UL\",name:\"LineDashLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",19)':{tag:'(0029,\"Silhouette Line V1.0\",19)',vr:\"UL\",name:\"LineInteractivity\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",20)':{tag:'(0029,\"Silhouette Line V1.0\",20)',vr:\"LT\",name:\"LineMeasurementColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",21)':{tag:'(0029,\"Silhouette Line V1.0\",21)',vr:\"LT\",name:\"LineMeasurementFont\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",22)':{tag:'(0029,\"Silhouette Line V1.0\",22)',vr:\"UL\",name:\"LineMeasurementDashLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",23)':{tag:'(0029,\"Silhouette Line V1.0\",23)',vr:\"UL\",name:\"LinePointSpace\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",24)':{tag:'(0029,\"Silhouette Line V1.0\",24)',vr:\"FD\",name:\"LinePoints\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",25)':{tag:'(0029,\"Silhouette Line V1.0\",25)',vr:\"UL\",name:\"LineControlPointSize\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",26)':{tag:'(0029,\"Silhouette Line V1.0\",26)',vr:\"UL\",name:\"LineControlPointSpace\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",27)':{tag:'(0029,\"Silhouette Line V1.0\",27)',vr:\"FD\",name:\"LineControlPoints\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",28)':{tag:'(0029,\"Silhouette Line V1.0\",28)',vr:\"LT\",name:\"LineLabel\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Line V1.0\",29)':{tag:'(0029,\"Silhouette Line V1.0\",29)',vr:\"UL\",name:\"LineDontSave\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",11)':{tag:'(0029,\"Silhouette ROI V1.0\",11)',vr:\"IS\",name:\"ROIName\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",12)':{tag:'(0029,\"Silhouette ROI V1.0\",12)',vr:\"LT\",name:\"ROINameFont\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",13)':{tag:'(0029,\"Silhouette ROI V1.0\",13)',vr:\"LT\",name:\"ROINormalColor\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",14)':{tag:'(0029,\"Silhouette ROI V1.0\",14)',vr:\"UL\",name:\"ROIFillPattern\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",15)':{tag:'(0029,\"Silhouette ROI V1.0\",15)',vr:\"UL\",name:\"ROIBpSeg\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",16)':{tag:'(0029,\"Silhouette ROI V1.0\",16)',vr:\"UN\",name:\"ROIBpSegPairs\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",17)':{tag:'(0029,\"Silhouette ROI V1.0\",17)',vr:\"UL\",name:\"ROISeedSpace\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",18)':{tag:'(0029,\"Silhouette ROI V1.0\",18)',vr:\"UN\",name:\"ROISeeds\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",19)':{tag:'(0029,\"Silhouette ROI V1.0\",19)',vr:\"UL\",name:\"ROILineThickness\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",20)':{tag:'(0029,\"Silhouette ROI V1.0\",20)',vr:\"UL\",name:\"ROILineStyle\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",21)':{tag:'(0029,\"Silhouette ROI V1.0\",21)',vr:\"UL\",name:\"ROILineDashLength\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",22)':{tag:'(0029,\"Silhouette ROI V1.0\",22)',vr:\"UL\",name:\"ROIInteractivity\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",23)':{tag:'(0029,\"Silhouette ROI V1.0\",23)',vr:\"UL\",name:\"ROINamePosition\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",24)':{tag:'(0029,\"Silhouette ROI V1.0\",24)',vr:\"UL\",name:\"ROINameDisplay\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",25)':{tag:'(0029,\"Silhouette ROI V1.0\",25)',vr:\"LT\",name:\"ROILabel\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",26)':{tag:'(0029,\"Silhouette ROI V1.0\",26)',vr:\"UL\",name:\"ROIShape\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",27)':{tag:'(0029,\"Silhouette ROI V1.0\",27)',vr:\"FD\",name:\"ROIShapeTilt\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",28)':{tag:'(0029,\"Silhouette ROI V1.0\",28)',vr:\"UL\",name:\"ROIShapePointsCount\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",29)':{tag:'(0029,\"Silhouette ROI V1.0\",29)',vr:\"UL\",name:\"ROIShapePointsSpace\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",30)':{tag:'(0029,\"Silhouette ROI V1.0\",30)',vr:\"FD\",name:\"ROIShapePoints\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",31)':{tag:'(0029,\"Silhouette ROI V1.0\",31)',vr:\"UL\",name:\"ROIShapeControlPointsCount\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",32)':{tag:'(0029,\"Silhouette ROI V1.0\",32)',vr:\"UL\",name:\"ROIShapeControlPointsSpace\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",33)':{tag:'(0029,\"Silhouette ROI V1.0\",33)',vr:\"FD\",name:\"ROIShapeControlPoints\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette ROI V1.0\",34)':{tag:'(0029,\"Silhouette ROI V1.0\",34)',vr:\"UL\",name:\"ROIDontSave\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Sequence Ids V1.0\",41)':{tag:'(0029,\"Silhouette Sequence Ids V1.0\",41)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Sequence Ids V1.0\",42)':{tag:'(0029,\"Silhouette Sequence Ids V1.0\",42)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette Sequence Ids V1.0\",43)':{tag:'(0029,\"Silhouette Sequence Ids V1.0\",43)',vr:\"SQ\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",13)':{tag:'(0029,\"Silhouette V1.0\",13)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",14)':{tag:'(0029,\"Silhouette V1.0\",14)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",17)':{tag:'(0029,\"Silhouette V1.0\",17)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",18)':{tag:'(0029,\"Silhouette V1.0\",18)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",19)':{tag:'(0029,\"Silhouette V1.0\",19)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",1a)':{tag:'(0029,\"Silhouette V1.0\",1a)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",1b)':{tag:'(0029,\"Silhouette V1.0\",1b)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",1c)':{tag:'(0029,\"Silhouette V1.0\",1c)',vr:\"UL\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",1d)':{tag:'(0029,\"Silhouette V1.0\",1d)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",1e)':{tag:'(0029,\"Silhouette V1.0\",1e)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",21)':{tag:'(0029,\"Silhouette V1.0\",21)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",22)':{tag:'(0029,\"Silhouette V1.0\",22)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",23)':{tag:'(0029,\"Silhouette V1.0\",23)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",24)':{tag:'(0029,\"Silhouette V1.0\",24)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",25)':{tag:'(0029,\"Silhouette V1.0\",25)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",27)':{tag:'(0029,\"Silhouette V1.0\",27)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",28)':{tag:'(0029,\"Silhouette V1.0\",28)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",29)':{tag:'(0029,\"Silhouette V1.0\",29)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",30)':{tag:'(0029,\"Silhouette V1.0\",30)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",52)':{tag:'(0029,\"Silhouette V1.0\",52)',vr:\"US\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",53)':{tag:'(0029,\"Silhouette V1.0\",53)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",54)':{tag:'(0029,\"Silhouette V1.0\",54)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",55)':{tag:'(0029,\"Silhouette V1.0\",55)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",56)':{tag:'(0029,\"Silhouette V1.0\",56)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0029,\"Silhouette V1.0\",57)':{tag:'(0029,\"Silhouette V1.0\",57)',vr:\"UN\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0135,\"SONOWAND AS\",10)':{tag:'(0135,\"SONOWAND AS\",10)',vr:\"LO\",name:\"UltrasoundScannerName\",vm:\"1\",version:\"PrivateTag\"},'(0135,\"SONOWAND AS\",11)':{tag:'(0135,\"SONOWAND AS\",11)',vr:\"LO\",name:\"TransducerSerial\",vm:\"1\",version:\"PrivateTag\"},'(0135,\"SONOWAND AS\",12)':{tag:'(0135,\"SONOWAND AS\",12)',vr:\"LO\",name:\"ProbeApplication\",vm:\"1\",version:\"PrivateTag\"},'(0017,\"SVISION\",00)':{tag:'(0017,\"SVISION\",00)',vr:\"LO\",name:\"ExtendedBodyPart\",vm:\"1\",version:\"PrivateTag\"},'(0017,\"SVISION\",10)':{tag:'(0017,\"SVISION\",10)',vr:\"LO\",name:\"ExtendedViewPosition\",vm:\"1\",version:\"PrivateTag\"},'(0017,\"SVISION\",F0)':{tag:'(0017,\"SVISION\",F0)',vr:\"IS\",name:\"ImagesSOPClass\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",00)':{tag:'(0019,\"SVISION\",00)',vr:\"IS\",name:\"AECField\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",01)':{tag:'(0019,\"SVISION\",01)',vr:\"IS\",name:\"AECFilmScreen\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",02)':{tag:'(0019,\"SVISION\",02)',vr:\"IS\",name:\"AECDensity\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",10)':{tag:'(0019,\"SVISION\",10)',vr:\"IS\",name:\"PatientThickness\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",18)':{tag:'(0019,\"SVISION\",18)',vr:\"IS\",name:\"BeamDistance\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",20)':{tag:'(0019,\"SVISION\",20)',vr:\"IS\",name:\"WorkstationNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",28)':{tag:'(0019,\"SVISION\",28)',vr:\"IS\",name:\"TubeNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",30)':{tag:'(0019,\"SVISION\",30)',vr:\"IS\",name:\"BuckyGrid\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",34)':{tag:'(0019,\"SVISION\",34)',vr:\"IS\",name:\"Focus\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",38)':{tag:'(0019,\"SVISION\",38)',vr:\"IS\",name:\"Child\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",40)':{tag:'(0019,\"SVISION\",40)',vr:\"IS\",name:\"CollimatorDistanceX\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",41)':{tag:'(0019,\"SVISION\",41)',vr:\"IS\",name:\"CollimatorDistanceY\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",50)':{tag:'(0019,\"SVISION\",50)',vr:\"IS\",name:\"CentralBeamHeight\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",60)':{tag:'(0019,\"SVISION\",60)',vr:\"IS\",name:\"BuckyAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",68)':{tag:'(0019,\"SVISION\",68)',vr:\"IS\",name:\"CArmAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",69)':{tag:'(0019,\"SVISION\",69)',vr:\"IS\",name:\"CollimatorAngle\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",70)':{tag:'(0019,\"SVISION\",70)',vr:\"IS\",name:\"FilterNumber\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",74)':{tag:'(0019,\"SVISION\",74)',vr:\"LO\",name:\"FilterMaterial1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",75)':{tag:'(0019,\"SVISION\",75)',vr:\"LO\",name:\"FilterMaterial2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",78)':{tag:'(0019,\"SVISION\",78)',vr:\"DS\",name:\"FilterThickness1\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",79)':{tag:'(0019,\"SVISION\",79)',vr:\"DS\",name:\"FilterThickness2\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",80)':{tag:'(0019,\"SVISION\",80)',vr:\"IS\",name:\"BuckyFormat\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",81)':{tag:'(0019,\"SVISION\",81)',vr:\"IS\",name:\"ObjectPosition\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",90)':{tag:'(0019,\"SVISION\",90)',vr:\"LO\",name:\"DeskCommand\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",A0)':{tag:'(0019,\"SVISION\",A0)',vr:\"DS\",name:\"ExtendedExposureTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",A1)':{tag:'(0019,\"SVISION\",A1)',vr:\"DS\",name:\"ActualExposureTime\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"SVISION\",A8)':{tag:'(0019,\"SVISION\",A8)',vr:\"DS\",name:\"ExtendedXRayTubeCurrent\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",00)':{tag:'(0021,\"SVISION\",00)',vr:\"DS\",name:\"NoiseReduction\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",01)':{tag:'(0021,\"SVISION\",01)',vr:\"DS\",name:\"ContrastAmplification\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",02)':{tag:'(0021,\"SVISION\",02)',vr:\"DS\",name:\"EdgeContrastBoosting\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",03)':{tag:'(0021,\"SVISION\",03)',vr:\"DS\",name:\"LatitudeReduction\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",10)':{tag:'(0021,\"SVISION\",10)',vr:\"LO\",name:\"FindRangeAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",11)':{tag:'(0021,\"SVISION\",11)',vr:\"DS\",name:\"ThresholdCAlgorithm\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",20)':{tag:'(0021,\"SVISION\",20)',vr:\"LO\",name:\"SensometricCurve\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",30)':{tag:'(0021,\"SVISION\",30)',vr:\"DS\",name:\"LowerWindowOffset\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",31)':{tag:'(0021,\"SVISION\",31)',vr:\"DS\",name:\"UpperWindowOffset\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",40)':{tag:'(0021,\"SVISION\",40)',vr:\"DS\",name:\"MinPrintableDensity\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",41)':{tag:'(0021,\"SVISION\",41)',vr:\"DS\",name:\"MaxPrintableDensity\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",90)':{tag:'(0021,\"SVISION\",90)',vr:\"DS\",name:\"Brightness\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",91)':{tag:'(0021,\"SVISION\",91)',vr:\"DS\",name:\"Contrast\",vm:\"1\",version:\"PrivateTag\"},'(0021,\"SVISION\",92)':{tag:'(0021,\"SVISION\",92)',vr:\"DS\",name:\"ShapeFactor\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SVISION\",00)':{tag:'(0023,\"SVISION\",00)',vr:\"LO\",name:\"ImageLaterality\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SVISION\",01)':{tag:'(0023,\"SVISION\",01)',vr:\"IS\",name:\"LetterPosition\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SVISION\",02)':{tag:'(0023,\"SVISION\",02)',vr:\"IS\",name:\"BurnedInAnnotation\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SVISION\",03)':{tag:'(0023,\"SVISION\",03)',vr:\"LO\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0023,\"SVISION\",F0)':{tag:'(0023,\"SVISION\",F0)',vr:\"IS\",name:\"ImageSOPClass\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",00)':{tag:'(0025,\"SVISION\",00)',vr:\"IS\",name:\"OriginalImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",01)':{tag:'(0025,\"SVISION\",01)',vr:\"IS\",name:\"NotProcessedImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",02)':{tag:'(0025,\"SVISION\",02)',vr:\"IS\",name:\"CutOutImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",03)':{tag:'(0025,\"SVISION\",03)',vr:\"IS\",name:\"DuplicatedImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",04)':{tag:'(0025,\"SVISION\",04)',vr:\"IS\",name:\"StoredImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",05)':{tag:'(0025,\"SVISION\",05)',vr:\"IS\",name:\"RetrievedImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",06)':{tag:'(0025,\"SVISION\",06)',vr:\"IS\",name:\"RemoteImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",07)':{tag:'(0025,\"SVISION\",07)',vr:\"IS\",name:\"MediaStoredImage\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",08)':{tag:'(0025,\"SVISION\",08)',vr:\"IS\",name:\"ImageState\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",20)':{tag:'(0025,\"SVISION\",20)',vr:\"LO\",name:\"SourceImageFile\",vm:\"1\",version:\"PrivateTag\"},'(0025,\"SVISION\",21)':{tag:'(0025,\"SVISION\",21)',vr:\"UI\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"SVISION\",00)':{tag:'(0027,\"SVISION\",00)',vr:\"IS\",name:\"NumberOfSeries\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"SVISION\",01)':{tag:'(0027,\"SVISION\",01)',vr:\"IS\",name:\"NumberOfStudies\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"SVISION\",10)':{tag:'(0027,\"SVISION\",10)',vr:\"DT\",name:\"OldestSeries\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"SVISION\",11)':{tag:'(0027,\"SVISION\",11)',vr:\"DT\",name:\"NewestSeries\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"SVISION\",12)':{tag:'(0027,\"SVISION\",12)',vr:\"DT\",name:\"OldestStudy\",vm:\"1\",version:\"PrivateTag\"},'(0027,\"SVISION\",13)':{tag:'(0027,\"SVISION\",13)',vr:\"DT\",name:\"NewestStudy\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"TOSHIBA_MEC_1.0\",01)':{tag:'(0009,\"TOSHIBA_MEC_1.0\",01)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0009,\"TOSHIBA_MEC_1.0\",02)':{tag:'(0009,\"TOSHIBA_MEC_1.0\",02)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0009,\"TOSHIBA_MEC_1.0\",03)':{tag:'(0009,\"TOSHIBA_MEC_1.0\",03)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0009,\"TOSHIBA_MEC_1.0\",04)':{tag:'(0009,\"TOSHIBA_MEC_1.0\",04)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0011,\"TOSHIBA_MEC_1.0\",01)':{tag:'(0011,\"TOSHIBA_MEC_1.0\",01)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0011,\"TOSHIBA_MEC_1.0\",02)':{tag:'(0011,\"TOSHIBA_MEC_1.0\",02)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_1.0\",01)':{tag:'(0019,\"TOSHIBA_MEC_1.0\",01)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_1.0\",02)':{tag:'(0019,\"TOSHIBA_MEC_1.0\",02)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"TOSHIBA_MEC_1.0\",01)':{tag:'(0021,\"TOSHIBA_MEC_1.0\",01)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"TOSHIBA_MEC_1.0\",02)':{tag:'(0021,\"TOSHIBA_MEC_1.0\",02)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0021,\"TOSHIBA_MEC_1.0\",03)':{tag:'(0021,\"TOSHIBA_MEC_1.0\",03)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_1.0\",01)':{tag:'(7ff1,\"TOSHIBA_MEC_1.0\",01)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_1.0\",02)':{tag:'(7ff1,\"TOSHIBA_MEC_1.0\",02)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_1.0\",03)':{tag:'(7ff1,\"TOSHIBA_MEC_1.0\",03)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_1.0\",10)':{tag:'(7ff1,\"TOSHIBA_MEC_1.0\",10)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",01)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",01)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",02)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",02)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",03)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",03)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",04)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",04)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",05)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",05)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",06)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",06)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",07)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",07)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",08)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",08)',vr:\"LT\",name:\"OrientationHeadFeet\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",09)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",09)',vr:\"LT\",name:\"ViewDirection\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",0a)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",0a)',vr:\"LT\",name:\"OrientationSupineProne\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",0b)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",0b)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",0c)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",0c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",0d)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",0d)',vr:\"TM\",name:\"Time\",vm:\"1\",version:\"PrivateTag\"},'(0019,\"TOSHIBA_MEC_CT_1.0\",0e)':{tag:'(0019,\"TOSHIBA_MEC_CT_1.0\",0e)',vr:\"DS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",01)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",01)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",02)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",02)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",03)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",03)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",04)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",04)',vr:\"IS\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",05)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",05)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",07)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",07)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",08)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",08)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",09)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",09)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0a)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0a)',vr:\"LT\",name:\"Unknown\",vm:\"1\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0b)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0b)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0c)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0c)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"},'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0d)':{tag:'(7ff1,\"TOSHIBA_MEC_CT_1.0\",0d)',vr:\"US\",name:\"Unknown\",vm:\"1-n\",version:\"PrivateTag\"}};\n\nvar handler = {\n  /**\n   * Get a proxied value from the array or property value\n   * Note that the property value get works even if you update the underlying object.\n   * Also, return true of proxy.__isProxy in order to distinguish proxies and not double proxy them.\n   */\n  get: function get(target, prop) {\n    if (prop == \"__isProxy\") return true;\n    if (prop in target) return target[prop];\n    return target[0][prop];\n  },\n  set: function set(obj, prop, value) {\n    if (typeof prop === \"number\") {\n      obj[prop] = value;\n    } else if (prop in obj) {\n      obj[prop] = value;\n    } else {\n      obj[0][prop] = value;\n    }\n\n    return true;\n  }\n};\n/**\n * Add a proxy object for sqZero or the src[0] element if sqZero is unspecified, AND\n * src is an array of length 1.\n *\n * If sqZero isn't passed in, then assume this is a create call on the destination object\n * itself, by:\n * 1. If not an object, return dest\n * 2. If an array of length != 1, return dest\n * 3. If an array, use dest[0] as sqZero\n * 4. Use dest as sqZero\n *\n * @example\n * src = [{a:5,b:'string', c:null}]\n * addAccessors(src)\n * src.c = 'outerChange'\n * src[0].b='innerChange'\n *\n * assert src.a===5\n * assert src[0].c === 'outerChange'\n * assert src.b === 'innerChange'\n */\n\nvar addAccessors = function addAccessors(dest, sqZero) {\n  if (dest.__isProxy) return dest;\n  var itemZero = sqZero;\n\n  if (itemZero === undefined) {\n    if (_typeof(dest) !== \"object\") return dest;\n    if (Array.isArray(dest) && dest.length !== 1) return dest;\n    itemZero = Array.isArray(dest) ? dest[0] : dest;\n  }\n\n  var ret = [itemZero];\n  return new Proxy(ret, handler);\n};\n\nvar DicomMetaDictionary = /*#__PURE__*/function () {\n  // intakes a custom dictionary that will be used to parse/denaturalize the dataset\n  function DicomMetaDictionary(customDictionary) {\n    _classCallCheck(this, DicomMetaDictionary);\n\n    this.customDictionary = customDictionary;\n    this.customNameMap = DicomMetaDictionary._generateCustomNameMap(customDictionary);\n  }\n\n  _createClass(DicomMetaDictionary, [{\n    key: \"denaturalizeDataset\",\n    value: // denaturalizes dataset using custom dictionary and nameMap\n    function denaturalizeDataset(dataset) {\n      return DicomMetaDictionary.denaturalizeDataset(dataset, this.customNameMap);\n    }\n  }], [{\n    key: \"punctuateTag\",\n    value: function punctuateTag(rawTag) {\n      if (rawTag.indexOf(\",\") !== -1) {\n        return rawTag;\n      }\n\n      if (rawTag.length === 8 && rawTag === rawTag.match(/[0-9a-fA-F]*/)[0]) {\n        var tag = rawTag.toUpperCase();\n        return \"(\" + tag.substring(0, 4) + \",\" + tag.substring(4, 8) + \")\";\n      }\n    }\n  }, {\n    key: \"unpunctuateTag\",\n    value: function unpunctuateTag(tag) {\n      if (tag.indexOf(\",\") === -1) {\n        return tag;\n      }\n\n      return tag.substring(1, 10).replace(\",\", \"\");\n    }\n  }, {\n    key: \"parseIntFromTag\",\n    value: function parseIntFromTag(tag) {\n      var integerValue = parseInt(\"0x\" + DicomMetaDictionary.unpunctuateTag(tag));\n      return integerValue;\n    }\n  }, {\n    key: \"tagAsIntegerFromName\",\n    value: function tagAsIntegerFromName(name) {\n      var item = DicomMetaDictionary.nameMap[name];\n\n      if (item != undefined) {\n        return this.parseIntFromTag(item.tag);\n      } else {\n        return undefined;\n      }\n    } // fixes some common errors in VRs\n    // TODO: if this gets longer it could go in ValueRepresentation.js\n    // or in a dedicated class\n\n  }, {\n    key: \"cleanDataset\",\n    value: function cleanDataset(dataset) {\n      var cleanedDataset = {};\n      Object.keys(dataset).forEach(function (tag) {\n        var data = Object.assign({}, dataset[tag]);\n\n        if (data.vr == \"SQ\") {\n          var cleanedValues = [];\n          Object.keys(data.Value).forEach(function (index) {\n            cleanedValues.push(DicomMetaDictionary.cleanDataset(data.Value[index]));\n          });\n          data.Value = cleanedValues;\n        } else {\n          // remove null characters from strings\n          data.Value = Object.keys(data.Value).map(function (index) {\n            var item = data.Value[index];\n\n            if (item.constructor.name == \"String\") {\n              return item.replace(/\\0/, \"\");\n            }\n\n            return item;\n          });\n        }\n\n        cleanedDataset[tag] = data;\n      });\n      return cleanedDataset;\n    } // unlike naturalizeDataset, this only\n    // changes the names of the member variables\n    // but leaves the values intact\n\n  }, {\n    key: \"namifyDataset\",\n    value: function namifyDataset(dataset) {\n      var namedDataset = {};\n      Object.keys(dataset).forEach(function (tag) {\n        var data = Object.assign({}, dataset[tag]);\n\n        if (data.vr == \"SQ\") {\n          var namedValues = [];\n          Object.keys(data.Value).forEach(function (index) {\n            namedValues.push(DicomMetaDictionary.namifyDataset(data.Value[index]));\n          });\n          data.Value = namedValues;\n        }\n\n        var punctuatedTag = DicomMetaDictionary.punctuateTag(tag);\n        var entry = DicomMetaDictionary.dictionary[punctuatedTag];\n        var name = tag;\n\n        if (entry) {\n          name = entry.name;\n        }\n\n        namedDataset[name] = data;\n      });\n      return namedDataset;\n    }\n    /** converts from DICOM JSON Model dataset to a natural dataset\n     * - sequences become lists\n     * - single element lists are replaced by their first element,\n     *     with single element lists remaining lists, but being a\n     *     proxy for the child values, see addAccessors for examples\n     * - object member names are dictionary, not group/element tag\n     */\n\n  }, {\n    key: \"naturalizeDataset\",\n    value: function naturalizeDataset(dataset) {\n      var naturalDataset = {\n        _vrMap: {}\n      };\n      Object.keys(dataset).forEach(function (tag) {\n        var data = dataset[tag];\n        var punctuatedTag = DicomMetaDictionary.punctuateTag(tag);\n        var entry = DicomMetaDictionary.dictionary[punctuatedTag];\n        var naturalName = tag;\n\n        if (entry) {\n          naturalName = entry.name;\n\n          if (entry.vr == \"ox\") {\n            // when the vr is data-dependent, keep track of the original type\n            naturalDataset._vrMap[naturalName] = data.vr;\n          }\n        }\n\n        if (data.Value === undefined) {\n          // In the case of type 2, add this tag but explictly set it null to indicate its empty.\n          naturalDataset[naturalName] = null;\n\n          if (data.InlineBinary) {\n            naturalDataset[naturalName] = {\n              InlineBinary: data.InlineBinary\n            };\n          } else if (data.BulkDataURI) {\n            naturalDataset[naturalName] = {\n              BulkDataURI: data.BulkDataURI\n            };\n          }\n        } else {\n          if (data.vr === \"SQ\") {\n            // convert sequence to list of values\n            var naturalValues = [];\n            Object.keys(data.Value).forEach(function (index) {\n              naturalValues.push(DicomMetaDictionary.naturalizeDataset(data.Value[index]));\n            });\n            naturalDataset[naturalName] = naturalValues;\n          } else {\n            naturalDataset[naturalName] = data.Value;\n          }\n\n          if (naturalDataset[naturalName].length === 1) {\n            var sqZero = naturalDataset[naturalName][0];\n\n            if (sqZero && _typeof(sqZero) === \"object\" && !sqZero.length) {\n              naturalDataset[naturalName] = addAccessors(naturalDataset[naturalName], sqZero);\n            } else {\n              naturalDataset[naturalName] = sqZero;\n            }\n          }\n        }\n      });\n      return naturalDataset;\n    }\n  }, {\n    key: \"denaturalizeValue\",\n    value: function denaturalizeValue(naturalValue) {\n      var value = naturalValue;\n\n      if (!Array.isArray(value)) {\n        value = [value];\n      } else {\n        var thereIsUndefinedValues = naturalValue.some(function (item) {\n          return item === undefined;\n        });\n\n        if (thereIsUndefinedValues) {\n          throw new Error(\"There are undefined values at the array naturalValue in DicomMetaDictionary.denaturalizeValue\");\n        }\n      }\n\n      value = value.map(function (entry) {\n        return entry.constructor.name == \"Number\" ? String(entry) : entry;\n      });\n      return value;\n    } // keep the static function to support previous calls to the class\n\n  }, {\n    key: \"denaturalizeDataset\",\n    value: function denaturalizeDataset(dataset) {\n      var nameMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DicomMetaDictionary.nameMap;\n      var unnaturalDataset = {};\n      Object.keys(dataset).forEach(function (naturalName) {\n        // check if it's a sequence\n        var name = naturalName;\n        var entry = nameMap[name];\n\n        if (entry) {\n          var dataValue = dataset[naturalName];\n\n          if (dataValue === undefined) {\n            // handle the case where it was deleted from the object but is in keys\n            return;\n          } // process this one entry\n\n\n          var dataItem = {\n            vr: entry.vr,\n            Value: dataset[naturalName]\n          };\n\n          if (dataValue !== null) {\n            if (entry.vr == \"ox\") {\n              if (dataset._vrMap && dataset._vrMap[naturalName]) {\n                dataItem.vr = dataset._vrMap[naturalName];\n              } else {\n                log.error(\"No value representation given for\", naturalName);\n              }\n            }\n\n            dataItem.Value = DicomMetaDictionary.denaturalizeValue(dataItem.Value);\n\n            if (entry.vr == \"SQ\") {\n              var unnaturalValues = [];\n\n              for (var datasetIndex = 0; datasetIndex < dataItem.Value.length; datasetIndex++) {\n                var nestedDataset = dataItem.Value[datasetIndex];\n                unnaturalValues.push(DicomMetaDictionary.denaturalizeDataset(nestedDataset, nameMap));\n              }\n\n              dataItem.Value = unnaturalValues;\n            }\n\n            var vr = ValueRepresentation.createByTypeString(dataItem.vr);\n\n            if (!vr.isBinary() && vr.maxLength) {\n              dataItem.Value = dataItem.Value.map(function (value) {\n                if (value.length > vr.maxLength) {\n                  log.warn(\"Truncating value \".concat(value, \" of \").concat(naturalName, \" because it is longer than \").concat(vr.maxLength));\n                  return value.slice(0, vr.maxLength);\n                } else {\n                  return value;\n                }\n              });\n            }\n          }\n\n          var tag = DicomMetaDictionary.unpunctuateTag(entry.tag);\n          unnaturalDataset[tag] = dataItem;\n        } else {\n          var validMetaNames = [\"_vrMap\", \"_meta\"];\n\n          if (validMetaNames.indexOf(name) == -1) {\n            log.warn(\"Unknown name in dataset\", name, \":\", dataset[name]);\n          }\n        }\n      });\n      return unnaturalDataset;\n    }\n  }, {\n    key: \"uid\",\n    value: function uid() {\n      var uid = \"2.25.\" + Math.floor(1 + Math.random() * 9);\n\n      for (var index = 0; index < 38; index++) {\n        uid = uid + Math.floor(Math.random() * 10);\n      }\n\n      return uid;\n    } // date and time in UTC\n\n  }, {\n    key: \"date\",\n    value: function date() {\n      var now = new Date();\n      return now.toISOString().replace(/-/g, \"\").slice(0, 8);\n    }\n  }, {\n    key: \"time\",\n    value: function time() {\n      var now = new Date();\n      return now.toISOString().replace(/:/g, \"\").slice(11, 17);\n    }\n  }, {\n    key: \"dateTime\",\n    value: function dateTime() {\n      // \"2017-07-07T16:09:18.079Z\" -> \"20170707160918.079\"\n      var now = new Date();\n      return now.toISOString().replace(/[:\\-TZ]/g, \"\");\n    }\n  }, {\n    key: \"_generateNameMap\",\n    value: function _generateNameMap() {\n      DicomMetaDictionary.nameMap = {};\n      Object.keys(DicomMetaDictionary.dictionary).forEach(function (tag) {\n        var dict = DicomMetaDictionary.dictionary[tag];\n\n        if (dict.version != \"PrivateTag\") {\n          DicomMetaDictionary.nameMap[dict.name] = dict;\n        }\n      });\n    }\n  }, {\n    key: \"_generateCustomNameMap\",\n    value: function _generateCustomNameMap(dictionary) {\n      var nameMap = {};\n      Object.keys(dictionary).forEach(function (tag) {\n        var dict = dictionary[tag];\n\n        if (dict.version != \"PrivateTag\") {\n          nameMap[dict.name] = dict;\n        }\n      });\n      return nameMap;\n    }\n  }, {\n    key: \"_generateUIDMap\",\n    value: function _generateUIDMap() {\n      DicomMetaDictionary.sopClassUIDsByName = {};\n      Object.keys(DicomMetaDictionary.sopClassNamesByUID).forEach(function (uid) {\n        var name = DicomMetaDictionary.sopClassNamesByUID[uid];\n        DicomMetaDictionary.sopClassUIDsByName[name] = uid;\n      });\n    }\n  }]);\n\n  return DicomMetaDictionary;\n}(); // Subset of those listed at:\n// http://dicom.nema.org/medical/dicom/current/output/html/part04.html#sect_B.5\n\n\nDicomMetaDictionary.sopClassNamesByUID = {\n  \"1.2.840.10008.5.1.4.1.1.2\": \"CTImage\",\n  \"1.2.840.10008.5.1.4.1.1.2.1\": \"EnhancedCTImage\",\n  \"1.2.840.10008.5.1.4.1.1.2.2\": \"LegacyConvertedEnhancedCTImage\",\n  \"1.2.840.10008.5.1.4.1.1.3.1\": \"USMultiframeImage\",\n  \"1.2.840.10008.5.1.4.1.1.4\": \"MRImage\",\n  \"1.2.840.10008.5.1.4.1.1.4.1\": \"EnhancedMRImage\",\n  \"1.2.840.10008.5.1.4.1.1.4.2\": \"MRSpectroscopy\",\n  \"1.2.840.10008.5.1.4.1.1.4.3\": \"EnhancedMRColorImage\",\n  \"1.2.840.10008.5.1.4.1.1.4.4\": \"LegacyConvertedEnhancedMRImage\",\n  \"1.2.840.10008.5.1.4.1.1.6.1\": \"USImage\",\n  \"1.2.840.10008.5.1.4.1.1.6.2\": \"EnhancedUSVolume\",\n  \"1.2.840.10008.5.1.4.1.1.7\": \"SecondaryCaptureImage\",\n  \"1.2.840.10008.5.1.4.1.1.30\": \"ParametricMapStorage\",\n  \"1.2.840.10008.5.1.4.1.1.66\": \"RawData\",\n  \"1.2.840.10008.5.1.4.1.1.66.1\": \"SpatialRegistration\",\n  \"1.2.840.10008.5.1.4.1.1.66.2\": \"SpatialFiducials\",\n  \"1.2.840.10008.5.1.4.1.1.66.3\": \"DeformableSpatialRegistration\",\n  \"1.2.840.10008.5.1.4.1.1.66.4\": \"Segmentation\",\n  \"1.2.840.10008.5.1.4.1.1.67\": \"RealWorldValueMapping\",\n  \"1.2.840.10008.5.1.4.1.1.88.11\": \"BasicTextSR\",\n  \"1.2.840.10008.5.1.4.1.1.88.22\": \"EnhancedSR\",\n  \"1.2.840.10008.5.1.4.1.1.88.33\": \"ComprehensiveSR\",\n  \"1.2.840.10008.5.1.4.1.1.128\": \"PETImage\",\n  \"1.2.840.10008.5.1.4.1.1.130\": \"EnhancedPETImage\",\n  \"1.2.840.10008.5.1.4.1.1.128.1\": \"LegacyConvertedEnhancedPETImage\"\n};\nDicomMetaDictionary.dictionary = dictionary;\n\nDicomMetaDictionary._generateNameMap();\n\nDicomMetaDictionary._generateUIDMap();\n\nvar IMPLICIT_LITTLE_ENDIAN$1 = \"1.2.840.10008.1.2\";\nvar EXPLICIT_LITTLE_ENDIAN$1 = \"1.2.840.10008.1.2.1\";\nvar DEFLATED_EXPLICIT_LITTLE_ENDIAN = \"1.2.840.10008.1.2.1.99\";\nvar EXPLICIT_BIG_ENDIAN = \"1.2.840.10008.1.2.2\";\nvar singleVRs$1 = [\"SQ\", \"OF\", \"OW\", \"OB\", \"UN\", \"LT\"];\nvar encodingMapping = {\n  \"\": \"iso-8859-1\",\n  \"iso-ir-6\": \"iso-8859-1\",\n  \"iso-ir-13\": \"shift-jis\",\n  \"iso-ir-100\": \"latin1\",\n  \"iso-ir-101\": \"iso-8859-2\",\n  \"iso-ir-109\": \"iso-8859-3\",\n  \"iso-ir-110\": \"iso-8859-4\",\n  \"iso-ir-126\": \"iso-ir-126\",\n  \"iso-ir-127\": \"iso-ir-127\",\n  \"iso-ir-138\": \"iso-ir-138\",\n  \"iso-ir-144\": \"iso-ir-144\",\n  \"iso-ir-148\": \"iso-ir-148\",\n  \"iso-ir-166\": \"tis-620\",\n  \"iso-2022-ir-6\": \"iso-8859-1\",\n  \"iso-2022-ir-13\": \"shift-jis\",\n  \"iso-2022-ir-87\": \"iso-2022-jp\",\n  \"iso-2022-ir-100\": \"latin1\",\n  \"iso-2022-ir-101\": \"iso-8859-2\",\n  \"iso-2022-ir-109\": \"iso-8859-3\",\n  \"iso-2022-ir-110\": \"iso-8859-4\",\n  \"iso-2022-ir-126\": \"iso-ir-126\",\n  \"iso-2022-ir-127\": \"iso-ir-127\",\n  \"iso-2022-ir-138\": \"iso-ir-138\",\n  \"iso-2022-ir-144\": \"iso-ir-144\",\n  \"iso-2022-ir-148\": \"iso-ir-148\",\n  \"iso-2022-ir-149\": \"euc-kr\",\n  \"iso-2022-ir-159\": \"iso-2022-jp\",\n  \"iso-2022-ir-166\": \"tis-620\",\n  \"iso-2022-ir-58\": \"iso-ir-58\",\n  \"iso-ir-192\": \"utf-8\",\n  gb18030: \"gb18030\",\n  \"iso-2022-gbk\": \"gbk\",\n  \"iso-2022-58\": \"gb2312\",\n  gbk: \"gbk\"\n};\nvar encapsulatedSyntaxes = [\"1.2.840.10008.1.2.4.50\", \"1.2.840.10008.1.2.4.51\", \"1.2.840.10008.1.2.4.57\", \"1.2.840.10008.1.2.4.70\", \"1.2.840.10008.1.2.4.80\", \"1.2.840.10008.1.2.4.81\", \"1.2.840.10008.1.2.4.90\", \"1.2.840.10008.1.2.4.91\", \"1.2.840.10008.1.2.4.92\", \"1.2.840.10008.1.2.4.93\", \"1.2.840.10008.1.2.4.94\", \"1.2.840.10008.1.2.4.95\", \"1.2.840.10008.1.2.5\", \"1.2.840.10008.1.2.6.1\", \"1.2.840.10008.1.2.4.100\", \"1.2.840.10008.1.2.4.102\", \"1.2.840.10008.1.2.4.103\"];\n\nvar DicomMessage = /*#__PURE__*/function () {\n  function DicomMessage() {\n    _classCallCheck(this, DicomMessage);\n  }\n\n  _createClass(DicomMessage, null, [{\n    key: \"read\",\n    value: function read(bufferStream, syntax, ignoreErrors) {\n      var untilTag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var includeUntilTagValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      console.warn(\"DicomMessage.read to be deprecated after dcmjs 0.24.x\");\n      return this._read(bufferStream, syntax, {\n        ignoreErrors: ignoreErrors,\n        untilTag: untilTag,\n        includeUntilTagValue: includeUntilTagValue\n      });\n    }\n  }, {\n    key: \"readTag\",\n    value: function readTag(bufferStream, syntax) {\n      var untilTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var includeUntilTagValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      console.warn(\"DicomMessage.readTag to be deprecated after dcmjs 0.24.x\");\n      return this._readTag(bufferStream, syntax, {\n        untilTag: untilTag,\n        includeUntilTagValue: includeUntilTagValue\n      });\n    }\n  }, {\n    key: \"_read\",\n    value: function _read(bufferStream, syntax) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        ignoreErrors: false,\n        untilTag: null,\n        includeUntilTagValue: false\n      };\n      var ignoreErrors = options.ignoreErrors,\n          untilTag = options.untilTag;\n      var dict = {};\n\n      try {\n        while (!bufferStream.end()) {\n          var readInfo = DicomMessage._readTag(bufferStream, syntax, options);\n\n          var cleanTagString = readInfo.tag.toCleanString();\n\n          if (cleanTagString === \"00080005\") {\n            if (readInfo.values.length > 0) {\n              var coding = readInfo.values[0];\n              coding = coding.replace(/[_ ]/g, \"-\").toLowerCase();\n\n              if (coding in encodingMapping) {\n                coding = encodingMapping[coding];\n                bufferStream.setDecoder(new TextDecoder(coding));\n              } else if (ignoreErrors) {\n                console.warn(\"Unsupported character set: \".concat(coding, \", using default character set\"));\n              } else {\n                throw Error(\"Unsupported character set: \".concat(coding));\n              }\n            }\n\n            if (readInfo.values.length > 1) {\n              if (ignoreErrors) {\n                console.warn(\"Using multiple character sets is not supported, proceeding with just the first character set\", readInfo.values);\n              } else {\n                throw Error(\"Using multiple character sets is not supported: \".concat(readInfo.values));\n              }\n            }\n\n            readInfo.values = [\"ISO_IR 192\"]; // change SpecificCharacterSet to UTF-8\n          }\n\n          dict[cleanTagString] = {\n            vr: readInfo.vr.type,\n            Value: readInfo.values\n          };\n\n          if (untilTag && untilTag === cleanTagString) {\n            break;\n          }\n        }\n\n        return dict;\n      } catch (err) {\n        if (ignoreErrors) {\n          console.warn(\"WARN:\", err);\n          return dict;\n        }\n\n        throw err;\n      }\n    }\n  }, {\n    key: \"_normalizeSyntax\",\n    value: function _normalizeSyntax(syntax) {\n      if (syntax == IMPLICIT_LITTLE_ENDIAN$1 || syntax == EXPLICIT_LITTLE_ENDIAN$1 || syntax == EXPLICIT_BIG_ENDIAN) {\n        return syntax;\n      } else {\n        return EXPLICIT_LITTLE_ENDIAN$1;\n      }\n    }\n  }, {\n    key: \"isEncapsulated\",\n    value: function isEncapsulated(syntax) {\n      return encapsulatedSyntaxes.indexOf(syntax) != -1;\n    }\n  }, {\n    key: \"readFile\",\n    value: function readFile(buffer) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        ignoreErrors: false,\n        untilTag: null,\n        includeUntilTagValue: false,\n        noCopy: false\n      };\n      var stream = new ReadBufferStream(buffer, null, {\n        noCopy: options.noCopy\n      }),\n          useSyntax = EXPLICIT_LITTLE_ENDIAN$1;\n      stream.reset();\n      stream.increment(128);\n\n      if (stream.readAsciiString(4) !== \"DICM\") {\n        throw new Error(\"Invalid DICOM file, expected header is missing\");\n      }\n\n      var el = DicomMessage._readTag(stream, useSyntax);\n\n      if (el.tag.toCleanString() !== \"00020000\") {\n        throw new Error(\"Invalid DICOM file, meta length tag is malformed or not present.\");\n      }\n\n      var metaLength = el.values[0]; //read header buffer\n\n      var metaStream = stream.more(metaLength);\n\n      var metaHeader = DicomMessage._read(metaStream, useSyntax, options); //get the syntax\n\n\n      var mainSyntax = metaHeader[\"00020010\"].Value[0]; //in case of deflated dataset, decompress and continue\n\n      if (mainSyntax === DEFLATED_EXPLICIT_LITTLE_ENDIAN) {\n        stream = new DeflatedReadBufferStream(stream, {\n          noCopy: options.noCopy\n        });\n      }\n\n      mainSyntax = DicomMessage._normalizeSyntax(mainSyntax);\n\n      var objects = DicomMessage._read(stream, mainSyntax, options);\n\n      var dicomDict = new DicomDict(metaHeader);\n      dicomDict.dict = objects;\n      return dicomDict;\n    }\n  }, {\n    key: \"writeTagObject\",\n    value: function writeTagObject(stream, tagString, vr, values, syntax, writeOptions) {\n      var tag = Tag.fromString(tagString);\n      tag.write(stream, vr, values, syntax, writeOptions);\n    }\n  }, {\n    key: \"write\",\n    value: function write(jsonObjects, useStream, syntax, writeOptions) {\n      var written = 0;\n      var sortedTags = Object.keys(jsonObjects).sort();\n      sortedTags.forEach(function (tagString) {\n        var tag = Tag.fromString(tagString),\n            tagObject = jsonObjects[tagString],\n            vrType = tagObject.vr,\n            values = tagObject.Value;\n        written += tag.write(useStream, vrType, values, syntax, writeOptions);\n      });\n      return written;\n    }\n  }, {\n    key: \"_readTag\",\n    value: function _readTag(stream, syntax) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        untilTag: null,\n        includeUntilTagValue: false\n      };\n      var untilTag = options.untilTag,\n          includeUntilTagValue = options.includeUntilTagValue;\n      var implicit = syntax == IMPLICIT_LITTLE_ENDIAN$1 ? true : false,\n          isLittleEndian = syntax == IMPLICIT_LITTLE_ENDIAN$1 || syntax == EXPLICIT_LITTLE_ENDIAN$1 ? true : false;\n      var oldEndian = stream.isLittleEndian;\n      stream.setEndian(isLittleEndian);\n      var tag = Tag.readTag(stream);\n\n      if (untilTag === tag.toCleanString() && untilTag !== null) {\n        if (!includeUntilTagValue) {\n          return {\n            tag: tag,\n            vr: 0,\n            values: 0\n          };\n        }\n      }\n\n      var length = null,\n          vr = null,\n          vrType;\n\n      if (implicit) {\n        length = stream.readUint32();\n        var elementData = DicomMessage.lookupTag(tag);\n\n        if (elementData) {\n          vrType = elementData.vr;\n        } else {\n          //unknown tag\n          if (length == 0xffffffff) {\n            vrType = \"SQ\";\n          } else if (tag.isPixelDataTag()) {\n            vrType = \"OW\";\n          } else if (vrType == \"xs\") {\n            vrType = \"US\";\n          } else if (tag.isPrivateCreator()) {\n            vrType = \"LO\";\n          } else {\n            vrType = \"UN\";\n          }\n        }\n\n        vr = ValueRepresentation.createByTypeString(vrType);\n      } else {\n        vrType = stream.readVR();\n        vr = ValueRepresentation.createByTypeString(vrType);\n\n        if (vr.isExplicit()) {\n          stream.increment(2);\n          length = stream.readUint32();\n        } else {\n          length = stream.readUint16();\n        }\n      }\n\n      var values = [];\n\n      if (vr.isBinary() && length > vr.maxLength && !vr.noMultiple) {\n        var times = length / vr.maxLength,\n            i = 0;\n\n        while (i++ < times) {\n          values.push(vr.read(stream, vr.maxLength, syntax));\n        }\n      } else {\n        var val = vr.read(stream, length, syntax);\n\n        if (!vr.isBinary() && singleVRs$1.indexOf(vr.type) == -1) {\n          values = val;\n\n          if (typeof val === \"string\") {\n            values = val.split(String.fromCharCode(0x5c));\n          }\n        } else if (vr.type == \"SQ\") {\n          values = val;\n        } else if (vr.type == \"OW\" || vr.type == \"OB\") {\n          values = val;\n        } else {\n          Array.isArray(val) ? values = val : values.push(val);\n        }\n      }\n\n      stream.setEndian(oldEndian);\n      return {\n        tag: tag,\n        vr: vr,\n        values: values\n      };\n    }\n  }, {\n    key: \"lookupTag\",\n    value: function lookupTag(tag) {\n      return DicomMetaDictionary.dictionary[tag.toString()];\n    }\n  }]);\n\n  return DicomMessage;\n}();\n\nvar EXPLICIT_LITTLE_ENDIAN$2 = \"1.2.840.10008.1.2.1\";\n\nvar DicomDict = /*#__PURE__*/function () {\n  function DicomDict(meta) {\n    _classCallCheck(this, DicomDict);\n\n    this.meta = meta;\n    this.dict = {};\n  }\n\n  _createClass(DicomDict, [{\n    key: \"upsertTag\",\n    value: function upsertTag(tag, vr, values) {\n      if (this.dict[tag]) {\n        this.dict[tag].Value = values;\n      } else {\n        this.dict[tag] = {\n          vr: vr,\n          Value: values\n        };\n      }\n    }\n  }, {\n    key: \"write\",\n    value: function write() {\n      var writeOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        allowInvalidVRLength: false\n      };\n      var metaSyntax = EXPLICIT_LITTLE_ENDIAN$2;\n      var fileStream = new WriteBufferStream(4096, true);\n      fileStream.writeUint8Repeat(0, 128);\n      fileStream.writeAsciiString(\"DICM\");\n      var metaStream = new WriteBufferStream(1024);\n\n      if (!this.meta[\"00020010\"]) {\n        this.meta[\"00020010\"] = {\n          vr: \"UI\",\n          Value: [EXPLICIT_LITTLE_ENDIAN$2]\n        };\n      }\n\n      DicomMessage.write(this.meta, metaStream, metaSyntax, writeOptions);\n      DicomMessage.writeTagObject(fileStream, \"00020000\", \"UL\", metaStream.size, metaSyntax, writeOptions);\n      fileStream.concat(metaStream);\n      var useSyntax = this.meta[\"00020010\"].Value[0];\n      DicomMessage.write(this.dict, fileStream, useSyntax, writeOptions);\n      return fileStream.getBuffer();\n    }\n  }]);\n\n  return DicomDict;\n}();\n\nvar DICOMWEB = /*#__PURE__*/function () {\n  /*\n  JavaScript DICOMweb REST API for browser use.\n   Design:\n  * map rest api to high-level code with modern conventions\n  ** ES6: classes, arrow functions, let...\n  ** promises\n  ** json converted to objects\n  examples: see tests() method below.\n  */\n  function DICOMWEB() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, DICOMWEB);\n\n    this.rootURL = options.rootURL;\n    this.progressCallback = options.progressCallback;\n  }\n\n  _createClass(DICOMWEB, [{\n    key: \"request\",\n    value: function request(endpoint) {\n      var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var payload = arguments.length > 2 ? arguments[2] : undefined;\n      var responseType = DICOMWEB.responseType(endpoint);\n      var service = DICOMWEB.endpointService(endpoint);\n      var url = this.rootURL + \"/\" + service + endpoint;\n      var firstParameter = true;\n      Object.keys(parameters).forEach(function (parameter) {\n        if (firstParameter) {\n          url += \"?\";\n          firstParameter = false;\n        } else {\n          url += \"&\";\n        }\n\n        url += parameter + \"=\" + encodeURIComponent(parameters[parameter]);\n      });\n\n      function promiseHandler(resolve, reject) {\n        var request = new XMLHttpRequest();\n        request.open(\"GET\", url);\n        request.responseType = responseType;\n\n        request.onload = function () {\n          resolve(request.response);\n        };\n\n        request.onprogress = this.progressCallback;\n\n        request.onerror = function (error) {\n          log.error(request.response);\n          reject(error);\n        };\n\n        request.send(payload);\n      }\n\n      var promise = new Promise(promiseHandler.bind(this));\n      return promise;\n    }\n  }, {\n    key: \"patients\",\n    value: function patients() {\n      return this.request(\"patients\");\n    }\n  }, {\n    key: \"studies\",\n    value: function studies(patientID) {\n      return this.request(\"studies\", {\n        PatientID: patientID\n      });\n    }\n  }, {\n    key: \"series\",\n    value: function series(studyInstanceUID) {\n      return this.request(\"series\", {\n        StudyInstanceUID: studyInstanceUID\n      });\n    }\n  }, {\n    key: \"instances\",\n    value: function instances(studyInstanceUID, seriesInstanceUID) {\n      return this.request(\"instances\", {\n        StudyInstanceUID: studyInstanceUID,\n        SeriesInstanceUID: seriesInstanceUID\n      });\n    }\n  }, {\n    key: \"instance\",\n    value: function instance(studyInstanceUID, seriesInstanceUID, sopInstanceUID) {\n      return this.request(\"wado\", {\n        requestType: \"WADO\",\n        studyUID: studyInstanceUID,\n        seriesUID: seriesInstanceUID,\n        objectUID: sopInstanceUID,\n        contentType: \"application/dicom\"\n      });\n    }\n  }, {\n    key: \"tests\",\n    value: function tests() {\n      var testingServerURL = \"http://quantome.org:4242/dcm4chee-arc/aets/DCM4CHEE\";\n      var testOptions = {\n        rootURL: testingServerURL\n      };\n      new DICOMWEB(testOptions).patients().then(function (responses) {\n        responses.forEach(function (patient) {\n          log.log(patient);\n        });\n      });\n    }\n  }], [{\n    key: \"responseType\",\n    value: function responseType(endpoint) {\n      var types = {\n        wado: \"arraybuffer\"\n      };\n      return types[endpoint] ? types[endpoint] : \"json\";\n    } // which URL service to use for each of the high level services\n\n  }, {\n    key: \"endpointService\",\n    value: function endpointService(endpoint) {\n      var services = {\n        wado: \"\"\n      };\n      return Object.keys(services).indexOf(endpoint) != -1 ? services[endpoint] : \"rs/\";\n    }\n  }, {\n    key: \"randomEntry\",\n    value: function randomEntry(array) {\n      return array[Math.floor(Math.random() * array.length)];\n    }\n  }]);\n\n  return DICOMWEB;\n}();\n\n//\n// Handle DICOM and CIELAB colors\n// based on:\n// https://github.com/michaelonken/dcmtk/blob/3c68f0e882e22e6d9e2a42f836332c0ca21b3e7f/dcmiod/libsrc/cielabutil.cc\n//\n// RGB here refers to sRGB 0-1 per component.\n// dicomlab is CIELAB values as defined in the dicom standard\n// XYZ is CIEXYZ convention\n//\n// TODO: needs a test suite\n// TODO: only dicomlab2RGB tested on real data\n//\n//\nvar Colors = /*#__PURE__*/function () {\n  function Colors() {\n    _classCallCheck(this, Colors);\n  }\n\n  _createClass(Colors, null, [{\n    key: \"d65WhitePointXYZ\",\n    value: function d65WhitePointXYZ() {\n      // white points of D65 light point (CIELAB standard white point)\n      return [0.950456, 1.0, 1.088754];\n    }\n  }, {\n    key: \"dicomlab2RGB\",\n    value: function dicomlab2RGB(dicomlab) {\n      return Colors.lab2RGB(Colors.dicomlab2LAB(dicomlab));\n    }\n  }, {\n    key: \"rgb2DICOMLAB\",\n    value: function rgb2DICOMLAB(rgb) {\n      return Colors.lab2DICOMLAB(Colors.rgb2LAB(rgb));\n    }\n  }, {\n    key: \"dicomlab2LAB\",\n    value: function dicomlab2LAB(dicomlab) {\n      return [dicomlab[0] * 100.0 / 65535.0, // results in 0 <= L <= 100\n      dicomlab[1] * 255.0 / 65535.0 - 128, // results in -128 <= a <= 127\n      dicomlab[2] * 255.0 / 65535.0 - 128 // results in -128 <= b <= 127\n      ];\n    }\n  }, {\n    key: \"lab2DICOMLAB\",\n    value: function lab2DICOMLAB(lab) {\n      return [lab[0] * 65535.0 / 100.0, // results in 0 <= L <= 65535\n      (lab[1] + 128) * 65535.0 / 255.0, // results in 0 <= a <= 65535\n      (lab[2] + 128) * 65535.0 / 255.0 // results in 0 <= b <= 65535\n      ];\n    }\n  }, {\n    key: \"rgb2LAB\",\n    value: function rgb2LAB(rgb) {\n      return Colors.xyz2LAB(Colors.rgb2XYZ(rgb));\n    }\n  }, {\n    key: \"gammaCorrection\",\n    value: function gammaCorrection(n) {\n      if (n <= 0.0031306684425005883) {\n        return 12.92 * n;\n      } else {\n        return 1.055 * Math.pow(n, 0.416666666666666667) - 0.055;\n      }\n    }\n  }, {\n    key: \"invGammaCorrection\",\n    value: function invGammaCorrection(n) {\n      if (n <= 0.0404482362771076) {\n        return n / 12.92;\n      } else {\n        return Math.pow((n + 0.055) / 1.055, 2.4);\n      }\n    }\n  }, {\n    key: \"rgb2XYZ\",\n    value: function rgb2XYZ(rgb) {\n      var R = Colors.invGammaCorrection(rgb[0]);\n      var G = Colors.invGammaCorrection(rgb[1]);\n      var B = Colors.invGammaCorrection(rgb[2]);\n      return [0.4123955889674142161 * R + 0.3575834307637148171 * G + 0.1804926473817015735 * B, 0.2125862307855955516 * R + 0.7151703037034108499 * G + 0.07220049864333622685 * B, 0.01929721549174694484 * R + 0.1191838645808485318 * G + 0.950497125131579766 * B];\n    }\n  }, {\n    key: \"xyz2LAB\",\n    value: function xyz2LAB(xyz) {\n      var whitePoint = Colors.d65WhitePointXYZ();\n      var X = xyz[0] / whitePoint[0];\n      var Y = xyz[1] / whitePoint[1];\n      var Z = xyz[2] / whitePoint[2];\n      X = Colors.labf(X);\n      Y = Colors.labf(Y);\n      Z = Colors.labf(Z);\n      return [116 * Y - 16, 500 * (X - Y), 200 * (Y - Z)];\n    }\n  }, {\n    key: \"lab2RGB\",\n    value: function lab2RGB(lab) {\n      return Colors.xyz2RGB(Colors.lab2XYZ(lab));\n    }\n  }, {\n    key: \"lab2XYZ\",\n    value: function lab2XYZ(lab) {\n      var L = (lab[0] + 16) / 116;\n      var a = L + lab[1] / 500;\n      var b = L - lab[2] / 200;\n      var whitePoint = Colors.d65WhitePointXYZ();\n      return [whitePoint[0] * Colors.labfInv(a), whitePoint[1] * Colors.labfInv(L), whitePoint[2] * Colors.labfInv(b)];\n    }\n  }, {\n    key: \"xyz2RGB\",\n    value: function xyz2RGB(xyz) {\n      var R1 = 3.2406 * xyz[0] - 1.5372 * xyz[1] - 0.4986 * xyz[2];\n      var G1 = -0.9689 * xyz[0] + 1.8758 * xyz[1] + 0.0415 * xyz[2];\n      var B1 = 0.0557 * xyz[0] - 0.204 * xyz[1] + 1.057 * xyz[2];\n      /* Force nonnegative values so that gamma correction is well-defined. */\n\n      var minimumComponent = Math.min(R1, G1);\n      minimumComponent = Math.min(minimumComponent, B1);\n\n      if (minimumComponent < 0) {\n        R1 -= minimumComponent;\n        G1 -= minimumComponent;\n        B1 -= minimumComponent;\n      }\n      /* Transform from RGB to R'G'B' */\n\n\n      return [Colors.gammaCorrection(R1), Colors.gammaCorrection(G1), Colors.gammaCorrection(B1)];\n    }\n  }, {\n    key: \"labf\",\n    value: function labf(n) {\n      if (n >= 8.85645167903563082e-3) {\n        return Math.pow(n, 0.333333333333333);\n      } else {\n        return 841.0 / 108.0 * n + 4.0 / 29.0;\n      }\n    }\n  }, {\n    key: \"labfInv\",\n    value: function labfInv(n) {\n      if (n >= 0.206896551724137931) {\n        return n * n * n;\n      } else {\n        return 108.0 / 841.0 * (n - 4.0 / 29.0);\n      }\n    }\n  }]);\n\n  return Colors;\n}();\n\nvar global$1 = (typeof __webpack_require__.g !== \"undefined\" ? __webpack_require__.g :\n            typeof self !== \"undefined\" ? self :\n            typeof window !== \"undefined\" ? window : {});\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString$2 = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString$2.call(arr) == '[object Array]';\n};\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n  ? global$1.TYPED_ARRAY_SUPPORT\n  : true;\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nfunction datasetToDict(dataset) {\n  var fileMetaInformationVersionArray = new Uint8Array(2);\n  fileMetaInformationVersionArray[1] = 1;\n  var TransferSyntaxUID = dataset._meta.TransferSyntaxUID && dataset._meta.TransferSyntaxUID.Value && dataset._meta.TransferSyntaxUID.Value[0] ? dataset._meta.TransferSyntaxUID.Value[0] : \"1.2.840.10008.1.2.1\";\n  dataset._meta = {\n    MediaStorageSOPClassUID: dataset.SOPClassUID,\n    MediaStorageSOPInstanceUID: dataset.SOPInstanceUID,\n    ImplementationVersionName: \"dcmjs-0.0\",\n    TransferSyntaxUID: TransferSyntaxUID,\n    ImplementationClassUID: \"2.25.80302813137786398554742050926734630921603366648225212145404\",\n    FileMetaInformationVersion: fileMetaInformationVersionArray.buffer\n  };\n  var denaturalized = DicomMetaDictionary.denaturalizeDataset(dataset._meta);\n  var dicomDict = new DicomDict(denaturalized);\n  dicomDict.dict = DicomMetaDictionary.denaturalizeDataset(dataset);\n  return dicomDict;\n}\n\nfunction datasetToBuffer(dataset) {\n  return Buffer.from(datasetToDict(dataset).write());\n}\n\nfunction datasetToBlob(dataset) {\n  var buffer = datasetToBuffer(dataset);\n  return new Blob([buffer], {\n    type: \"application/dicom\"\n  });\n}\n\nvar DerivedDataset = /*#__PURE__*/function () {\n  function DerivedDataset(datasets) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DerivedDataset);\n\n    this.options = JSON.parse(JSON.stringify(options));\n    var o = this.options;\n    o.Manufacturer = options.Manufacturer || \"Unspecified\";\n    o.ManufacturerModelName = options.ManufacturerModelName || \"Unspecified\";\n    o.SeriesDescription = options.SeriesDescription || \"Research Derived series\";\n    o.SeriesNumber = options.SeriesNumber || \"99\";\n    o.SoftwareVersions = options.SoftwareVersions || \"0\";\n    o.DeviceSerialNumber = options.DeviceSerialNumber || \"1\";\n    var date = DicomMetaDictionary.date();\n    var time = DicomMetaDictionary.time();\n    o.SeriesDate = options.SeriesDate || date;\n    o.SeriesTime = options.SeriesTime || time;\n    o.ContentDate = options.ContentDate || date;\n    o.ContentTime = options.ContentTime || time;\n    o.SOPInstanceUID = options.SOPInstanceUID || DicomMetaDictionary.uid();\n    o.SeriesInstanceUID = options.SeriesInstanceUID || DicomMetaDictionary.uid();\n    o.ClinicalTrialTimePointID = options.ClinicalTrialTimePointID || \"\";\n    o.ClinicalTrialCoordinatingCenterName = options.ClinicalTrialCoordinatingCenterName || \"\";\n    o.ClinicalTrialSeriesID = options.ClinicalTrialSeriesID || \"\";\n    o.ImageComments = options.ImageComments || \"NOT FOR CLINICAL USE\";\n    o.ContentQualification = \"RESEARCH\";\n    this.referencedDatasets = datasets; // list of one or more dicom-like object instances\n\n    this.referencedDataset = this.referencedDatasets[0];\n    this.dataset = {\n      _vrMap: this.referencedDataset._vrMap,\n      _meta: this.referencedDataset._meta\n    };\n    this.derive();\n  }\n\n  _createClass(DerivedDataset, [{\n    key: \"assignToDataset\",\n    value: function assignToDataset(data) {\n      var _this = this;\n\n      Object.keys(data).forEach(function (key) {\n        return _this.dataset[key] = data[key];\n      });\n    }\n  }, {\n    key: \"assignFromReference\",\n    value: function assignFromReference(tags) {\n      var _this2 = this;\n\n      tags.forEach(function (tag) {\n        return _this2.dataset[tag] = _this2.referencedDataset[tag] || \"\";\n      });\n    }\n  }, {\n    key: \"assignFromOptions\",\n    value: function assignFromOptions(tags) {\n      var _this3 = this;\n\n      tags.forEach(function (tag) {\n        return _this3.dataset[tag] = _this3.options[tag] || \"\";\n      });\n    }\n  }, {\n    key: \"derive\",\n    value: function derive() {\n      // common for all instances in study\n      this.assignFromReference([\"AccessionNumber\", \"ReferringPhysicianName\", \"StudyDate\", \"StudyID\", \"StudyTime\", \"PatientName\", \"PatientID\", \"PatientBirthDate\", \"PatientSex\", \"PatientAge\", \"StudyInstanceUID\", \"StudyID\"]);\n      this.assignFromOptions([\"Manufacturer\", \"SoftwareVersions\", \"DeviceSerialNumber\", \"ManufacturerModelName\", \"SeriesDescription\", \"SeriesNumber\", \"ImageComments\", \"SeriesDate\", \"SeriesTime\", \"ContentDate\", \"ContentTime\", \"ContentQualification\", \"SOPInstanceUID\", \"SeriesInstanceUID\"]);\n    }\n  }], [{\n    key: \"copyDataset\",\n    value: function copyDataset(dataset) {\n      // copies everything but the buffers\n      return JSON.parse(JSON.stringify(dataset));\n    }\n  }]);\n\n  return DerivedDataset;\n}();\n\nvar DerivedPixels = /*#__PURE__*/function (_DerivedDataset) {\n  _inherits(DerivedPixels, _DerivedDataset);\n\n  var _super = _createSuper(DerivedPixels);\n\n  function DerivedPixels(datasets) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DerivedPixels);\n\n    _this = _super.call(this, datasets, options);\n    var o = _this.options;\n    o.ContentLabel = options.ContentLabel || \"\";\n    o.ContentDescription = options.ContentDescription || \"\";\n    o.ContentCreatorName = options.ContentCreatorName || \"\";\n    return _this;\n  } // this assumes a normalized multiframe input and will create\n  // a multiframe derived image\n\n\n  _createClass(DerivedPixels, [{\n    key: \"derive\",\n    value: function derive() {\n      _get(_getPrototypeOf(DerivedPixels.prototype), \"derive\", this).call(this);\n\n      this.assignToDataset({\n        ImageType: [\"DERIVED\", \"PRIMARY\"],\n        LossyImageCompression: \"00\",\n        InstanceNumber: \"1\"\n      });\n      this.assignFromReference([\"SOPClassUID\", \"Modality\", \"FrameOfReferenceUID\", \"PositionReferenceIndicator\", \"NumberOfFrames\", \"Rows\", \"Columns\", \"SamplesPerPixel\", \"PhotometricInterpretation\", \"BitsStored\", \"HighBit\"]);\n      this.assignFromOptions([\"ContentLabel\", \"ContentDescription\", \"ContentCreatorName\"]); //\n      // TODO: more carefully copy only PixelMeasures and related\n      // TODO: add derivation references\n      //\n\n      if (this.referencedDataset.SharedFunctionalGroupsSequence) {\n        this.dataset.SharedFunctionalGroupsSequence = DerivedDataset.copyDataset(this.referencedDataset.SharedFunctionalGroupsSequence);\n      }\n\n      if (this.referencedDataset.PerFrameFunctionalGroupsSequence) {\n        this.dataset.PerFrameFunctionalGroupsSequence = DerivedDataset.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence);\n      } // make an array of zeros for the pixels\n\n\n      this.dataset.PixelData = new ArrayBuffer(this.referencedDataset.PixelData.byteLength);\n    }\n  }]);\n\n  return DerivedPixels;\n}(DerivedDataset);\n\nvar DerivedImage = /*#__PURE__*/function (_DerivedPixels) {\n  _inherits(DerivedImage, _DerivedPixels);\n\n  var _super = _createSuper(DerivedImage);\n\n  function DerivedImage(datasets) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DerivedImage);\n\n    return _super.call(this, datasets, options);\n  }\n\n  _createClass(DerivedImage, [{\n    key: \"derive\",\n    value: function derive() {\n      _get(_getPrototypeOf(DerivedImage.prototype), \"derive\", this).call(this);\n\n      this.assignFromReference([\"WindowCenter\", \"WindowWidth\", \"BitsAllocated\", \"PixelRepresentation\", \"BodyPartExamined\", \"Laterality\", \"PatientPosition\", \"RescaleSlope\", \"RescaleIntercept\", \"PixelPresentation\", \"VolumetricProperties\", \"VolumeBasedCalculationTechnique\", \"PresentationLUTShape\"]);\n    }\n  }]);\n\n  return DerivedImage;\n}(DerivedPixels);\n\nvar Normalizer = /*#__PURE__*/function () {\n  function Normalizer(datasets) {\n    _classCallCheck(this, Normalizer);\n\n    this.datasets = datasets; // one or more dicom-like object instances\n\n    this.dataset = undefined; // a normalized multiframe dicom object instance\n  }\n\n  _createClass(Normalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      return \"No normalization defined\";\n    }\n  }], [{\n    key: \"consistentSOPClassUIDs\",\n    value: function consistentSOPClassUIDs(datasets) {\n      // return sopClassUID if all exist and match, otherwise undefined\n      var sopClassUID;\n      datasets.forEach(function (dataset) {\n        if (!dataset.SOPClassUID) {\n          return undefined;\n        }\n\n        if (!sopClassUID) {\n          sopClassUID = dataset.SOPClassUID;\n        }\n\n        if (dataset.SOPClassUID !== sopClassUID) {\n          log.error(\"inconsistent sopClassUIDs: \", dataset.SOPClassUID, sopClassUID);\n          return undefined;\n        }\n      });\n      return sopClassUID;\n    }\n  }, {\n    key: \"normalizerForSOPClassUID\",\n    value: function normalizerForSOPClassUID(sopClassUID) {\n      sopClassUID = sopClassUID.replace(/[^0-9.]/g, \"\"); // TODO: clean all VRs as part of normalizing\n\n      var toUID = DicomMetaDictionary.sopClassUIDsByName;\n      var sopClassUIDMap = {};\n      sopClassUIDMap[toUID.CTImage] = CTImageNormalizer;\n      sopClassUIDMap[toUID.ParametricMapStorage] = PMImageNormalizer;\n      sopClassUIDMap[toUID.MRImage] = MRImageNormalizer;\n      sopClassUIDMap[toUID.EnhancedCTImage] = EnhancedCTImageNormalizer;\n      sopClassUIDMap[toUID.LegacyConvertedEnhancedCTImage] = EnhancedCTImageNormalizer;\n      sopClassUIDMap[toUID.EnhancedMRImage] = EnhancedMRImageNormalizer;\n      sopClassUIDMap[toUID.LegacyConvertedEnhancedMRImage] = EnhancedMRImageNormalizer;\n      sopClassUIDMap[toUID.EnhancedUSVolume] = EnhancedUSVolumeNormalizer;\n      sopClassUIDMap[toUID.PETImage] = PETImageNormalizer;\n      sopClassUIDMap[toUID.EnhancedPETImage] = PETImageNormalizer;\n      sopClassUIDMap[toUID.LegacyConvertedEnhancedPETImage] = PETImageNormalizer;\n      sopClassUIDMap[toUID.Segmentation] = SEGImageNormalizer;\n      sopClassUIDMap[toUID.DeformableSpatialRegistration] = DSRNormalizer;\n      return sopClassUIDMap[sopClassUID];\n    }\n  }, {\n    key: \"isMultiframeSOPClassUID\",\n    value: function isMultiframeSOPClassUID(sopClassUID) {\n      var toUID = DicomMetaDictionary.sopClassUIDsByName;\n      var multiframeSOPClasses = [toUID.EnhancedMRImage, toUID.LegacyConvertedEnhancedMRImage, toUID.EnhancedCTImage, toUID.LegacyConvertedEnhancedCTImage, toUID.EnhancedUSVolume, toUID.EnhancedPETImage, toUID.LegacyConvertedEnhancedPETImage, toUID.Segmentation, toUID.ParametricMapStorage];\n      return multiframeSOPClasses.indexOf(sopClassUID) !== -1;\n    }\n  }, {\n    key: \"isMultiframeDataset\",\n    value: function isMultiframeDataset() {\n      var ds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataset;\n      var sopClassUID = ds.SOPClassUID.replace(/[^0-9.]/g, \"\"); // TODO: clean all VRs as part of normalizing\n\n      return Normalizer.isMultiframeSOPClassUID(sopClassUID);\n    }\n  }, {\n    key: \"normalizeToDataset\",\n    value: function normalizeToDataset(datasets) {\n      var sopClassUID = Normalizer.consistentSOPClassUIDs(datasets);\n      var normalizerClass = Normalizer.normalizerForSOPClassUID(sopClassUID);\n\n      if (!normalizerClass) {\n        log.error(\"no normalizerClass for \", sopClassUID);\n        return undefined;\n      }\n\n      var normalizer = new normalizerClass(datasets);\n      normalizer.normalize();\n      return normalizer.dataset;\n    }\n  }]);\n\n  return Normalizer;\n}();\n\nvar ImageNormalizer = /*#__PURE__*/function (_Normalizer) {\n  _inherits(ImageNormalizer, _Normalizer);\n\n  var _super = _createSuper(ImageNormalizer);\n\n  function ImageNormalizer() {\n    _classCallCheck(this, ImageNormalizer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      this.convertToMultiframe();\n      this.normalizeMultiframe();\n    }\n  }, {\n    key: \"convertToMultiframe\",\n    value: function convertToMultiframe() {\n      if (this.datasets.length === 1 && Normalizer.isMultiframeDataset(this.datasets[0])) {\n        // already a multiframe, so just use it\n        this.dataset = this.datasets[0];\n        return;\n      }\n\n      this.derivation = new DerivedImage(this.datasets);\n      this.dataset = this.derivation.dataset;\n      var ds = this.dataset; // create a new multiframe from the source datasets\n      // fill in only those elements required to make a valid image\n      // for volumetric processing\n\n      var referenceDataset = this.datasets[0];\n      ds.NumberOfFrames = this.datasets.length; // TODO: develop sets of elements to copy over in loops\n\n      ds.SOPClassUID = referenceDataset.SOPClassUID;\n      ds.Rows = referenceDataset.Rows;\n      ds.Columns = referenceDataset.Columns;\n      ds.BitsAllocated = referenceDataset.BitsAllocated;\n      ds.PixelRepresentation = referenceDataset.PixelRepresentation;\n      ds.RescaleSlope = referenceDataset.RescaleSlope || \"1\";\n      ds.RescaleIntercept = referenceDataset.RescaleIntercept || \"0\"; //ds.BurnedInAnnotation = referenceDataset.BurnedInAnnotation || \"YES\";\n      // sort\n      // https://github.com/pieper/Slicer3/blob/master/Base/GUI/Tcl/LoadVolume.tcl\n      // TODO: add spacing checks:\n      // https://github.com/Slicer/Slicer/blob/master/Modules/Scripted/DICOMPlugins/DICOMScalarVolumePlugin.py#L228-L250\n      // TODO: put this information into the Shared and PerFrame functional groups\n      // TODO: sorting of frames could happen in normalizeMultiframe instead, since other\n      // multiframe converters may not sort the images\n      // TODO: sorting can be seen as part of generation of the Dimension Multiframe Dimension Module\n      // and should really be done in an acquisition-specific way (e.g. for DCE)\n\n      var referencePosition = referenceDataset.ImagePositionPatient;\n      var rowVector = referenceDataset.ImageOrientationPatient.slice(0, 3);\n      var columnVector = referenceDataset.ImageOrientationPatient.slice(3, 6);\n      var scanAxis = ImageNormalizer.vec3CrossProduct(rowVector, columnVector);\n      var distanceDatasetPairs = [];\n      this.datasets.forEach(function (dataset) {\n        var position = dataset.ImagePositionPatient.slice();\n        var positionVector = ImageNormalizer.vec3Subtract(position, referencePosition);\n        var distance = ImageNormalizer.vec3Dot(positionVector, scanAxis);\n        distanceDatasetPairs.push([distance, dataset]);\n      });\n      distanceDatasetPairs.sort(function (a, b) {\n        return b[0] - a[0];\n      }); // assign array buffers\n\n      if (ds.BitsAllocated !== 16) {\n        log.error(\"Only works with 16 bit data, not \" + String(this.dataset.BitsAllocated));\n      }\n\n      if (referenceDataset._vrMap && !referenceDataset._vrMap.PixelData) {\n        log.warn(\"No vr map given for pixel data, using OW\");\n        ds._vrMap = {\n          PixelData: \"OW\"\n        };\n      } else {\n        ds._vrMap = {\n          PixelData: referenceDataset._vrMap.PixelData\n        };\n      }\n\n      var frameSize = referenceDataset.PixelData.byteLength;\n      ds.PixelData = new ArrayBuffer(ds.NumberOfFrames * frameSize);\n      var frame = 0;\n      distanceDatasetPairs.forEach(function (pair) {\n        var dataset = pair[1];\n        var pixels = new Uint16Array(dataset.PixelData);\n        var frameView = new Uint16Array(ds.PixelData, frame * frameSize, frameSize / 2);\n\n        try {\n          frameView.set(pixels);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            var message = \"Error inserting pixels in PixelData\\n\" + \"frameSize \".concat(frameSize, \"\\n\") + \"NumberOfFrames \".concat(ds.NumberOfFrames, \"\\n\") + \"pair \".concat(pair, \"\\n\") + \"dataset PixelData size \".concat(dataset.PixelData.length);\n            log.error(message);\n          }\n        }\n\n        frame++;\n      });\n\n      if (ds.NumberOfFrames < 2) {\n        // TODO\n        log.error(\"Cannot populate shared groups uniquely without multiple frames\");\n      }\n\n      var _distanceDatasetPairs = _slicedToArray(distanceDatasetPairs[0], 2),\n          distance0 = _distanceDatasetPairs[0],\n          dataset0 = _distanceDatasetPairs[1];\n\n      var distance1 = distanceDatasetPairs[1][0]; //\n      // make the functional groups\n      //\n      // shared\n\n      var SpacingBetweenSlices = Math.abs(distance1 - distance0);\n      ds.SharedFunctionalGroupsSequence = {\n        PlaneOrientationSequence: {\n          ImageOrientationPatient: dataset0.ImageOrientationPatient\n        },\n        PixelMeasuresSequence: {\n          PixelSpacing: dataset0.PixelSpacing,\n          SpacingBetweenSlices: SpacingBetweenSlices,\n          SliceThickness: SpacingBetweenSlices\n        }\n      };\n      ds.ReferencedSeriesSequence = {\n        SeriesInstanceUID: dataset0.SeriesInstanceUID,\n        ReferencedInstanceSequence: []\n      }; // per-frame\n\n      ds.PerFrameFunctionalGroupsSequence = []; // copy over each datasets window/level into the per-frame groups\n      // and set the referenced series uid\n\n      distanceDatasetPairs.forEach(function (pair) {\n        var dataset = pair[1];\n        ds.PerFrameFunctionalGroupsSequence.push({\n          PlanePositionSequence: {\n            ImagePositionPatient: dataset.ImagePositionPatient\n          },\n          FrameVOILUTSequence: {\n            WindowCenter: dataset.WindowCenter,\n            WindowWidth: dataset.WindowWidth\n          }\n        });\n        ds.ReferencedSeriesSequence.ReferencedInstanceSequence.push({\n          ReferencedSOPClassUID: dataset.SOPClassUID,\n          ReferencedSOPInstanceUID: dataset.SOPInstanceUID\n        });\n      });\n      var dimensionUID = DicomMetaDictionary.uid();\n      this.dataset.DimensionOrganizationSequence = {\n        DimensionOrganizationUID: dimensionUID\n      };\n      this.dataset.DimensionIndexSequence = [{\n        DimensionOrganizationUID: dimensionUID,\n        DimensionIndexPointer: 2097202,\n        FunctionalGroupPointer: 2134291,\n        // PlanePositionSequence\n        DimensionDescriptionLabel: \"ImagePositionPatient\"\n      }];\n    }\n  }, {\n    key: \"normalizeMultiframe\",\n    value: function normalizeMultiframe() {\n      var ds = this.dataset;\n\n      if (!ds.NumberOfFrames) {\n        log.error(\"Missing number or frames not supported\");\n        return;\n      }\n\n      if (!ds.PixelRepresentation) {\n        // Required tag: guess signed\n        ds.PixelRepresentation = 1;\n      }\n\n      if (!ds.StudyID || ds.StudyID === \"\") {\n        // Required tag: fill in if needed\n        ds.StudyID = \"No Study ID\";\n      }\n\n      var validLateralities = [\"R\", \"L\"];\n\n      if (validLateralities.indexOf(ds.Laterality) === -1) {\n        delete ds.Laterality;\n      }\n\n      if (!ds.PresentationLUTShape) {\n        ds.PresentationLUTShape = \"IDENTITY\";\n      }\n\n      if (!ds.SharedFunctionalGroupsSequence) {\n        log.error(\"Can only process multiframe data with SharedFunctionalGroupsSequence\");\n      } // TODO: special case!\n\n\n      if (ds.BodyPartExamined === \"PROSTATE\") {\n        ds.SharedFunctionalGroupsSequence.FrameAnatomySequence = {\n          AnatomicRegionSequence: {\n            CodeValue: \"T-9200B\",\n            CodingSchemeDesignator: \"SRT\",\n            CodeMeaning: \"Prostate\"\n          },\n          FrameLaterality: \"U\"\n        };\n      }\n\n      var rescaleIntercept = ds.RescaleIntercept || 0;\n      var rescaleSlope = ds.RescaleSlope || 1;\n      ds.SharedFunctionalGroupsSequence.PixelValueTransformationSequence = {\n        RescaleIntercept: rescaleIntercept,\n        RescaleSlope: rescaleSlope,\n        RescaleType: \"US\"\n      };\n      var frameNumber = 1;\n      this.datasets.forEach(function (dataset) {\n        if (ds.NumberOfFrames === 1) ds.PerFrameFunctionalGroupsSequence = [ds.PerFrameFunctionalGroupsSequence];\n        ds.PerFrameFunctionalGroupsSequence[frameNumber - 1].FrameContentSequence = {\n          FrameAcquisitionDuration: 0,\n          StackID: 1,\n          InStackPositionNumber: frameNumber,\n          DimensionIndexValues: frameNumber\n        };\n        var frameTime = dataset.AcquisitionDate + dataset.AcquisitionTime;\n\n        if (!isNaN(frameTime)) {\n          var frameContentSequence = ds.PerFrameFunctionalGroupsSequence[frameNumber - 1].FrameContentSequence;\n          frameContentSequence.FrameAcquisitionDateTime = frameTime;\n          frameContentSequence.FrameReferenceDateTime = frameTime;\n        }\n\n        frameNumber++;\n      }); //\n      // TODO: convert this to shared functional group not top level element\n      //\n\n      if (ds.WindowCenter && ds.WindowWidth) {\n        // if they exist as single values, make them lists for consistency\n        if (!Array.isArray(ds.WindowCenter)) {\n          ds.WindowCenter = [ds.WindowCenter];\n        }\n\n        if (!Array.isArray(ds.WindowWidth)) {\n          ds.WindowWidth = [ds.WindowWidth];\n        }\n      }\n\n      if (!ds.WindowCenter || !ds.WindowWidth) {\n        // if they don't exist, make them empty lists and try to initialize them\n        ds.WindowCenter = []; // both must exist and be the same length\n\n        ds.WindowWidth = []; // provide a volume-level window/level guess (mean of per-frame)\n\n        if (ds.PerFrameFunctionalGroupsSequence) {\n          var wcww = {\n            center: 0,\n            width: 0,\n            count: 0\n          };\n          ds.PerFrameFunctionalGroupsSequence.forEach(function (functionalGroup) {\n            if (functionalGroup.FrameVOILUT) {\n              var wc = functionalGroup.FrameVOILUTSequence.WindowCenter;\n              var ww = functionalGroup.FrameVOILUTSequence.WindowWidth;\n\n              if (functionalGroup.FrameVOILUTSequence && wc && ww) {\n                if (Array.isArray(wc)) {\n                  wc = wc[0];\n                }\n\n                if (Array.isArray(ww)) {\n                  ww = ww[0];\n                }\n\n                wcww.center += Number(wc);\n                wcww.width += Number(ww);\n                wcww.count++;\n              }\n            }\n          });\n\n          if (wcww.count > 0) {\n            ds.WindowCenter.push(String(wcww.center / wcww.count));\n            ds.WindowWidth.push(String(wcww.width / wcww.count));\n          }\n        }\n      } // last gasp, pick an arbitrary default\n\n\n      if (ds.WindowCenter.length === 0) {\n        ds.WindowCenter = [300];\n      }\n\n      if (ds.WindowWidth.length === 0) {\n        ds.WindowWidth = [500];\n      }\n    }\n  }], [{\n    key: \"vec3CrossProduct\",\n    value: function vec3CrossProduct(a, b) {\n      var ax = a[0],\n          ay = a[1],\n          az = a[2],\n          bx = b[0],\n          by = b[1],\n          bz = b[2];\n      var out = [];\n      out[0] = ay * bz - az * by;\n      out[1] = az * bx - ax * bz;\n      out[2] = ax * by - ay * bx;\n      return out;\n    }\n  }, {\n    key: \"vec3Subtract\",\n    value: function vec3Subtract(a, b) {\n      var out = [];\n      out[0] = a[0] - b[0];\n      out[1] = a[1] - b[1];\n      out[2] = a[2] - b[2];\n      return out;\n    }\n  }, {\n    key: \"vec3Dot\",\n    value: function vec3Dot(a, b) {\n      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n    }\n  }]);\n\n  return ImageNormalizer;\n}(Normalizer);\n\nvar MRImageNormalizer = /*#__PURE__*/function (_ImageNormalizer) {\n  _inherits(MRImageNormalizer, _ImageNormalizer);\n\n  var _super2 = _createSuper(MRImageNormalizer);\n\n  function MRImageNormalizer() {\n    _classCallCheck(this, MRImageNormalizer);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(MRImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(MRImageNormalizer.prototype), \"normalize\", this).call(this); // TODO: make specialization for LegacyConverted vs normal EnhanceMRImage\n      //let toUID = DicomMetaDictionary.sopClassUIDsByName;\n\n\n      this.dataset.SOPClassUID = \"LegacyConvertedEnhancedMRImage\"; //this.dataset.SOPClassUID = toUID.EnhancedMRImage;\n    }\n  }, {\n    key: \"normalizeMultiframe\",\n    value: function normalizeMultiframe() {\n      _get(_getPrototypeOf(MRImageNormalizer.prototype), \"normalizeMultiframe\", this).call(this);\n\n      var ds = this.dataset;\n\n      if (!ds.ImageType || !ds.ImageType.constructor || ds.ImageType.constructor.name != \"Array\" || ds.ImageType.length != 4) {\n        ds.ImageType = [\"ORIGINAL\", \"PRIMARY\", \"OTHER\", \"NONE\"];\n      }\n\n      ds.SharedFunctionalGroupsSequence.MRImageFrameTypeSequence = {\n        FrameType: ds.ImageType,\n        PixelPresentation: \"MONOCHROME\",\n        VolumetricProperties: \"VOLUME\",\n        VolumeBasedCalculationTechnique: \"NONE\",\n        ComplexImageComponent: \"MAGNITUDE\",\n        AcquisitionContrast: \"UNKNOWN\"\n      };\n    }\n  }]);\n\n  return MRImageNormalizer;\n}(ImageNormalizer);\n\nvar EnhancedCTImageNormalizer = /*#__PURE__*/function (_ImageNormalizer2) {\n  _inherits(EnhancedCTImageNormalizer, _ImageNormalizer2);\n\n  var _super3 = _createSuper(EnhancedCTImageNormalizer);\n\n  function EnhancedCTImageNormalizer() {\n    _classCallCheck(this, EnhancedCTImageNormalizer);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(EnhancedCTImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(EnhancedCTImageNormalizer.prototype), \"normalize\", this).call(this);\n    }\n  }]);\n\n  return EnhancedCTImageNormalizer;\n}(ImageNormalizer);\n\nvar EnhancedMRImageNormalizer = /*#__PURE__*/function (_ImageNormalizer3) {\n  _inherits(EnhancedMRImageNormalizer, _ImageNormalizer3);\n\n  var _super4 = _createSuper(EnhancedMRImageNormalizer);\n\n  function EnhancedMRImageNormalizer() {\n    _classCallCheck(this, EnhancedMRImageNormalizer);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(EnhancedMRImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(EnhancedMRImageNormalizer.prototype), \"normalize\", this).call(this);\n    }\n  }]);\n\n  return EnhancedMRImageNormalizer;\n}(ImageNormalizer);\n\nvar EnhancedUSVolumeNormalizer = /*#__PURE__*/function (_ImageNormalizer4) {\n  _inherits(EnhancedUSVolumeNormalizer, _ImageNormalizer4);\n\n  var _super5 = _createSuper(EnhancedUSVolumeNormalizer);\n\n  function EnhancedUSVolumeNormalizer() {\n    _classCallCheck(this, EnhancedUSVolumeNormalizer);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(EnhancedUSVolumeNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(EnhancedUSVolumeNormalizer.prototype), \"normalize\", this).call(this);\n    }\n  }]);\n\n  return EnhancedUSVolumeNormalizer;\n}(ImageNormalizer);\n\nvar CTImageNormalizer = /*#__PURE__*/function (_ImageNormalizer5) {\n  _inherits(CTImageNormalizer, _ImageNormalizer5);\n\n  var _super6 = _createSuper(CTImageNormalizer);\n\n  function CTImageNormalizer() {\n    _classCallCheck(this, CTImageNormalizer);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(CTImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(CTImageNormalizer.prototype), \"normalize\", this).call(this); // TODO: provide option at export to swap in LegacyConverted UID\n\n\n      var toUID = DicomMetaDictionary.sopClassUIDsByName; //this.dataset.SOPClassUID = \"LegacyConvertedEnhancedCTImage\";\n\n      this.dataset.SOPClassUID = toUID.EnhancedCTImage;\n    }\n  }]);\n\n  return CTImageNormalizer;\n}(ImageNormalizer);\n\nvar PETImageNormalizer = /*#__PURE__*/function (_ImageNormalizer6) {\n  _inherits(PETImageNormalizer, _ImageNormalizer6);\n\n  var _super7 = _createSuper(PETImageNormalizer);\n\n  function PETImageNormalizer() {\n    _classCallCheck(this, PETImageNormalizer);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(PETImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(PETImageNormalizer.prototype), \"normalize\", this).call(this); // TODO: provide option at export to swap in LegacyConverted UID\n\n\n      var toUID = DicomMetaDictionary.sopClassUIDsByName; //this.dataset.SOPClassUID = \"LegacyConvertedEnhancedPETImage\";\n\n      this.dataset.SOPClassUID = toUID.EnhancedPETImage;\n    }\n  }]);\n\n  return PETImageNormalizer;\n}(ImageNormalizer);\n\nvar SEGImageNormalizer = /*#__PURE__*/function (_ImageNormalizer7) {\n  _inherits(SEGImageNormalizer, _ImageNormalizer7);\n\n  var _super8 = _createSuper(SEGImageNormalizer);\n\n  function SEGImageNormalizer() {\n    _classCallCheck(this, SEGImageNormalizer);\n\n    return _super8.apply(this, arguments);\n  }\n\n  _createClass(SEGImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(SEGImageNormalizer.prototype), \"normalize\", this).call(this);\n    }\n  }]);\n\n  return SEGImageNormalizer;\n}(ImageNormalizer);\n\nvar PMImageNormalizer = /*#__PURE__*/function (_ImageNormalizer8) {\n  _inherits(PMImageNormalizer, _ImageNormalizer8);\n\n  var _super9 = _createSuper(PMImageNormalizer);\n\n  function PMImageNormalizer() {\n    _classCallCheck(this, PMImageNormalizer);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(PMImageNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      _get(_getPrototypeOf(PMImageNormalizer.prototype), \"normalize\", this).call(this);\n\n      var ds = this.datasets[0];\n\n      if (ds.BitsAllocated !== 32) {\n        log.error(\"Only works with 32 bit data, not \" + String(ds.BitsAllocated));\n      }\n    }\n  }]);\n\n  return PMImageNormalizer;\n}(ImageNormalizer);\n\nvar DSRNormalizer = /*#__PURE__*/function (_Normalizer2) {\n  _inherits(DSRNormalizer, _Normalizer2);\n\n  var _super10 = _createSuper(DSRNormalizer);\n\n  function DSRNormalizer() {\n    _classCallCheck(this, DSRNormalizer);\n\n    return _super10.apply(this, arguments);\n  }\n\n  _createClass(DSRNormalizer, [{\n    key: \"normalize\",\n    value: function normalize() {\n      this.dataset = this.datasets[0]; // only one dataset per series and for now we assume it is normalized\n    }\n  }]);\n\n  return DSRNormalizer;\n}(Normalizer);\n\nvar Segmentation = /*#__PURE__*/function (_DerivedPixels) {\n  _inherits(Segmentation, _DerivedPixels);\n\n  var _super = _createSuper(Segmentation);\n\n  function Segmentation(datasets) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      includeSliceSpacing: true\n    };\n\n    _classCallCheck(this, Segmentation);\n\n    return _super.call(this, datasets, options);\n  }\n\n  _createClass(Segmentation, [{\n    key: \"derive\",\n    value: function derive() {\n      _get(_getPrototypeOf(Segmentation.prototype), \"derive\", this).call(this);\n\n      this.assignToDataset({\n        SOPClassUID: DicomMetaDictionary.sopClassUIDsByName.Segmentation,\n        Modality: \"SEG\",\n        SamplesPerPixel: \"1\",\n        PhotometricInterpretation: \"MONOCHROME2\",\n        BitsAllocated: \"1\",\n        BitsStored: \"1\",\n        HighBit: \"0\",\n        PixelRepresentation: \"0\",\n        LossyImageCompression: \"00\",\n        SegmentationType: \"BINARY\",\n        ContentLabel: \"SEGMENTATION\"\n      });\n      var dimensionUID = DicomMetaDictionary.uid();\n      this.dataset.DimensionOrganizationSequence = {\n        DimensionOrganizationUID: dimensionUID\n      };\n      this.dataset.DimensionIndexSequence = [{\n        DimensionOrganizationUID: dimensionUID,\n        DimensionIndexPointer: 6422539,\n        FunctionalGroupPointer: 6422538,\n        // SegmentIdentificationSequence\n        DimensionDescriptionLabel: \"ReferencedSegmentNumber\"\n      }, {\n        DimensionOrganizationUID: dimensionUID,\n        DimensionIndexPointer: 2097202,\n        FunctionalGroupPointer: 2134291,\n        // PlanePositionSequence\n        DimensionDescriptionLabel: \"ImagePositionPatient\"\n      }];\n      this.dataset.SegmentSequence = []; // TODO: check logic here.\n      // If the referenced dataset itself references a series, then copy.\n      // Otherwise, reference the dataset itself.\n      // This should allow Slicer and others to get the correct original\n      // images when loading Legacy Converted Images, but it's a workaround\n      // that really doesn't belong here.\n\n      if (this.referencedDataset.ReferencedSeriesSequence) {\n        this.dataset.ReferencedSeriesSequence = DerivedDataset.copyDataset(this.referencedDataset.ReferencedSeriesSequence);\n      } else {\n        var ReferencedInstanceSequence = [];\n\n        for (var i = 0; i < this.referencedDatasets.length; i++) {\n          ReferencedInstanceSequence.push({\n            ReferencedSOPClassUID: this.referencedDatasets[i].SOPClassUID,\n            ReferencedSOPInstanceUID: this.referencedDatasets[i].SOPInstanceUID\n          });\n        }\n\n        this.dataset.ReferencedSeriesSequence = {\n          SeriesInstanceUID: this.referencedDataset.SeriesInstanceUID,\n          StudyInstanceUID: this.referencedDataset.StudyInstanceUID,\n          ReferencedInstanceSequence: ReferencedInstanceSequence\n        };\n      }\n\n      if (!this.options.includeSliceSpacing) {\n        // per dciodvfy this should not be included, but dcmqi/Slicer requires it\n        delete this.dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence.SpacingBetweenSlices;\n      }\n\n      if (this.dataset.SharedFunctionalGroupsSequence.PixelValueTransformationSequence) {\n        // If derived from a CT, this shouldn't be left in the SEG.\n        delete this.dataset.SharedFunctionalGroupsSequence.PixelValueTransformationSequence;\n      } // The pixelData array needs to be defined once you know how many frames you'll have.\n\n\n      this.dataset.PixelData = undefined;\n      this.dataset.NumberOfFrames = 0;\n      this.dataset.PerFrameFunctionalGroupsSequence = [];\n    }\n    /**\n     * setNumberOfFrames - Sets the number of frames of the segmentation object\n     * and allocates (non-bitpacked) memory for the PixelData for constuction.\n     *\n     * @param  {type} NumberOfFrames The number of segmentation frames.\n     */\n\n  }, {\n    key: \"setNumberOfFrames\",\n    value: function setNumberOfFrames(NumberOfFrames) {\n      var dataset = this.dataset;\n      dataset.NumberOfFrames = NumberOfFrames;\n      dataset.PixelData = new ArrayBuffer(dataset.Rows * dataset.Columns * NumberOfFrames);\n    }\n    /**\n     * bitPackPixelData - Bitpacks the pixeldata, should be called after all\n     * segments are addded.\n     *\n     * @returns {type}  description\n     */\n\n  }, {\n    key: \"bitPackPixelData\",\n    value: function bitPackPixelData() {\n      if (this.isBitpacked) {\n        console.warn(\"This.bitPackPixelData has already been called, it should only be called once, when all frames have been added. Exiting.\");\n      }\n\n      var dataset = this.dataset;\n      var unpackedPixelData = dataset.PixelData;\n      var uInt8ViewUnpackedPixelData = new Uint8Array(unpackedPixelData);\n      var bitPackedPixelData = BitArray.pack(uInt8ViewUnpackedPixelData);\n      dataset.PixelData = bitPackedPixelData.buffer;\n      this.isBitpacked = true;\n    }\n    /**\n     * addSegmentFromLabelmap - Adds a segment to the dataset,\n     * where the labelmaps are a set of 2D labelmaps, from which to extract the binary maps.\n     *\n     * @param  {type} Segment   The segment metadata.\n     * @param  {Uint8Array[]} labelmaps labelmap arrays for each index of referencedFrameNumbers.\n     * @param  {number}  segmentIndexInLabelmap The segment index to extract from the labelmap\n     *    (might be different to the segment metadata depending on implementation).\n     * @param  {number[]} referencedFrameNumbers  The frames that the\n     *                                            segmentation references.\n     *\n     */\n\n  }, {\n    key: \"addSegmentFromLabelmap\",\n    value: function addSegmentFromLabelmap(Segment, labelmaps, segmentIndexInLabelmap, referencedFrameNumbers) {\n      if (this.dataset.NumberOfFrames === 0) {\n        throw new Error(\"Must set the total number of frames via setNumberOfFrames() before adding segments to the segmentation.\");\n      }\n\n      this._addSegmentPixelDataFromLabelmaps(labelmaps, segmentIndexInLabelmap);\n\n      var ReferencedSegmentNumber = this._addSegmentMetadata(Segment);\n\n      this._addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers);\n    }\n  }, {\n    key: \"_addSegmentPixelDataFromLabelmaps\",\n    value: function _addSegmentPixelDataFromLabelmaps(labelmaps, segmentIndex) {\n      var dataset = this.dataset;\n      var existingFrames = dataset.PerFrameFunctionalGroupsSequence.length;\n      var sliceLength = dataset.Rows * dataset.Columns;\n      var byteOffset = existingFrames * sliceLength;\n      var pixelDataUInt8View = new Uint8Array(dataset.PixelData, byteOffset, labelmaps.length * sliceLength);\n\n      var occupiedValue = this._getOccupiedValue();\n\n      for (var l = 0; l < labelmaps.length; l++) {\n        var labelmap = labelmaps[l];\n\n        for (var i = 0; i < labelmap.length; i++) {\n          if (labelmap[i] === segmentIndex) {\n            pixelDataUInt8View[l * sliceLength + i] = occupiedValue;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_getOccupiedValue\",\n    value: function _getOccupiedValue() {\n      if (this.dataset.SegmentationType === \"FRACTIONAL\") {\n        return 255;\n      }\n\n      return 1;\n    }\n    /**\n     * addSegment - Adds a segment to the dataset.\n     *\n     * @param  {type} Segment   The segment metadata.\n     * @param  {Uint8Array} pixelData The pixelData array containing all frames\n     *                                of the segmentation.\n     * @param  {Number[]} referencedFrameNumbers  The frames that the\n     *                                            segmentation references.\n     *\n     */\n\n  }, {\n    key: \"addSegment\",\n    value: function addSegment(Segment, pixelData, referencedFrameNumbers) {\n      if (this.dataset.NumberOfFrames === 0) {\n        throw new Error(\"Must set the total number of frames via setNumberOfFrames() before adding segments to the segmentation.\");\n      }\n\n      this._addSegmentPixelData(pixelData);\n\n      var ReferencedSegmentNumber = this._addSegmentMetadata(Segment);\n\n      this._addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers);\n    }\n  }, {\n    key: \"_addSegmentPixelData\",\n    value: function _addSegmentPixelData(pixelData) {\n      var dataset = this.dataset;\n      var existingFrames = dataset.PerFrameFunctionalGroupsSequence.length;\n      var sliceLength = dataset.Rows * dataset.Columns;\n      var byteOffset = existingFrames * sliceLength;\n      var pixelDataUInt8View = new Uint8Array(dataset.PixelData, byteOffset, pixelData.length);\n\n      for (var i = 0; i < pixelData.length; i++) {\n        pixelDataUInt8View[i] = pixelData[i];\n      }\n    }\n  }, {\n    key: \"_addPerFrameFunctionalGroups\",\n    value: function _addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers) {\n      var PerFrameFunctionalGroupsSequence = this.dataset.PerFrameFunctionalGroupsSequence;\n      var ReferencedSeriesSequence = this.referencedDataset.ReferencedSeriesSequence;\n\n      for (var i = 0; i < referencedFrameNumbers.length; i++) {\n        var frameNumber = referencedFrameNumbers[i];\n        var perFrameFunctionalGroups = {};\n        perFrameFunctionalGroups.PlanePositionSequence = DerivedDataset.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence[frameNumber - 1].PlanePositionSequence); // If the PlaneOrientationSequence is not in the SharedFunctionalGroupsSequence,\n        // extract it from the PerFrameFunctionalGroupsSequence.\n\n        if (!this.dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence) {\n          perFrameFunctionalGroups.PlaneOrientationSequence = DerivedDataset.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence[frameNumber - 1].PlaneOrientationSequence);\n        }\n\n        perFrameFunctionalGroups.FrameContentSequence = {\n          DimensionIndexValues: [ReferencedSegmentNumber, frameNumber]\n        };\n        perFrameFunctionalGroups.SegmentIdentificationSequence = {\n          ReferencedSegmentNumber: ReferencedSegmentNumber\n        };\n        var ReferencedSOPClassUID = void 0;\n        var ReferencedSOPInstanceUID = void 0;\n        var ReferencedFrameNumber = void 0;\n\n        if (ReferencedSeriesSequence) {\n          var referencedInstanceSequenceI = ReferencedSeriesSequence.ReferencedInstanceSequence[frameNumber - 1];\n          ReferencedSOPClassUID = referencedInstanceSequenceI.ReferencedSOPClassUID;\n          ReferencedSOPInstanceUID = referencedInstanceSequenceI.ReferencedSOPInstanceUID;\n\n          if (Normalizer.isMultiframeSOPClassUID(ReferencedSOPClassUID)) {\n            ReferencedFrameNumber = frameNumber;\n          }\n        } else {\n          ReferencedSOPClassUID = this.referencedDataset.SOPClassUID;\n          ReferencedSOPInstanceUID = this.referencedDataset.SOPInstanceUID;\n          ReferencedFrameNumber = frameNumber;\n        }\n\n        if (ReferencedFrameNumber) {\n          perFrameFunctionalGroups.DerivationImageSequence = {\n            SourceImageSequence: {\n              ReferencedSOPClassUID: ReferencedSOPClassUID,\n              ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,\n              ReferencedFrameNumber: ReferencedFrameNumber,\n              PurposeOfReferenceCodeSequence: {\n                CodeValue: \"121322\",\n                CodingSchemeDesignator: \"DCM\",\n                CodeMeaning: \"Source image for image processing operation\"\n              }\n            },\n            DerivationCodeSequence: {\n              CodeValue: \"113076\",\n              CodingSchemeDesignator: \"DCM\",\n              CodeMeaning: \"Segmentation\"\n            }\n          };\n        } else {\n          perFrameFunctionalGroups.DerivationImageSequence = {\n            SourceImageSequence: {\n              ReferencedSOPClassUID: ReferencedSOPClassUID,\n              ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,\n              PurposeOfReferenceCodeSequence: {\n                CodeValue: \"121322\",\n                CodingSchemeDesignator: \"DCM\",\n                CodeMeaning: \"Source image for image processing operation\"\n              }\n            },\n            DerivationCodeSequence: {\n              CodeValue: \"113076\",\n              CodingSchemeDesignator: \"DCM\",\n              CodeMeaning: \"Segmentation\"\n            }\n          };\n        }\n\n        PerFrameFunctionalGroupsSequence.push(perFrameFunctionalGroups);\n      }\n    }\n  }, {\n    key: \"_addSegmentMetadata\",\n    value: function _addSegmentMetadata(Segment) {\n      if (!Segment.SegmentLabel || !Segment.SegmentedPropertyCategoryCodeSequence || !Segment.SegmentedPropertyTypeCodeSequence || !Segment.SegmentAlgorithmType) {\n        throw new Error(\"Segment does not contain all the required fields.\");\n      } // Capitalise the SegmentAlgorithmType if it happens to be given in\n      // Lower/mixed case.\n\n\n      Segment.SegmentAlgorithmType = Segment.SegmentAlgorithmType.toUpperCase(); // Check SegmentAlgorithmType and SegmentAlgorithmName if necessary.\n\n      switch (Segment.SegmentAlgorithmType) {\n        case \"AUTOMATIC\":\n        case \"SEMIAUTOMATIC\":\n          if (!Segment.SegmentAlgorithmName) {\n            throw new Error(\"If the SegmentAlgorithmType is SEMIAUTOMATIC or AUTOMATIC,\\n          SegmentAlgorithmName must be provided\");\n          }\n\n          break;\n\n        case \"MANUAL\":\n          break;\n\n        default:\n          throw new Error(\"SegmentAlgorithmType \".concat(Segment.SegmentAlgorithmType, \" invalid.\"));\n      } // Deep copy, so we don't change the segment index stored in cornerstoneTools.\n\n\n      var SegmentSequence = this.dataset.SegmentSequence;\n      var SegmentAlgorithmType = Segment.SegmentAlgorithmType;\n      var reNumberedSegmentCopy = {\n        SegmentedPropertyCategoryCodeSequence: Segment.SegmentedPropertyCategoryCodeSequence,\n        SegmentNumber: (SegmentSequence.length + 1).toString(),\n        SegmentLabel: Segment.SegmentLabel,\n        SegmentAlgorithmType: SegmentAlgorithmType,\n        RecommendedDisplayCIELabValue: Segment.RecommendedDisplayCIELabValue,\n        SegmentedPropertyTypeCodeSequence: Segment.SegmentedPropertyTypeCodeSequence\n      };\n\n      if (SegmentAlgorithmType === \"AUTOMATIC\" || SegmentAlgorithmType === \"SEMIAUTOMATIC\") {\n        reNumberedSegmentCopy.SegmentAlgorithmName = Segment.SegmentAlgorithmName;\n      }\n\n      SegmentSequence.push(reNumberedSegmentCopy);\n      return reNumberedSegmentCopy.SegmentNumber;\n    }\n  }]);\n\n  return Segmentation;\n}(DerivedPixels);\n\nvar ParametricMap = /*#__PURE__*/function (_DerivedDataset) {\n  _inherits(ParametricMap, _DerivedDataset);\n\n  var _super = _createSuper(ParametricMap);\n\n  function ParametricMap(datasets) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ParametricMap);\n\n    return _super.call(this, datasets, options);\n  } // this assumes a normalized multiframe input and will create\n  // a multiframe derived image\n\n\n  _createClass(ParametricMap, [{\n    key: \"derive\",\n    value: function derive() {\n      _get(_getPrototypeOf(ParametricMap.prototype), \"derive\", this).call(this);\n\n      this.assignToDataset({// TODO: ???\n      });\n      this.assignFromReference([]);\n    }\n  }]);\n\n  return ParametricMap;\n}(DerivedDataset);\n\nvar StructuredReport = /*#__PURE__*/function (_DerivedDataset) {\n  _inherits(StructuredReport, _DerivedDataset);\n\n  var _super = _createSuper(StructuredReport);\n\n  function StructuredReport(datasets) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, StructuredReport);\n\n    return _super.call(this, datasets, options);\n  } // this assumes a normalized multiframe input and will create\n  // a multiframe derived image\n\n\n  _createClass(StructuredReport, [{\n    key: \"derive\",\n    value: function derive() {\n      _get(_getPrototypeOf(StructuredReport.prototype), \"derive\", this).call(this);\n\n      this.assignToDataset({\n        SOPClassUID: DicomMetaDictionary.sopClassUIDsByName.EnhancedSR,\n        Modality: \"SR\",\n        ValueType: \"CONTAINER\"\n      });\n      this.assignFromReference([]);\n    }\n  }]);\n\n  return StructuredReport;\n}(DerivedDataset);\n\nvar TID1500MeasurementReport = /*#__PURE__*/function () {\n  function TID1500MeasurementReport(TIDIncludeGroups) {\n    _classCallCheck(this, TID1500MeasurementReport);\n\n    this.TIDIncludeGroups = TIDIncludeGroups;\n    var ImageLibraryContentSequence = [];\n    var CurrentRequestedProcedureEvidenceSequence = [];\n    this.ImageLibraryContentSequence = ImageLibraryContentSequence;\n    this.CurrentRequestedProcedureEvidenceSequence = CurrentRequestedProcedureEvidenceSequence;\n    this.PersonObserverName = {\n      RelationshipType: \"HAS OBS CONTEXT\",\n      ValueType: \"PNAME\",\n      ConceptNameCodeSequence: {\n        CodeValue: \"121008\",\n        CodingSchemeDesignator: \"DCM\",\n        CodeMeaning: \"Person Observer Name\"\n      },\n      PersonName: \"unknown^unknown\"\n    };\n    this.tid1500 = {\n      ConceptNameCodeSequence: {\n        CodeValue: \"126000\",\n        CodingSchemeDesignator: \"DCM\",\n        CodeMeaning: \"Imaging Measurement Report\"\n      },\n      ContinuityOfContent: \"SEPARATE\",\n      PerformedProcedureCodeSequence: [],\n      CompletionFlag: \"COMPLETE\",\n      VerificationFlag: \"UNVERIFIED\",\n      ReferencedPerformedProcedureStepSequence: [],\n      InstanceNumber: 1,\n      CurrentRequestedProcedureEvidenceSequence: CurrentRequestedProcedureEvidenceSequence,\n      CodingSchemeIdentificationSequence: {\n        CodingSchemeDesignator: \"99dcmjs\",\n        CodingSchemeName: \"Codes used for dcmjs\",\n        CodingSchemeVersion: \"0\",\n        CodingSchemeResponsibleOrganization: \"https://github.com/dcmjs-org/dcmjs\"\n      },\n      ContentTemplateSequence: {\n        MappingResource: \"DCMR\",\n        TemplateIdentifier: \"1500\"\n      },\n      ContentSequence: [{\n        RelationshipType: \"HAS CONCEPT MOD\",\n        ValueType: \"CODE\",\n        ConceptNameCodeSequence: addAccessors({\n          CodeValue: \"121049\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Language of Content Item and Descendants\"\n        }),\n        ConceptCodeSequence: addAccessors({\n          CodeValue: \"eng\",\n          CodingSchemeDesignator: \"RFC5646\",\n          CodeMeaning: \"English\"\n        }),\n        ContentSequence: addAccessors({\n          RelationshipType: \"HAS CONCEPT MOD\",\n          ValueType: \"CODE\",\n          ConceptNameCodeSequence: addAccessors({\n            CodeValue: \"121046\",\n            CodingSchemeDesignator: \"DCM\",\n            CodeMeaning: \"Country of Language\"\n          }),\n          ConceptCodeSequence: addAccessors({\n            CodeValue: \"US\",\n            CodingSchemeDesignator: \"ISO3166_1\",\n            CodeMeaning: \"United States\"\n          })\n        })\n      }, this.PersonObserverName, {\n        RelationshipType: \"HAS CONCEPT MOD\",\n        ValueType: \"CODE\",\n        ConceptNameCodeSequence: addAccessors({\n          CodeValue: \"121058\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Procedure reported\"\n        }),\n        ConceptCodeSequence: addAccessors({\n          CodeValue: \"1\",\n          CodingSchemeDesignator: \"99dcmjs\",\n          CodeMeaning: \"Unknown procedure\"\n        })\n      }, {\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"CONTAINER\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"111028\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Image Library\"\n        },\n        ContinuityOfContent: \"SEPARATE\",\n        ContentSequence: {\n          RelationshipType: \"CONTAINS\",\n          ValueType: \"CONTAINER\",\n          ConceptNameCodeSequence: {\n            CodeValue: \"126200\",\n            CodingSchemeDesignator: \"DCM\",\n            CodeMeaning: \"Image Library Group\"\n          },\n          ContinuityOfContent: \"SEPARATE\",\n          ContentSequence: ImageLibraryContentSequence\n        }\n      }]\n    };\n  }\n\n  _createClass(TID1500MeasurementReport, [{\n    key: \"validate\",\n    value: function validate() {}\n  }, {\n    key: \"contentItem\",\n    value: function contentItem(derivationSourceDatasetOrDatasets) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.PersonName) {\n        this.PersonObserverName.PersonName = options.PersonName;\n      } // Note this is left in for compatibility with the Cornerstone Legacy adapter which only supports one series for now.\n\n\n      var derivationSourceDatasets = Array.isArray(derivationSourceDatasetOrDatasets) ? derivationSourceDatasetOrDatasets : [derivationSourceDatasetOrDatasets]; // Add the Measurement Groups to the Measurement Report\n\n      this.addTID1501MeasurementGroups(derivationSourceDatasets, options);\n      return this.tid1500;\n    }\n  }, {\n    key: \"addTID1501MeasurementGroups\",\n    value: function addTID1501MeasurementGroups(derivationSourceDatasets) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var CurrentRequestedProcedureEvidenceSequence = this.CurrentRequestedProcedureEvidenceSequence,\n          ImageLibraryContentSequence = this.ImageLibraryContentSequence;\n      var sopInstanceUIDsToSeriesInstanceUIDMap = options.sopInstanceUIDsToSeriesInstanceUIDMap;\n\n      if (derivationSourceDatasets.length > 1 && sopInstanceUIDsToSeriesInstanceUIDMap === undefined) {\n        throw new Error(\"addTID1501MeasurementGroups provided with \".concat(derivationSourceDatasets.length, \" derivationSourceDatasets, with no sopInstanceUIDsToSeriesInstanceUIDMap in options.\"));\n      }\n\n      var TID1501MeasurementGroups = this.TIDIncludeGroups.TID1501MeasurementGroups;\n\n      if (!TID1501MeasurementGroups) {\n        return;\n      }\n\n      var ContentSequence = [];\n      TID1501MeasurementGroups.forEach(function (child) {\n        ContentSequence = ContentSequence.concat(child.contentItem());\n      });\n      var parsedSOPInstances = []; // For each measurement that is referenced, add a link to the\n      // Image Library Group and the Current Requested Procedure Evidence\n      // with the proper ReferencedSOPSequence\n\n      TID1501MeasurementGroups.forEach(function (measurementGroup) {\n        measurementGroup.TID300Measurements.forEach(function (measurement) {\n          var ReferencedSOPInstanceUID = measurement.ReferencedSOPSequence.ReferencedSOPInstanceUID;\n\n          if (!parsedSOPInstances.includes(ReferencedSOPInstanceUID)) {\n            ImageLibraryContentSequence.push({\n              RelationshipType: \"CONTAINS\",\n              ValueType: \"IMAGE\",\n              ReferencedSOPSequence: measurement.ReferencedSOPSequence\n            });\n            var derivationSourceDataset;\n\n            if (derivationSourceDatasets.length === 1) {\n              // If there is only one derivationSourceDataset, use it.\n              derivationSourceDataset = derivationSourceDatasets[0];\n            } else {\n              var SeriesInstanceUID = sopInstanceUIDsToSeriesInstanceUIDMap[ReferencedSOPInstanceUID];\n              derivationSourceDataset = derivationSourceDatasets.find(function (dsd) {\n                return dsd.SeriesInstanceUID === SeriesInstanceUID;\n              });\n            }\n            /**\n             * Note: the VM of the ReferencedSeriesSequence and ReferencedSOPSequence are 1, so\n             * it is correct that we have a full `CurrentRequestedProcedureEvidenceSequence`\n             * item per `SOPInstanceUID`.\n             */\n\n\n            CurrentRequestedProcedureEvidenceSequence.push({\n              StudyInstanceUID: derivationSourceDataset.StudyInstanceUID,\n              ReferencedSeriesSequence: {\n                SeriesInstanceUID: derivationSourceDataset.SeriesInstanceUID,\n                ReferencedSOPSequence: measurement.ReferencedSOPSequence\n              }\n            });\n            parsedSOPInstances.push(ReferencedSOPInstanceUID);\n          }\n        });\n      });\n      var ImagingMeasurments = {\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"CONTAINER\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"126010\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Imaging Measurements\" // TODO: would be nice to abstract the code sequences (in a dictionary? a service?)\n\n        },\n        ContinuityOfContent: \"SEPARATE\",\n        ContentSequence: ContentSequence\n      };\n      this.tid1500.ContentSequence.push(ImagingMeasurments);\n    }\n  }]);\n\n  return TID1500MeasurementReport;\n}();\n\nvar TID1501MeasurementGroup = /*#__PURE__*/function () {\n  function TID1501MeasurementGroup(TID300Measurements) {\n    _classCallCheck(this, TID1501MeasurementGroup);\n\n    this.TID300Measurements = TID300Measurements;\n  }\n\n  _createClass(TID1501MeasurementGroup, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this = this;\n\n      var TID300Measurements = this.TID300Measurements; // TODO: Is there nothing else in this group?\n\n      var measurementGroups = [];\n      TID300Measurements.forEach(function (TID300Measurement) {\n        measurementGroups.push(_this.getMeasurementGroup(TID300Measurement.contentItem()));\n      });\n      return measurementGroups;\n    }\n  }, {\n    key: \"getMeasurementGroup\",\n    value: function getMeasurementGroup(contentSequenceEntries) {\n      return {\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"CONTAINER\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"125007\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Measurement Group\"\n        },\n        ContinuityOfContent: \"SEPARATE\",\n        ContentSequence: _toConsumableArray(contentSequenceEntries)\n      };\n    }\n  }]);\n\n  return TID1501MeasurementGroup;\n}();\n\nvar toArray = function toArray(x) {\n  return Array.isArray(x) ? x : [x];\n};\n\nvar codeMeaningEquals = function codeMeaningEquals(codeMeaningName) {\n  return function (contentItem) {\n    return contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName;\n  };\n};\n\nvar graphicTypeEquals = function graphicTypeEquals(graphicType) {\n  return function (contentItem) {\n    return contentItem && contentItem.GraphicType === graphicType;\n  };\n};\n\nvar FINDING = {\n  CodingSchemeDesignator: \"DCM\",\n  CodeValue: \"121071\"\n};\nvar FINDING_SITE = {\n  CodingSchemeDesignator: \"SCT\",\n  CodeValue: \"363698007\"\n};\nvar FINDING_SITE_OLD = {\n  CodingSchemeDesignator: \"SRT\",\n  CodeValue: \"G-C0E3\"\n};\n\nvar codeValueMatch = function codeValueMatch(group, code, oldCode) {\n  var ConceptNameCodeSequence = group.ConceptNameCodeSequence;\n  if (!ConceptNameCodeSequence) return;\n  var CodingSchemeDesignator = ConceptNameCodeSequence.CodingSchemeDesignator,\n      CodeValue = ConceptNameCodeSequence.CodeValue;\n  return CodingSchemeDesignator == code.CodingSchemeDesignator && CodeValue == code.CodeValue || oldCode && CodingSchemeDesignator == oldCode.CodingSchemeDesignator && CodeValue == oldCode.CodeValue;\n};\n\nfunction getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass) {\n  var args = toolClass.getTID300RepresentationArguments(tool);\n  args.ReferencedSOPSequence = ReferencedSOPSequence;\n  var TID300Measurement = new toolClass.TID300Representation(args);\n  return TID300Measurement;\n}\n\nfunction getMeasurementGroup(toolType, toolData, ReferencedSOPSequence) {\n  var toolTypeData = toolData[toolType];\n  var toolClass = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];\n\n  if (!toolTypeData || !toolTypeData.data || !toolTypeData.data.length || !toolClass) {\n    return;\n  } // Loop through the array of tool instances\n  // for this tool\n\n\n  var Measurements = toolTypeData.data.map(function (tool) {\n    return getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass);\n  });\n  return new TID1501MeasurementGroup(Measurements);\n}\n\nvar MeasurementReport = /*#__PURE__*/function () {\n  function MeasurementReport() {\n    _classCallCheck(this, MeasurementReport);\n  }\n\n  _createClass(MeasurementReport, null, [{\n    key: \"getSetupMeasurementData\",\n    value: function getSetupMeasurementData(MeasurementGroup) {\n      var ContentSequence = MeasurementGroup.ContentSequence;\n      var contentSequenceArr = toArray(ContentSequence);\n      var findingGroup = contentSequenceArr.find(function (group) {\n        return codeValueMatch(group, FINDING);\n      });\n      var findingSiteGroups = contentSequenceArr.filter(function (group) {\n        return codeValueMatch(group, FINDING_SITE, FINDING_SITE_OLD);\n      }) || [];\n      var NUMGroup = contentSequenceArr.find(function (group) {\n        return group.ValueType === \"NUM\";\n      });\n      var SCOORDGroup = toArray(NUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var ReferencedSOPSequence = SCOORDGroup.ContentSequence.ReferencedSOPSequence;\n      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,\n          ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;\n      var defaultState = {\n        sopInstanceUid: ReferencedSOPInstanceUID,\n        frameIndex: ReferencedFrameNumber || 1,\n        complete: true,\n        finding: findingGroup ? addAccessors(findingGroup.ConceptCodeSequence) : undefined,\n        findingSites: findingSiteGroups.map(function (fsg) {\n          return addAccessors(fsg.ConceptCodeSequence);\n        })\n      };\n\n      if (defaultState.finding) {\n        defaultState.description = defaultState.finding.CodeMeaning;\n      }\n\n      var findingSite = defaultState.findingSites && defaultState.findingSites[0];\n\n      if (findingSite) {\n        defaultState.location = findingSite[0] && findingSite[0].CodeMeaning || findingSite.CodeMeaning;\n      }\n\n      return {\n        defaultState: defaultState,\n        findingGroup: findingGroup,\n        findingSiteGroups: findingSiteGroups,\n        NUMGroup: NUMGroup,\n        SCOORDGroup: SCOORDGroup,\n        ReferencedSOPSequence: ReferencedSOPSequence,\n        ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,\n        ReferencedFrameNumber: ReferencedFrameNumber\n      };\n    }\n  }, {\n    key: \"generateReport\",\n    value: function generateReport(toolState, metadataProvider, options) {\n      // ToolState for array of imageIDs to a Report\n      // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID\n      var allMeasurementGroups = [];\n      var firstImageId = Object.keys(toolState)[0];\n\n      if (!firstImageId) {\n        throw new Error(\"No measurements provided.\");\n      }\n      /* Patient ID\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID\n       */\n\n\n      var generalSeriesModule = metadataProvider.get(\"generalSeriesModule\", firstImageId); //const sopCommonModule = metadataProvider.get('sopCommonModule', firstImageId);\n      // NOTE: We are getting the Series and Study UIDs from the first imageId of the toolState\n      // which means that if the toolState is for multiple series, the report will have the incorrect\n      // SeriesInstanceUIDs\n\n      var studyInstanceUID = generalSeriesModule.studyInstanceUID,\n          seriesInstanceUID = generalSeriesModule.seriesInstanceUID; // Loop through each image in the toolData\n\n      Object.keys(toolState).forEach(function (imageId) {\n        var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n        var frameNumber = metadataProvider.get(\"frameNumber\", imageId);\n        var toolData = toolState[imageId];\n        var toolTypes = Object.keys(toolData);\n        var ReferencedSOPSequence = {\n          ReferencedSOPClassUID: sopCommonModule.sopClassUID,\n          ReferencedSOPInstanceUID: sopCommonModule.sopInstanceUID\n        };\n\n        if (Normalizer.isMultiframeSOPClassUID(sopCommonModule.sopClassUID)) {\n          ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;\n        } // Loop through each tool type for the image\n\n\n        var measurementGroups = [];\n        toolTypes.forEach(function (toolType) {\n          var group = getMeasurementGroup(toolType, toolData, ReferencedSOPSequence);\n\n          if (group) {\n            measurementGroups.push(group);\n          }\n        });\n        allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);\n      });\n\n      var _MeasurementReport = new TID1500MeasurementReport({\n        TID1501MeasurementGroups: allMeasurementGroups\n      }, options); // TODO: what is the correct metaheader\n      // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\n      // TODO: move meta creation to happen in derivations.js\n\n\n      var fileMetaInformationVersionArray = new Uint8Array(2);\n      fileMetaInformationVersionArray[1] = 1;\n      var derivationSourceDataset = {\n        StudyInstanceUID: studyInstanceUID,\n        SeriesInstanceUID: seriesInstanceUID //SOPInstanceUID: sopInstanceUID, // TODO: Necessary?\n        //SOPClassUID: sopClassUID,\n\n      };\n      var _meta = {\n        FileMetaInformationVersion: {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: \"OB\"\n        },\n        //MediaStorageSOPClassUID\n        //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\n        TransferSyntaxUID: {\n          Value: [\"1.2.840.10008.1.2.1\"],\n          vr: \"UI\"\n        },\n        ImplementationClassUID: {\n          Value: [DicomMetaDictionary.uid()],\n          // TODO: could be git hash or other valid id\n          vr: \"UI\"\n        },\n        ImplementationVersionName: {\n          Value: [\"dcmjs\"],\n          vr: \"SH\"\n        }\n      };\n      var _vrMap = {\n        PixelData: \"OW\"\n      };\n      derivationSourceDataset._meta = _meta;\n      derivationSourceDataset._vrMap = _vrMap;\n      var report = new StructuredReport([derivationSourceDataset]);\n\n      var contentItem = _MeasurementReport.contentItem(derivationSourceDataset); // Merge the derived dataset with the content from the Measurement Report\n\n\n      report.dataset = Object.assign(report.dataset, contentItem);\n      report.dataset._meta = _meta;\n      return report;\n    }\n    /**\n     * Generate Cornerstone tool state from dataset\n     * @param {object} dataset dataset\n     * @param {object} hooks\n     * @param {function} hooks.getToolClass Function to map dataset to a tool class\n     * @returns\n     */\n\n  }, {\n    key: \"generateToolState\",\n    value: function generateToolState(dataset) {\n      var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // For now, bail out if the dataset is not a TID1500 SR with length measurements\n      if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\n        throw new Error(\"This package can currently only interpret DICOM SR TID 1500\");\n      }\n\n      var REPORT = \"Imaging Measurements\";\n      var GROUP = \"Measurement Group\";\n      var TRACKING_IDENTIFIER = \"Tracking Identifier\"; // Identify the Imaging Measurements\n\n      var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT)); // Retrieve the Measurements themselves\n\n      var measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP)); // For each of the supported measurement types, compute the measurement data\n\n      var measurementData = {};\n      var cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n      var registeredToolClasses = [];\n      Object.keys(cornerstoneToolClasses).forEach(function (key) {\n        registeredToolClasses.push(cornerstoneToolClasses[key]);\n        measurementData[key] = [];\n      });\n      measurementGroups.forEach(function (measurementGroup) {\n        var measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);\n        var TrackingIdentifierGroup = measurementGroupContentSequence.find(function (contentItem) {\n          return contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER;\n        });\n        var TrackingIdentifierValue = TrackingIdentifierGroup.TextValue;\n        var toolClass = hooks.getToolClass ? hooks.getToolClass(measurementGroup, dataset, registeredToolClasses) : registeredToolClasses.find(function (tc) {\n          return tc.isValidCornerstoneTrackingIdentifier(TrackingIdentifierValue);\n        });\n\n        if (toolClass) {\n          var measurement = toolClass.getMeasurementData(measurementGroup);\n          console.log(\"=== \".concat(toolClass.toolType, \" ===\"));\n          console.log(measurement);\n          measurementData[toolClass.toolType].push(measurement);\n        }\n      }); // NOTE: There is no way of knowing the cornerstone imageIds as that could be anything.\n      // That is up to the consumer to derive from the SOPInstanceUIDs.\n\n      return measurementData;\n    }\n  }, {\n    key: \"registerTool\",\n    value: function registerTool(toolClass) {\n      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;\n      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;\n      MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] = toolClass.utilityToolType;\n    }\n  }]);\n\n  return MeasurementReport;\n}();\nMeasurementReport.MEASUREMENT_BY_TOOLTYPE = {};\nMeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};\nMeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};\n\nvar TID300Measurement = /*#__PURE__*/function () {\n  function TID300Measurement(props) {\n    _classCallCheck(this, TID300Measurement);\n\n    this.ReferencedSOPSequence = props.ReferencedSOPSequence;\n    this.props = props;\n  }\n\n  _createClass(TID300Measurement, [{\n    key: \"getMeasurement\",\n    value: function getMeasurement(contentSequenceEntries) {\n      return [].concat(_toConsumableArray(this.getTrackingGroups()), _toConsumableArray(this.getFindingGroup()), _toConsumableArray(this.getFindingSiteGroups()), _toConsumableArray(contentSequenceEntries));\n    }\n  }, {\n    key: \"getTrackingGroups\",\n    value: function getTrackingGroups() {\n      var trackingIdentifierTextValue = this.props.trackingIdentifierTextValue;\n      return [{\n        RelationshipType: \"HAS OBS CONTEXT\",\n        ValueType: \"TEXT\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"112039\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Tracking Identifier\"\n        },\n        TextValue: trackingIdentifierTextValue || \"web annotation\"\n      }, {\n        RelationshipType: \"HAS OBS CONTEXT\",\n        ValueType: \"UIDREF\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"112040\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Tracking Unique Identifier\"\n        },\n        UID: DicomMetaDictionary.uid()\n      }];\n    }\n  }, {\n    key: \"getFindingGroup\",\n    value: function getFindingGroup() {\n      var finding = this.props.finding;\n\n      if (!finding) {\n        return [];\n      }\n\n      var CodeValue = finding.CodeValue,\n          CodingSchemeDesignator = finding.CodingSchemeDesignator,\n          CodeMeaning = finding.CodeMeaning;\n      return [{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"CODE\",\n        ConceptNameCodeSequence: addAccessors({\n          CodeValue: \"121071\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Finding\"\n        }),\n        ConceptCodeSequence: addAccessors({\n          CodeValue: CodeValue,\n          //: \"SAMPLE FINDING\",\n          CodingSchemeDesignator: CodingSchemeDesignator,\n          //: \"99dcmjs\",\n          CodeMeaning: CodeMeaning //: \"Sample Finding\"\n\n        })\n      }];\n    }\n  }, {\n    key: \"getFindingSiteGroups\",\n    value: function getFindingSiteGroups() {\n      var findingSites = this.props.findingSites || [];\n      return findingSites.map(function (findingSite) {\n        var CodeValue = findingSite.CodeValue,\n            CodingSchemeDesignator = findingSite.CodingSchemeDesignator,\n            CodeMeaning = findingSite.CodeMeaning;\n        return {\n          RelationshipType: \"CONTAINS\",\n          ValueType: \"CODE\",\n          ConceptNameCodeSequence: addAccessors({\n            CodeValue: \"363698007\",\n            CodingSchemeDesignator: \"SCT\",\n            CodeMeaning: \"Finding Site\"\n          }),\n          ConceptCodeSequence: addAccessors({\n            CodeValue: CodeValue,\n            //: \"SAMPLE FINDING SITE\",\n            CodingSchemeDesignator: CodingSchemeDesignator,\n            //: \"99dcmjs\",\n            CodeMeaning: CodeMeaning //: \"Sample Finding Site\"\n\n          })\n        };\n      });\n    }\n  }]);\n\n  return TID300Measurement;\n}();\n\nvar Length = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Length, _TID300Measurement);\n\n  var _super = _createSuper(Length);\n\n  function Length() {\n    _classCallCheck(this, Length);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Length, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          point1 = _this$props.point1,\n          point2 = _this$props.point2,\n          distance = _this$props.distance,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence;\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-D7FE\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Length\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"millimeter\"\n          },\n          NumericValue: distance\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: \"SCOORD\",\n          GraphicType: \"POLYLINE\",\n          GraphicData: [point1.x, point1.y, point2.x, point2.y],\n          ContentSequence: {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Length;\n}(TID300Measurement);\n\nvar CORNERSTONE_4_TAG = \"cornerstoneTools@^4.0.0\";\n\nvar LENGTH$1 = \"Length\";\n\nvar Length$1 = /*#__PURE__*/function () {\n  function Length() {\n    _classCallCheck(this, Length);\n  } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n\n\n  _createClass(Length, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        length: NUMGroup.MeasuredValueSequence.NumericValue,\n        toolType: Length.toolType,\n        handles: {\n          start: {},\n          end: {},\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        }\n      });\n\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 4);\n\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      state.handles.end.x = _SCOORDGroup$GraphicD[2];\n      state.handles.end.y = _SCOORDGroup$GraphicD[3];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n          finding = tool.finding,\n          findingSites = tool.findingSites;\n      var point1 = handles.start;\n      var point2 = handles.end;\n      var distance = tool.length;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Length\";\n      return {\n        point1: point1,\n        point2: point2,\n        distance: distance,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return Length;\n}();\n\nLength$1.toolType = LENGTH$1;\nLength$1.utilityToolType = LENGTH$1;\nLength$1.TID300Representation = Length;\n\nLength$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === LENGTH$1;\n};\n\nMeasurementReport.registerTool(Length$1);\n\n/**\n * Expand an array of points stored as objects into\n * a flattened array of points\n *\n * @param points [{x: 0, y: 1}, {x: 1, y: 2}] or [{x: 0, y: 1, z: 0}, {x: 1, y: 2, z: 0}]\n * @return {Array} [point1x, point1y, point2x, point2y] or [point1x, point1y, point1z, point2x, point2y, point2z]\n */\n\nfunction expandPoints(points) {\n  var allPoints = [];\n  points.forEach(function (point) {\n    allPoints.push(point[0] || point.x);\n    allPoints.push(point[1] || point.y);\n\n    if (point[2] !== undefined || point.z !== undefined) {\n      allPoints.push(point[2] || point.z);\n    }\n  });\n  return allPoints;\n}\n\nvar Polyline = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Polyline, _TID300Measurement);\n\n  var _super = _createSuper(Polyline);\n\n  function Polyline() {\n    _classCallCheck(this, Polyline);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Polyline, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          points = _this$props.points,\n          area = _this$props.area,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence,\n          _this$props$use3DSpat = _this$props.use3DSpatialCoordinates,\n          use3DSpatialCoordinates = _this$props$use3DSpat === void 0 ? false : _this$props$use3DSpat,\n          perimeter = _this$props.perimeter;\n      var GraphicData = expandPoints(points); // TODO: Add Mean and STDev value of (modality?) pixels\n\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"131191004\",\n          CodingSchemeDesignator: \"SCT\",\n          CodeMeaning: \"Perimeter\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"millimeter\"\n          },\n          NumericValue: perimeter\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"POLYLINE\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }, {\n        // TODO: This feels weird to repeat the GraphicData\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A166\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Area\" // TODO: Look this up from a Code Meaning dictionary\n\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm2\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"SquareMilliMeter\"\n          },\n          NumericValue: area\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"POLYLINE\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Polyline;\n}(TID300Measurement);\n\nvar FreehandRoi = /*#__PURE__*/function () {\n  function FreehandRoi() {\n    _classCallCheck(this, FreehandRoi);\n  }\n\n  _createClass(FreehandRoi, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          NUMGroup = _MeasurementReport$ge.NUMGroup;\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: FreehandRoi.toolType,\n        handles: {\n          points: [],\n          textBox: {\n            active: false,\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        },\n        color: undefined,\n        invalidated: true\n      });\n\n      var GraphicData = SCOORDGroup.GraphicData;\n\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        state.handles.points.push({\n          x: GraphicData[i],\n          y: GraphicData[i + 1]\n        });\n      }\n\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n          finding = tool.finding,\n          findingSites = tool.findingSites,\n          _tool$cachedStats = tool.cachedStats,\n          cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats;\n      var points = handles.points;\n      var _cachedStats$area = cachedStats.area,\n          area = _cachedStats$area === void 0 ? 0 : _cachedStats$area,\n          _cachedStats$perimete = cachedStats.perimeter,\n          perimeter = _cachedStats$perimete === void 0 ? 0 : _cachedStats$perimete;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:FreehandRoi\";\n      return {\n        points: points,\n        area: area,\n        perimeter: perimeter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return FreehandRoi;\n}();\n\nFreehandRoi.toolType = \"FreehandRoi\";\nFreehandRoi.utilityToolType = \"FreehandRoi\";\nFreehandRoi.TID300Representation = Polyline;\n\nFreehandRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === FreehandRoi.toolType;\n};\n\nMeasurementReport.registerTool(FreehandRoi);\n\nvar Bidirectional = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Bidirectional, _TID300Measurement);\n\n  var _super = _createSuper(Bidirectional);\n\n  function Bidirectional() {\n    _classCallCheck(this, Bidirectional);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Bidirectional, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          longAxis = _this$props.longAxis,\n          shortAxis = _this$props.shortAxis,\n          longAxisLength = _this$props.longAxisLength,\n          shortAxisLength = _this$props.shortAxisLength,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence;\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A185\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Long Axis\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"millimeter\"\n          },\n          NumericValue: longAxisLength\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: \"SCOORD\",\n          GraphicType: \"POLYLINE\",\n          GraphicData: [longAxis.point1.x, longAxis.point1.y, longAxis.point2.x, longAxis.point2.y],\n          ContentSequence: {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }, {\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A186\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Short Axis\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"millimeter\"\n          },\n          NumericValue: shortAxisLength\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: \"SCOORD\",\n          GraphicType: \"POLYLINE\",\n          GraphicData: [shortAxis.point1.x, shortAxis.point1.y, shortAxis.point2.x, shortAxis.point2.y],\n          ContentSequence: {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Bidirectional;\n}(TID300Measurement);\n\nvar BIDIRECTIONAL = \"Bidirectional\";\nvar LONG_AXIS = \"Long Axis\";\nvar SHORT_AXIS = \"Short Axis\";\nvar FINDING$1 = \"121071\";\nvar FINDING_SITE$1 = \"G-C0E3\";\n\nvar Bidirectional$1 = /*#__PURE__*/function () {\n  function Bidirectional() {\n    _classCallCheck(this, Bidirectional);\n  } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n\n\n  _createClass(Bidirectional, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _state;\n\n      var ContentSequence = MeasurementGroup.ContentSequence;\n      var findingGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeValue === FINDING$1;\n      });\n      var findingSiteGroups = toArray(ContentSequence).filter(function (group) {\n        return group.ConceptNameCodeSequence.CodeValue === FINDING_SITE$1;\n      });\n      var longAxisNUMGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS;\n      });\n      var longAxisSCOORDGroup = toArray(longAxisNUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var shortAxisNUMGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS;\n      });\n      var shortAxisSCOORDGroup = toArray(shortAxisNUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var ReferencedSOPSequence = longAxisSCOORDGroup.ContentSequence.ReferencedSOPSequence;\n      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,\n          ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber; // Long axis\n\n      var longestDiameter = String(longAxisNUMGroup.MeasuredValueSequence.NumericValue);\n      var shortestDiameter = String(shortAxisNUMGroup.MeasuredValueSequence.NumericValue);\n      var bottomRight = {\n        x: Math.max(longAxisSCOORDGroup.GraphicData[0], longAxisSCOORDGroup.GraphicData[2], shortAxisSCOORDGroup.GraphicData[0], shortAxisSCOORDGroup.GraphicData[2]),\n        y: Math.max(longAxisSCOORDGroup.GraphicData[1], longAxisSCOORDGroup.GraphicData[3], shortAxisSCOORDGroup.GraphicData[1], shortAxisSCOORDGroup.GraphicData[3])\n      };\n      var state = (_state = {\n        sopInstanceUid: ReferencedSOPInstanceUID,\n        frameIndex: ReferencedFrameNumber || 1,\n        toolType: Bidirectional.toolType,\n        active: false,\n        handles: {\n          start: {\n            x: longAxisSCOORDGroup.GraphicData[0],\n            y: longAxisSCOORDGroup.GraphicData[1],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 0\n          },\n          end: {\n            x: longAxisSCOORDGroup.GraphicData[2],\n            y: longAxisSCOORDGroup.GraphicData[3],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 1\n          },\n          perpendicularStart: {\n            x: shortAxisSCOORDGroup.GraphicData[0],\n            y: shortAxisSCOORDGroup.GraphicData[1],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 2\n          },\n          perpendicularEnd: {\n            x: shortAxisSCOORDGroup.GraphicData[2],\n            y: shortAxisSCOORDGroup.GraphicData[3],\n            drawnIndependently: false,\n            allowedOutsideImage: false,\n            active: false,\n            highlight: false,\n            index: 3\n          },\n          textBox: {\n            highlight: false,\n            hasMoved: true,\n            active: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true,\n            x: bottomRight.x + 10,\n            y: bottomRight.y + 10\n          }\n        },\n        invalidated: false,\n        isCreating: false,\n        longestDiameter: longestDiameter,\n        shortestDiameter: shortestDiameter\n      }, _defineProperty(_state, \"toolType\", \"Bidirectional\"), _defineProperty(_state, \"toolName\", \"Bidirectional\"), _defineProperty(_state, \"visible\", true), _defineProperty(_state, \"finding\", findingGroup ? findingGroup.ConceptCodeSequence : undefined), _defineProperty(_state, \"findingSites\", findingSiteGroups.map(function (fsg) {\n        return fsg.ConceptCodeSequence;\n      })), _state);\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var _tool$handles = tool.handles,\n          start = _tool$handles.start,\n          end = _tool$handles.end,\n          perpendicularStart = _tool$handles.perpendicularStart,\n          perpendicularEnd = _tool$handles.perpendicularEnd;\n      var shortestDiameter = tool.shortestDiameter,\n          longestDiameter = tool.longestDiameter,\n          finding = tool.finding,\n          findingSites = tool.findingSites;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Bidirectional\";\n      return {\n        longAxis: {\n          point1: start,\n          point2: end\n        },\n        shortAxis: {\n          point1: perpendicularStart,\n          point2: perpendicularEnd\n        },\n        longAxisLength: longestDiameter,\n        shortAxisLength: shortestDiameter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return Bidirectional;\n}();\n\nBidirectional$1.toolType = BIDIRECTIONAL;\nBidirectional$1.utilityToolType = BIDIRECTIONAL;\nBidirectional$1.TID300Representation = Bidirectional;\n\nBidirectional$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === BIDIRECTIONAL;\n};\n\nMeasurementReport.registerTool(Bidirectional$1);\n\n/**\n * Expand an array of points stored as objects into\n * a flattened array of points\n *\n * @param points\n * @return {Array}\n */\n\nfunction expandPoints$1(points) {\n  var allPoints = [];\n  points.forEach(function (point) {\n    allPoints.push(point.x);\n    allPoints.push(point.y);\n  });\n  return allPoints;\n}\n\nvar Ellipse = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Ellipse, _TID300Measurement);\n\n  var _super = _createSuper(Ellipse);\n\n  function Ellipse() {\n    _classCallCheck(this, Ellipse);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Ellipse, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          points = _this$props.points,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence,\n          area = _this$props.area;\n      var GraphicData = expandPoints$1(points);\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-D7FE\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"AREA\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm2\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"squaremillimeter\"\n          },\n          NumericValue: area\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: \"SCOORD\",\n          GraphicType: \"ELLIPSE\",\n          GraphicData: GraphicData,\n          ContentSequence: {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Ellipse;\n}(TID300Measurement);\n\nvar ELLIPTICALROI = \"EllipticalRoi\";\n\nvar EllipticalRoi = /*#__PURE__*/function () {\n  function EllipticalRoi() {\n    _classCallCheck(this, EllipticalRoi);\n  } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n\n\n  _createClass(EllipticalRoi, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n\n      var GraphicData = SCOORDGroup.GraphicData;\n      var majorAxis = [{\n        x: GraphicData[0],\n        y: GraphicData[1]\n      }, {\n        x: GraphicData[2],\n        y: GraphicData[3]\n      }];\n      var minorAxis = [{\n        x: GraphicData[4],\n        y: GraphicData[5]\n      }, {\n        x: GraphicData[6],\n        y: GraphicData[7]\n      }]; // Calculate two opposite corners of box defined by two axes.\n\n      var minorAxisLength = Math.sqrt(Math.pow(minorAxis[0].x - minorAxis[1].x, 2) + Math.pow(minorAxis[0].y - minorAxis[1].y, 2));\n      var minorAxisDirection = {\n        x: (minorAxis[1].x - minorAxis[0].x) / minorAxisLength,\n        y: (minorAxis[1].y - minorAxis[0].y) / minorAxisLength\n      };\n      var halfMinorAxisLength = minorAxisLength / 2; // First end point of major axis + half minor axis vector\n\n      var corner1 = {\n        x: majorAxis[0].x + minorAxisDirection.x * halfMinorAxisLength,\n        y: majorAxis[0].y + minorAxisDirection.y * halfMinorAxisLength\n      }; // Second end point of major axis - half of minor axis vector\n\n      var corner2 = {\n        x: majorAxis[1].x - minorAxisDirection.x * halfMinorAxisLength,\n        y: majorAxis[1].y - minorAxisDirection.y * halfMinorAxisLength\n      };\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: EllipticalRoi.toolType,\n        active: false,\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        },\n        handles: {\n          end: {\n            x: corner1.x,\n            y: corner1.y,\n            highlight: false,\n            active: false\n          },\n          initialRotation: 0,\n          start: {\n            x: corner2.x,\n            y: corner2.y,\n            highlight: false,\n            active: false\n          },\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        invalidated: true,\n        visible: true\n      });\n\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var _tool$cachedStats = tool.cachedStats,\n          cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats,\n          handles = tool.handles,\n          finding = tool.finding,\n          findingSites = tool.findingSites;\n      var start = handles.start,\n          end = handles.end;\n      var area = cachedStats.area;\n      var halfXLength = Math.abs(start.x - end.x) / 2;\n      var halfYLength = Math.abs(start.y - end.y) / 2;\n      var points = [];\n      var center = {\n        x: (start.x + end.x) / 2,\n        y: (start.y + end.y) / 2\n      };\n\n      if (halfXLength > halfYLength) {\n        // X-axis major\n        // Major axis\n        points.push({\n          x: center.x - halfXLength,\n          y: center.y\n        });\n        points.push({\n          x: center.x + halfXLength,\n          y: center.y\n        }); // Minor axis\n\n        points.push({\n          x: center.x,\n          y: center.y - halfYLength\n        });\n        points.push({\n          x: center.x,\n          y: center.y + halfYLength\n        });\n      } else {\n        // Y-axis major\n        // Major axis\n        points.push({\n          x: center.x,\n          y: center.y - halfYLength\n        });\n        points.push({\n          x: center.x,\n          y: center.y + halfYLength\n        }); // Minor axis\n\n        points.push({\n          x: center.x - halfXLength,\n          y: center.y\n        });\n        points.push({\n          x: center.x + halfXLength,\n          y: center.y\n        });\n      }\n\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:EllipticalRoi\";\n      return {\n        area: area,\n        points: points,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return EllipticalRoi;\n}();\n\nEllipticalRoi.toolType = ELLIPTICALROI;\nEllipticalRoi.utilityToolType = ELLIPTICALROI;\nEllipticalRoi.TID300Representation = Ellipse;\n\nEllipticalRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === ELLIPTICALROI;\n};\n\nMeasurementReport.registerTool(EllipticalRoi);\n\n/**\n * Expand an array of points stored as objects into\n * a flattened array of points\n *\n * @param points [{x: 0, y: 1}, {x: 1, y: 2}] or [{x: 0, y: 1, z: 0}, {x: 1, y: 2, z: 0}]\n * @return {Array} [point1x, point1y, point2x, point2y] or [point1x, point1y, point1z, point2x, point2y, point2z]\n */\n\nfunction expandPoints$2(points) {\n  var allPoints = [];\n  points.forEach(function (point) {\n    allPoints.push(point.x);\n    allPoints.push(point.y);\n  });\n  return allPoints;\n}\n\nvar Circle = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Circle, _TID300Measurement);\n\n  var _super = _createSuper(Circle);\n\n  function Circle() {\n    _classCallCheck(this, Circle);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Circle, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          points = _this$props.points,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence,\n          _this$props$use3DSpat = _this$props.use3DSpatialCoordinates,\n          use3DSpatialCoordinates = _this$props$use3DSpat === void 0 ? false : _this$props$use3DSpat,\n          perimeter = _this$props.perimeter,\n          area = _this$props.area; // Combine all lengths to save the perimeter\n      // @ToDO The permiter has to be implemented\n      // const reducer = (accumulator, currentValue) => accumulator + currentValue;\n      // const perimeter = lengths.reduce(reducer);\n\n      var GraphicData = expandPoints$2(points); // TODO: Add Mean and STDev value of (modality?) pixels\n\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A197\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Perimeter\" // TODO: Look this up from a Code Meaning dictionary\n\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"millimeter\"\n          },\n          NumericValue: perimeter\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"CIRCLE\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }, {\n        // TODO: This feels weird to repeat the GraphicData\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A166\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Area\" // TODO: Look this up from a Code Meaning dictionary\n\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm2\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"SquareMilliMeter\"\n          },\n          NumericValue: area\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"CIRCLE\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Circle;\n}(TID300Measurement);\n\nvar CIRCLEROI = \"CircleRoi\";\n\nvar CircleRoi = /*#__PURE__*/function () {\n  function CircleRoi() {\n    _classCallCheck(this, CircleRoi);\n  }\n  /** Gets the measurement data for cornerstone, given DICOM SR measurement data. */\n\n\n  _createClass(CircleRoi, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n\n      var GraphicData = SCOORDGroup.GraphicData;\n      var center = {\n        x: GraphicData[0],\n        y: GraphicData[1]\n      };\n      var end = {\n        x: GraphicData[2],\n        y: GraphicData[3]\n      };\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: CircleRoi.toolType,\n        active: false,\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0,\n          // Dummy values to be updated by cornerstone\n          radius: 0,\n          perimeter: 0\n        },\n        handles: {\n          end: _objectSpread2(_objectSpread2({}, end), {}, {\n            highlight: false,\n            active: false\n          }),\n          initialRotation: 0,\n          start: _objectSpread2(_objectSpread2({}, center), {}, {\n            highlight: false,\n            active: false\n          }),\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        invalidated: true,\n        visible: true\n      });\n\n      return state;\n    }\n    /**\n     * Gets the TID 300 representation of a circle, given the cornerstone representation.\n     *\n     * @param {Object} tool\n     * @returns\n     */\n\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var _tool$cachedStats = tool.cachedStats,\n          cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats,\n          handles = tool.handles,\n          finding = tool.finding,\n          findingSites = tool.findingSites;\n      var center = handles.start,\n          end = handles.end;\n      var area = cachedStats.area,\n          radius = cachedStats.radius;\n      var perimeter = 2 * Math.PI * radius;\n      var points = [];\n      points.push(center);\n      points.push(end);\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:CircleRoi\";\n      return {\n        area: area,\n        perimeter: perimeter,\n        radius: radius,\n        points: points,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return CircleRoi;\n}();\n\nCircleRoi.toolType = CIRCLEROI;\nCircleRoi.utilityToolType = CIRCLEROI;\nCircleRoi.TID300Representation = Circle;\n\nCircleRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === CIRCLEROI;\n};\n\nMeasurementReport.registerTool(CircleRoi);\n\nvar Point = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Point, _TID300Measurement);\n\n  var _super = _createSuper(Point);\n\n  function Point() {\n    _classCallCheck(this, Point);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Point, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          points = _this$props.points,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence,\n          _this$props$use3DSpat = _this$props.use3DSpatialCoordinates,\n          use3DSpatialCoordinates = _this$props$use3DSpat === void 0 ? false : _this$props$use3DSpat;\n      var GraphicData = use3DSpatialCoordinates ? [points[0].x, points[0].y, points[0].z] : [points[0].x, points[0].y]; // Allow storing another point as part of an indicator showing a single point\n\n      if (points.length == 2) {\n        GraphicData.push(points[1].x);\n        GraphicData.push(points[1].y);\n        if (use3DSpatialCoordinates) GraphicData.push(points[1].z);\n      }\n\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"111010\",\n          CodingSchemeDesignator: \"DCM\",\n          CodeMeaning: \"Center\"\n        },\n        //MeasuredValueSequence: ,\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"POINT\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Point;\n}(TID300Measurement);\n\nvar ARROW_ANNOTATE = \"ArrowAnnotate\";\nvar CORNERSTONEFREETEXT = \"CORNERSTONEFREETEXT\";\n\nvar ArrowAnnotate = /*#__PURE__*/function () {\n  function ArrowAnnotate() {\n    _classCallCheck(this, ArrowAnnotate);\n  }\n\n  _createClass(ArrowAnnotate, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          findingGroup = _MeasurementReport$ge.findingGroup;\n\n      var text = findingGroup.ConceptCodeSequence.CodeMeaning;\n      var GraphicData = SCOORDGroup.GraphicData;\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: ArrowAnnotate.toolType,\n        active: false,\n        handles: {\n          start: {\n            x: GraphicData[0],\n            y: GraphicData[1],\n            highlight: true,\n            active: false\n          },\n          // Use a generic offset if the stored data doesn't have the endpoint, otherwise\n          // use the actual endpoint.\n          end: {\n            x: GraphicData.length == 4 ? GraphicData[2] : GraphicData[0] + 20,\n            y: GraphicData.length == 4 ? GraphicData[3] : GraphicData[1] + 20,\n            highlight: true,\n            active: false\n          },\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        },\n        invalidated: true,\n        text: text,\n        visible: true\n      });\n\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var points = [tool.handles.start, tool.handles.end];\n      var finding = tool.finding,\n          findingSites = tool.findingSites;\n      var TID300RepresentationArguments = {\n        points: points,\n        trackingIdentifierTextValue: \"cornerstoneTools@^4.0.0:ArrowAnnotate\",\n        findingSites: findingSites || []\n      }; // If freetext finding isn't present, add it from the tool text.\n\n      if (!finding || finding.CodeValue !== CORNERSTONEFREETEXT) {\n        finding = {\n          CodeValue: CORNERSTONEFREETEXT,\n          CodingSchemeDesignator: \"CST4\",\n          CodeMeaning: tool.text\n        };\n      }\n\n      TID300RepresentationArguments.finding = finding;\n      return TID300RepresentationArguments;\n    }\n  }]);\n\n  return ArrowAnnotate;\n}();\n\nArrowAnnotate.toolType = ARROW_ANNOTATE;\nArrowAnnotate.utilityToolType = ARROW_ANNOTATE;\nArrowAnnotate.TID300Representation = Point;\n\nArrowAnnotate.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === ARROW_ANNOTATE;\n};\n\nMeasurementReport.registerTool(ArrowAnnotate);\n\nfunction iota(n) {\n  var result = new Array(n);\n  for(var i=0; i<n; ++i) {\n    result[i] = i;\n  }\n  return result\n}\n\nvar iota_1 = iota;\n\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nvar isBuffer_1 = function (obj) {\n  return obj != null && (isBuffer$1(obj) || isSlowBuffer$1(obj) || !!obj._isBuffer)\n};\n\nfunction isBuffer$1 (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer$1 (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer$1(obj.slice(0, 0))\n}\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\");\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride;\n  var terms = new Array(stride.length);\n  var i;\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i];\n  }\n  terms.sort(compare1st);\n  var result = new Array(terms.length);\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1];\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\");\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype;\n  }\n  var useGetters = (dtype === \"generic\");\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\";\n    var procedure = new Function(code);\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\";\n    var procedure = new Function(\"TrivialArray\", code);\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"];\n\n  //Create constructor for view\n  var indices = iota_1(dimension);\n  var args = indices.map(function(i) { return \"i\"+i });\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\");\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\");\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\");\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension);\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\");\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\");\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\");\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\");\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\");\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\");\n      }\n    } else {\n      code.push(\"ORDER})\");\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\");\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\");\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\");\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\");\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\");\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\");\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\");\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\");\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" });\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" });\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"));\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\");\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\");\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\");\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\");\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\");\n\n  //view.transpose():\n  var tShape = new Array(dimension);\n  var tStride = new Array(dimension);\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\";\n    tStride[i] = \"b[i\"+i+\"]\";\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\");\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\");\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\");\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\");\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\");\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"));\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer_1(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n      case \"[object BigInt64Array]\":\n        return \"bigint64\"\n      case \"[object BigUint64Array]\":\n        return \"biguint64\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"bigint64\": [],\n  \"biguint64\": [],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0];\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data];\n  }\n  if(shape === undefined) {\n    shape = [ data.length ];\n  }\n  var d = shape.length;\n  if(stride === undefined) {\n    stride = new Array(d);\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz;\n      sz *= shape[i];\n    }\n  }\n  if(offset === undefined) {\n    offset = 0;\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i];\n      }\n    }\n  }\n  var dtype = arrayDType(data);\n  var ctor_list = CACHED_CONSTRUCTORS[dtype];\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1));\n  }\n  var ctor = ctor_list[d+1];\n  return ctor(data, shape, stride, offset)\n}\n\nvar ndarray = wrappedNDArrayCtor;\n\n/**\n * crossProduct3D - Returns the cross product of a and b.\n *\n * @param  {Number[3]} a Vector a.\n * @param  {Number[3]} b Vector b.\n * @return {Number[3]}   The cross product.\n */\nfunction crossProduct3D (a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\nvar flipImageOrientationPatient = {\n  /**\n   * h: Flips ImageOrientationPatient in the horizontal direction.\n   * @param {Number[6]} iop - ImageOrientationPatient\n   * @returns {Number[6]} The transformed ImageOrientationPatient\n   */\n  h: function h(iop) {\n    return [iop[0], iop[1], iop[2], -iop[3], -iop[4], -iop[5]];\n  },\n\n  /**\n   * v: Flips ImageOrientationPatient in the vertical direction.\n   * @param {Number[6]} iop - ImageOrientationPatient\n   * @returns {Number[6]} The transformed ImageOrientationPatient\n   */\n  v: function v(iop) {\n    return [-iop[0], -iop[1], -iop[2], iop[3], iop[4], iop[5]];\n  },\n\n  /**\n   * hv: Flips ImageOrientationPatient in the horizontal and vertical directions.\n   * @param {Number[6]} iop - ImageOrientationPatient\n   * @returns {Number[6]} The transformed ImageOrientationPatient\n   */\n  hv: function hv(iop) {\n    return [-iop[0], -iop[1], -iop[2], -iop[3], -iop[4], -iop[5]];\n  }\n};\n\n/**\n * rotateVectorAroundUnitVector - Rotates vector v around unit vector k using\n *                                Rodrigues' rotation formula.\n *\n * @param  {Number[3]} v     The vector to rotate.\n * @param  {Number[3]} k     The unit vector of the axis of rotation.\n * @param  {Number} theta    The rotation magnitude in radians.\n * @return {Number[3]}       The rotated v vector.\n */\n\nfunction rotateVectorAroundUnitVector (v, k, theta) {\n  var cosTheta = Math.cos(theta);\n  var sinTheta = Math.sin(theta);\n  var oneMinusCosTheta = 1.0 - cosTheta;\n  var kdotv = k[0] * v[0] + k[1] * v[1] + k[2] * v[2];\n  var vRot = [];\n  var kxv = crossProduct3D(k, v);\n\n  for (var i = 0; i <= 2; i++) {\n    vRot[i] = v[i] * cosTheta + kxv[i] * sinTheta + k[i] * kdotv * oneMinusCosTheta;\n    vRot[i] *= -1;\n  }\n\n  return vRot;\n}\n\n/**\n * rotateDirectionCosinesInPlane - rotates the row and column cosines around\n * their normal by angle theta.\n *\n * @param  {Number[6]} iop   The row (0..2) an column (3..5) direction cosines.\n * @param  {Number} theta The rotation magnitude in radians.\n * @return {Number[6]}       The rotate row (0..2) and column (3..5) direction cosines.\n */\n\nfunction rotateDirectionCosinesInPlane (iop, theta) {\n  var r = [iop[0], iop[1], iop[2]];\n  var c = [iop[3], iop[4], iop[5]];\n  var rxc = crossProduct3D(r, c);\n  var rRot = rotateVectorAroundUnitVector(r, rxc, theta);\n  var cRot = rotateVectorAroundUnitVector(c, rxc, theta);\n  return [].concat(_toConsumableArray(rRot), _toConsumableArray(cRot));\n}\n\nvar flipMatrix2D = {\n  h: h,\n  v: v\n};\n/**\n * flipMatrix2D.h - Flips a 2D matrix in the horizontal direction.\n *\n * @param  {Ndarry} matrix The matrix to flip.\n * @return {Ndarry}   The flipped matrix.\n */\n\nfunction h(matrix) {\n  var _matrix$shape = _slicedToArray(matrix.shape, 2),\n      rows = _matrix$shape[0],\n      cols = _matrix$shape[1];\n\n  var result = ndarray(new Uint8Array(rows * cols), [rows, cols]);\n\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      result.set(i, j, matrix.get(i, cols - 1 - j));\n    }\n  }\n\n  return result;\n}\n/**\n * flipMatrix2D.h - Flips a 2D matrix in the vertical direction.\n *\n * @param  {Ndarry} matrix The matrix to flip.\n * @return {Ndarry}   The flipped matrix.\n */\n\n\nfunction v(matrix) {\n  var _matrix$shape2 = _slicedToArray(matrix.shape, 2),\n      rows = _matrix$shape2[0],\n      cols = _matrix$shape2[1];\n\n  var result = ndarray(new Uint8Array(rows * cols), [rows, cols]);\n\n  for (var j = 0; j < cols; j++) {\n    for (var i = 0; i < rows; i++) {\n      result.set(i, j, matrix.get(rows - 1 - i, j));\n    }\n  }\n\n  return result;\n}\n\n/**\n * anonymous function - Rotates a matrix by 90 degrees.\n *\n * @param  {Ndarray} matrix The matrix to rotate.\n * @return {Ndarry}        The rotated matrix.\n */\n\nfunction rotateMatrix902D (matrix) {\n  var _matrix$shape = _slicedToArray(matrix.shape, 2),\n      rows = _matrix$shape[0],\n      cols = _matrix$shape[1]; //debugPrintMatrix(matrix);\n\n\n  var result = ndarray(new Uint8Array(rows * cols), [cols, rows]);\n  var resultColsMinus1 = result.shape[1] - 1;\n\n  for (var i = 0; i < rows; i++) {\n    for (var j = 0; j < cols; j++) {\n      result.set(j, resultColsMinus1 - i, matrix.get(i, j));\n    }\n  } //debugPrintMatrix(result);\n\n\n  return result;\n}\n\n/**\n * nearlyEqual - Returns true if a and b are nearly equal\n * within a tolerance.\n *\n * Inspiration for this function logic source comes from:\n * https://floating-point-gui.de/errors/comparison/\n *\n * https://floating-point-gui.de is published under\n * the Creative Commons Attribution License (BY):\n * http://creativecommons.org/licenses/by/3.0/\n *\n * The actual implementation has been adjusted \n * as discussed here: https://github.com/dcmjs-org/dcmjs/pull/304\n *\n * More information on floating point comparison here:\n * http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/\n *\n * @param {Number} a\n * @param {Number} b\n * @param {Number} tolerance.\n * @return {Boolean} True if a and b are nearly equal.\n */\nfunction nearlyEqual(a, b, epsilon) {\n  var absA = Math.abs(a);\n  var absB = Math.abs(b);\n  var diff = Math.abs(a - b);\n\n  if (a === b) {\n    // shortcut, handles infinities\n    return true;\n  } else if (a === 0 || b === 0 || absA + absB < epsilon * epsilon) {\n    // a or b is zero or both are extremely close to it\n    // relative error is less meaningful here\n    return diff < epsilon;\n  } else {\n    // use relative error\n    return diff / Math.min(absA + absB, Number.MAX_VALUE) < epsilon;\n  }\n}\n\n\n\nvar orientation = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tcrossProduct3D: crossProduct3D,\n\tflipImageOrientationPatient: flipImageOrientationPatient,\n\trotateDirectionCosinesInPlane: rotateDirectionCosinesInPlane,\n\trotateVectorAroundUnitVector: rotateVectorAroundUnitVector,\n\tflipMatrix2D: flipMatrix2D,\n\trotateMatrix902D: rotateMatrix902D,\n\tnearlyEqual: nearlyEqual\n});\n\nvar Segmentation$1 = {\n  generateSegmentation: generateSegmentation,\n  generateToolState: generateToolState\n};\n/**\n *\n * @typedef {Object} BrushData\n * @property {Object} toolState - The cornerstoneTools global toolState.\n * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the\n *                                 seriesInstanceUid.\n */\n\n/**\n * generateSegmentation - Generates cornerstoneTools brush data, given a stack of\n * imageIds, images and the cornerstoneTools brushData.\n *\n * @param  {object[]} images    An array of the cornerstone image objects.\n * @param  {BrushData} brushData and object containing the brushData.\n * @returns {type}           description\n */\n\nfunction generateSegmentation(images, brushData) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    includeSliceSpacing: true\n  };\n  var toolState = brushData.toolState,\n      segments = brushData.segments; // Calculate the dimensions of the data cube.\n\n  var image0 = images[0];\n  var dims = {\n    x: image0.columns,\n    y: image0.rows,\n    z: images.length\n  };\n  dims.xy = dims.x * dims.y;\n\n  var numSegments = _getSegCount(seg, segments);\n\n  if (!numSegments) {\n    throw new Error(\"No segments to export!\");\n  }\n\n  var isMultiframe = image0.imageId.includes(\"?frame\");\n\n  var seg = _createSegFromImages(images, isMultiframe, options);\n\n  var _getNumberOfFramesPer = _getNumberOfFramesPerSegment(toolState, images, segments),\n      referencedFramesPerSegment = _getNumberOfFramesPer.referencedFramesPerSegment,\n      segmentIndicies = _getNumberOfFramesPer.segmentIndicies;\n\n  var NumberOfFrames = 0;\n\n  for (var i = 0; i < referencedFramesPerSegment.length; i++) {\n    NumberOfFrames += referencedFramesPerSegment[i].length;\n  }\n\n  seg.setNumberOfFrames(NumberOfFrames);\n\n  for (var _i = 0; _i < segmentIndicies.length; _i++) {\n    var segmentIndex = segmentIndicies[_i];\n    var referencedFrameIndicies = referencedFramesPerSegment[_i]; // Frame numbers start from 1.\n\n    var referencedFrameNumbers = referencedFrameIndicies.map(function (element) {\n      return element + 1;\n    });\n    var segment = segments[segmentIndex];\n    seg.addSegment(segment, _extractCornerstoneToolsPixelData(segmentIndex, referencedFrameIndicies, toolState, images, dims), referencedFrameNumbers);\n  }\n\n  seg.bitPackPixelData();\n  var segBlob = datasetToBlob(seg.dataset);\n  return segBlob;\n}\n\nfunction _extractCornerstoneToolsPixelData(segmentIndex, referencedFrames, toolState, images, dims) {\n  var pixelData = new Uint8Array(dims.xy * referencedFrames.length);\n  var pixelDataIndex = 0;\n\n  for (var i = 0; i < referencedFrames.length; i++) {\n    var frame = referencedFrames[i];\n    var imageId = images[frame].imageId;\n    var imageIdSpecificToolState = toolState[imageId];\n    var brushPixelData = imageIdSpecificToolState.brush.data[segmentIndex].pixelData;\n\n    for (var p = 0; p < brushPixelData.length; p++) {\n      pixelData[pixelDataIndex] = brushPixelData[p];\n      pixelDataIndex++;\n    }\n  }\n\n  return pixelData;\n}\n\nfunction _getNumberOfFramesPerSegment(toolState, images, segments) {\n  var segmentIndicies = [];\n  var referencedFramesPerSegment = [];\n\n  for (var i = 0; i < segments.length; i++) {\n    if (segments[i]) {\n      segmentIndicies.push(i);\n      referencedFramesPerSegment.push([]);\n    }\n  }\n\n  for (var z = 0; z < images.length; z++) {\n    var imageId = images[z].imageId;\n    var imageIdSpecificToolState = toolState[imageId];\n\n    for (var _i2 = 0; _i2 < segmentIndicies.length; _i2++) {\n      var segIdx = segmentIndicies[_i2];\n\n      if (imageIdSpecificToolState && imageIdSpecificToolState.brush && imageIdSpecificToolState.brush.data && imageIdSpecificToolState.brush.data[segIdx] && imageIdSpecificToolState.brush.data[segIdx].pixelData) {\n        referencedFramesPerSegment[_i2].push(z);\n      }\n    }\n  }\n\n  return {\n    referencedFramesPerSegment: referencedFramesPerSegment,\n    segmentIndicies: segmentIndicies\n  };\n}\n\nfunction _getSegCount(seg, segments) {\n  var numSegments = 0;\n\n  for (var i = 0; i < segments.length; i++) {\n    if (segments[i]) {\n      numSegments++;\n    }\n  }\n\n  return numSegments;\n}\n/**\n * _createSegFromImages - description\n *\n * @param  {Object[]} images    An array of the cornerstone image objects.\n * @param  {Boolean} isMultiframe Whether the images are multiframe.\n * @returns {Object}              The Seg derived dataSet.\n */\n\n\nfunction _createSegFromImages(images, isMultiframe, options) {\n  var datasets = [];\n\n  if (isMultiframe) {\n    var image = images[0];\n    var arrayBuffer = image.data.byteArray.buffer;\n    var dicomData = DicomMessage.readFile(arrayBuffer);\n    var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    datasets.push(dataset);\n  } else {\n    for (var i = 0; i < images.length; i++) {\n      var _image = images[i];\n      var _arrayBuffer = _image.data.byteArray.buffer;\n\n      var _dicomData = DicomMessage.readFile(_arrayBuffer);\n\n      var _dataset = DicomMetaDictionary.naturalizeDataset(_dicomData.dict);\n\n      _dataset._meta = DicomMetaDictionary.namifyDataset(_dicomData.meta);\n      datasets.push(_dataset);\n    }\n  }\n\n  var multiframe = Normalizer.normalizeToDataset(datasets);\n  return new Segmentation([multiframe], options);\n}\n/**\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param  {string[]} imageIds    An array of the imageIds.\n * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.\n * @param {*} metadataProvider\n * @returns {Object}  The toolState and an object from which the\n *                    segment metadata can be derived.\n */\n\n\nfunction generateToolState(imageIds, arrayBuffer, metadataProvider) {\n  var dicomData = DicomMessage.readFile(arrayBuffer);\n  var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n  var multiframe = Normalizer.normalizeToDataset([dataset]);\n  var imagePlaneModule = metadataProvider.get(\"imagePlaneModule\", imageIds[0]);\n\n  if (!imagePlaneModule) {\n    console.warn(\"Insufficient metadata, imagePlaneModule missing.\");\n  }\n\n  var ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [].concat(_toConsumableArray(imagePlaneModule.rowCosines), _toConsumableArray(imagePlaneModule.columnCosines)) : [imagePlaneModule.rowCosines.x, imagePlaneModule.rowCosines.y, imagePlaneModule.rowCosines.z, imagePlaneModule.columnCosines.x, imagePlaneModule.columnCosines.y, imagePlaneModule.columnCosines.z]; // Get IOP from ref series, compute supported orientations:\n\n  var validOrientations = getValidOrientations(ImageOrientationPatient);\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = multiframe.Columns * multiframe.Rows;\n  var segMetadata = getSegmentMetadata(multiframe);\n  var pixelData = unpackPixelData(multiframe);\n  var PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;\n  var toolState = {};\n  var inPlane = true;\n\n  for (var i = 0; i < PerFrameFunctionalGroupsSequence.length; i++) {\n    var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];\n    var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n    var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [multiframe.Rows, multiframe.Columns]);\n    var alignedPixelDataI = alignPixelDataWithSourceData(pixelDataI2D, ImageOrientationPatientI, validOrientations);\n\n    if (!alignedPixelDataI) {\n      console.warn(\"This segmentation object is not in-plane with the source data. Bailing out of IO. It'd be better to render this with vtkjs. \");\n      inPlane = false;\n      break;\n    }\n\n    var segmentIndex = PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber - 1;\n    var SourceImageSequence = void 0;\n\n    if (SharedFunctionalGroupsSequence.DerivationImageSequence && SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence) {\n      SourceImageSequence = SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence[i];\n    } else {\n      SourceImageSequence = PerFrameFunctionalGroups.DerivationImageSequence.SourceImageSequence;\n    }\n\n    var imageId = getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider);\n    addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, alignedPixelDataI);\n  }\n\n  if (!inPlane) {\n    return;\n  }\n\n  return {\n    toolState: toolState,\n    segMetadata: segMetadata\n  };\n}\n/**\n * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.\n *\n * @param  {Object} multiframe The multiframe dataset.\n * @return {Uint8Array}      The unpacked pixelData.\n */\n\n\nfunction unpackPixelData(multiframe) {\n  var segType = multiframe.SegmentationType;\n\n  if (segType === \"BINARY\") {\n    return BitArray.unpack(multiframe.PixelData);\n  }\n\n  var pixelData = new Uint8Array(multiframe.PixelData);\n  var max = multiframe.MaximumFractionalValue;\n  var onlyMaxAndZero = pixelData.find(function (element) {\n    return element !== 0 && element !== max;\n  }) === undefined;\n\n  if (!onlyMaxAndZero) {\n    log.warn(\"This is a fractional segmentation, which is not currently supported.\");\n    return;\n  }\n\n  log.warn(\"This segmentation object is actually binary... processing as such.\");\n  return pixelData;\n}\n/**\n * addImageIdSpecificBrushToolState - Adds brush pixel data to cornerstoneTools\n * formatted toolState object.\n *\n * @param  {Object} toolState    The toolState object to modify\n * @param  {String} imageId      The imageId of the toolState to add the data.\n * @param  {Number} segmentIndex The index of the segment data being added.\n * @param  {Ndarray} pixelData2D  The pixelData in Ndarry 2D format.\n */\n\n\nfunction addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, pixelData2D) {\n  if (!toolState[imageId]) {\n    toolState[imageId] = {};\n    toolState[imageId].brush = {};\n    toolState[imageId].brush.data = [];\n  } else if (!toolState[imageId].brush) {\n    toolState[imageId].brush = {};\n    toolState[imageId].brush.data = [];\n  } else if (!toolState[imageId].brush.data) {\n    toolState[imageId].brush.data = [];\n  }\n\n  toolState[imageId].brush.data[segmentIndex] = {};\n  var brushDataI = toolState[imageId].brush.data[segmentIndex];\n  brushDataI.pixelData = new Uint8Array(pixelData2D.data.length);\n  var cToolsPixelData = brushDataI.pixelData;\n\n  var _pixelData2D$shape = _slicedToArray(pixelData2D.shape, 2),\n      rows = _pixelData2D$shape[0],\n      cols = _pixelData2D$shape[1];\n\n  for (var p = 0; p < cToolsPixelData.length; p++) {\n    if (pixelData2D.data[p]) {\n      cToolsPixelData[p] = 1;\n    } else {\n      cToolsPixelData[p] = 0;\n    }\n  }\n}\n/**\n * getImageIdOfSourceImage - Returns the Cornerstone imageId of the source image.\n *\n * @param  {Object} SourceImageSequence Sequence describing the source image.\n * @param  {String[]} imageIds          A list of imageIds.\n * @param  {Object} metadataProvider    A Cornerstone metadataProvider to query\n *                                      metadata from imageIds.\n * @return {String}                     The corresponding imageId.\n */\n\n\nfunction getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider) {\n  var ReferencedSOPInstanceUID = SourceImageSequence.ReferencedSOPInstanceUID,\n      ReferencedFrameNumber = SourceImageSequence.ReferencedFrameNumber;\n  return ReferencedFrameNumber ? getImageIdOfReferencedFrame(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance(ReferencedSOPInstanceUID, imageIds, metadataProvider);\n}\n/**\n * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId\n * corresponding to the specified sopInstanceUid for single-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {String[]} imageIds         The list of imageIds.\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\n *                                 from the cornerstone imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\n\n\nfunction getImageIdOfReferencedSingleFramedSOPInstance(sopInstanceUid, imageIds, metadataProvider) {\n  return imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n\n    if (!sopCommonModule) {\n      return;\n    }\n\n    return sopCommonModule.sopInstanceUID === sopInstanceUid;\n  });\n}\n/**\n * getImageIdOfReferencedFrame - Returns the imageId corresponding to the\n * specified sopInstanceUid and frameNumber for multi-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {Number} frameNumber      The frame number.\n * @param  {String} imageIds         The list of imageIds.\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\n *                                   from the cornerstone imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\n\n\nfunction getImageIdOfReferencedFrame(sopInstanceUid, frameNumber, imageIds, metadataProvider) {\n  var imageId = imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n\n    if (!sopCommonModule) {\n      return;\n    }\n\n    var imageIdFrameNumber = Number(imageId.split(\"frame=\")[1]);\n    return (//frameNumber is zero indexed for cornerstoneWADOImageLoader image Ids.\n      sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1\n    );\n  });\n  return imageId;\n}\n/**\n * getValidOrientations - returns an array of valid orientations.\n *\n * @param  {Number[6]} iop The row (0..2) an column (3..5) direction cosines.\n * @return {Number[8][6]} An array of valid orientations.\n */\n\n\nfunction getValidOrientations(iop) {\n  var orientations = []; // [0,  1,  2]: 0,   0hf,   0vf\n  // [3,  4,  5]: 90,  90hf,  90vf\n  // [6, 7]:      180, 270\n\n  orientations[0] = iop;\n  orientations[1] = flipImageOrientationPatient.h(iop);\n  orientations[2] = flipImageOrientationPatient.v(iop);\n  var iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);\n  orientations[3] = iop90;\n  orientations[4] = flipImageOrientationPatient.h(iop90);\n  orientations[5] = flipImageOrientationPatient.v(iop90);\n  orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);\n  orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);\n  return orientations;\n}\n/**\n * alignPixelDataWithSourceData -\n *\n * @param {Ndarray} pixelData2D The data to align.\n * @param  {Number[6]} iop The orientation of the image slice.\n * @param  {Number[8][6]} orientations   An array of valid imageOrientationPatient values.\n * @return {Ndarray}                         The aligned pixelData.\n */\n\n\nfunction alignPixelDataWithSourceData(pixelData2D, iop, orientations) {\n  if (compareIOP(iop, orientations[0])) {\n    //Same orientation.\n    return pixelData2D;\n  } else if (compareIOP(iop, orientations[1])) {\n    //Flipped vertically.\n    return flipMatrix2D.v(pixelData2D);\n  } else if (compareIOP(iop, orientations[2])) {\n    //Flipped horizontally.\n    return flipMatrix2D.h(pixelData2D);\n  } else if (compareIOP(iop, orientations[3])) {\n    //Rotated 90 degrees.\n    return rotateMatrix902D(pixelData2D);\n  } else if (compareIOP(iop, orientations[4])) {\n    //Rotated 90 degrees and fliped horizontally.\n    return flipMatrix2D.h(rotateMatrix902D(pixelData2D));\n  } else if (compareIOP(iop, orientations[5])) {\n    //Rotated 90 degrees and fliped vertically.\n    return flipMatrix2D.v(rotateMatrix902D(pixelData2D));\n  } else if (compareIOP(iop, orientations[6])) {\n    //Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n    return rotateMatrix902D(rotateMatrix902D(pixelData2D));\n  } else if (compareIOP(iop, orientations[7])) {\n    //Rotated 270 degrees.  // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n    return rotateMatrix902D(rotateMatrix902D(rotateMatrix902D(pixelData2D)));\n  }\n}\n\nvar dx = 1e-5;\n/**\n * compareIOP - Returns true if iop1 and iop2 are equal\n * within a tollerance, dx.\n *\n * @param  {Number[6]} iop1 An ImageOrientationPatient array.\n * @param  {Number[6]} iop2 An ImageOrientationPatient array.\n * @return {Boolean}      True if iop1 and iop2 are equal.\n */\n\nfunction compareIOP(iop1, iop2) {\n  return Math.abs(iop1[0] - iop2[0]) < dx && Math.abs(iop1[1] - iop2[1]) < dx && Math.abs(iop1[2] - iop2[2]) < dx && Math.abs(iop1[3] - iop2[3]) < dx && Math.abs(iop1[4] - iop2[4]) < dx && Math.abs(iop1[5] - iop2[5]) < dx;\n}\n\nfunction getSegmentMetadata(multiframe) {\n  var data = [];\n  var segmentSequence = multiframe.SegmentSequence;\n\n  if (Array.isArray(segmentSequence)) {\n    for (var segIdx = 0; segIdx < segmentSequence.length; segIdx++) {\n      data.push(segmentSequence[segIdx]);\n    }\n  } else {\n    // Only one segment, will be stored as an object.\n    data.push(segmentSequence);\n  }\n\n  return {\n    seriesInstanceUid: multiframe.ReferencedSeriesSequence.SeriesInstanceUID,\n    data: data\n  };\n}\n\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction create() {\n  var out = new ARRAY_TYPE(9);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction create$1() {\n  var out = new ARRAY_TYPE(3);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction clone(a) {\n  var out = new ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction fromValues(x, y, z) {\n  var out = new ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = RANDOM() * 2.0 * Math.PI;\n  var z = RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nfunction zero$2(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create$1();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\nvar vec3 = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tcreate: create$1,\n\tclone: clone,\n\tlength: length,\n\tfromValues: fromValues,\n\tcopy: copy,\n\tset: set,\n\tadd: add,\n\tsubtract: subtract,\n\tmultiply: multiply,\n\tdivide: divide,\n\tceil: ceil,\n\tfloor: floor,\n\tmin: min,\n\tmax: max,\n\tround: round,\n\tscale: scale,\n\tscaleAndAdd: scaleAndAdd,\n\tdistance: distance,\n\tsquaredDistance: squaredDistance,\n\tsquaredLength: squaredLength,\n\tnegate: negate,\n\tinverse: inverse,\n\tnormalize: normalize,\n\tdot: dot,\n\tcross: cross,\n\tlerp: lerp,\n\thermite: hermite,\n\tbezier: bezier,\n\trandom: random,\n\ttransformMat4: transformMat4,\n\ttransformMat3: transformMat3,\n\ttransformQuat: transformQuat,\n\trotateX: rotateX,\n\trotateY: rotateY,\n\trotateZ: rotateZ,\n\tangle: angle,\n\tzero: zero$2,\n\tstr: str,\n\texactEquals: exactEquals,\n\tequals: equals,\n\tsub: sub,\n\tmul: mul,\n\tdiv: div,\n\tdist: dist,\n\tsqrDist: sqrDist,\n\tlen: len,\n\tsqrLen: sqrLen,\n\tforEach: forEach\n});\n\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction create$2() {\n  var out = new ARRAY_TYPE(4);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nfunction normalize$1(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach$1 = function () {\n  var vec = create$2();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nfunction create$3() {\n  var out = new ARRAY_TYPE(4);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar normalize$2 = normalize$1;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nvar rotationTo = function () {\n  var tmpvec3 = create$1();\n  var xUnitVec3 = fromValues(1, 0, 0);\n  var yUnitVec3 = fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot$1 = dot(a, b);\n\n    if (dot$1 < -0.999999) {\n      cross(tmpvec3, xUnitVec3, a);\n      if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);\n      normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot$1 > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot$1;\n      return normalize$2(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nvar sqlerp = function () {\n  var temp1 = create$3();\n  var temp2 = create$3();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nvar setAxes = function () {\n  var matr = create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize$2(out, fromMat3(out, matr));\n  };\n}();\n\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nfunction create$4() {\n  var out = new ARRAY_TYPE(2);\n\n  if (ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach$2 = function () {\n  var vec = create$4();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\n/**\n * Encodes a non-bitpacked frame which has one sample per pixel.\n *\n * @param {*} buffer\n * @param {*} numberOfFrames\n * @param {*} rows\n * @param {*} cols\n */\n\nfunction encode(buffer, numberOfFrames, rows, cols) {\n  var frameLength = rows * cols;\n  var header = createHeader();\n  var encodedFrames = [];\n\n  for (var frame = 0; frame < numberOfFrames; frame++) {\n    var frameOffset = frameLength * frame;\n    encodedFrames.push(encodeFrame(buffer, frameOffset, rows, cols, header));\n  }\n\n  return encodedFrames;\n}\n\nfunction encodeFrame(buffer, frameOffset, rows, cols, header) {\n  // Add header to frame:\n  var rleArray = [];\n\n  for (var r = 0; r < rows; r++) {\n    var rowOffset = r * cols;\n    var uint8Row = new Uint8Array(buffer, frameOffset + rowOffset, cols);\n    var i = 0;\n\n    while (i < uint8Row.length) {\n      var literalRunLength = getLiteralRunLength(uint8Row, i);\n\n      if (literalRunLength) {\n        // State how many in litteral run\n        rleArray.push(literalRunLength - 1); // Append litteral run.\n\n        var literalRun = uint8Row.slice(i, i + literalRunLength);\n        rleArray = [].concat(_toConsumableArray(rleArray), _toConsumableArray(literalRun));\n        i += literalRunLength;\n      }\n\n      if (i >= uint8Row.length) {\n        break;\n      } // Next must be a replicate run.\n\n\n      var replicateRunLength = getReplicateRunLength(uint8Row, i);\n\n      if (replicateRunLength) {\n        // State how many in replicate run\n        rleArray.push(257 - replicateRunLength);\n        rleArray.push(uint8Row[i]);\n        i += replicateRunLength;\n      }\n    }\n  }\n\n  var headerLength = 64;\n  var bodyLength = rleArray.length % 2 === 0 ? rleArray.length : rleArray.length + 1;\n  var encodedFrameBuffer = new ArrayBuffer(headerLength + bodyLength); // Copy header into encodedFrameBuffer.\n\n  var headerView = new Uint32Array(encodedFrameBuffer, 0, 16);\n\n  for (var _i = 0; _i < headerView.length; _i++) {\n    headerView[_i] = header[_i];\n  }\n\n  for (var _i2 = 0; _i2 < headerView.length; _i2++) {\n    rleArray.push(headerView[_i2]);\n  } // Copy rle data into encodedFrameBuffer.\n\n\n  var bodyView = new Uint8Array(encodedFrameBuffer, 64);\n\n  for (var _i3 = 0; _i3 < rleArray.length; _i3++) {\n    bodyView[_i3] = rleArray[_i3];\n  }\n\n  return encodedFrameBuffer;\n}\n\nfunction createHeader() {\n  var headerUint32 = new Uint32Array(16);\n  headerUint32[0] = 1; // 1 Segment.\n\n  headerUint32[1] = 64; // Data offset is 64 bytes.\n  // Return byte-array version of header:\n\n  return headerUint32;\n}\n\nfunction getLiteralRunLength(uint8Row, i) {\n  for (var l = 0; l < uint8Row.length - i; l++) {\n    if (uint8Row[i + l] === uint8Row[i + l + 1] && uint8Row[i + l + 1] === uint8Row[i + l + 2]) {\n      return l;\n    }\n\n    if (l === 128) {\n      return l;\n    }\n  }\n\n  return uint8Row.length - i;\n}\n\nfunction getReplicateRunLength(uint8Row, i) {\n  var first = uint8Row[i];\n\n  for (var l = 1; l < uint8Row.length - i; l++) {\n    if (uint8Row[i + l] !== first) {\n      return l;\n    }\n\n    if (l === 128) {\n      return l;\n    }\n  }\n\n  return uint8Row.length - i;\n}\n\nfunction decode(rleEncodedFrames, rows, cols) {\n  var pixelData = new Uint8Array(rows * cols * rleEncodedFrames.length);\n  var buffer = pixelData.buffer;\n  var frameLength = rows * cols;\n\n  for (var i = 0; i < rleEncodedFrames.length; i++) {\n    var rleEncodedFrame = rleEncodedFrames[i];\n    var uint8FrameView = new Uint8Array(buffer, i * frameLength, frameLength);\n    decodeFrame(rleEncodedFrame, uint8FrameView);\n  }\n\n  return pixelData;\n}\n\nfunction decodeFrame(rleEncodedFrame, pixelData) {\n  // Check HEADER:\n  var header = new Uint32Array(rleEncodedFrame, 0, 16);\n\n  if (header[0] !== 1) {\n    log.error(\"rleSingleSamplePerPixel only supports fragments with single Byte Segments (for rle encoded segmentation data) at the current time. This rleEncodedFrame has \".concat(header[0], \" Byte Segments.\"));\n    return;\n  }\n\n  if (header[1] !== 64) {\n    log.error(\"Data offset of Byte Segment 1 should be 64 bytes, this rle fragment is encoded incorrectly.\");\n    return;\n  }\n\n  var uInt8Frame = new Uint8Array(rleEncodedFrame, 64);\n  var pixelDataIndex = 0;\n  var i = 0;\n\n  while (pixelDataIndex < pixelData.length) {\n    var byteValue = uInt8Frame[i];\n\n    if (byteValue === undefined) {\n      break;\n    }\n\n    if (byteValue <= 127) {\n      // TODO -> Interpret the next N+1 bytes literally.\n      var N = byteValue + 1;\n      var next = i + 1; // Read the next N bytes literally.\n\n      for (var p = next; p < next + N; p++) {\n        pixelData[pixelDataIndex] = uInt8Frame[p];\n        pixelDataIndex++;\n      }\n\n      i += N + 1;\n    }\n\n    if (byteValue >= 129) {\n      var _N = 257 - byteValue;\n\n      var _next = i + 1; // Repeat the next byte N times.\n\n\n      for (var _p = 0; _p < _N; _p++) {\n        pixelData[pixelDataIndex] = uInt8Frame[_next];\n        pixelDataIndex++;\n      }\n\n      i += 2;\n    }\n\n    if (i === uInt8Frame.length) {\n      break;\n    }\n  }\n}\n\nvar compression = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tencode: encode,\n\tdecode: decode\n});\n\nvar lodash_clonedeep = createCommonjsModule(function (module, exports) {\n/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n});\n\nvar Segmentation$2 = {\n  generateSegmentation: generateSegmentation$1,\n  generateToolState: generateToolState$1,\n  fillSegmentation: fillSegmentation\n};\n/**\n *\n * @typedef {Object} BrushData\n * @property {Object} toolState - The cornerstoneTools global toolState.\n * @property {Object[]} segments - The cornerstoneTools segment metadata that corresponds to the\n *                                 seriesInstanceUid.\n */\n\nvar generateSegmentationDefaultOptions = {\n  includeSliceSpacing: true,\n  rleEncode: true\n};\n/**\n * generateSegmentation - Generates cornerstoneTools brush data, given a stack of\n * imageIds, images and the cornerstoneTools brushData.\n *\n * @param  {object[]} images An array of cornerstone images that contain the source\n *                           data under `image.data.byteArray.buffer`.\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\n * @param  {Object} userOptions Options to pass to the segmentation derivation and `fillSegmentation`.\n * @returns {Blob}\n */\n\nfunction generateSegmentation$1(images, inputLabelmaps3D) {\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var isMultiframe = images[0].imageId.includes(\"?frame\");\n\n  var segmentation = _createSegFromImages$1(images, isMultiframe, userOptions);\n\n  return fillSegmentation(segmentation, inputLabelmaps3D, userOptions);\n}\n/**\n * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.\n *\n * @param  {object[]} segmentation An empty segmentation derived dataset.\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\n * @param  {Object} userOptions Options object to override default options.\n * @returns {Blob}           description\n */\n\n\nfunction fillSegmentation(segmentation, inputLabelmaps3D) {\n  var userOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var options = Object.assign({}, generateSegmentationDefaultOptions, userOptions); // Use another variable so we don't redefine labelmaps3D.\n\n  var labelmaps3D = Array.isArray(inputLabelmaps3D) ? inputLabelmaps3D : [inputLabelmaps3D];\n  var numberOfFrames = 0;\n  var referencedFramesPerLabelmap = [];\n\n  var _loop = function _loop(labelmapIndex) {\n    var labelmap3D = labelmaps3D[labelmapIndex];\n    var labelmaps2D = labelmap3D.labelmaps2D,\n        metadata = labelmap3D.metadata;\n    var referencedFramesPerSegment = [];\n\n    for (var i = 1; i < metadata.length; i++) {\n      if (metadata[i]) {\n        referencedFramesPerSegment[i] = [];\n      }\n    }\n\n    var _loop2 = function _loop2(_i) {\n      var labelmap2D = labelmaps2D[_i];\n\n      if (labelmaps2D[_i]) {\n        var segmentsOnLabelmap = labelmap2D.segmentsOnLabelmap;\n        segmentsOnLabelmap.forEach(function (segmentIndex) {\n          if (segmentIndex !== 0) {\n            referencedFramesPerSegment[segmentIndex].push(_i);\n            numberOfFrames++;\n          }\n        });\n      }\n    };\n\n    for (var _i = 0; _i < labelmaps2D.length; _i++) {\n      _loop2(_i);\n    }\n\n    referencedFramesPerLabelmap[labelmapIndex] = referencedFramesPerSegment;\n  };\n\n  for (var labelmapIndex = 0; labelmapIndex < labelmaps3D.length; labelmapIndex++) {\n    _loop(labelmapIndex);\n  }\n\n  segmentation.setNumberOfFrames(numberOfFrames);\n\n  for (var _labelmapIndex = 0; _labelmapIndex < labelmaps3D.length; _labelmapIndex++) {\n    var referencedFramesPerSegment = referencedFramesPerLabelmap[_labelmapIndex];\n    var labelmap3D = labelmaps3D[_labelmapIndex];\n    var metadata = labelmap3D.metadata;\n\n    for (var segmentIndex = 1; segmentIndex < referencedFramesPerSegment.length; segmentIndex++) {\n      var referencedFrameIndicies = referencedFramesPerSegment[segmentIndex];\n\n      if (referencedFrameIndicies) {\n        // Frame numbers start from 1.\n        var referencedFrameNumbers = referencedFrameIndicies.map(function (element) {\n          return element + 1;\n        });\n        var segmentMetadata = metadata[segmentIndex];\n\n        var labelmaps = _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies);\n\n        segmentation.addSegmentFromLabelmap(segmentMetadata, labelmaps, segmentIndex, referencedFrameNumbers);\n      }\n    }\n  }\n\n  if (options.rleEncode) {\n    var rleEncodedFrames = encode(segmentation.dataset.PixelData, numberOfFrames, segmentation.dataset.Rows, segmentation.dataset.Columns); // Must use fractional now to RLE encode, as the DICOM standard only allows BitStored && BitsAllocated\n    // to be 1 for BINARY. This is not ideal and there should be a better format for compression in this manner\n    // added to the standard.\n\n    segmentation.assignToDataset({\n      BitsAllocated: \"8\",\n      BitsStored: \"8\",\n      HighBit: \"7\",\n      SegmentationType: \"FRACTIONAL\",\n      SegmentationFractionalType: \"PROBABILITY\",\n      MaximumFractionalValue: \"255\"\n    });\n    segmentation.dataset._meta.TransferSyntaxUID = {\n      Value: [\"1.2.840.10008.1.2.5\"],\n      vr: \"UI\"\n    };\n    segmentation.dataset._vrMap.PixelData = \"OB\";\n    segmentation.dataset.PixelData = rleEncodedFrames;\n  } else {\n    // If no rleEncoding, at least bitpack the data.\n    segmentation.bitPackPixelData();\n  }\n\n  var segBlob = datasetToBlob(segmentation.dataset);\n  return segBlob;\n}\n\nfunction _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies) {\n  var labelmaps2D = labelmap3D.labelmaps2D;\n  var labelmaps = [];\n\n  for (var i = 0; i < referencedFrameIndicies.length; i++) {\n    var frame = referencedFrameIndicies[i];\n    labelmaps.push(labelmaps2D[frame].pixelData);\n  }\n\n  return labelmaps;\n}\n/**\n * _createSegFromImages - description\n *\n * @param  {Object[]} images    An array of the cornerstone image objects.\n * @param  {Boolean} isMultiframe Whether the images are multiframe.\n * @returns {Object}              The Seg derived dataSet.\n */\n\n\nfunction _createSegFromImages$1(images, isMultiframe, options) {\n  var datasets = [];\n\n  if (isMultiframe) {\n    var image = images[0];\n    var arrayBuffer = image.data.byteArray.buffer;\n    var dicomData = DicomMessage.readFile(arrayBuffer);\n    var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n    datasets.push(dataset);\n  } else {\n    for (var i = 0; i < images.length; i++) {\n      var _image = images[i];\n      var _arrayBuffer = _image.data.byteArray.buffer;\n\n      var _dicomData = DicomMessage.readFile(_arrayBuffer);\n\n      var _dataset = DicomMetaDictionary.naturalizeDataset(_dicomData.dict);\n\n      _dataset._meta = DicomMetaDictionary.namifyDataset(_dicomData.meta);\n      datasets.push(_dataset);\n    }\n  }\n\n  var multiframe = Normalizer.normalizeToDataset(datasets);\n  return new Segmentation([multiframe], options);\n}\n/**\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param  {string[]} imageIds - An array of the imageIds.\n * @param  {ArrayBuffer} arrayBuffer - The SEG arrayBuffer.\n * @param  {*} metadataProvider.\n * @param  {bool} skipOverlapping - skip checks for overlapping segs, default value false.\n * @param  {number} tolerance - default value 1.e-3.\n *\n * @return {[]ArrayBuffer}a list of array buffer for each labelMap\n * @return {Object} an object from which the segment metadata can be derived\n * @return {[][][]} 2D list containing the track of segments per frame\n * @return {[][][]} 3D list containing the track of segments per frame for each labelMap\n *                  (available only for the overlapping case).\n */\n\n\nfunction generateToolState$1(imageIds, arrayBuffer, metadataProvider) {\n  var skipOverlapping = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var tolerance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  var dicomData = DicomMessage.readFile(arrayBuffer);\n  var dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);\n  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);\n  var multiframe = Normalizer.normalizeToDataset([dataset]);\n  var imagePlaneModule = metadataProvider.get(\"imagePlaneModule\", imageIds[0]);\n  var generalSeriesModule = metadataProvider.get(\"generalSeriesModule\", imageIds[0]);\n  var SeriesInstanceUID = generalSeriesModule.seriesInstanceUID;\n\n  if (!imagePlaneModule) {\n    console.warn(\"Insufficient metadata, imagePlaneModule missing.\");\n  }\n\n  var ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [].concat(_toConsumableArray(imagePlaneModule.rowCosines), _toConsumableArray(imagePlaneModule.columnCosines)) : [imagePlaneModule.rowCosines.x, imagePlaneModule.rowCosines.y, imagePlaneModule.rowCosines.z, imagePlaneModule.columnCosines.x, imagePlaneModule.columnCosines.y, imagePlaneModule.columnCosines.z]; // Get IOP from ref series, compute supported orientations:\n\n  var validOrientations = getValidOrientations$1(ImageOrientationPatient);\n  var sliceLength = multiframe.Columns * multiframe.Rows;\n  var segMetadata = getSegmentMetadata$1(multiframe, SeriesInstanceUID);\n  var TransferSyntaxUID = multiframe._meta.TransferSyntaxUID.Value[0];\n  var pixelData;\n\n  if (TransferSyntaxUID === \"1.2.840.10008.1.2.5\") {\n    var rleEncodedFrames = Array.isArray(multiframe.PixelData) ? multiframe.PixelData : [multiframe.PixelData];\n    pixelData = decode(rleEncodedFrames, multiframe.Rows, multiframe.Columns);\n\n    if (multiframe.BitsStored === 1) {\n      console.warn(\"No implementation for rle + bitbacking.\");\n      return;\n    }\n  } else {\n    pixelData = unpackPixelData$1(multiframe);\n\n    if (!pixelData) {\n      throw new Error(\"Fractional segmentations are not yet supported\");\n    }\n  }\n\n  var orientation = checkOrientation(multiframe, validOrientations, [imagePlaneModule.rows, imagePlaneModule.columns, imageIds.length], tolerance);\n  var overlapping = false;\n\n  if (!skipOverlapping) {\n    overlapping = checkSEGsOverlapping(pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance);\n  }\n\n  var insertFunction;\n\n  switch (orientation) {\n    case \"Planar\":\n      if (overlapping) {\n        insertFunction = insertOverlappingPixelDataPlanar;\n      } else {\n        insertFunction = insertPixelDataPlanar;\n      }\n\n      break;\n\n    case \"Perpendicular\":\n      //insertFunction = insertPixelDataPerpendicular;\n      throw new Error(\"Segmentations orthogonal to the acquisition plane of the source data are not yet supported.\");\n\n    case \"Oblique\":\n      throw new Error(\"Segmentations oblique to the acquisition plane of the source data are not yet supported.\");\n  }\n  /* if SEGs are overlapping:\n  1) the labelmapBuffer will contain M volumes which have non-overlapping segments;\n  2) segmentsOnFrame will have M * numberOfFrames values to track in which labelMap are the segments;\n  3) insertFunction will return the number of LabelMaps\n  4) generateToolState return is an array*/\n\n\n  var segmentsOnFrameArray = [];\n  segmentsOnFrameArray[0] = [];\n  var segmentsOnFrame = [];\n  var arrayBufferLength = sliceLength * imageIds.length * 2; // 2 bytes per label voxel in cst4.\n\n  var labelmapBufferArray = [];\n  labelmapBufferArray[0] = new ArrayBuffer(arrayBufferLength);\n  insertFunction(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance);\n  return {\n    labelmapBufferArray: labelmapBufferArray,\n    segMetadata: segMetadata,\n    segmentsOnFrame: segmentsOnFrame,\n    segmentsOnFrameArray: segmentsOnFrameArray\n  };\n}\n/**\n * Find the reference frame of the segmentation frame in the source data.\n *\n * @param  {Object}      multiframe        dicom metadata\n * @param  {Int}         frameSegment      frame dicom index\n * @param  {String[]}    imageIds          A list of imageIds.\n * @param  {Object}      metadataProvider  A Cornerstone metadataProvider to query\n *                                         metadata from imageIds.\n * @param  {Float}       tolerance         The tolerance parameter\n *\n * @returns {String}     Returns the imageId\n */\n\n\nfunction findReferenceSourceImageId(multiframe, frameSegment, imageIds, metadataProvider, tolerance) {\n  var imageId = undefined;\n\n  if (!multiframe) {\n    return imageId;\n  }\n\n  var FrameOfReferenceUID = multiframe.FrameOfReferenceUID,\n      PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n      SourceImageSequence = multiframe.SourceImageSequence,\n      ReferencedSeriesSequence = multiframe.ReferencedSeriesSequence;\n\n  if (!PerFrameFunctionalGroupsSequence || PerFrameFunctionalGroupsSequence.length === 0) {\n    return imageId;\n  }\n\n  var PerFrameFunctionalGroup = PerFrameFunctionalGroupsSequence[frameSegment];\n\n  if (!PerFrameFunctionalGroup) {\n    return imageId;\n  }\n\n  var frameSourceImageSequence = undefined;\n\n  if (SourceImageSequence && SourceImageSequence.length !== 0) {\n    frameSourceImageSequence = SourceImageSequence[frameSegment];\n  } else if (PerFrameFunctionalGroup.DerivationImageSequence) {\n    var DerivationImageSequence = PerFrameFunctionalGroup.DerivationImageSequence;\n\n    if (Array.isArray(DerivationImageSequence)) {\n      if (DerivationImageSequence.length !== 0) {\n        DerivationImageSequence = DerivationImageSequence[0];\n      } else {\n        DerivationImageSequence = undefined;\n      }\n    }\n\n    if (DerivationImageSequence) {\n      frameSourceImageSequence = DerivationImageSequence.SourceImageSequence;\n\n      if (Array.isArray(frameSourceImageSequence)) {\n        if (frameSourceImageSequence.length !== 0) {\n          frameSourceImageSequence = frameSourceImageSequence[0];\n        } else {\n          frameSourceImageSequence = undefined;\n        }\n      }\n    }\n  }\n\n  if (frameSourceImageSequence) {\n    imageId = getImageIdOfSourceImagebySourceImageSequence(frameSourceImageSequence, imageIds, metadataProvider);\n  }\n\n  if (imageId === undefined && ReferencedSeriesSequence) {\n    var referencedSeriesSequence = Array.isArray(ReferencedSeriesSequence) ? ReferencedSeriesSequence[0] : ReferencedSeriesSequence;\n    var ReferencedSeriesInstanceUID = referencedSeriesSequence.SeriesInstanceUID;\n    imageId = getImageIdOfSourceImagebyGeometry(ReferencedSeriesInstanceUID, FrameOfReferenceUID, PerFrameFunctionalGroup, imageIds, metadataProvider, tolerance);\n  }\n\n  return imageId;\n}\n/**\n * Checks if there is any overlapping segmentations.\n *  @returns {boolean} Returns a flag if segmentations overlapping\n */\n\n\nfunction checkSEGsOverlapping(pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n      PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n      SegmentSequence = multiframe.SegmentSequence,\n      Rows = multiframe.Rows,\n      Columns = multiframe.Columns;\n  var numberOfSegs = SegmentSequence.length;\n\n  if (numberOfSegs < 2) {\n    return false;\n  }\n\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = Columns * Rows;\n  var groupsLen = PerFrameFunctionalGroupsSequence.length;\n  /** sort groupsLen to have all the segments for each frame in an array\n   * frame 2 : 1, 2\n   * frame 4 : 1, 3\n   * frame 5 : 4\n   */\n\n  var frameSegmentsMapping = new Map();\n\n  var _loop3 = function _loop3(frameSegment) {\n    var segmentIndex = getSegmentIndex(multiframe, frameSegment);\n\n    if (segmentIndex === undefined) {\n      console.warn(\"Could not retrieve the segment index for frame segment \" + frameSegment + \", skipping this frame.\");\n      return \"continue\";\n    }\n\n    var imageId = findReferenceSourceImageId(multiframe, frameSegment, imageIds, metadataProvider, tolerance);\n\n    if (!imageId) {\n      console.warn(\"Image not present in stack, can't import frame : \" + frameSegment + \".\");\n      return \"continue\";\n    }\n\n    var imageIdIndex = imageIds.findIndex(function (element) {\n      return element === imageId;\n    });\n\n    if (frameSegmentsMapping.has(imageIdIndex)) {\n      var segmentArray = frameSegmentsMapping.get(imageIdIndex);\n\n      if (!segmentArray.includes(frameSegment)) {\n        segmentArray.push(frameSegment);\n        frameSegmentsMapping.set(imageIdIndex, segmentArray);\n      }\n    } else {\n      frameSegmentsMapping.set(imageIdIndex, [frameSegment]);\n    }\n  };\n\n  for (var frameSegment = 0; frameSegment < groupsLen; ++frameSegment) {\n    var _ret = _loop3(frameSegment);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  var _iterator = _createForOfIteratorHelper(frameSegmentsMapping.entries()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          user = _step$value[0],\n          role = _step$value[1];\n\n      var temp2DArray = new Uint16Array(sliceLength).fill(0);\n\n      for (var i = 0; i < role.length; ++i) {\n        var _frameSegment = role[i];\n        var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[_frameSegment];\n        var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n        var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, _frameSegment * sliceLength, sliceLength), [Rows, Columns]);\n        var alignedPixelDataI = alignPixelDataWithSourceData$1(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);\n\n        if (!alignedPixelDataI) {\n          console.warn(\"Individual SEG frames are out of plane with respect to the first SEG frame, this is not yet supported, skipping this frame.\");\n          continue;\n        }\n\n        var data = alignedPixelDataI.data;\n\n        for (var j = 0, len = data.length; j < len; ++j) {\n          if (data[j] !== 0) {\n            temp2DArray[j]++;\n\n            if (temp2DArray[j] > 1) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n\nfunction insertOverlappingPixelDataPlanar(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n      PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n      Rows = multiframe.Rows,\n      Columns = multiframe.Columns;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = Columns * Rows;\n  var arrayBufferLength = sliceLength * imageIds.length * 2; // 2 bytes per label voxel in cst4.\n  // indicate the number of labelMaps\n\n  var M = 1; // indicate the current labelMap array index;\n\n  var m = 0; // temp array for checking overlaps\n\n  var tempBuffer = labelmapBufferArray[m].slice(0); // temp list for checking overlaps\n\n  var tempSegmentsOnFrame = lodash_clonedeep(segmentsOnFrameArray[m]);\n  /** split overlapping SEGs algorithm for each segment:\n   *  A) copy the labelmapBuffer in the array with index 0\n   *  B) add the segment pixel per pixel on the copied buffer from (A)\n   *  C) if no overlap, copy the results back on the orignal array from (A)\n   *  D) if overlap, repeat increasing the index m up to M (if out of memory, add new buffer in the array and M++);\n   */\n\n  var numberOfSegs = multiframe.SegmentSequence.length;\n\n  for (var segmentIndexToProcess = 1; segmentIndexToProcess <= numberOfSegs; ++segmentIndexToProcess) {\n    var _loop4 = function _loop4(_i2, groupsLen) {\n      var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[_i2];\n      var segmentIndex = getSegmentIndex(multiframe, _i2);\n\n      if (segmentIndex === undefined) {\n        throw new Error(\"Could not retrieve the segment index. Aborting segmentation loading.\");\n      }\n\n      if (segmentIndex !== segmentIndexToProcess) {\n        i = _i2;\n        return \"continue\";\n      }\n\n      var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n      var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, _i2 * sliceLength, sliceLength), [Rows, Columns]);\n      var alignedPixelDataI = alignPixelDataWithSourceData$1(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);\n\n      if (!alignedPixelDataI) {\n        throw new Error(\"Individual SEG frames are out of plane with respect to the first SEG frame. \" + \"This is not yet supported. Aborting segmentation loading.\");\n      }\n\n      var imageId = findReferenceSourceImageId(multiframe, _i2, imageIds, metadataProvider, tolerance);\n\n      if (!imageId) {\n        console.warn(\"Image not present in stack, can't import frame : \" + _i2 + \".\");\n        i = _i2;\n        return \"continue\";\n      }\n\n      var sourceImageMetadata = metadataProvider.get(\"instance\", imageId);\n\n      if (Rows !== sourceImageMetadata.Rows || Columns !== sourceImageMetadata.Columns) {\n        throw new Error(\"Individual SEG frames have different geometry dimensions (Rows and Columns) \" + \"respect to the source image reference frame. This is not yet supported. \" + \"Aborting segmentation loading. \");\n      }\n\n      var imageIdIndex = imageIds.findIndex(function (element) {\n        return element === imageId;\n      });\n      var byteOffset = sliceLength * 2 * imageIdIndex; // 2 bytes/pixel\n\n      var labelmap2DView = new Uint16Array(tempBuffer, byteOffset, sliceLength);\n      var data = alignedPixelDataI.data;\n      var segmentOnFrame = false;\n\n      for (var j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {\n        if (data[j]) {\n          if (labelmap2DView[j] !== 0) {\n            m++;\n\n            if (m >= M) {\n              labelmapBufferArray[m] = new ArrayBuffer(arrayBufferLength);\n              segmentsOnFrameArray[m] = [];\n              M++;\n            }\n\n            tempBuffer = labelmapBufferArray[m].slice(0);\n            tempSegmentsOnFrame = lodash_clonedeep(segmentsOnFrameArray[m]);\n            _i2 = 0;\n            break;\n          } else {\n            labelmap2DView[j] = segmentIndex;\n            segmentOnFrame = true;\n          }\n        }\n      }\n\n      if (segmentOnFrame) {\n        if (!tempSegmentsOnFrame[imageIdIndex]) {\n          tempSegmentsOnFrame[imageIdIndex] = [];\n        }\n\n        tempSegmentsOnFrame[imageIdIndex].push(segmentIndex);\n\n        if (!segmentsOnFrame[imageIdIndex]) {\n          segmentsOnFrame[imageIdIndex] = [];\n        }\n\n        segmentsOnFrame[imageIdIndex].push(segmentIndex);\n      }\n\n      i = _i2;\n    };\n\n    for (var i = 0, groupsLen = PerFrameFunctionalGroupsSequence.length; i < groupsLen; ++i) {\n      var _ret2 = _loop4(i, groupsLen);\n\n      if (_ret2 === \"continue\") continue;\n    }\n\n    labelmapBufferArray[m] = tempBuffer.slice(0);\n    segmentsOnFrameArray[m] = lodash_clonedeep(tempSegmentsOnFrame); // reset temp variables/buffers for new segment\n\n    m = 0;\n    tempBuffer = labelmapBufferArray[m].slice(0);\n    tempSegmentsOnFrame = lodash_clonedeep(segmentsOnFrameArray[m]);\n  }\n}\n\nvar getSegmentIndex = function getSegmentIndex(multiframe, frame) {\n  var PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n      SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;\n  var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[frame];\n  return PerFrameFunctionalGroups && PerFrameFunctionalGroups.SegmentIdentificationSequence ? PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber : SharedFunctionalGroupsSequence.SegmentIdentificationSequence ? SharedFunctionalGroupsSequence.SegmentIdentificationSequence.ReferencedSegmentNumber : undefined;\n};\n\nfunction insertPixelDataPlanar(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n      PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence,\n      Rows = multiframe.Rows,\n      Columns = multiframe.Columns;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined;\n  var sliceLength = Columns * Rows;\n\n  var _loop5 = function _loop5(groupsLen, _i3) {\n    var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[_i3];\n    var ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n    var pixelDataI2D = ndarray(new Uint8Array(pixelData.buffer, _i3 * sliceLength, sliceLength), [Rows, Columns]);\n    var alignedPixelDataI = alignPixelDataWithSourceData$1(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);\n\n    if (!alignedPixelDataI) {\n      throw new Error(\"Individual SEG frames are out of plane with respect to the first SEG frame. \" + \"This is not yet supported. Aborting segmentation loading.\");\n    }\n\n    var segmentIndex = getSegmentIndex(multiframe, _i3);\n\n    if (segmentIndex === undefined) {\n      throw new Error(\"Could not retrieve the segment index. Aborting segmentation loading.\");\n    }\n\n    var imageId = findReferenceSourceImageId(multiframe, _i3, imageIds, metadataProvider, tolerance);\n\n    if (!imageId) {\n      console.warn(\"Image not present in stack, can't import frame : \" + _i3 + \".\");\n      return \"continue\";\n    }\n\n    var sourceImageMetadata = metadataProvider.get(\"instance\", imageId);\n\n    if (Rows !== sourceImageMetadata.Rows || Columns !== sourceImageMetadata.Columns) {\n      throw new Error(\"Individual SEG frames have different geometry dimensions (Rows and Columns) \" + \"respect to the source image reference frame. This is not yet supported. \" + \"Aborting segmentation loading. \");\n    }\n\n    var imageIdIndex = imageIds.findIndex(function (element) {\n      return element === imageId;\n    });\n    var byteOffset = sliceLength * 2 * imageIdIndex; // 2 bytes/pixel\n\n    var labelmap2DView = new Uint16Array(labelmapBufferArray[0], byteOffset, sliceLength);\n    var data = alignedPixelDataI.data;\n\n    for (var j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {\n      if (data[j]) {\n        for (var x = j; x < len; ++x) {\n          if (data[x]) {\n            labelmap2DView[x] = segmentIndex;\n          }\n        }\n\n        if (!segmentsOnFrame[imageIdIndex]) {\n          segmentsOnFrame[imageIdIndex] = [];\n        }\n\n        segmentsOnFrame[imageIdIndex].push(segmentIndex);\n        break;\n      }\n    }\n  };\n\n  for (var _i3 = 0, groupsLen = PerFrameFunctionalGroupsSequence.length; _i3 < groupsLen; ++_i3) {\n    var _ret3 = _loop5(groupsLen, _i3);\n\n    if (_ret3 === \"continue\") continue;\n  }\n}\n\nfunction checkOrientation(multiframe, validOrientations, sourceDataDimensions, tolerance) {\n  var SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence,\n      PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;\n  var sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : undefined; // Check if in plane.\n\n  var PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[0];\n  var iop = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;\n  var inPlane = validOrientations.some(function (operation) {\n    return compareArrays(iop, operation, tolerance);\n  });\n\n  if (inPlane) {\n    return \"Planar\";\n  }\n\n  if (checkIfPerpendicular(iop, validOrientations[0], tolerance) && sourceDataDimensions.includes(multiframe.Rows) && sourceDataDimensions.includes(multiframe.Columns)) {\n    // Perpendicular and fits on same grid.\n    return \"Perpendicular\";\n  }\n\n  return \"Oblique\";\n}\n/**\n * checkIfPerpendicular - Returns true if iop1 and iop2 are perpendicular\n * within a tolerance.\n *\n * @param  {Number[6]} iop1 An ImageOrientationPatient array.\n * @param  {Number[6]} iop2 An ImageOrientationPatient array.\n * @param  {Number} tolerance.\n * @return {Boolean} True if iop1 and iop2 are equal.\n */\n\n\nfunction checkIfPerpendicular(iop1, iop2, tolerance) {\n  var absDotColumnCosines = Math.abs(iop1[0] * iop2[0] + iop1[1] * iop2[1] + iop1[2] * iop2[2]);\n  var absDotRowCosines = Math.abs(iop1[3] * iop2[3] + iop1[4] * iop2[4] + iop1[5] * iop2[5]);\n  return (absDotColumnCosines < tolerance || Math.abs(absDotColumnCosines - 1) < tolerance) && (absDotRowCosines < tolerance || Math.abs(absDotRowCosines - 1) < tolerance);\n}\n/**\n * unpackPixelData - Unpacks bitpacked pixelData if the Segmentation is BINARY.\n *\n * @param  {Object} multiframe The multiframe dataset.\n * @return {Uint8Array}      The unpacked pixelData.\n */\n\n\nfunction unpackPixelData$1(multiframe) {\n  var segType = multiframe.SegmentationType;\n  var data;\n\n  if (Array.isArray(multiframe.PixelData)) {\n    data = multiframe.PixelData[0];\n  } else {\n    data = multiframe.PixelData;\n  }\n\n  if (data === undefined) {\n    log.error(\"This segmentation pixeldata is undefined.\");\n  }\n\n  if (segType === \"BINARY\") {\n    return BitArray.unpack(data);\n  }\n\n  var pixelData = new Uint8Array(data);\n  var max = multiframe.MaximumFractionalValue;\n  var onlyMaxAndZero = pixelData.find(function (element) {\n    return element !== 0 && element !== max;\n  }) === undefined;\n\n  if (!onlyMaxAndZero) {\n    // This is a fractional segmentation, which is not currently supported.\n    return;\n  }\n\n  log.warn(\"This segmentation object is actually binary... processing as such.\");\n  return pixelData;\n}\n/**\n * getImageIdOfSourceImagebySourceImageSequence - Returns the Cornerstone imageId of the source image.\n *\n * @param  {Object}   SourceImageSequence  Sequence describing the source image.\n * @param  {String[]} imageIds             A list of imageIds.\n * @param  {Object}   metadataProvider     A Cornerstone metadataProvider to query\n *                                         metadata from imageIds.\n * @return {String}                        The corresponding imageId.\n */\n\n\nfunction getImageIdOfSourceImagebySourceImageSequence(SourceImageSequence, imageIds, metadataProvider) {\n  var ReferencedSOPInstanceUID = SourceImageSequence.ReferencedSOPInstanceUID,\n      ReferencedFrameNumber = SourceImageSequence.ReferencedFrameNumber;\n  return ReferencedFrameNumber ? getImageIdOfReferencedFrame$1(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance$1(ReferencedSOPInstanceUID, imageIds, metadataProvider);\n}\n/**\n * getImageIdOfSourceImagebyGeometry - Returns the Cornerstone imageId of the source image.\n *\n * @param  {String}    ReferencedSeriesInstanceUID    Referenced series of the source image.\n * @param  {String}    FrameOfReferenceUID            Frame of reference.\n * @param  {Object}    PerFrameFunctionalGroup        Sequence describing segmentation reference attributes per frame.\n * @param  {String[]}  imageIds                       A list of imageIds.\n * @param  {Object}    metadataProvider               A Cornerstone metadataProvider to query\n * @param  {Float}     tolerance                      The tolerance parameter\n *\n * @return {String}                                   The corresponding imageId.\n */\n\n\nfunction getImageIdOfSourceImagebyGeometry(ReferencedSeriesInstanceUID, FrameOfReferenceUID, PerFrameFunctionalGroup, imageIds, metadataProvider, tolerance) {\n  if (ReferencedSeriesInstanceUID === undefined || PerFrameFunctionalGroup.PlanePositionSequence === undefined || PerFrameFunctionalGroup.PlanePositionSequence[0] === undefined || PerFrameFunctionalGroup.PlanePositionSequence[0].ImagePositionPatient === undefined) {\n    return undefined;\n  }\n\n  for (var imageIdsIndexc = 0; imageIdsIndexc < imageIds.length; ++imageIdsIndexc) {\n    var sourceImageMetadata = metadataProvider.get(\"instance\", imageIds[imageIdsIndexc]);\n\n    if (sourceImageMetadata === undefined || sourceImageMetadata.ImagePositionPatient === undefined || sourceImageMetadata.FrameOfReferenceUID !== FrameOfReferenceUID || sourceImageMetadata.SeriesInstanceUID !== ReferencedSeriesInstanceUID) {\n      continue;\n    }\n\n    if (compareArrays(PerFrameFunctionalGroup.PlanePositionSequence[0].ImagePositionPatient, sourceImageMetadata.ImagePositionPatient, tolerance)) {\n      return imageIds[imageIdsIndexc];\n    }\n  }\n}\n/**\n * getImageIdOfReferencedSingleFramedSOPInstance - Returns the imageId\n * corresponding to the specified sopInstanceUid for single-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {String[]} imageIds         The list of imageIds.\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\n *                                 from the cornerstone imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\n\n\nfunction getImageIdOfReferencedSingleFramedSOPInstance$1(sopInstanceUid, imageIds, metadataProvider) {\n  return imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n\n    if (!sopCommonModule) {\n      return;\n    }\n\n    return sopCommonModule.sopInstanceUID === sopInstanceUid;\n  });\n}\n/**\n * getImageIdOfReferencedFrame - Returns the imageId corresponding to the\n * specified sopInstanceUid and frameNumber for multi-frame images.\n *\n * @param  {String} sopInstanceUid   The sopInstanceUid of the desired image.\n * @param  {Number} frameNumber      The frame number.\n * @param  {String} imageIds         The list of imageIds.\n * @param  {Object} metadataProvider The metadataProvider to obtain sopInstanceUids\n *                                   from the cornerstone imageIds.\n * @return {String}                  The imageId that corresponds to the sopInstanceUid.\n */\n\n\nfunction getImageIdOfReferencedFrame$1(sopInstanceUid, frameNumber, imageIds, metadataProvider) {\n  var imageId = imageIds.find(function (imageId) {\n    var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n\n    if (!sopCommonModule) {\n      return;\n    }\n\n    var imageIdFrameNumber = Number(imageId.split(\"frame=\")[1]);\n    return (//frameNumber is zero indexed for cornerstoneWADOImageLoader image Ids.\n      sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1\n    );\n  });\n  return imageId;\n}\n/**\n * getValidOrientations - returns an array of valid orientations.\n *\n * @param  {Number[6]} iop The row (0..2) an column (3..5) direction cosines.\n * @return {Number[8][6]} An array of valid orientations.\n */\n\n\nfunction getValidOrientations$1(iop) {\n  var orientations = []; // [0,  1,  2]: 0,   0hf,   0vf\n  // [3,  4,  5]: 90,  90hf,  90vf\n  // [6, 7]:      180, 270\n\n  orientations[0] = iop;\n  orientations[1] = flipImageOrientationPatient.h(iop);\n  orientations[2] = flipImageOrientationPatient.v(iop);\n  var iop90 = rotateDirectionCosinesInPlane(iop, Math.PI / 2);\n  orientations[3] = iop90;\n  orientations[4] = flipImageOrientationPatient.h(iop90);\n  orientations[5] = flipImageOrientationPatient.v(iop90);\n  orientations[6] = rotateDirectionCosinesInPlane(iop, Math.PI);\n  orientations[7] = rotateDirectionCosinesInPlane(iop, 1.5 * Math.PI);\n  return orientations;\n}\n/**\n * alignPixelDataWithSourceData -\n *\n * @param {Ndarray} pixelData2D - The data to align.\n * @param {Number[6]} iop - The orientation of the image slice.\n * @param {Number[8][6]} orientations - An array of valid imageOrientationPatient values.\n * @param {Number} tolerance.\n * @return {Ndarray} The aligned pixelData.\n */\n\n\nfunction alignPixelDataWithSourceData$1(pixelData2D, iop, orientations, tolerance) {\n  if (compareArrays(iop, orientations[0], tolerance)) {\n    return pixelData2D;\n  } else if (compareArrays(iop, orientations[1], tolerance)) {\n    // Flipped vertically.\n    // Undo Flip\n    return flipMatrix2D.v(pixelData2D);\n  } else if (compareArrays(iop, orientations[2], tolerance)) {\n    // Flipped horizontally.\n    // Unfo flip\n    return flipMatrix2D.h(pixelData2D);\n  } else if (compareArrays(iop, orientations[3], tolerance)) {\n    //Rotated 90 degrees\n    // Rotate back\n    return rotateMatrix902D(pixelData2D);\n  } else if (compareArrays(iop, orientations[4], tolerance)) {\n    //Rotated 90 degrees and fliped horizontally.\n    // Undo flip and rotate back.\n    return rotateMatrix902D(flipMatrix2D.h(pixelData2D));\n  } else if (compareArrays(iop, orientations[5], tolerance)) {\n    // Rotated 90 degrees and fliped vertically\n    // Unfo flip and rotate back.\n    return rotateMatrix902D(flipMatrix2D.v(pixelData2D));\n  } else if (compareArrays(iop, orientations[6], tolerance)) {\n    // Rotated 180 degrees. // TODO -> Do this more effeciently, there is a 1:1 mapping like 90 degree rotation.\n    return rotateMatrix902D(rotateMatrix902D(pixelData2D));\n  } else if (compareArrays(iop, orientations[7], tolerance)) {\n    // Rotated 270 degrees\n    // Rotate back.\n    return rotateMatrix902D(rotateMatrix902D(rotateMatrix902D(pixelData2D)));\n  }\n}\n/**\n * compareArrays - Returns true if array1 and array2 are equal\n * within a tolerance.\n *\n * @param  {Number[]} array1 - An array.\n * @param  {Number[]} array2 - An array.\n * @param {Number} tolerance.\n * @return {Boolean} True if array1 and array2 are equal.\n */\n\n\nfunction compareArrays(array1, array2, tolerance) {\n  if (array1.length != array2.length) {\n    return false;\n  }\n\n  for (var _i4 = 0; _i4 < array1.length; ++_i4) {\n    if (!nearlyEqual(array1[_i4], array2[_i4], tolerance)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getSegmentMetadata$1(multiframe, seriesInstanceUid) {\n  var segmentSequence = multiframe.SegmentSequence;\n  var data = [];\n\n  if (Array.isArray(segmentSequence)) {\n    data = [undefined].concat(_toConsumableArray(segmentSequence));\n  } else {\n    // Only one segment, will be stored as an object.\n    data = [undefined, segmentSequence];\n  }\n\n  return {\n    seriesInstanceUid: seriesInstanceUid,\n    data: data\n  };\n}\n\nvar Segmentation$3 = {\n  generateSegmentation: generateSegmentation$2,\n  generateToolState: generateToolState$2,\n  fillSegmentation: fillSegmentation$1\n};\n/**\n * generateSegmentation - Generates a DICOM Segmentation object given cornerstoneTools data.\n *\n * @param  {object[]} images    An array of the cornerstone image objects.\n * @param  {Object|Object[]} labelmaps3DorBrushData For 4.X: The cornerstone `Labelmap3D` object, or an array of objects.\n *                                                  For 3.X: the BrushData.\n * @param  {number} cornerstoneToolsVersion The cornerstoneTools major version to map against.\n * @returns {Object}\n */\n\nfunction generateSegmentation$2(images, labelmaps3DorBrushData) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    includeSliceSpacing: true\n  };\n  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n\n  if (cornerstoneToolsVersion === 4) {\n    return Segmentation$2.generateSegmentation(images, labelmaps3DorBrushData, options);\n  }\n\n  if (cornerstoneToolsVersion === 3) {\n    return Segmentation$1.generateSegmentation(images, labelmaps3DorBrushData, options);\n  }\n\n  console.warn(\"No generateSegmentation adapater for cornerstone version \".concat(cornerstoneToolsVersion, \", exiting.\"));\n}\n/**\n * generateToolState - Given a set of cornrstoneTools imageIds and a Segmentation buffer,\n * derive cornerstoneTools toolState and brush metadata.\n *\n * @param  {string[]} imageIds    An array of the imageIds.\n * @param  {ArrayBuffer} arrayBuffer The SEG arrayBuffer.\n * @param {*} metadataProvider\n * @param  {bool} skipOverlapping - skip checks for overlapping segs, default value false.\n * @param  {number} tolerance - default value 1.e-3.\n * @param  {number} cornerstoneToolsVersion - default value 4.\n *\n * @returns {Object}  The toolState and an object from which the\n *                    segment metadata can be derived.\n */\n\n\nfunction generateToolState$2(imageIds, arrayBuffer, metadataProvider) {\n  var skipOverlapping = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var tolerance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1e-3;\n  var cornerstoneToolsVersion = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 4;\n\n  if (cornerstoneToolsVersion === 4) {\n    return Segmentation$2.generateToolState(imageIds, arrayBuffer, metadataProvider, skipOverlapping, tolerance);\n  }\n\n  if (cornerstoneToolsVersion === 3) {\n    return Segmentation$1.generateToolState(imageIds, arrayBuffer, metadataProvider);\n  }\n\n  console.warn(\"No generateToolState adapater for cornerstone version \".concat(cornerstoneToolsVersion, \", exiting.\"));\n}\n/**\n * fillSegmentation - Fills a derived segmentation dataset with cornerstoneTools `LabelMap3D` data.\n *\n * @param  {object[]} segmentation An empty segmentation derived dataset.\n * @param  {Object|Object[]} inputLabelmaps3D The cornerstone `Labelmap3D` object, or an array of objects.\n * @param  {Object} userOptions Options object to override default options.\n * @returns {Blob}           description\n */\n\n\nfunction fillSegmentation$1(segmentation, inputLabelmaps3D) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    includeSliceSpacing: true\n  };\n  var cornerstoneToolsVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n\n  if (cornerstoneToolsVersion === 4) {\n    return Segmentation$2.fillSegmentation(segmentation, inputLabelmaps3D, options);\n  }\n\n  console.warn(\"No generateSegmentation adapater for cornerstone version \".concat(cornerstoneToolsVersion, \", exiting.\"));\n}\n\nvar CobbAngle = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(CobbAngle, _TID300Measurement);\n\n  var _super = _createSuper(CobbAngle);\n\n  function CobbAngle() {\n    _classCallCheck(this, CobbAngle);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CobbAngle, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          point1 = _this$props.point1,\n          point2 = _this$props.point2,\n          point3 = _this$props.point3,\n          point4 = _this$props.point4,\n          rAngle = _this$props.rAngle,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence;\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"285285000\",\n          CodingSchemeDesignator: \"SCT\",\n          CodeMeaning: \"Cobb angle\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"deg\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"\\xB0\"\n          },\n          NumericValue: rAngle\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: \"SCOORD\",\n          GraphicType: \"POLYLINE\",\n          GraphicData: [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y, point4.x, point4.y],\n          ContentSequence: {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return CobbAngle;\n}(TID300Measurement);\n\nvar COBB_ANGLE = \"CobbAngle\";\n\nvar CobbAngle$1 = /*#__PURE__*/function () {\n  function CobbAngle() {\n    _classCallCheck(this, CobbAngle);\n  } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n\n\n  _createClass(CobbAngle, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        rAngle: NUMGroup.MeasuredValueSequence.NumericValue,\n        toolType: CobbAngle.toolType,\n        handles: {\n          start: {},\n          end: {},\n          start2: {\n            highlight: true,\n            drawnIndependently: true\n          },\n          end2: {\n            highlight: true,\n            drawnIndependently: true\n          },\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        }\n      });\n\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 8);\n\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      state.handles.end.x = _SCOORDGroup$GraphicD[2];\n      state.handles.end.y = _SCOORDGroup$GraphicD[3];\n      state.handles.start2.x = _SCOORDGroup$GraphicD[4];\n      state.handles.start2.y = _SCOORDGroup$GraphicD[5];\n      state.handles.end2.x = _SCOORDGroup$GraphicD[6];\n      state.handles.end2.y = _SCOORDGroup$GraphicD[7];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n          finding = tool.finding,\n          findingSites = tool.findingSites;\n      var point1 = handles.start;\n      var point2 = handles.end;\n      var point3 = handles.start2;\n      var point4 = handles.end2;\n      var rAngle = tool.rAngle;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:CobbAngle\";\n      return {\n        point1: point1,\n        point2: point2,\n        point3: point3,\n        point4: point4,\n        rAngle: rAngle,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return CobbAngle;\n}();\n\nCobbAngle$1.toolType = COBB_ANGLE;\nCobbAngle$1.utilityToolType = COBB_ANGLE;\nCobbAngle$1.TID300Representation = CobbAngle;\n\nCobbAngle$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === COBB_ANGLE;\n};\n\nMeasurementReport.registerTool(CobbAngle$1);\n\nvar ANGLE = \"Angle\";\n\nvar Angle = /*#__PURE__*/function () {\n  function Angle() {\n    _classCallCheck(this, Angle);\n  }\n  /**\n   * Generate TID300 measurement data for a plane angle measurement - use a CobbAngle, but label it as Angle\n   * @param  MeasurementGroup\n   * @returns\n   */\n\n\n  _createClass(Angle, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup;\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        rAngle: NUMGroup.MeasuredValueSequence.NumericValue,\n        toolType: Angle.toolType,\n        handles: {\n          start: {},\n          middle: {},\n          end: {},\n          textBox: {\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          }\n        }\n      });\n\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 8);\n\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      state.handles.middle.x = _SCOORDGroup$GraphicD[2];\n      state.handles.middle.y = _SCOORDGroup$GraphicD[3];\n      state.handles.middle.x = _SCOORDGroup$GraphicD[4];\n      state.handles.middle.y = _SCOORDGroup$GraphicD[5];\n      state.handles.end.x = _SCOORDGroup$GraphicD[6];\n      state.handles.end.y = _SCOORDGroup$GraphicD[7];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var handles = tool.handles,\n          finding = tool.finding,\n          findingSites = tool.findingSites;\n      var point1 = handles.start;\n      var point2 = handles.middle;\n      var point3 = handles.middle;\n      var point4 = handles.end;\n      var rAngle = tool.rAngle;\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:Angle\";\n      return {\n        point1: point1,\n        point2: point2,\n        point3: point3,\n        point4: point4,\n        rAngle: rAngle,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return Angle;\n}();\n\nAngle.toolType = ANGLE;\nAngle.utilityToolType = ANGLE;\nAngle.TID300Representation = CobbAngle;\n\nAngle.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === ANGLE;\n};\n\nMeasurementReport.registerTool(Angle);\n\nvar RectangleRoi = /*#__PURE__*/function () {\n  function RectangleRoi() {\n    _classCallCheck(this, RectangleRoi);\n  }\n\n  _createClass(RectangleRoi, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup) {\n      var _MeasurementReport$ge = MeasurementReport.getSetupMeasurementData(MeasurementGroup),\n          defaultState = _MeasurementReport$ge.defaultState,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          NUMGroup = _MeasurementReport$ge.NUMGroup;\n\n      var state = _objectSpread2(_objectSpread2({}, defaultState), {}, {\n        toolType: RectangleRoi.toolType,\n        handles: {\n          start: {},\n          end: {},\n          textBox: {\n            active: false,\n            hasMoved: false,\n            movesIndependently: false,\n            drawnIndependently: true,\n            allowedOutsideImage: true,\n            hasBoundingBox: true\n          },\n          initialRotation: 0\n        },\n        cachedStats: {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        },\n        color: undefined,\n        invalidated: true\n      });\n\n      var intermediate = {};\n\n      var _SCOORDGroup$GraphicD = _slicedToArray(SCOORDGroup.GraphicData, 6);\n\n      state.handles.start.x = _SCOORDGroup$GraphicD[0];\n      state.handles.start.y = _SCOORDGroup$GraphicD[1];\n      intermediate.x = _SCOORDGroup$GraphicD[2];\n      intermediate.y = _SCOORDGroup$GraphicD[3];\n      state.handles.end.x = _SCOORDGroup$GraphicD[4];\n      state.handles.end.y = _SCOORDGroup$GraphicD[5];\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool) {\n      var finding = tool.finding,\n          findingSites = tool.findingSites,\n          _tool$cachedStats = tool.cachedStats,\n          cachedStats = _tool$cachedStats === void 0 ? {} : _tool$cachedStats,\n          handles = tool.handles;\n      console.log(\"getTID300 Rectangle\", tool, cachedStats, handles);\n      var start = handles.start,\n          end = handles.end;\n      var points = [start, {\n        x: start.x,\n        y: end.y\n      }, end, {\n        x: end.x,\n        y: start.y\n      }];\n      var area = cachedStats.area,\n          perimeter = cachedStats.perimeter;\n      console.log(\"Point=\", points, \"cachedStats=\", cachedStats);\n      var trackingIdentifierTextValue = \"cornerstoneTools@^4.0.0:RectangleRoi\";\n      return {\n        points: points,\n        area: area,\n        perimeter: perimeter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return RectangleRoi;\n}();\n\nRectangleRoi.toolType = \"RectangleRoi\";\nRectangleRoi.utilityToolType = \"RectangleRoi\";\nRectangleRoi.TID300Representation = Polyline;\n\nRectangleRoi.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone4Tag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone4Tag !== CORNERSTONE_4_TAG) {\n    return false;\n  }\n\n  return toolType === RectangleRoi.toolType;\n};\n\nMeasurementReport.registerTool(RectangleRoi);\n\nvar Cornerstone = {\n  Length: Length$1,\n  FreehandRoi: FreehandRoi,\n  Bidirectional: Bidirectional$1,\n  EllipticalRoi: EllipticalRoi,\n  CircleRoi: CircleRoi,\n  ArrowAnnotate: ArrowAnnotate,\n  MeasurementReport: MeasurementReport,\n  Segmentation: Segmentation$3,\n  CobbAngle: CobbAngle$1,\n  Angle: Angle,\n  RectangleRoi: RectangleRoi\n};\n\n// This is a custom coding scheme defined to store some annotations from Cornerstone.\n// Note: CodeMeaning is VR type LO, which means we only actually support 64 characters\n// here this is fine for most labels, but may be problematic at some point.\nvar CORNERSTONEFREETEXT$1 = \"CORNERSTONEFREETEXT\"; // Cornerstone specified coding scheme for storing findings\n\nvar CodingSchemeDesignator = \"CORNERSTONEJS\";\nvar CodingScheme = {\n  CodingSchemeDesignator: CodingSchemeDesignator,\n  codeValues: {\n    CORNERSTONEFREETEXT: CORNERSTONEFREETEXT$1\n  }\n};\n\nvar FINDING$2 = {\n  CodingSchemeDesignator: \"DCM\",\n  CodeValue: \"121071\"\n};\nvar FINDING_SITE$2 = {\n  CodingSchemeDesignator: \"SCT\",\n  CodeValue: \"363698007\"\n};\nvar FINDING_SITE_OLD$1 = {\n  CodingSchemeDesignator: \"SRT\",\n  CodeValue: \"G-C0E3\"\n};\n\nvar codeValueMatch$1 = function codeValueMatch(group, code, oldCode) {\n  var ConceptNameCodeSequence = group.ConceptNameCodeSequence;\n  if (!ConceptNameCodeSequence) return;\n  var CodingSchemeDesignator = ConceptNameCodeSequence.CodingSchemeDesignator,\n      CodeValue = ConceptNameCodeSequence.CodeValue;\n  return CodingSchemeDesignator == code.CodingSchemeDesignator && CodeValue == code.CodeValue || oldCode && CodingSchemeDesignator == oldCode.CodingSchemeDesignator && CodeValue == oldCode.CodeValue;\n};\n\nfunction getTID300ContentItem$1(tool, toolType, ReferencedSOPSequence, toolClass, worldToImageCoords) {\n  var args = toolClass.getTID300RepresentationArguments(tool, worldToImageCoords);\n  args.ReferencedSOPSequence = ReferencedSOPSequence;\n  var TID300Measurement = new toolClass.TID300Representation(args);\n  return TID300Measurement;\n}\n\nfunction getMeasurementGroup$1(toolType, toolData, ReferencedSOPSequence, worldToImageCoords) {\n  var toolTypeData = toolData[toolType];\n  var toolClass = MeasurementReport$1.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];\n\n  if (!toolTypeData || !toolTypeData.data || !toolTypeData.data.length || !toolClass) {\n    return;\n  } // Loop through the array of tool instances\n  // for this tool\n\n\n  var Measurements = toolTypeData.data.map(function (tool) {\n    return getTID300ContentItem$1(tool, toolType, ReferencedSOPSequence, toolClass, worldToImageCoords);\n  });\n  return new TID1501MeasurementGroup(Measurements);\n}\n\nvar MeasurementReport$1 = /*#__PURE__*/function () {\n  function MeasurementReport() {\n    _classCallCheck(this, MeasurementReport);\n  }\n\n  _createClass(MeasurementReport, null, [{\n    key: \"getCornerstoneLabelFromDefaultState\",\n    value: function getCornerstoneLabelFromDefaultState(defaultState) {\n      var _defaultState$finding = defaultState.findingSites,\n          findingSites = _defaultState$finding === void 0 ? [] : _defaultState$finding,\n          finding = defaultState.finding;\n      var cornersoneFreeTextCodingValue = CodingScheme.codeValues.CORNERSTONEFREETEXT;\n      var freeTextLabel = findingSites.find(function (fs) {\n        return fs.CodeValue === cornersoneFreeTextCodingValue;\n      });\n\n      if (freeTextLabel) {\n        return freeTextLabel.CodeMeaning;\n      }\n\n      if (finding && finding.CodeValue === cornersoneFreeTextCodingValue) {\n        return finding.CodeMeaning;\n      }\n    }\n  }, {\n    key: \"generateDatasetMeta\",\n    value: function generateDatasetMeta() {\n      // TODO: what is the correct metaheader\n      // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\n      // TODO: move meta creation to happen in derivations.js\n      var fileMetaInformationVersionArray = new Uint8Array(2);\n      fileMetaInformationVersionArray[1] = 1;\n      var _meta = {\n        FileMetaInformationVersion: {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: \"OB\"\n        },\n        //MediaStorageSOPClassUID\n        //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\n        TransferSyntaxUID: {\n          Value: [\"1.2.840.10008.1.2.1\"],\n          vr: \"UI\"\n        },\n        ImplementationClassUID: {\n          Value: [DicomMetaDictionary.uid()],\n          // TODO: could be git hash or other valid id\n          vr: \"UI\"\n        },\n        ImplementationVersionName: {\n          Value: [\"dcmjs\"],\n          vr: \"SH\"\n        }\n      };\n      return _meta;\n    }\n  }, {\n    key: \"generateDerivationSourceDataset\",\n    value: function generateDerivationSourceDataset(StudyInstanceUID, SeriesInstanceUID) {\n      var _vrMap = {\n        PixelData: \"OW\"\n      };\n\n      var _meta = MeasurementReport.generateDatasetMeta();\n\n      var derivationSourceDataset = {\n        StudyInstanceUID: StudyInstanceUID,\n        SeriesInstanceUID: SeriesInstanceUID,\n        _meta: _meta,\n        _vrMap: _vrMap\n      };\n      return derivationSourceDataset;\n    }\n  }, {\n    key: \"getSetupMeasurementData\",\n    value: function getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, toolType) {\n      var ContentSequence = MeasurementGroup.ContentSequence;\n      var contentSequenceArr = toArray(ContentSequence);\n      var findingGroup = contentSequenceArr.find(function (group) {\n        return codeValueMatch$1(group, FINDING$2);\n      });\n      var findingSiteGroups = contentSequenceArr.filter(function (group) {\n        return codeValueMatch$1(group, FINDING_SITE$2, FINDING_SITE_OLD$1);\n      }) || [];\n      var NUMGroup = contentSequenceArr.find(function (group) {\n        return group.ValueType === \"NUM\";\n      });\n      var SCOORDGroup = toArray(NUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var ReferencedSOPSequence = SCOORDGroup.ContentSequence.ReferencedSOPSequence;\n      var ReferencedSOPInstanceUID = ReferencedSOPSequence.ReferencedSOPInstanceUID,\n          ReferencedFrameNumber = ReferencedSOPSequence.ReferencedFrameNumber;\n      var referencedImageId = sopInstanceUIDToImageIdMap[ReferencedSOPInstanceUID];\n      var imagePlaneModule = metadata.get(\"imagePlaneModule\", referencedImageId);\n      var finding = findingGroup ? addAccessors(findingGroup.ConceptCodeSequence) : undefined;\n      var findingSites = findingSiteGroups.map(function (fsg) {\n        return addAccessors(fsg.ConceptCodeSequence);\n      });\n      var defaultState = {\n        sopInstanceUid: ReferencedSOPInstanceUID,\n        annotation: {\n          annotationUID: DicomMetaDictionary.uid(),\n          metadata: {\n            toolName: toolType,\n            referencedImageId: referencedImageId,\n            FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n            label: \"\"\n          }\n        },\n        finding: finding,\n        findingSites: findingSites\n      };\n\n      if (defaultState.finding) {\n        defaultState.description = defaultState.finding.CodeMeaning;\n      }\n\n      defaultState.annotation.metadata.label = MeasurementReport.getCornerstoneLabelFromDefaultState(defaultState);\n      return {\n        defaultState: defaultState,\n        NUMGroup: NUMGroup,\n        SCOORDGroup: SCOORDGroup,\n        ReferencedSOPSequence: ReferencedSOPSequence,\n        ReferencedSOPInstanceUID: ReferencedSOPInstanceUID,\n        ReferencedFrameNumber: ReferencedFrameNumber\n      };\n    }\n  }, {\n    key: \"generateReport\",\n    value: function generateReport(toolState, metadataProvider, worldToImageCoords, options) {\n      // ToolState for array of imageIDs to a Report\n      // Assume Cornerstone metadata provider has access to Study / Series / Sop Instance UID\n      var allMeasurementGroups = [];\n      /* Patient ID\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Patient ID\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Date\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study Time\n      Warning - Missing attribute or value that would be needed to build DICOMDIR - Study ID\n      */\n\n      var sopInstanceUIDsToSeriesInstanceUIDMap = {};\n      var derivationSourceDatasets = [];\n\n      var _meta = MeasurementReport.generateDatasetMeta(); // Loop through each image in the toolData\n\n\n      Object.keys(toolState).forEach(function (imageId) {\n        var sopCommonModule = metadataProvider.get(\"sopCommonModule\", imageId);\n        var generalSeriesModule = metadataProvider.get(\"generalSeriesModule\", imageId);\n        var sopInstanceUID = sopCommonModule.sopInstanceUID,\n            sopClassUID = sopCommonModule.sopClassUID;\n        var studyInstanceUID = generalSeriesModule.studyInstanceUID,\n            seriesInstanceUID = generalSeriesModule.seriesInstanceUID;\n        sopInstanceUIDsToSeriesInstanceUIDMap[sopInstanceUID] = seriesInstanceUID;\n\n        if (!derivationSourceDatasets.find(function (dsd) {\n          return dsd.SeriesInstanceUID === seriesInstanceUID;\n        })) {\n          // Entry not present for series, create one.\n          var derivationSourceDataset = MeasurementReport.generateDerivationSourceDataset(studyInstanceUID, seriesInstanceUID);\n          derivationSourceDatasets.push(derivationSourceDataset);\n        }\n\n        var frameNumber = metadataProvider.get(\"frameNumber\", imageId);\n        var toolData = toolState[imageId];\n        var toolTypes = Object.keys(toolData);\n        var ReferencedSOPSequence = {\n          ReferencedSOPClassUID: sopClassUID,\n          ReferencedSOPInstanceUID: sopInstanceUID\n        };\n        var instance = metadataProvider.get(\"instance\", imageId);\n\n        if (instance && instance.NumberOfFrames && instance.NumberOfFrames > 1 || Normalizer.isMultiframeSOPClassUID(sopClassUID)) {\n          ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;\n        } // Loop through each tool type for the image\n\n\n        var measurementGroups = [];\n        toolTypes.forEach(function (toolType) {\n          var group = getMeasurementGroup$1(toolType, toolData, ReferencedSOPSequence, worldToImageCoords);\n\n          if (group) {\n            measurementGroups.push(group);\n          }\n        });\n        allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);\n      });\n      var tid1500MeasurementReport = new TID1500MeasurementReport({\n        TID1501MeasurementGroups: allMeasurementGroups\n      }, options);\n      var report = new StructuredReport(derivationSourceDatasets);\n      var contentItem = tid1500MeasurementReport.contentItem(derivationSourceDatasets, {\n        sopInstanceUIDsToSeriesInstanceUIDMap: sopInstanceUIDsToSeriesInstanceUIDMap\n      }); // Merge the derived dataset with the content from the Measurement Report\n\n      report.dataset = Object.assign(report.dataset, contentItem);\n      report.dataset._meta = _meta;\n      return report;\n    }\n    /**\n     * Generate Cornerstone tool state from dataset\n     * @param {object} dataset dataset\n     * @param {object} hooks\n     * @param {function} hooks.getToolClass Function to map dataset to a tool class\n     * @returns\n     */\n\n  }, {\n    key: \"generateToolState\",\n    value: function generateToolState(dataset, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var hooks = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n      // For now, bail out if the dataset is not a TID1500 SR with length measurements\n      if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\n        throw new Error(\"This package can currently only interpret DICOM SR TID 1500\");\n      }\n\n      var REPORT = \"Imaging Measurements\";\n      var GROUP = \"Measurement Group\";\n      var TRACKING_IDENTIFIER = \"Tracking Identifier\"; // Identify the Imaging Measurements\n\n      var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT)); // Retrieve the Measurements themselves\n\n      var measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP)); // For each of the supported measurement types, compute the measurement data\n\n      var measurementData = {};\n      var cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;\n      var registeredToolClasses = [];\n      Object.keys(cornerstoneToolClasses).forEach(function (key) {\n        registeredToolClasses.push(cornerstoneToolClasses[key]);\n        measurementData[key] = [];\n      });\n      measurementGroups.forEach(function (measurementGroup, index) {\n        var measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);\n        var TrackingIdentifierGroup = measurementGroupContentSequence.find(function (contentItem) {\n          return contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER;\n        });\n        var TrackingIdentifierValue = TrackingIdentifierGroup.TextValue;\n        var toolClass = hooks.getToolClass ? hooks.getToolClass(measurementGroup, dataset, registeredToolClasses) : registeredToolClasses.find(function (tc) {\n          return tc.isValidCornerstoneTrackingIdentifier(TrackingIdentifierValue);\n        });\n\n        if (toolClass) {\n          var measurement = toolClass.getMeasurementData(measurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata);\n          console.log(\"=== \".concat(toolClass.toolType, \" ===\"));\n          console.log(measurement);\n          measurementData[toolClass.toolType].push(measurement);\n        }\n      }); // NOTE: There is no way of knowing the cornerstone imageIds as that could be anything.\n      // That is up to the consumer to derive from the SOPInstanceUIDs.\n\n      return measurementData;\n    }\n  }, {\n    key: \"registerTool\",\n    value: function registerTool(toolClass) {\n      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;\n      MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;\n      MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] = toolClass.utilityToolType;\n    }\n  }]);\n\n  return MeasurementReport;\n}();\nMeasurementReport$1.MEASUREMENT_BY_TOOLTYPE = {};\nMeasurementReport$1.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};\nMeasurementReport$1.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};\n\nvar CORNERSTONE_3D_TAG = \"Cornerstone3DTools@^0.1.0\";\n\nvar LENGTH$2 = \"Length\";\nvar trackingIdentifierTextValue = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(LENGTH$2);\n\nvar Length$2 = /*#__PURE__*/function () {\n  function Length() {\n    _classCallCheck(this, Length);\n  } // TODO: this function is required for all Cornerstone Tool Adapters, since it is called by MeasurementReport.\n\n\n  _createClass(Length, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Length.toolType),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      }\n\n      var state = defaultState;\n      state.annotation.data = {\n        handles: {\n          points: [worldCoords[0], worldCoords[1]],\n          activeHandleIndex: 0,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        cachedStats: _defineProperty({}, \"imageId:\".concat(referencedImageId), {\n          length: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        }),\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n          finding = tool.finding,\n          findingSites = tool.findingSites,\n          metadata = tool.metadata;\n      var _data$cachedStats = data.cachedStats,\n          cachedStats = _data$cachedStats === void 0 ? {} : _data$cachedStats,\n          handles = data.handles;\n      var referencedImageId = metadata.referencedImageId;\n\n      if (!referencedImageId) {\n        throw new Error(\"Length.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n\n      var start = worldToImageCoords(referencedImageId, handles.points[0]);\n      var end = worldToImageCoords(referencedImageId, handles.points[1]);\n      var point1 = {\n        x: start[0],\n        y: start[1]\n      };\n      var point2 = {\n        x: end[0],\n        y: end[1]\n      };\n\n      var _ref = cachedStats[\"imageId:\".concat(referencedImageId)] || {},\n          distance = _ref.length;\n\n      return {\n        point1: point1,\n        point2: point2,\n        distance: distance,\n        trackingIdentifierTextValue: trackingIdentifierTextValue,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return Length;\n}();\n\nLength$2.toolType = LENGTH$2;\nLength$2.utilityToolType = LENGTH$2;\nLength$2.TID300Representation = Length;\n\nLength$2.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone3DTag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n\n  return toolType === LENGTH$2;\n};\n\nMeasurementReport$1.registerTool(Length$2);\n\nvar BIDIRECTIONAL$1 = \"Bidirectional\";\nvar LONG_AXIS$1 = \"Long Axis\";\nvar SHORT_AXIS$1 = \"Short Axis\";\nvar trackingIdentifierTextValue$1 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(BIDIRECTIONAL$1);\n\nvar Bidirectional$2 = /*#__PURE__*/function () {\n  function Bidirectional() {\n    _classCallCheck(this, Bidirectional);\n  }\n\n  _createClass(Bidirectional, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Bidirectional.toolType),\n          defaultState = _MeasurementReport$ge.defaultState,\n          ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var ContentSequence = MeasurementGroup.ContentSequence;\n      var longAxisNUMGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS$1;\n      });\n      var longAxisSCOORDGroup = toArray(longAxisNUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var shortAxisNUMGroup = toArray(ContentSequence).find(function (group) {\n        return group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS$1;\n      });\n      var shortAxisSCOORDGroup = toArray(shortAxisNUMGroup.ContentSequence).find(function (group) {\n        return group.ValueType === \"SCOORD\";\n      });\n      var worldCoords = [];\n      [longAxisSCOORDGroup, shortAxisSCOORDGroup].forEach(function (group) {\n        var GraphicData = group.GraphicData;\n\n        for (var i = 0; i < GraphicData.length; i += 2) {\n          var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n          worldCoords.push(point);\n        }\n      });\n      var state = defaultState;\n      state.annotation.data = {\n        handles: {\n          points: [worldCoords[0], worldCoords[1], worldCoords[2], worldCoords[3]],\n          activeHandleIndex: 0,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        cachedStats: _defineProperty({}, \"imageId:\".concat(referencedImageId), {\n          length: longAxisNUMGroup.MeasuredValueSequence.NumericValue,\n          width: shortAxisNUMGroup.MeasuredValueSequence.NumericValue\n        }),\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n          finding = tool.finding,\n          findingSites = tool.findingSites,\n          metadata = tool.metadata;\n      var _data$cachedStats = data.cachedStats,\n          cachedStats = _data$cachedStats === void 0 ? {} : _data$cachedStats,\n          handles = data.handles;\n      var referencedImageId = metadata.referencedImageId;\n\n      if (!referencedImageId) {\n        throw new Error(\"Bidirectional.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n\n      var _ref = cachedStats[\"imageId:\".concat(referencedImageId)] || {},\n          length = _ref.length,\n          width = _ref.width;\n\n      var points = handles.points; // Find the length and width point pairs by comparing the distances of the points at 0,1 to points at 2,3\n\n      var firstPointPairs = [points[0], points[1]];\n      var secondPointPairs = [points[2], points[3]];\n      var firstPointPairsDistance = Math.sqrt(Math.pow(firstPointPairs[0][0] - firstPointPairs[1][0], 2) + Math.pow(firstPointPairs[0][1] - firstPointPairs[1][1], 2) + Math.pow(firstPointPairs[0][2] - firstPointPairs[1][2], 2));\n      var secondPointPairsDistance = Math.sqrt(Math.pow(secondPointPairs[0][0] - secondPointPairs[1][0], 2) + Math.pow(secondPointPairs[0][1] - secondPointPairs[1][1], 2) + Math.pow(secondPointPairs[0][2] - secondPointPairs[1][2], 2));\n      var shortAxisPoints;\n      var longAxisPoints;\n\n      if (firstPointPairsDistance > secondPointPairsDistance) {\n        shortAxisPoints = firstPointPairs;\n        longAxisPoints = secondPointPairs;\n      } else {\n        shortAxisPoints = secondPointPairs;\n        longAxisPoints = firstPointPairs;\n      }\n\n      var longAxisStartImage = worldToImageCoords(referencedImageId, shortAxisPoints[0]);\n      var longAxisEndImage = worldToImageCoords(referencedImageId, shortAxisPoints[1]);\n      var shortAxisStartImage = worldToImageCoords(referencedImageId, longAxisPoints[0]);\n      var shortAxisEndImage = worldToImageCoords(referencedImageId, longAxisPoints[1]);\n      return {\n        longAxis: {\n          point1: {\n            x: longAxisStartImage[0],\n            y: longAxisStartImage[1]\n          },\n          point2: {\n            x: longAxisEndImage[0],\n            y: longAxisEndImage[1]\n          }\n        },\n        shortAxis: {\n          point1: {\n            x: shortAxisStartImage[0],\n            y: shortAxisStartImage[1]\n          },\n          point2: {\n            x: shortAxisEndImage[0],\n            y: shortAxisEndImage[1]\n          }\n        },\n        longAxisLength: length,\n        shortAxisLength: width,\n        trackingIdentifierTextValue: trackingIdentifierTextValue$1,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return Bidirectional;\n}();\n\nBidirectional$2.toolType = BIDIRECTIONAL$1;\nBidirectional$2.utilityToolType = BIDIRECTIONAL$1;\nBidirectional$2.TID300Representation = Bidirectional;\n\nBidirectional$2.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone3DTag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n\n  return toolType === BIDIRECTIONAL$1;\n};\n\nMeasurementReport$1.registerTool(Bidirectional$2);\n\nvar ELLIPTICALROI$1 = \"EllipticalROI\";\nvar EPSILON$1 = 1e-4;\nvar trackingIdentifierTextValue$2 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(ELLIPTICALROI$1);\n\nvar EllipticalROI = /*#__PURE__*/function () {\n  function EllipticalROI() {\n    _classCallCheck(this, EllipticalROI);\n  }\n\n  _createClass(EllipticalROI, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, EllipticalROI.toolType),\n          defaultState = _MeasurementReport$ge.defaultState,\n          NUMGroup = _MeasurementReport$ge.NUMGroup,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var GraphicData = SCOORDGroup.GraphicData; // GraphicData is ordered as [majorAxisStartX, majorAxisStartY, majorAxisEndX, majorAxisEndY, minorAxisStartX, minorAxisStartY, minorAxisEndX, minorAxisEndY]\n      // But Cornerstone3D points are ordered as top, bottom, left, right for the\n      // ellipse so we need to identify if the majorAxis is horizontal or vertical\n      // in the image plane and then choose the correct points to use for the ellipse.\n\n      var pointsWorld = [];\n\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var worldPos = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        pointsWorld.push(worldPos);\n      }\n\n      var majorAxisStart = fromValues.apply(vec3, _toConsumableArray(pointsWorld[0]));\n      var majorAxisEnd = fromValues.apply(vec3, _toConsumableArray(pointsWorld[1]));\n      var minorAxisStart = fromValues.apply(vec3, _toConsumableArray(pointsWorld[2]));\n      var minorAxisEnd = fromValues.apply(vec3, _toConsumableArray(pointsWorld[3]));\n      var majorAxisVec = create$1();\n      sub(majorAxisVec, majorAxisEnd, majorAxisStart); // normalize majorAxisVec to avoid scaling issues\n\n      normalize(majorAxisVec, majorAxisVec);\n      var minorAxisVec = create$1();\n      sub(minorAxisVec, minorAxisEnd, minorAxisStart);\n      normalize(minorAxisVec, minorAxisVec);\n      var imagePlaneModule = metadata.get(\"imagePlaneModule\", referencedImageId);\n\n      if (!imagePlaneModule) {\n        throw new Error(\"imageId does not have imagePlaneModule metadata\");\n      }\n\n      var columnCosines = imagePlaneModule.columnCosines; // find which axis is parallel to the columnCosines\n\n      var columnCosinesVec = fromValues.apply(vec3, _toConsumableArray(columnCosines));\n      var projectedMajorAxisOnColVec = dot(columnCosinesVec, majorAxisVec);\n      var projectedMinorAxisOnColVec = dot(columnCosinesVec, minorAxisVec);\n      var absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);\n      var absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);\n      var ellipsePoints = [];\n\n      if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON$1) {\n        ellipsePoints = [pointsWorld[0], pointsWorld[1], pointsWorld[2], pointsWorld[3]];\n      } else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON$1) {\n        ellipsePoints = [pointsWorld[2], pointsWorld[3], pointsWorld[0], pointsWorld[1]];\n      } else {\n        console.warn(\"OBLIQUE ELLIPSE NOT YET SUPPORTED\");\n      }\n\n      var state = defaultState;\n      state.annotation.data = {\n        handles: {\n          points: _toConsumableArray(ellipsePoints),\n          activeHandleIndex: 0,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        cachedStats: _defineProperty({}, \"imageId:\".concat(referencedImageId), {\n          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0\n        }),\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n          finding = tool.finding,\n          findingSites = tool.findingSites,\n          metadata = tool.metadata;\n      var _data$cachedStats = data.cachedStats,\n          cachedStats = _data$cachedStats === void 0 ? {} : _data$cachedStats,\n          handles = data.handles;\n      var referencedImageId = metadata.referencedImageId;\n\n      if (!referencedImageId) {\n        throw new Error(\"EllipticalROI.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n\n      var top = worldToImageCoords(referencedImageId, handles.points[0]);\n      var bottom = worldToImageCoords(referencedImageId, handles.points[1]);\n      var left = worldToImageCoords(referencedImageId, handles.points[2]);\n      var right = worldToImageCoords(referencedImageId, handles.points[3]); // find the major axis and minor axis\n\n      var topBottomLength = Math.abs(top[1] - bottom[1]);\n      var leftRightLength = Math.abs(left[0] - right[0]);\n      var points = [];\n\n      if (topBottomLength > leftRightLength) {\n        // major axis is bottom to top\n        points.push({\n          x: top[0],\n          y: top[1]\n        });\n        points.push({\n          x: bottom[0],\n          y: bottom[1]\n        }); // minor axis is left to right\n\n        points.push({\n          x: left[0],\n          y: left[1]\n        });\n        points.push({\n          x: right[0],\n          y: right[1]\n        });\n      } else {\n        // major axis is left to right\n        points.push({\n          x: left[0],\n          y: left[1]\n        });\n        points.push({\n          x: right[0],\n          y: right[1]\n        }); // minor axis is bottom to top\n\n        points.push({\n          x: top[0],\n          y: top[1]\n        });\n        points.push({\n          x: bottom[0],\n          y: bottom[1]\n        });\n      }\n\n      var _ref = cachedStats[\"imageId:\".concat(referencedImageId)] || {},\n          area = _ref.area;\n\n      return {\n        area: area,\n        points: points,\n        trackingIdentifierTextValue: trackingIdentifierTextValue$2,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return EllipticalROI;\n}();\n\nEllipticalROI.toolType = ELLIPTICALROI$1;\nEllipticalROI.utilityToolType = ELLIPTICALROI$1;\nEllipticalROI.TID300Representation = Ellipse;\n\nEllipticalROI.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone3DTag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  } // The following is needed since the new cornerstone3D has changed\n  // the EllipticalRoi toolName (which was in the old cornerstone) to EllipticalROI\n\n\n  return toolType.toLowerCase() === ELLIPTICALROI$1.toLowerCase();\n};\n\nMeasurementReport$1.registerTool(EllipticalROI);\n\nvar ARROW_ANNOTATE$1 = \"ArrowAnnotate\";\nvar trackingIdentifierTextValue$3 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(ARROW_ANNOTATE$1);\nvar codeValues = CodingScheme.codeValues,\n    CodingSchemeDesignator$1 = CodingScheme.CodingSchemeDesignator;\n\nvar ArrowAnnotate$1 = /*#__PURE__*/function () {\n  function ArrowAnnotate() {\n    _classCallCheck(this, ArrowAnnotate);\n  }\n\n  _createClass(ArrowAnnotate, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, ArrowAnnotate.toolType),\n          defaultState = _MeasurementReport$ge.defaultState,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var text = defaultState.annotation.metadata.label;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      } // Since the arrowAnnotate measurement is just a point, to generate the tool state\n      // we derive the second point based on the image size relative to the first point.\n\n\n      if (worldCoords.length === 1) {\n        var imagePixelModule = metadata.get(\"imagePixelModule\", referencedImageId);\n        var xOffset = 10;\n        var yOffset = 10;\n\n        if (imagePixelModule) {\n          var columns = imagePixelModule.columns,\n              rows = imagePixelModule.rows;\n          xOffset = columns / 10;\n          yOffset = rows / 10;\n        }\n\n        var secondPoint = imageToWorldCoords(referencedImageId, [GraphicData[0] + xOffset, GraphicData[1] + yOffset]);\n        worldCoords.push(secondPoint);\n      }\n\n      var state = defaultState;\n      state.annotation.data = {\n        text: text,\n        handles: {\n          arrowFirst: true,\n          points: [worldCoords[0], worldCoords[1]],\n          activeHandleIndex: 0,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n          metadata = tool.metadata;\n      var finding = tool.finding,\n          findingSites = tool.findingSites;\n      var referencedImageId = metadata.referencedImageId;\n\n      if (!referencedImageId) {\n        throw new Error(\"ArrowAnnotate.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n\n      var _data$handles = data.handles,\n          points = _data$handles.points,\n          arrowFirst = _data$handles.arrowFirst;\n      var point;\n\n      if (arrowFirst) {\n        point = points[0];\n      } else {\n        point = points[1];\n      }\n\n      var pointImage = worldToImageCoords(referencedImageId, point);\n      var TID300RepresentationArguments = {\n        points: [{\n          x: pointImage[0],\n          y: pointImage[1]\n        }],\n        trackingIdentifierTextValue: trackingIdentifierTextValue$3,\n        findingSites: findingSites || []\n      }; // If freetext finding isn't present, add it from the tool text.\n\n      if (!finding || finding.CodeValue !== codeValues.CORNERSTONEFREETEXT) {\n        finding = {\n          CodeValue: codeValues.CORNERSTONEFREETEXT,\n          CodingSchemeDesignator: CodingSchemeDesignator$1,\n          CodeMeaning: data.text\n        };\n      }\n\n      TID300RepresentationArguments.finding = finding;\n      return TID300RepresentationArguments;\n    }\n  }]);\n\n  return ArrowAnnotate;\n}();\n\nArrowAnnotate$1.toolType = ARROW_ANNOTATE$1;\nArrowAnnotate$1.utilityToolType = ARROW_ANNOTATE$1;\nArrowAnnotate$1.TID300Representation = Point;\n\nArrowAnnotate$1.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone3DTag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n\n  return toolType === ARROW_ANNOTATE$1;\n};\n\nMeasurementReport$1.registerTool(ArrowAnnotate$1);\n\nvar PROBE = \"Probe\";\nvar trackingIdentifierTextValue$4 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(PROBE);\n\nvar Probe = /*#__PURE__*/function () {\n  function Probe() {\n    _classCallCheck(this, Probe);\n  }\n\n  _createClass(Probe, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Probe.toolType),\n          defaultState = _MeasurementReport$ge.defaultState,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      }\n\n      var state = defaultState;\n      state.annotation.data = {\n        handles: {\n          points: worldCoords,\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n          metadata = tool.metadata;\n      var finding = tool.finding,\n          findingSites = tool.findingSites;\n      var referencedImageId = metadata.referencedImageId;\n\n      if (!referencedImageId) {\n        throw new Error(\"Probe.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n\n      var points = data.handles.points;\n      var pointsImage = points.map(function (point) {\n        var pointImage = worldToImageCoords(referencedImageId, point);\n        return {\n          x: pointImage[0],\n          y: pointImage[1]\n        };\n      });\n      var TID300RepresentationArguments = {\n        points: pointsImage,\n        trackingIdentifierTextValue: trackingIdentifierTextValue$4,\n        findingSites: findingSites || [],\n        finding: finding\n      };\n      return TID300RepresentationArguments;\n    }\n  }]);\n\n  return Probe;\n}();\n\nProbe.toolType = PROBE;\nProbe.utilityToolType = PROBE;\nProbe.TID300Representation = Point;\n\nProbe.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone3DTag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n\n  return toolType === PROBE;\n};\n\nMeasurementReport$1.registerTool(Probe);\n\nvar PLANARFREEHANDROI = \"PlanarFreehandROI\";\nvar trackingIdentifierTextValue$5 = \"\".concat(CORNERSTONE_3D_TAG, \":\").concat(PLANARFREEHANDROI);\nvar closedContourThreshold = 1e-5;\n\nvar PlanarFreehandROI = /*#__PURE__*/function () {\n  function PlanarFreehandROI() {\n    _classCallCheck(this, PlanarFreehandROI);\n  }\n\n  _createClass(PlanarFreehandROI, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {\n      var _MeasurementReport$ge = MeasurementReport$1.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, PlanarFreehandROI.toolType),\n          defaultState = _MeasurementReport$ge.defaultState,\n          SCOORDGroup = _MeasurementReport$ge.SCOORDGroup,\n          ReferencedFrameNumber = _MeasurementReport$ge.ReferencedFrameNumber;\n\n      var referencedImageId = defaultState.annotation.metadata.referencedImageId;\n      var GraphicData = SCOORDGroup.GraphicData;\n      var worldCoords = [];\n\n      for (var i = 0; i < GraphicData.length; i += 2) {\n        var point = imageToWorldCoords(referencedImageId, [GraphicData[i], GraphicData[i + 1]]);\n        worldCoords.push(point);\n      }\n\n      var distanceBetweenFirstAndLastPoint = distance(worldCoords[worldCoords.length - 1], worldCoords[0]);\n      var isOpenContour = true; // If the contour is closed, this should have been encoded as exactly the same point, so check for a very small difference.\n\n      if (distanceBetweenFirstAndLastPoint < closedContourThreshold) {\n        worldCoords.pop(); // Remove the last element which is duplicated.\n\n        isOpenContour = false;\n      }\n\n      var points = [];\n\n      if (isOpenContour) {\n        points.push(worldCoords[0], worldCoords[worldCoords.length - 1]);\n      }\n\n      var state = defaultState;\n      state.annotation.data = {\n        polyline: worldCoords,\n        isOpenContour: isOpenContour,\n        handles: {\n          points: points,\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false\n          }\n        },\n        frameNumber: ReferencedFrameNumber\n      };\n      return state;\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(tool, worldToImageCoords) {\n      var data = tool.data,\n          finding = tool.finding,\n          findingSites = tool.findingSites,\n          metadata = tool.metadata;\n      var isOpenContour = data.isOpenContour,\n          polyline = data.polyline;\n      var referencedImageId = metadata.referencedImageId;\n\n      if (!referencedImageId) {\n        throw new Error(\"PlanarFreehandROI.getTID300RepresentationArguments: referencedImageId is not defined\");\n      }\n\n      var points = polyline.map(function (worldPos) {\n        return worldToImageCoords(referencedImageId, worldPos);\n      });\n\n      if (!isOpenContour) {\n        // Need to repeat the first point at the end of to have an explicitly closed contour.\n        var firstPoint = points[0]; // Explicitly expand to avoid ciruclar references.\n\n        points.push([firstPoint[0], firstPoint[1]]);\n      }\n\n      var area = 0; // TODO -> The tool doesn't have these stats yet.\n\n      var perimeter = 0;\n      return {\n        points: points,\n        area: area,\n        perimeter: perimeter,\n        trackingIdentifierTextValue: trackingIdentifierTextValue$5,\n        finding: finding,\n        findingSites: findingSites || []\n      };\n    }\n  }]);\n\n  return PlanarFreehandROI;\n}();\n\nPlanarFreehandROI.toolType = PLANARFREEHANDROI;\nPlanarFreehandROI.utilityToolType = PLANARFREEHANDROI;\nPlanarFreehandROI.TID300Representation = Polyline;\n\nPlanarFreehandROI.isValidCornerstoneTrackingIdentifier = function (TrackingIdentifier) {\n  if (!TrackingIdentifier.includes(\":\")) {\n    return false;\n  }\n\n  var _TrackingIdentifier$s = TrackingIdentifier.split(\":\"),\n      _TrackingIdentifier$s2 = _slicedToArray(_TrackingIdentifier$s, 2),\n      cornerstone3DTag = _TrackingIdentifier$s2[0],\n      toolType = _TrackingIdentifier$s2[1];\n\n  if (cornerstone3DTag !== CORNERSTONE_3D_TAG) {\n    return false;\n  }\n\n  return toolType === PLANARFREEHANDROI;\n};\n\nMeasurementReport$1.registerTool(PlanarFreehandROI);\n\nvar Cornerstone3D = {\n  Length: Length$2,\n  Bidirectional: Bidirectional$2,\n  EllipticalROI: EllipticalROI,\n  ArrowAnnotate: ArrowAnnotate$1,\n  Probe: Probe,\n  PlanarFreehandROI: PlanarFreehandROI,\n  MeasurementReport: MeasurementReport$1,\n  CodeScheme: CodingScheme,\n  CORNERSTONE_3D_TAG: CORNERSTONE_3D_TAG\n};\n\n// Should we move it to Colors.js\n\nfunction dicomlab2RGBA(cielab) {\n  var rgba = Colors.dicomlab2RGB(cielab).map(function (x) {\n    return Math.round(x * 255);\n  });\n  rgba.push(255);\n  return rgba;\n} // TODO: Copied these functions in from VTK Math so we don't need a dependency.\n// I guess we should put them somewhere\n// https://github.com/Kitware/vtk-js/blob/master/Sources/Common/Core/Math/index.js\n\n\nfunction cross$1(x, y, out) {\n  var Zx = x[1] * y[2] - x[2] * y[1];\n  var Zy = x[2] * y[0] - x[0] * y[2];\n  var Zz = x[0] * y[1] - x[1] * y[0];\n  out[0] = Zx;\n  out[1] = Zy;\n  out[2] = Zz;\n}\n\nfunction norm(x) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n  switch (n) {\n    case 1:\n      return Math.abs(x);\n\n    case 2:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);\n\n    case 3:\n      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);\n\n    default:\n      {\n        var sum = 0;\n\n        for (var i = 0; i < n; i++) {\n          sum += x[i] * x[i];\n        }\n\n        return Math.sqrt(sum);\n      }\n  }\n}\n\nfunction normalize$3(x) {\n  var den = norm(x);\n\n  if (den !== 0.0) {\n    x[0] /= den;\n    x[1] /= den;\n    x[2] /= den;\n  }\n\n  return den;\n}\n\nfunction subtract$1(a, b, out) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n} // TODO: This is a useful utility on its own. We should move it somewhere?\n// dcmjs.adapters.vtk.Multiframe? dcmjs.utils?\n\n\nfunction geometryFromFunctionalGroups(dataset, PerFrameFunctionalGroups) {\n  var geometry = {};\n  var pixelMeasures = dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence;\n  var planeOrientation = dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence; // Find the origin of the volume from the PerFrameFunctionalGroups' ImagePositionPatient values\n  //\n  // TODO: assumes sorted frames. This should read the ImagePositionPatient from each frame and\n  // sort them to obtain the first and last position along the acquisition axis.\n\n  var firstFunctionalGroup = PerFrameFunctionalGroups[0];\n  var lastFunctionalGroup = PerFrameFunctionalGroups[PerFrameFunctionalGroups.length - 1];\n  var firstPosition = firstFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);\n  var lastPosition = lastFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);\n  geometry.origin = firstPosition; // NB: DICOM PixelSpacing is defined as Row then Column,\n  // unlike ImageOrientationPatient\n\n  geometry.spacing = [pixelMeasures.PixelSpacing[1], pixelMeasures.PixelSpacing[0], pixelMeasures.SpacingBetweenSlices].map(Number);\n  geometry.dimensions = [dataset.Columns, dataset.Rows, PerFrameFunctionalGroups.length].map(Number);\n  var orientation = planeOrientation.ImageOrientationPatient.map(Number);\n  var columnStepToPatient = orientation.slice(0, 3);\n  var rowStepToPatient = orientation.slice(3, 6);\n  geometry.planeNormal = [];\n  cross$1(columnStepToPatient, rowStepToPatient, geometry.planeNormal);\n  geometry.sliceStep = [];\n  subtract$1(lastPosition, firstPosition, geometry.sliceStep);\n  normalize$3(geometry.sliceStep);\n  geometry.direction = columnStepToPatient.concat(rowStepToPatient).concat(geometry.sliceStep);\n  return geometry;\n}\n\nvar Segmentation$4 = /*#__PURE__*/function () {\n  function Segmentation() {\n    _classCallCheck(this, Segmentation);\n  }\n  /**\n   * Produces an array of Segments from an input DICOM Segmentation dataset\n   *\n   * Segments are returned with Geometry values that can be used to create\n   * VTK Image Data objects.\n   *\n   * @example Example usage to create VTK Volume actors from each segment:\n   *\n   * const actors = [];\n   * const segments = generateToolState(dataset);\n   * segments.forEach(segment => {\n   *   // now make actors using the segment information\n   *   const scalarArray = vtk.Common.Core.vtkDataArray.newInstance({\n   *        name: \"Scalars\",\n   *        numberOfComponents: 1,\n   *        values: segment.pixelData,\n   *    });\n   *\n   *    const imageData = vtk.Common.DataModel.vtkImageData.newInstance();\n   *    imageData.getPointData().setScalars(scalarArray);\n   *    imageData.setDimensions(geometry.dimensions);\n   *    imageData.setSpacing(geometry.spacing);\n   *    imageData.setOrigin(geometry.origin);\n   *    imageData.setDirection(geometry.direction);\n   *\n   *    const mapper = vtk.Rendering.Core.vtkVolumeMapper.newInstance();\n   *    mapper.setInputData(imageData);\n   *    mapper.setSampleDistance(2.);\n   *\n   *    const actor = vtk.Rendering.Core.vtkVolume.newInstance();\n   *    actor.setMapper(mapper);\n   *\n   *    actors.push(actor);\n   * });\n   *\n   * @param dataset\n   * @return {{}}\n   */\n\n\n  _createClass(Segmentation, null, [{\n    key: \"generateSegments\",\n    value: function generateSegments(dataset) {\n      if (dataset.SegmentSequence.constructor.name !== \"Array\") {\n        dataset.SegmentSequence = [dataset.SegmentSequence];\n      }\n\n      dataset.SegmentSequence.forEach(function (segment) {\n        // TODO: other interesting fields could be extracted from the segment\n        // TODO: Read SegmentsOverlay field\n        // http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.8.20.2.html\n        // TODO: Looks like vtkColor only wants RGB in 0-1 values.\n        // Why was this example converting to RGBA with 0-255 values?\n        var color = dicomlab2RGBA(segment.RecommendedDisplayCIELabValue);\n        segments[segment.SegmentNumber] = {\n          color: color,\n          functionalGroups: [],\n          offset: null,\n          size: null,\n          pixelData: null\n        };\n      }); // make a list of functional groups per segment\n\n      dataset.PerFrameFunctionalGroupsSequence.forEach(function (functionalGroup) {\n        var segmentNumber = functionalGroup.SegmentIdentificationSequence.ReferencedSegmentNumber;\n        segments[segmentNumber].functionalGroups.push(functionalGroup);\n      }); // determine per-segment index into the pixel data\n      // TODO: only handles one-bit-per pixel\n\n      var frameSize = Math.ceil(dataset.Rows * dataset.Columns / 8);\n      var nextOffset = 0;\n      Object.keys(segments).forEach(function (segmentNumber) {\n        var segment = segments[segmentNumber];\n        segment.numberOfFrames = segment.functionalGroups.length;\n        segment.size = segment.numberOfFrames * frameSize;\n        segment.offset = nextOffset;\n        nextOffset = segment.offset + segment.size;\n        var packedSegment = dataset.PixelData.slice(segment.offset, nextOffset);\n        segment.pixelData = BitArray.unpack(packedSegment);\n        var geometry = geometryFromFunctionalGroups(dataset, segment.functionalGroups);\n        segment.geometry = geometry;\n      });\n      return segments;\n    }\n  }]);\n\n  return Segmentation;\n}();\n\nvar VTKjs = {\n  Segmentation: Segmentation$4\n};\n\nfunction getTID300ContentItem$2(tool, toolClass) {\n  var args = toolClass.getTID300RepresentationArguments(tool);\n  args.use3DSpatialCoordinates = true;\n  return new toolClass.TID300Representation(args);\n}\n\nfunction getMeasurementGroup$2(graphicType, measurements) {\n  var toolClass = MeasurementReport$2.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE[graphicType]; // Loop through the array of tool instances\n  // for this tool\n\n  var Measurements = measurements.map(function (tool) {\n    return getTID300ContentItem$2(tool, toolClass);\n  });\n  return new TID1501MeasurementGroup(Measurements);\n}\n\nvar MeasurementReport$2 = /*#__PURE__*/function () {\n  function MeasurementReport() {\n    _classCallCheck(this, MeasurementReport);\n  }\n\n  _createClass(MeasurementReport, null, [{\n    key: \"generateReport\",\n    value: function generateReport(rois, metadataProvider, options) {\n      // Input is all ROIS returned via viewer.getALLROIs()\n      // let report = MeasurementReport.generateReport(viewer.getAllROIs());\n      // Sort and split into arrays by scoord3d.graphicType\n      var measurementsByGraphicType = {};\n      rois.forEach(function (roi) {\n        var graphicType = roi.scoord3d.graphicType;\n\n        if (graphicType !== \"POINT\") {\n          // adding z coord as 0\n          roi.scoord3d.graphicData.map(function (coord) {\n            return coord.push(0);\n          });\n        }\n\n        if (!measurementsByGraphicType[graphicType]) {\n          measurementsByGraphicType[graphicType] = [];\n        }\n\n        measurementsByGraphicType[graphicType].push(roi.scoord3d);\n      }); // For each measurement, get the utility arguments using the adapter, and create TID300 Measurement\n      // Group these TID300 Measurements into a TID1501 Measurement Group (for each graphicType)\n      // Use TID1500MeasurementReport utility to create a single report from the created groups\n      // return report;\n\n      var allMeasurementGroups = [];\n      var measurementGroups = [];\n      Object.keys(measurementsByGraphicType).forEach(function (graphicType) {\n        var measurements = measurementsByGraphicType[graphicType];\n        var group = getMeasurementGroup$2(graphicType, measurements);\n\n        if (group) {\n          measurementGroups.push(group);\n        }\n\n        allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);\n      });\n\n      var _MeasurementReport = new TID1500MeasurementReport({\n        TID1501MeasurementGroups: allMeasurementGroups\n      }, options); // TODO: what is the correct metaheader\n      // http://dicom.nema.org/medical/Dicom/current/output/chtml/part10/chapter_7.html\n      // TODO: move meta creation to happen in derivations.js\n\n\n      var fileMetaInformationVersionArray = new Uint8Array(2);\n      fileMetaInformationVersionArray[1] = 1; // TODO: Find out how to reference the data from dicom-microscopy-viewer\n\n      var studyInstanceUID = \"12.4\";\n      var seriesInstanceUID = \"12.4\";\n      var derivationSourceDataset = {\n        StudyInstanceUID: studyInstanceUID,\n        SeriesInstanceUID: seriesInstanceUID //SOPInstanceUID: sopInstanceUID, // TODO: Necessary?\n        //SOPClassUID: sopClassUID,\n\n      };\n      var _meta = {\n        FileMetaInformationVersion: {\n          Value: [fileMetaInformationVersionArray.buffer],\n          vr: \"OB\"\n        },\n        //MediaStorageSOPClassUID\n        //MediaStorageSOPInstanceUID: sopCommonModule.sopInstanceUID,\n        TransferSyntaxUID: {\n          Value: [\"1.2.840.10008.1.2.1\"],\n          vr: \"UI\"\n        },\n        ImplementationClassUID: {\n          Value: [DicomMetaDictionary.uid()],\n          // TODO: could be git hash or other valid id\n          vr: \"UI\"\n        },\n        ImplementationVersionName: {\n          Value: [\"dcmjs\"],\n          vr: \"SH\"\n        }\n      };\n      var _vrMap = {\n        PixelData: \"OW\"\n      };\n      derivationSourceDataset._meta = _meta;\n      derivationSourceDataset._vrMap = _vrMap;\n      var report = new StructuredReport([derivationSourceDataset]);\n\n      var contentItem = _MeasurementReport.contentItem(derivationSourceDataset); // Merge the derived dataset with the content from the Measurement Report\n\n\n      report.dataset = Object.assign(report.dataset, contentItem);\n      report.dataset._meta = _meta;\n      return report;\n    } //@ToDo\n\n  }, {\n    key: \"generateToolState\",\n    value: function generateToolState(dataset) {\n      // For now, bail out if the dataset is not a TID1500 SR with length measurements\n      if (dataset.ContentTemplateSequence.TemplateIdentifier !== \"1500\") {\n        throw new Error(\"This package can currently only interpret DICOM SR TID 1500\");\n      }\n\n      var REPORT = \"Imaging Measurements\";\n      var GROUP = \"Measurement Group\"; // Split the imagingMeasurementContent into measurement groups by their code meaning\n\n      var imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT)); // Retrieve the Measurements themselves\n\n      var measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP)); // // For each of the supported measurement types, compute the measurement data\n\n      var measurementData = {};\n      measurementGroups.forEach(function (mg) {\n        Object.keys(MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE).forEach(function (measurementType) {\n          // Find supported measurement types in the Structured Report\n          var measurementGroupContentSequence = toArray(mg.ContentSequence);\n          var measurementContent = measurementGroupContentSequence.filter(graphicTypeEquals(measurementType.toUpperCase()));\n\n          if (!measurementContent || measurementContent.length === 0) {\n            return;\n          }\n\n          var toolClass = MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE[measurementType];\n          var toolType = toolClass.toolType;\n\n          if (!toolClass.getMeasurementData) {\n            throw new Error(\"MICROSCOPY Tool Adapters must define a getMeasurementData static method.\");\n          }\n\n          if (!measurementData[toolType]) {\n            measurementData[toolType] = [];\n          }\n\n          measurementData[toolType] = [].concat(_toConsumableArray(measurementData[toolType]), _toConsumableArray(toolClass.getMeasurementData(measurementContent)));\n        });\n      });\n      return measurementData;\n    }\n  }, {\n    key: \"registerTool\",\n    value: function registerTool(toolClass) {\n      MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;\n      MeasurementReport.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.graphicType] = toolClass;\n      MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.graphicType] = toolClass.utilityToolType;\n    }\n  }]);\n\n  return MeasurementReport;\n}();\nMeasurementReport$2.MEASUREMENT_BY_TOOLTYPE = {};\nMeasurementReport$2.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE = {};\nMeasurementReport$2.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE = {};\n\nvar Polyline$1 = /*#__PURE__*/function () {\n  function Polyline() {\n    _classCallCheck(this, Polyline);\n  }\n\n  _createClass(Polyline, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(measurementContent) {\n      // removing duplication and Getting only the graphicData information\n      var measurement = measurementContent.map(function (item) {\n        return item.GraphicData;\n      }).filter(function (s) {\n        return function (a) {\n          return function (j) {\n            return !s.has(j) && s.add(j);\n          }(JSON.stringify(a));\n        };\n      }(new Set())); // Chunking the array into size of three\n\n      return measurement.map(function (measurement) {\n        return measurement.reduce(function (all, one, i) {\n          var ch = Math.floor(i / 3);\n          all[ch] = [].concat(all[ch] || [], one);\n          return all;\n        }, []);\n      });\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(scoord3d) {\n      if (scoord3d.graphicType !== \"POLYLINE\") {\n        throw new Error(\"We expected a POLYLINE graphicType\");\n      }\n\n      var points = scoord3d.graphicData;\n      var lengths = 1;\n      return {\n        points: points,\n        lengths: lengths\n      };\n    }\n  }]);\n\n  return Polyline;\n}();\n\nPolyline$1.graphicType = \"POLYLINE\";\nPolyline$1.toolType = \"Polyline\";\nPolyline$1.utilityToolType = \"Polyline\";\nPolyline$1.TID300Representation = Polyline;\nMeasurementReport$2.registerTool(Polyline$1);\n\n/**\n * Expand an array of points stored as objects into\n * a flattened array of points\n *\n * @param points [{x: 0, y: 1}, {x: 1, y: 2}] or [{x: 0, y: 1, z: 0}, {x: 1, y: 2, z: 0}]\n * @return {Array} [point1x, point1y, point2x, point2y] or [point1x, point1y, point1z, point2x, point2y, point2z]\n */\n\nfunction expandPoints$3(points) {\n  var allPoints = [];\n  points.forEach(function (point) {\n    allPoints.push(point[0]);\n    allPoints.push(point[1]);\n\n    if (point[2] !== undefined) {\n      allPoints.push(point[2]);\n    }\n  });\n  return allPoints;\n}\n\nvar Polygon = /*#__PURE__*/function (_TID300Measurement) {\n  _inherits(Polygon, _TID300Measurement);\n\n  var _super = _createSuper(Polygon);\n\n  function Polygon() {\n    _classCallCheck(this, Polygon);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Polygon, [{\n    key: \"contentItem\",\n    value: function contentItem() {\n      var _this$props = this.props,\n          points = _this$props.points,\n          ReferencedSOPSequence = _this$props.ReferencedSOPSequence,\n          _this$props$use3DSpat = _this$props.use3DSpatialCoordinates,\n          use3DSpatialCoordinates = _this$props$use3DSpat === void 0 ? false : _this$props$use3DSpat;\n      var perimeter = {};\n      var GraphicData = expandPoints$3(points);\n      return this.getMeasurement([{\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A197\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Perimeter\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"millimeter\"\n          },\n          NumericValue: perimeter\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"POLYGON\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }, {\n        RelationshipType: \"CONTAINS\",\n        ValueType: \"NUM\",\n        ConceptNameCodeSequence: {\n          CodeValue: \"G-A166\",\n          CodingSchemeDesignator: \"SRT\",\n          CodeMeaning: \"Area\"\n        },\n        MeasuredValueSequence: {\n          MeasurementUnitsCodeSequence: {\n            CodeValue: \"mm2\",\n            CodingSchemeDesignator: \"UCUM\",\n            CodingSchemeVersion: \"1.4\",\n            CodeMeaning: \"SquareMilliMeter\"\n          },\n          NumericValue: perimeter\n        },\n        ContentSequence: {\n          RelationshipType: \"INFERRED FROM\",\n          ValueType: use3DSpatialCoordinates ? \"SCOORD3D\" : \"SCOORD\",\n          GraphicType: \"POLYGON\",\n          GraphicData: GraphicData,\n          ContentSequence: use3DSpatialCoordinates ? undefined : {\n            RelationshipType: \"SELECTED FROM\",\n            ValueType: \"IMAGE\",\n            ReferencedSOPSequence: ReferencedSOPSequence\n          }\n        }\n      }]);\n    }\n  }]);\n\n  return Polygon;\n}(TID300Measurement);\n\nvar Polygon$1 = /*#__PURE__*/function () {\n  function Polygon() {\n    _classCallCheck(this, Polygon);\n  }\n\n  _createClass(Polygon, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(measurementContent) {\n      // removing duplication and Getting only the graphicData information\n      var measurement = measurementContent.map(function (item) {\n        return item.GraphicData;\n      }).filter(function (s) {\n        return function (a) {\n          return function (j) {\n            return !s.has(j) && s.add(j);\n          }(JSON.stringify(a));\n        };\n      }(new Set())); // Chunking the array into size of three\n\n      return measurement.map(function (measurement) {\n        return measurement.reduce(function (all, one, i) {\n          var ch = Math.floor(i / 3);\n          all[ch] = [].concat(all[ch] || [], one);\n          return all;\n        }, []);\n      });\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(scoord3d) {\n      if (scoord3d.graphicType !== \"POLYGON\") {\n        throw new Error(\"We expected a POLYGON graphicType\");\n      }\n\n      var points = scoord3d.graphicData;\n      var lengths = 1;\n      return {\n        points: points,\n        lengths: lengths\n      };\n    }\n  }]);\n\n  return Polygon;\n}();\n\nPolygon$1.graphicType = \"POLYGON\";\nPolygon$1.toolType = \"Polygon\";\nPolygon$1.utilityToolType = \"Polygon\";\nPolygon$1.TID300Representation = Polygon;\nMeasurementReport$2.registerTool(Polygon$1);\n\nvar Point$1 = /*#__PURE__*/function () {\n  function Point() {\n    _classCallCheck(this, Point);\n  }\n\n  _createClass(Point, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(measurementContent) {\n      var measurement = measurementContent.map(function (item) {\n        return item.GraphicData;\n      });\n      return measurement.filter(function (s) {\n        return function (a) {\n          return function (j) {\n            return !s.has(j) && s.add(j);\n          }(JSON.stringify(a));\n        };\n      }(new Set()));\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(scoord3d) {\n      if (scoord3d.graphicType !== \"POINT\") {\n        throw new Error(\"We expected a POINT graphicType\");\n      }\n\n      var points = [scoord3d.graphicData];\n      var lengths = 1;\n      return {\n        points: points,\n        lengths: lengths\n      };\n    }\n  }]);\n\n  return Point;\n}();\n\nPoint$1.graphicType = \"POINT\";\nPoint$1.toolType = \"Point\";\nPoint$1.utilityToolType = \"Point\";\nPoint$1.TID300Representation = Point;\nMeasurementReport$2.registerTool(Point$1);\n\nvar Circle$1 = /*#__PURE__*/function () {\n  function Circle() {\n    _classCallCheck(this, Circle);\n  }\n\n  _createClass(Circle, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(measurementContent) {\n      // removing duplication and Getting only the graphicData information\n      var measurement = measurementContent.map(function (item) {\n        return item.GraphicData;\n      }).filter(function (s) {\n        return function (a) {\n          return function (j) {\n            return !s.has(j) && s.add(j);\n          }(JSON.stringify(a));\n        };\n      }(new Set())); // Chunking the array into size of three\n\n      return measurement.map(function (measurement) {\n        return measurement.reduce(function (all, one, i) {\n          var ch = Math.floor(i / 3);\n          all[ch] = [].concat(all[ch] || [], one);\n          return all;\n        }, []);\n      });\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(scoord3d) {\n      if (scoord3d.graphicType !== \"CIRCLE\") {\n        throw new Error(\"We expected a CIRCLE graphicType\");\n      }\n\n      var points = scoord3d.graphicData;\n      var lengths = 1;\n      return {\n        points: points,\n        lengths: lengths\n      };\n    }\n  }]);\n\n  return Circle;\n}();\n\nCircle$1.graphicType = \"CIRCLE\";\nCircle$1.toolType = \"Circle\";\nCircle$1.utilityToolType = \"Circle\";\nCircle$1.TID300Representation = Circle;\nMeasurementReport$2.registerTool(Circle$1);\n\nvar Ellipse$1 = /*#__PURE__*/function () {\n  function Ellipse() {\n    _classCallCheck(this, Ellipse);\n  }\n\n  _createClass(Ellipse, null, [{\n    key: \"getMeasurementData\",\n    value: function getMeasurementData(measurementContent) {\n      // removing duplication and Getting only the graphicData information\n      var measurement = measurementContent.map(function (item) {\n        return item.GraphicData;\n      }).filter(function (s) {\n        return function (a) {\n          return function (j) {\n            return !s.has(j) && s.add(j);\n          }(JSON.stringify(a));\n        };\n      }(new Set())); // Chunking the array into size of three\n\n      return measurement.map(function (measurement) {\n        return measurement.reduce(function (all, one, i) {\n          var ch = Math.floor(i / 3);\n          all[ch] = [].concat(all[ch] || [], one);\n          return all;\n        }, []);\n      });\n    }\n  }, {\n    key: \"getTID300RepresentationArguments\",\n    value: function getTID300RepresentationArguments(scoord3d) {\n      if (scoord3d.graphicType !== \"Ellipse\") {\n        throw new Error(\"We expected a Ellipse graphicType\");\n      }\n\n      var points = scoord3d.graphicData;\n      var lengths = 1;\n      return {\n        points: points,\n        lengths: lengths\n      };\n    }\n  }]);\n\n  return Ellipse;\n}();\n\nEllipse$1.graphicType = \"ELLIPSE\";\nEllipse$1.toolType = \"Ellipse\";\nEllipse$1.utilityToolType = \"Ellipse\";\nEllipse$1.TID300Representation = Ellipse;\nMeasurementReport$2.registerTool(Ellipse$1);\n\nvar DICOMMicroscopyViewer = {\n  Polyline: Polyline$1,\n  Polygon: Polygon$1,\n  Point: Point$1,\n  Circle: Circle$1,\n  Ellipse: Ellipse$1,\n  MeasurementReport: MeasurementReport$2\n};\n\nvar adapters = {\n  Cornerstone: Cornerstone,\n  Cornerstone3D: Cornerstone3D,\n  VTKjs: VTKjs,\n  DICOMMicroscopyViewer: DICOMMicroscopyViewer\n};\n\nvar TID1500 = {\n  TID1500MeasurementReport: TID1500MeasurementReport,\n  TID1501MeasurementGroup: TID1501MeasurementGroup\n};\n\n// - Cornerstone Probe\n// Note: OHIF currently uses Cornerstone's 'dragProbe'. We need to add the regular Probe tool, which drops a single point.\n//\n// Hierarchy\n// TID 1500 MeasurementReport\n// --TID 1501 Measurement Group\n// ---Measurement Group (DCM 125007)\n// ----TID 300 Measurement\n// ------SCOORD. Graphic Type: POINT\n//\n//\n// - Cornerstone Ellipse:\n//\n// Should specify the Mean Modality Pixel Value measured in whatever units the image is in\n// Should specify the Standard Deviation Modality Pixel Value measured in whatever units the image is in\n//\n//\n// - Cornerstone Rectangle ROI\n//\n// Hierarchy\n// TID 1500 MeasurementReport\n// --TID 1501 Measurement Group\n// ---Measurement Group (DCM 125007)\n// ----TID 300 Measurement\n// ------SCOORD. Graphic Type: POLYLINE\n// ------ Use concept corresponding to Rectangle measurement\n//\n//                 http://dicom.nema.org/medical/dicom/current/output/html/part16.html#sect_TID_4019\n//\n// OR\n// Note: This should be the same as a Freehand ROI, more or less. We add a TID 4019: Algorithm Identification flag to specify that this was created (and should be rehydrated) into a Rectangle ROI.\n// TODO: Should we use a Derivation instead? http://dicom.nema.org/medical/dicom/current/output/html/part16.html#DCM_121401\n// Should specify the Area measured in mmË2, including the units in UCUM\n// Should specify the Mean Modality Pixel Value measured in whatever units the image is in\n// Should specify the Standard Deviation Modality Pixel Value measured in whatever units the image is in\n//\n//\n// - Cornerstone Simple Angle tool\n//\n// Hierarchy\n// TID 1500 MeasurementReport\n// --TID 1501 Measurement Group\n// ---Measurement Group (DCM 125007)\n// ----TID 300 Measurement\n// ------SCOORD. Graphic Type: POLYLINE\n//        (ftp://dicom.nema.org/MEDICAL/dicom/current/output/chtml/part03/sect_C.10.5.html)\n// ----TID 300 Measurement\n// ------SCOORD. Graphic Type: POLYLINE\n//        (ftp://dicom.nema.org/MEDICAL/dicom/current/output/chtml/part03/sect_C.10.5.html)\n//\n// ------ Use concept corresponding to Angle measurement\n//\n// Two lines specify the angle\n// Should specify the Angle measured in Degrees, including the units in UCUM\n//\n\nvar TID300 = {\n  TID300Measurement: TID300Measurement,\n  Point: Point,\n  Length: Length,\n  CobbAngle: CobbAngle,\n  Bidirectional: Bidirectional,\n  Polyline: Polyline,\n  Polygon: Polygon,\n  Ellipse: Ellipse,\n  Circle: Circle\n};\n\n/**\n * Converts a Uint8Array to a String.\n * @param {Uint8Array} array that should be converted\n * @param {Number} offset array offset in case only subset of array items should be extracted (default: 0)\n * @param {Number} limit maximum number of array items that should be extracted (defaults to length of array)\n * @returns {String}\n */\nfunction uint8ArrayToString(arr, offset, limit) {\n  offset = offset || 0;\n  limit = limit || arr.length - offset;\n  var str = \"\";\n\n  for (var i = offset; i < offset + limit; i++) {\n    str += String.fromCharCode(arr[i]);\n  }\n\n  return str;\n}\n/**\n * Converts a String to a Uint8Array.\n * @param {String} str string that should be converted\n * @returns {Uint8Array}\n */\n\n\nfunction stringToUint8Array(str) {\n  var arr = new Uint8Array(str.length);\n\n  for (var i = 0, j = str.length; i < j; i++) {\n    arr[i] = str.charCodeAt(i);\n  }\n\n  return arr;\n}\n/**\n * Identifies the boundary in a multipart/related message header.\n * @param {String} header message header\n * @returns {String} boundary\n */\n\n\nfunction identifyBoundary(header) {\n  var parts = header.split(\"\\r\\n\");\n\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].substr(0, 2) === \"--\") {\n      return parts[i];\n    }\n  }\n}\n/**\n * Checks whether a given token is contained by a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be present\n * @param {Number} offset offset in message content from where search should start\n * @returns {Boolean} whether message contains token at offset\n */\n\n\nfunction containsToken(message, token) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (offset + token.length > message.length) {\n    return false;\n  }\n\n  var index = offset;\n\n  for (var i = 0; i < token.length; i++) {\n    if (token[i] !== message[index++]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Finds a given token in a message at a given offset.\n * @param {Uint8Array} message message content\n * @param {Uint8Array} token substring that should be found\n * @param {Number} offset message body offset from where search should start\n * @returns {Boolean} whether message has a part at given offset or not\n */\n\n\nfunction findToken(message, token) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var maxSearchLength = arguments.length > 3 ? arguments[3] : undefined;\n  var searchLength = message.length;\n\n  if (maxSearchLength) {\n    searchLength = Math.min(offset + maxSearchLength, message.length);\n  }\n\n  for (var i = offset; i < searchLength; i++) {\n    // If the first value of the message matches\n    // the first value of the token, check if\n    // this is the full token.\n    if (message[i] === token[0]) {\n      if (containsToken(message, token, i)) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n/**\n * @typedef {Object} MultipartEncodedData\n * @property {ArrayBuffer} data The encoded Multipart Data\n * @property {String} boundary The boundary used to divide pieces of the encoded data\n */\n\n/**\n * Encode one or more DICOM datasets into a single body so it can be\n * sent using the Multipart Content-Type.\n *\n * @param {ArrayBuffer[]} datasets Array containing each file to be encoded in the multipart body, passed as ArrayBuffers.\n * @param {String} [boundary] Optional string to define a boundary between each part of the multipart body. If this is not specified, a random GUID will be generated.\n * @return {MultipartEncodedData} The Multipart encoded data returned as an Object. This contains both the data itself, and the boundary string used to divide it.\n */\n\n\nfunction multipartEncode(datasets) {\n  var boundary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : guid();\n  var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"application/dicom\";\n  var contentTypeString = \"Content-Type: \".concat(contentType);\n  var header = \"\\r\\n--\".concat(boundary, \"\\r\\n\").concat(contentTypeString, \"\\r\\n\\r\\n\");\n  var footer = \"\\r\\n--\".concat(boundary, \"--\");\n  var headerArray = stringToUint8Array(header);\n  var footerArray = stringToUint8Array(footer);\n  var headerLength = headerArray.length;\n  var footerLength = footerArray.length;\n  var length = 0; // Calculate the total length for the final array\n\n  var contentArrays = datasets.map(function (datasetBuffer) {\n    var contentArray = new Uint8Array(datasetBuffer);\n    var contentLength = contentArray.length;\n    length += headerLength + contentLength + footerLength;\n    return contentArray;\n  }); // Allocate the array\n\n  var multipartArray = new Uint8Array(length); // Set the initial header\n\n  multipartArray.set(headerArray, 0); // Write each dataset into the multipart array\n\n  var position = 0;\n  contentArrays.forEach(function (contentArray) {\n    var contentLength = contentArray.length;\n    multipartArray.set(headerArray, position);\n    multipartArray.set(contentArray, position + headerLength);\n    position += headerLength + contentArray.length;\n  });\n  multipartArray.set(footerArray, position);\n  return {\n    data: multipartArray.buffer,\n    boundary: boundary\n  };\n}\n/**\n * Decode a Multipart encoded ArrayBuffer and return the components as an Array.\n *\n * @param {ArrayBuffer} response Data encoded as a 'multipart/related' message\n * @returns {Array} The content\n */\n\n\nfunction multipartDecode(response) {\n  var message = new Uint8Array(response);\n  /* Set a maximum length to search for the header boundaries, otherwise\n     findToken can run for a long time\n  */\n\n  var maxSearchLength = 1000; // First look for the multipart mime header\n\n  var separator = stringToUint8Array(\"\\r\\n\\r\\n\");\n  var headerIndex = findToken(message, separator, 0, maxSearchLength);\n\n  if (headerIndex === -1) {\n    throw new Error(\"Response message has no multipart mime header\");\n  }\n\n  var header = uint8ArrayToString(message, 0, headerIndex);\n  var boundaryString = identifyBoundary(header);\n\n  if (!boundaryString) {\n    throw new Error(\"Header of response message does not specify boundary\");\n  }\n\n  var boundary = stringToUint8Array(boundaryString);\n  var components = [];\n  var offset = headerIndex + separator.length; // Loop until we cannot find any more boundaries\n\n  var boundaryIndex;\n\n  while (boundaryIndex !== -1) {\n    // Search for the next boundary in the message, starting\n    // from the current offset position\n    boundaryIndex = findToken(message, boundary, offset); // If no further boundaries are found, stop here.\n\n    if (boundaryIndex === -1) {\n      break;\n    } // Extract data from response message, excluding \"\\r\\n\"\n\n\n    var spacingLength = 2;\n    var length = boundaryIndex - offset - spacingLength;\n    var data = response.slice(offset, offset + length); // Add the data to the array of results\n\n    components.push(data); // find the end of the boundary\n\n    var boundaryEnd = findToken(message, separator, boundaryIndex + 1, maxSearchLength);\n    if (boundaryEnd === -1) break; // Move the offset to the end of the identified boundary\n\n    offset = boundaryEnd + separator.length;\n  }\n\n  return components;\n}\n/**\n * Create a random GUID\n *\n * @return {string}\n */\n\n\nfunction guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n}\n\nvar message = {\n  containsToken: containsToken,\n  findToken: findToken,\n  identifyBoundary: identifyBoundary,\n  uint8ArrayToString: uint8ArrayToString,\n  stringToUint8Array: stringToUint8Array,\n  multipartEncode: multipartEncode,\n  multipartDecode: multipartDecode,\n  guid: guid\n};\n\nvar utilities = {\n  TID1500: TID1500,\n  TID300: TID300,\n  message: message,\n  addAccessors: addAccessors,\n  orientation: orientation,\n  compression: compression\n};\n\nvar Code = /*#__PURE__*/function () {\n  function Code(options) {\n    _classCallCheck(this, Code);\n\n    this[_value] = options.value;\n    this[_meaning] = options.meaning;\n    this[_schemeDesignator] = options.schemeDesignator;\n    this[_schemeVersion] = options.schemeVersion || null;\n  }\n\n  _createClass(Code, [{\n    key: \"value\",\n    get: function get() {\n      return this[_value];\n    }\n  }, {\n    key: \"meaning\",\n    get: function get() {\n      return this[_meaning];\n    }\n  }, {\n    key: \"schemeDesignator\",\n    get: function get() {\n      return this[_schemeDesignator];\n    }\n  }, {\n    key: \"schemeVersion\",\n    get: function get() {\n      return this[_schemeVersion];\n    }\n  }]);\n\n  return Code;\n}();\n\nvar CodedConcept = /*#__PURE__*/function () {\n  function CodedConcept(options) {\n    _classCallCheck(this, CodedConcept);\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for CodedConcept.\");\n    }\n\n    if (options.meaning === undefined) {\n      throw new Error(\"Option 'meaning' is required for CodedConcept.\");\n    }\n\n    if (options.schemeDesignator === undefined) {\n      throw new Error(\"Option 'schemeDesignator' is required for CodedConcept.\");\n    }\n\n    this.CodeValue = options.value;\n    this.CodeMeaning = options.meaning;\n    this.CodingSchemeDesignator = options.schemeDesignator;\n\n    if (\"schemeVersion\" in options) {\n      this.CodingSchemeVersion = options.schemeVersion;\n    }\n  }\n\n  _createClass(CodedConcept, [{\n    key: \"equals\",\n    value: function equals(other) {\n      if (other.value === this.value && other.schemeDesignator === this.schemeDesignator) {\n        if (other.schemeVersion && this.schemeVersion) {\n          return other.schemeVersion === this.schemeVersion;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.CodeValue;\n    }\n  }, {\n    key: \"meaning\",\n    get: function get() {\n      return this.CodeMeaning;\n    }\n  }, {\n    key: \"schemeDesignator\",\n    get: function get() {\n      return this.CodingSchemeDesignator;\n    }\n  }, {\n    key: \"schemeVersion\",\n    get: function get() {\n      return this.CodingSchemeVersion;\n    }\n  }]);\n\n  return CodedConcept;\n}();\n\nvar coding = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tCode: Code,\n\tCodedConcept: CodedConcept\n});\n\nvar ValueTypes = {\n  CODE: \"CODE\",\n  COMPOSITE: \"COMPOSITE\",\n  CONTAINER: \"CONTAINER\",\n  DATE: \"DATE\",\n  DATETIME: \"DATETIME\",\n  IMAGE: \"IMAGE\",\n  NUM: \"NUM\",\n  PNAME: \"PNAME\",\n  SCOORD: \"SCOORD\",\n  SCOORD3D: \"SCOORD3D\",\n  TCOORD: \"TCOORD\",\n  TEXT: \"TEXT\",\n  TIME: \"TIME\",\n  UIDREF: \"UIDREF\",\n  WAVEFORM: \"WAVEFORM\"\n};\nObject.freeze(ValueTypes);\nvar GraphicTypes = {\n  CIRCLE: \"CIRCLE\",\n  ELLIPSE: \"ELLIPSE\",\n  ELLIPSOID: \"ELLIPSOID\",\n  MULTIPOINT: \"MULTIPOINT\",\n  POINT: \"POINT\",\n  POLYLINE: \"POLYLINE\"\n};\nObject.freeze(GraphicTypes);\nvar GraphicTypes3D = {\n  ELLIPSE: \"ELLIPSE\",\n  ELLIPSOID: \"ELLIPSOID\",\n  MULTIPOINT: \"MULTIPOINT\",\n  POINT: \"POINT\",\n  POLYLINE: \"POLYLINE\",\n  POLYGON: \"POLYGON\"\n};\nObject.freeze(GraphicTypes3D);\nvar TemporalRangeTypes = {\n  BEGIN: \"BEGIN\",\n  END: \"END\",\n  MULTIPOINT: \"MULTIPOINT\",\n  MULTISEGMENT: \"MULTISEGMENT\",\n  POINT: \"POINT\",\n  SEGMENT: \"SEGMENT\"\n};\nObject.freeze(TemporalRangeTypes);\nvar RelationshipTypes = {\n  CONTAINS: \"CONTAINS\",\n  HAS_ACQ_CONTENT: \"HAS ACQ CONTENT\",\n  HAS_CONCEPT_MOD: \"HAS CONCEPT MOD\",\n  HAS_OBS_CONTEXT: \"HAS OBS CONTEXT\",\n  HAS_PROPERTIES: \"HAS PROPERTIES\",\n  INFERRED_FROM: \"INFERRED FROM\",\n  SELECTED_FROM: \"SELECTED FROM\"\n};\nObject.freeze(RelationshipTypes);\nvar PixelOriginInterpretations = {\n  FRAME: \"FRAME\",\n  VOLUME: \"VOLUME\"\n};\nObject.freeze(RelationshipTypes);\n\nfunction isFloat(n) {\n  return n === +n && n !== (n | 0);\n}\n\nfunction zeroPad(value) {\n  return (value > 9 ? \"\" : \"0\") + value;\n}\n\nfunction TM(date) {\n  // %H%M%S.%f\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var seconds = date.getSeconds();\n  var milliseconds = date.getMilliseconds();\n  return zeroPad(hours) + zeroPad(minutes) + zeroPad(seconds) + milliseconds;\n}\n\nfunction DA(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return year + zeroPad(month) + zeroPad(day);\n}\n\nfunction DT(date) {\n  return DA(date) + TM(date);\n}\n\nvar ContentSequence$1 = /*#__PURE__*/function (_Array) {\n  _inherits(ContentSequence, _Array);\n\n  var _super = _createSuper(ContentSequence);\n\n  function ContentSequence() {\n    _classCallCheck(this, ContentSequence);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _super.call.apply(_super, [this].concat(args));\n  } // filterBy(options) {\n  // }\n\n\n  return _createClass(ContentSequence);\n}( /*#__PURE__*/_wrapNativeSuper(Array));\n\nvar ContentItem = /*#__PURE__*/_createClass(function ContentItem(options) {\n  _classCallCheck(this, ContentItem);\n\n  if (options.name === undefined) {\n    throw new Error(\"Option 'name' is required for ContentItem.\");\n  }\n\n  if (options.name.constructor !== CodedConcept) {\n    throw new Error(\"Option 'name' must have type CodedConcept.\");\n  }\n\n  this.ConceptNameCodeSequence = [options.name];\n\n  if (options.valueType === undefined) {\n    throw new Error(\"Option 'valueType' is required for ContentItem.\");\n  }\n\n  if (!(Object.values(ValueTypes).indexOf(options.valueType) !== -1)) {\n    throw new Error(\"Invalid value type \".concat(options.valueType));\n  }\n\n  this.ValueType = options.valueType;\n\n  if (options.relationshipType !== undefined) {\n    if (!(Object.values(RelationshipTypes).indexOf(options.relationshipType) !== -1)) {\n      throw new Error(\"Invalid relationship type \".concat(options.relationshipTypes));\n    }\n\n    this.RelationshipType = options.relationshipType;\n  } // TODO: relationship type is required\n\n} // getContentItems(options) {\n//   // TODO: filter by name, value type and relationship type\n//   return this.ContentSequence;\n// }\n);\n\nvar CodeContentItem = /*#__PURE__*/function (_ContentItem) {\n  _inherits(CodeContentItem, _ContentItem);\n\n  var _super2 = _createSuper(CodeContentItem);\n\n  function CodeContentItem(options) {\n    var _this;\n\n    _classCallCheck(this, CodeContentItem);\n\n    _this = _super2.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.CODE\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for CodeContentItem.\");\n    }\n\n    if (!(options.value || options.value.constructor === CodedConcept)) {\n      throw new Error(\"Option 'value' must have type CodedConcept.\");\n    }\n\n    _this.ConceptCodeSequence = [options.value];\n    return _this;\n  }\n\n  return _createClass(CodeContentItem);\n}(ContentItem);\n\nvar TextContentItem = /*#__PURE__*/function (_ContentItem2) {\n  _inherits(TextContentItem, _ContentItem2);\n\n  var _super3 = _createSuper(TextContentItem);\n\n  function TextContentItem(options) {\n    var _this2;\n\n    _classCallCheck(this, TextContentItem);\n\n    _this2 = _super3.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.TEXT\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for TextContentItem.\");\n    }\n\n    if (!(typeof options.value === \"string\" || options.value instanceof String)) {\n      throw new Error(\"Option 'value' must have type String.\");\n    }\n\n    _this2.TextValue = options.value;\n    return _this2;\n  }\n\n  return _createClass(TextContentItem);\n}(ContentItem);\n\nvar PNameContentItem = /*#__PURE__*/function (_ContentItem3) {\n  _inherits(PNameContentItem, _ContentItem3);\n\n  var _super4 = _createSuper(PNameContentItem);\n\n  function PNameContentItem(options) {\n    var _this3;\n\n    _classCallCheck(this, PNameContentItem);\n\n    _this3 = _super4.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.PNAME\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for PNameContentItem.\");\n    }\n\n    if (!(typeof options.value === \"string\" || options.value instanceof String)) {\n      throw new Error(\"Option 'value' must have type String.\");\n    }\n\n    _this3.PersonName = options.value;\n    return _this3;\n  }\n\n  return _createClass(PNameContentItem);\n}(ContentItem);\n\nvar TimeContentItem = /*#__PURE__*/function (_ContentItem4) {\n  _inherits(TimeContentItem, _ContentItem4);\n\n  var _super5 = _createSuper(TimeContentItem);\n\n  function TimeContentItem(options) {\n    var _this4;\n\n    _classCallCheck(this, TimeContentItem);\n\n    _this4 = _super5.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.TIME\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for TimeContentItem.\");\n    }\n\n    if (!(_typeof(options.value) === \"object\" || options.value instanceof Date)) {\n      throw new Error(\"Option 'value' must have type Date.\");\n    }\n\n    _this4.Time = TM(options.value);\n    return _this4;\n  }\n\n  return _createClass(TimeContentItem);\n}(ContentItem);\n\nvar DateContentItem = /*#__PURE__*/function (_ContentItem5) {\n  _inherits(DateContentItem, _ContentItem5);\n\n  var _super6 = _createSuper(DateContentItem);\n\n  function DateContentItem(options) {\n    var _this5;\n\n    _classCallCheck(this, DateContentItem);\n\n    _this5 = _super6.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.DATE\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for DateContentItem.\");\n    }\n\n    if (!(_typeof(options.value) === \"object\" || options.value instanceof Date)) {\n      throw new Error(\"Option 'value' must have type Date.\");\n    }\n\n    _this5.Date = DA(options.value);\n    return _this5;\n  }\n\n  return _createClass(DateContentItem);\n}(ContentItem);\n\nvar DateTimeContentItem = /*#__PURE__*/function (_ContentItem6) {\n  _inherits(DateTimeContentItem, _ContentItem6);\n\n  var _super7 = _createSuper(DateTimeContentItem);\n\n  function DateTimeContentItem(options) {\n    var _this6;\n\n    _classCallCheck(this, DateTimeContentItem);\n\n    _this6 = _super7.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.DATETIME\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for DateTimeContentItem.\");\n    }\n\n    if (!(_typeof(options.value) === \"object\" || options.value instanceof Date)) {\n      throw new Error(\"Option 'value' must have type Date.\");\n    }\n\n    _this6.DateTime = DT(otions.value);\n    return _this6;\n  }\n\n  return _createClass(DateTimeContentItem);\n}(ContentItem);\n\nvar UIDRefContentItem = /*#__PURE__*/function (_ContentItem7) {\n  _inherits(UIDRefContentItem, _ContentItem7);\n\n  var _super8 = _createSuper(UIDRefContentItem);\n\n  function UIDRefContentItem(options) {\n    var _this7;\n\n    _classCallCheck(this, UIDRefContentItem);\n\n    _this7 = _super8.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.UIDREF\n    });\n\n    if (options.value === undefined) {\n      throw new Error(\"Option 'value' is required for UIDRefContentItem.\");\n    }\n\n    if (!(typeof options.value === \"string\" || options.value instanceof String)) {\n      throw new Error(\"Option 'value' must have type String.\");\n    }\n\n    _this7.UID = options.value;\n    return _this7;\n  }\n\n  return _createClass(UIDRefContentItem);\n}(ContentItem);\n\nvar NumContentItem = /*#__PURE__*/function (_ContentItem8) {\n  _inherits(NumContentItem, _ContentItem8);\n\n  var _super9 = _createSuper(NumContentItem);\n\n  function NumContentItem(options) {\n    var _this8;\n\n    _classCallCheck(this, NumContentItem);\n\n    _this8 = _super9.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.NUM\n    });\n\n    if (options.value !== undefined) {\n      if (!(typeof options.value === \"number\" || options.value instanceof Number)) {\n        throw new Error(\"Option 'value' must have type Number.\");\n      }\n\n      if (options.unit === undefined) {\n        throw new Error(\"Option 'unit' is required for NumContentItem with 'value'.\");\n      }\n\n      if (options.unit.constructor !== CodedConcept) {\n        throw new Error(\"Option 'unit' must have type CodedConcept.\");\n      }\n\n      var item = {};\n      item.NumericValue = options.value;\n\n      if (isFloat(options.value)) {\n        item.FloatingPointValue = options.value;\n      }\n\n      item.MeasurementUnitsCodeSequence = [options.unit];\n      _this8.MeasuredValueSequence = [item];\n    } else if (options.qualifier !== undefined) {\n      if (!(options.qualifier || options.qualifier.constructor === CodedConcept)) {\n        throw new Error(\"Option 'qualifier' must have type CodedConcept.\");\n      }\n\n      _this8.NumericValueQualifierCodeSequence = [options.qualifier];\n    } else {\n      throw new Error(\"Either option 'value' or 'qualifier' is required for NumContentItem.\");\n    }\n\n    return _this8;\n  }\n\n  return _createClass(NumContentItem);\n}(ContentItem);\n\nvar ContainerContentItem = /*#__PURE__*/function (_ContentItem9) {\n  _inherits(ContainerContentItem, _ContentItem9);\n\n  var _super10 = _createSuper(ContainerContentItem);\n\n  function ContainerContentItem(options) {\n    var _this9;\n\n    _classCallCheck(this, ContainerContentItem);\n\n    _this9 = _super10.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.CONTAINER\n    });\n\n    if (options.isContentContinuous !== undefined) {\n      _this9.ContinuityOfContent = \"CONTINUOUS\";\n    } else {\n      _this9.ContinuityOfContent = \"SEPARATE\";\n    }\n\n    if (options.templateID !== undefined) {\n      if (!(typeof options.templateID === \"string\" || options.templateID instanceof String)) {\n        throw new Error(\"Option 'templateID' must have type String.\");\n      }\n\n      var item = {};\n      item.MappingResource = \"DCMR\";\n      item.TemplateIdentifier = options.templateID;\n      _this9.ContentTemplateSequence = [item];\n    }\n\n    return _this9;\n  }\n\n  return _createClass(ContainerContentItem);\n}(ContentItem);\n\nvar CompositeContentItem = /*#__PURE__*/function (_ContentItem10) {\n  _inherits(CompositeContentItem, _ContentItem10);\n\n  var _super11 = _createSuper(CompositeContentItem);\n\n  function CompositeContentItem(options) {\n    var _this10;\n\n    _classCallCheck(this, CompositeContentItem);\n\n    _this10 = _super11.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.COMPOSITE\n    });\n\n    if (options.referencedSOPClassUID === undefined) {\n      throw new Error(\"Option 'referencedSOPClassUID' is required for CompositeContentItem.\");\n    }\n\n    if (options.referencedSOPInstanceUID === undefined) {\n      throw new Error(\"Option 'referencedSOPInstanceUID' is required for CompositeContentItem.\");\n    }\n\n    if (!(typeof options.referencedSOPClassUID === \"string\" || options.referencedSOPClassUID instanceof String)) {\n      throw new Error(\"Option 'referencedSOPClassUID' must have type String.\");\n    }\n\n    if (!(typeof options.referencedSOPInstanceUID === \"string\" || options.referencedSOPInstanceUID instanceof String)) {\n      throw new Error(\"Option 'referencedSOPInstanceUID' must have type String.\");\n    }\n\n    var item = {};\n    item.ReferencedSOPClassUID = options.referencedSOPClassUID;\n    item.ReferencedSOPInstanceUID = options.referencedSOPInstanceUID;\n    _this10.ReferenceSOPSequence = [item];\n    return _this10;\n  }\n\n  return _createClass(CompositeContentItem);\n}(ContentItem);\n\nvar ImageContentItem = /*#__PURE__*/function (_ContentItem11) {\n  _inherits(ImageContentItem, _ContentItem11);\n\n  var _super12 = _createSuper(ImageContentItem);\n\n  function ImageContentItem(options) {\n    var _this11;\n\n    _classCallCheck(this, ImageContentItem);\n\n    _this11 = _super12.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.IMAGE\n    });\n\n    if (options.referencedSOPClassUID === undefined) {\n      throw new Error(\"Option 'referencedSOPClassUID' is required for ImageContentItem.\");\n    }\n\n    if (options.referencedSOPInstanceUID === undefined) {\n      throw new Error(\"Option 'referencedSOPInstanceUID' is required for ImageContentItem.\");\n    }\n\n    if (!(typeof options.referencedSOPClassUID === \"string\" || options.referencedSOPClassUID instanceof String)) {\n      throw new Error(\"Option 'referencedSOPClassUID' must have type String.\");\n    }\n\n    if (!(typeof options.referencedSOPInstanceUID === \"string\" || options.referencedSOPInstanceUID instanceof String)) {\n      throw new Error(\"Option 'referencedSOPInstanceUID' must have type String.\");\n    }\n\n    var item = {};\n    item.ReferencedSOPClassUID = options.referencedSOPClassUID;\n    item.ReferencedSOPInstanceUID = options.referencedSOPInstanceUID;\n\n    if (options.referencedFrameNumbers !== undefined) {\n      if (!(_typeof(options.referencedFrameNumbers) === \"object\" || options.referencedFrameNumbers instanceof Array)) {\n        throw new Error(\"Option 'referencedFrameNumbers' must have type Array.\");\n      } // FIXME: value multiplicity\n\n\n      item.ReferencedFrameNumber = options.referencedFrameNumbers;\n    }\n\n    if (options.referencedFrameSegmentNumber !== undefined) {\n      if (!(_typeof(options.referencedSegmentNumbers) === \"object\" || options.referencedSegmentNumbers instanceof Array)) {\n        throw new Error(\"Option 'referencedSegmentNumbers' must have type Array.\");\n      } // FIXME: value multiplicity\n\n\n      item.ReferencedSegmentNumber = options.referencedSegmentNumbers;\n    }\n\n    _this11.ReferencedSOPSequence = [item];\n    return _this11;\n  }\n\n  return _createClass(ImageContentItem);\n}(ContentItem);\n\nvar ScoordContentItem = /*#__PURE__*/function (_ContentItem12) {\n  _inherits(ScoordContentItem, _ContentItem12);\n\n  var _super13 = _createSuper(ScoordContentItem);\n\n  function ScoordContentItem(options) {\n    var _this12;\n\n    _classCallCheck(this, ScoordContentItem);\n\n    _this12 = _super13.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.SCOORD\n    });\n\n    if (options.graphicType === undefined) {\n      throw new Error(\"Option 'graphicType' is required for ScoordContentItem.\");\n    }\n\n    if (!(typeof options.graphicType === \"string\" || options.graphicType instanceof String)) {\n      throw new Error(\"Option 'graphicType' of ScoordContentItem must have type String.\");\n    }\n\n    if (options.graphicData === undefined) {\n      throw new Error(\"Option 'graphicData' is required for ScoordContentItem.\");\n    }\n\n    if (!(_typeof(options.graphicData) === \"object\" || options.graphicData instanceof Array)) {\n      throw new Error(\"Option 'graphicData' of ScoordContentItem must have type Array.\");\n    }\n\n    if (Object.values(GraphicTypes).indexOf(options.graphicType) === -1) {\n      throw new Error(\"Invalid graphic type '\".concat(options.graphicType, \"'.\"));\n    }\n\n    if (options.graphicData[0] instanceof Array) {\n      options.graphicData = [].concat.apply([], options.graphicData);\n    }\n\n    _this12.GraphicData = options.graphicData;\n    options.pixelOriginInterpretation = options.pixelOriginInterpretation || PixelOriginInterpretations.VOLUME;\n\n    if (!(typeof options.pixelOriginInterpretation === \"string\" || options.pixelOriginInterpretation instanceof String)) {\n      throw new Error(\"Option 'pixelOriginInterpretation' must have type String.\");\n    }\n\n    if (Object.values(PixelOriginInterpretations).indexOf(options.pixelOriginInterpretation) === -1) {\n      throw new Error(\"Invalid pixel origin interpretation '\".concat(options.pixelOriginInterpretation, \"'.\"));\n    }\n\n    if (options.fiducialUID !== undefined) {\n      if (!(typeof options.fiducialUID === \"string\" || options.fiducialUID instanceof String)) {\n        throw new Error(\"Option 'fiducialUID' must have type String.\");\n      }\n\n      _this12.FiducialUID = options.fiducialUID;\n    }\n\n    return _this12;\n  }\n\n  return _createClass(ScoordContentItem);\n}(ContentItem);\n\nvar Scoord3DContentItem = /*#__PURE__*/function (_ContentItem13) {\n  _inherits(Scoord3DContentItem, _ContentItem13);\n\n  var _super14 = _createSuper(Scoord3DContentItem);\n\n  function Scoord3DContentItem(options) {\n    var _this13;\n\n    _classCallCheck(this, Scoord3DContentItem);\n\n    _this13 = _super14.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.SCOORD3D\n    });\n\n    if (options.graphicType === undefined) {\n      throw new Error(\"Option 'graphicType' is required for Scoord3DContentItem.\");\n    }\n\n    if (!(typeof options.graphicType === \"string\" || options.graphicType instanceof String)) {\n      throw new Error(\"Option 'graphicType' must have type String.\");\n    }\n\n    if (options.graphicData === undefined) {\n      throw new Error(\"Option 'graphicData' is required for Scoord3DContentItem.\");\n    }\n\n    if (!(_typeof(options.graphicData) === \"object\" || options.graphicData instanceof Array)) {\n      throw new Error(\"Option 'graphicData' must have type Array.\");\n    }\n\n    if (Object.values(GraphicTypes3D).indexOf(options.graphicType) === -1) {\n      throw new Error(\"Invalid graphic type '\".concat(options.graphicType, \"'.\"));\n    }\n\n    if (options.graphicData[0] instanceof Array) {\n      options.graphicData = [].concat.apply([], options.graphicData);\n    }\n\n    _this13.GraphicType = options.graphicType;\n    _this13.GraphicData = options.graphicData;\n\n    if (options.frameOfReferenceUID === undefined) {\n      throw new Error(\"Option 'frameOfReferenceUID' is required for Scoord3DContentItem.\");\n    }\n\n    if (!(typeof options.frameOfReferenceUID === \"string\" || options.frameOfReferenceUID instanceof String)) {\n      throw new Error(\"Option 'frameOfReferenceUID' must have type String.\");\n    }\n\n    _this13.ReferencedFrameOfReferenceUID = options.frameOfReferenceUID;\n\n    if (\"fiducialUID\" in options) {\n      if (!(typeof options.fiducialUID === \"string\" || options.fiducialUID instanceof String)) {\n        throw new Error(\"Option 'fiducialUID' must have type String.\");\n      }\n\n      _this13.FiducialUID = fiducialUID;\n    }\n\n    return _this13;\n  }\n\n  return _createClass(Scoord3DContentItem);\n}(ContentItem);\n\nvar TcoordContentItem = /*#__PURE__*/function (_ContentItem14) {\n  _inherits(TcoordContentItem, _ContentItem14);\n\n  var _super15 = _createSuper(TcoordContentItem);\n\n  function TcoordContentItem(options) {\n    var _this14;\n\n    _classCallCheck(this, TcoordContentItem);\n\n    _this14 = _super15.call(this, {\n      name: options.name,\n      relationshipType: options.relationshipType,\n      valueType: ValueTypes.TCOORD\n    });\n\n    if (options.temporalRangeType === undefined) {\n      throw new Error(\"Option 'temporalRangeType' is required for TcoordContentItem.\");\n    }\n\n    if (Object.values(TemporalRangeTypes).indexOf(options.temporalRangeType) === -1) {\n      throw new Error(\"Invalid temporal range type '\".concat(options.temporalRangeType, \"'.\"));\n    }\n\n    if (options.referencedSamplePositions === undefined) {\n      if (!(_typeof(options.referencedSamplePositions) === \"object\" || options.referencedSamplePositions instanceof Array)) {\n        throw new Error(\"Option 'referencedSamplePositions' must have type Array.\");\n      } // TODO: ensure values are integers\n\n\n      _this14.ReferencedSamplePositions = options.referencedSamplePositions;\n    } else if (options.referencedTimeOffsets === undefined) {\n      if (!(_typeof(options.referencedTimeOffsets) === \"object\" || options.referencedTimeOffsets instanceof Array)) {\n        throw new Error(\"Option 'referencedTimeOffsets' must have type Array.\");\n      } // TODO: ensure values are floats\n\n\n      _this14.ReferencedTimeOffsets = options.referencedTimeOffsets;\n    } else if (options.referencedDateTime === undefined) {\n      if (!(_typeof(options.referencedDateTime) === \"object\" || options.referencedDateTime instanceof Array)) {\n        throw new Error(\"Option 'referencedDateTime' must have type Array.\");\n      }\n\n      _this14.ReferencedDateTime = options.referencedDateTime;\n    } else {\n      throw new Error(\"One of the following options is required for TcoordContentItem: \" + \"'referencedSamplePositions', 'referencedTimeOffsets', or \" + \"'referencedDateTime'.\");\n    }\n\n    return _this14;\n  }\n\n  return _createClass(TcoordContentItem);\n}(ContentItem);\n\nvar valueTypes = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tCodeContentItem: CodeContentItem,\n\tContainerContentItem: ContainerContentItem,\n\tContentSequence: ContentSequence$1,\n\tCompositeContentItem: CompositeContentItem,\n\tDateContentItem: DateContentItem,\n\tDateTimeContentItem: DateTimeContentItem,\n\tGraphicTypes: GraphicTypes,\n\tGraphicTypes3D: GraphicTypes3D,\n\tImageContentItem: ImageContentItem,\n\tNumContentItem: NumContentItem,\n\tPNameContentItem: PNameContentItem,\n\tPixelOriginInterpretations: PixelOriginInterpretations,\n\tRelationshipTypes: RelationshipTypes,\n\tScoordContentItem: ScoordContentItem,\n\tScoord3DContentItem: Scoord3DContentItem,\n\tTcoordContentItem: TcoordContentItem,\n\tTemporalRangeTypes: TemporalRangeTypes,\n\tTextContentItem: TextContentItem,\n\tTimeContentItem: TimeContentItem,\n\tUIDRefContentItem: UIDRefContentItem,\n\tValueTypes: ValueTypes\n});\n\nvar LongitudinalTemporalOffsetFromEvent = /*#__PURE__*/function (_NumContentItem) {\n  _inherits(LongitudinalTemporalOffsetFromEvent, _NumContentItem);\n\n  var _super = _createSuper(LongitudinalTemporalOffsetFromEvent);\n\n  function LongitudinalTemporalOffsetFromEvent(options) {\n    var _this;\n\n    _classCallCheck(this, LongitudinalTemporalOffsetFromEvent);\n\n    _this = _super.call(this, {\n      name: new CodedConcept({\n        value: \"128740\",\n        meaning: \"Longitudinal Temporal Offset from Event\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.value,\n      unit: options.unit,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n    _this.ContentSequence = new ContentSequence$1();\n    var item = new CodeContentItem({\n      name: new CodedConcept({\n        value: \"128741\",\n        meaning: \"Longitudinal Temporal Event Type\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.eventType,\n      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n    });\n\n    _this.ContentSequence.push(item);\n\n    return _this;\n  }\n\n  return _createClass(LongitudinalTemporalOffsetFromEvent);\n}(NumContentItem);\n\nvar SourceImageForRegion = /*#__PURE__*/function (_ImageContentItem) {\n  _inherits(SourceImageForRegion, _ImageContentItem);\n\n  var _super2 = _createSuper(SourceImageForRegion);\n\n  function SourceImageForRegion(options) {\n    _classCallCheck(this, SourceImageForRegion);\n\n    return _super2.call(this, {\n      name: new CodedConcept({\n        value: \"121324\",\n        meaning: \"Source Image\",\n        schemeDesignator: \"DCM\"\n      }),\n      referencedSOPClassUID: options.referencedSOPClassUID,\n      referencedSOPInstanceUID: options.referencedSOPInstanceUID,\n      referencedFrameNumbers: options.referencedFrameNumbers,\n      relationshipType: RelationshipTypes.SELECTED_FROM\n    });\n  }\n\n  return _createClass(SourceImageForRegion);\n}(ImageContentItem);\n\nvar SourceImageForSegmentation = /*#__PURE__*/function (_ImageContentItem2) {\n  _inherits(SourceImageForSegmentation, _ImageContentItem2);\n\n  var _super3 = _createSuper(SourceImageForSegmentation);\n\n  function SourceImageForSegmentation(options) {\n    _classCallCheck(this, SourceImageForSegmentation);\n\n    return _super3.call(this, {\n      name: new CodedConcept({\n        value: \"121233\",\n        meaning: \"Source Image for Segmentation\",\n        schemeDesignator: \"DCM\"\n      }),\n      referencedSOPClassUID: options.referencedSOPClassUID,\n      referencedSOPInstanceUID: options.referencedSOPInstanceUID,\n      referencedFrameNumbers: options.referencedFrameNumbers,\n      relationshipType: RelationshipTypes.SELECTED_FROM\n    });\n  }\n\n  return _createClass(SourceImageForSegmentation);\n}(ImageContentItem);\n\nvar SourceSeriesForSegmentation = /*#__PURE__*/function (_UIDRefContentItem) {\n  _inherits(SourceSeriesForSegmentation, _UIDRefContentItem);\n\n  var _super4 = _createSuper(SourceSeriesForSegmentation);\n\n  function SourceSeriesForSegmentation(options) {\n    _classCallCheck(this, SourceSeriesForSegmentation);\n\n    return _super4.call(this, {\n      name: new CodedConcept({\n        value: \"121232\",\n        meaning: \"Source Series for Segmentation\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.referencedSeriesInstanceUID,\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n  }\n\n  return _createClass(SourceSeriesForSegmentation);\n}(UIDRefContentItem);\n\nvar ImageRegion = /*#__PURE__*/function (_ScoordContentItem) {\n  _inherits(ImageRegion, _ScoordContentItem);\n\n  var _super5 = _createSuper(ImageRegion);\n\n  function ImageRegion(options) {\n    var _this2;\n\n    _classCallCheck(this, ImageRegion);\n\n    _this2 = _super5.call(this, {\n      name: new CodedConcept({\n        value: \"111030\",\n        meaning: \"Image Region\",\n        schemeDesignator: \"DCM\"\n      }),\n      graphicType: options.graphicType,\n      graphicData: options.graphicData,\n      pixelOriginInterpretation: options.pixelOriginInterpretation,\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n\n    if (options.graphicType === GraphicTypes.MULTIPOINT) {\n      throw new Error(\"Graphic type 'MULTIPOINT' is not valid for region.\");\n    }\n\n    if (options.sourceImage === undefined) {\n      throw Error(\"Option 'sourceImage' is required for ImageRegion.\");\n    }\n\n    if (!(options.sourceImage || options.sourceImage.constructor === SourceImageForRegion)) {\n      throw new Error(\"Option 'sourceImage' of ImageRegion must have type \" + \"SourceImageForRegion.\");\n    }\n\n    _this2.ContentSequence = new ContentSequence$1();\n\n    _this2.ContentSequence.push(options.sourceImage);\n\n    return _this2;\n  }\n\n  return _createClass(ImageRegion);\n}(ScoordContentItem);\n\nvar ImageRegion3D = /*#__PURE__*/function (_Scoord3DContentItem) {\n  _inherits(ImageRegion3D, _Scoord3DContentItem);\n\n  var _super6 = _createSuper(ImageRegion3D);\n\n  function ImageRegion3D(options) {\n    var _this3;\n\n    _classCallCheck(this, ImageRegion3D);\n\n    _this3 = _super6.call(this, {\n      name: new CodedConcept({\n        value: \"111030\",\n        meaning: \"Image Region\",\n        schemeDesignator: \"DCM\"\n      }),\n      graphicType: options.graphicType,\n      graphicData: options.graphicData,\n      frameOfReferenceUID: options.frameOfReferenceUID,\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n\n    if (options.graphicType === GraphicTypes3D.MULTIPOINT) {\n      throw new Error(\"Graphic type 'MULTIPOINT' is not valid for region.\");\n    }\n\n    if (options.graphicType === GraphicTypes3D.ELLIPSOID) {\n      throw new Error(\"Graphic type 'ELLIPSOID' is not valid for region.\");\n    }\n\n    return _this3;\n  }\n\n  return _createClass(ImageRegion3D);\n}(Scoord3DContentItem);\n\nvar VolumeSurface = /*#__PURE__*/function (_Scoord3DContentItem2) {\n  _inherits(VolumeSurface, _Scoord3DContentItem2);\n\n  var _super7 = _createSuper(VolumeSurface);\n\n  function VolumeSurface(options) {\n    var _this4;\n\n    _classCallCheck(this, VolumeSurface);\n\n    _this4 = _super7.call(this, {\n      name: new CodedConcept({\n        value: \"121231\",\n        meaning: \"Volume Surface\",\n        schemeDesignator: \"DCM\"\n      }),\n      graphicType: options.graphicType,\n      graphicData: options.graphicData,\n      frameOfFeferenceUID: options.frameOfFeferenceUID,\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n\n    if (options.graphicType !== GraphicTypes3D.ELLIPSOID) {\n      throw new Error(\"Graphic type for volume surface must be 'ELLIPSOID'.\");\n    }\n\n    _this4.ContentSequence = new ContentSequence$1();\n\n    if (options.sourceImages) {\n      options.sourceImages.forEach(function (image) {\n        if (!(image || image.constructor === SourceImageForRegion)) {\n          throw new Error(\"Items of option 'sourceImages' of VolumeSurface \" + \"must have type SourceImageForRegion.\");\n        }\n\n        _this4.ContentSequence.push(image);\n      });\n    } else if (options.sourceSeries) {\n      if (!(options.sourceSeries || options.sourceSeries.constructor === SourceSeriesForRegion)) {\n        throw new Error(\"Option 'sourceSeries' of VolumeSurface \" + \"must have type SourceSeriesForRegion.\");\n      }\n\n      _this4.ContentSequence.push(options.sourceSeries);\n    } else {\n      throw new Error(\"One of the following two options must be provided: \" + \"'sourceImage' or 'sourceSeries'.\");\n    }\n\n    return _this4;\n  }\n\n  return _createClass(VolumeSurface);\n}(Scoord3DContentItem);\n\nvar ReferencedRealWorldValueMap = /*#__PURE__*/function (_CompositeContentItem) {\n  _inherits(ReferencedRealWorldValueMap, _CompositeContentItem);\n\n  var _super8 = _createSuper(ReferencedRealWorldValueMap);\n\n  function ReferencedRealWorldValueMap(options) {\n    _classCallCheck(this, ReferencedRealWorldValueMap);\n\n    return _super8.call(this, {\n      name: new CodedConcept({\n        value: \"126100\",\n        meaning: \"Real World Value Map used for measurement\",\n        schemeDesignator: \"DCM\"\n      }),\n      referencedSOPClassUID: option.referencedSOPClassUID,\n      referencedSOPInstanceUID: options.referencedSOPInstanceUID,\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n  }\n\n  return _createClass(ReferencedRealWorldValueMap);\n}(CompositeContentItem);\n\nvar FindingSite = /*#__PURE__*/function (_CodeContentItem) {\n  _inherits(FindingSite, _CodeContentItem);\n\n  var _super9 = _createSuper(FindingSite);\n\n  function FindingSite(options) {\n    var _this5;\n\n    _classCallCheck(this, FindingSite);\n\n    _this5 = _super9.call(this, {\n      name: new CodedConcept({\n        value: \"363698007\",\n        meaning: \"Finding Site\",\n        schemeDesignator: \"SCT\"\n      }),\n      value: options.anatomicLocation,\n      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n    });\n    _this5.ContentSequence = new ContentSequence$1();\n\n    if (options.laterality) {\n      var item = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"272741003\",\n          meaning: \"Laterality\",\n          schemeDesignator: \"SCT\"\n        }),\n        value: options.laterality,\n        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n      });\n\n      _this5.ContentSequence.push(item);\n    }\n\n    if (options.topographicalModifier) {\n      var _item = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"106233006\",\n          meaning: \"Topographical Modifier\",\n          schemeDesignator: \"SCT\"\n        }),\n        value: options.topographicalModifier,\n        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n      });\n\n      _this5.ContentSequence.push(_item);\n    }\n\n    return _this5;\n  }\n\n  return _createClass(FindingSite);\n}(CodeContentItem);\n\nvar ReferencedSegmentationFrame = /*#__PURE__*/function (_ContentSequence) {\n  _inherits(ReferencedSegmentationFrame, _ContentSequence);\n\n  var _super10 = _createSuper(ReferencedSegmentationFrame);\n\n  function ReferencedSegmentationFrame(options) {\n    var _this6;\n\n    _classCallCheck(this, ReferencedSegmentationFrame);\n\n    if (options.sopClassUID === undefined) {\n      throw new Error(\"Option 'sopClassUID' is required for ReferencedSegmentationFrame.\");\n    }\n\n    if (options.sopInstanceUID === undefined) {\n      throw new Error(\"Option 'sopInstanceUID' is required for ReferencedSegmentationFrame.\");\n    }\n\n    if (options.frameNumber === undefined) {\n      throw new Error(\"Option 'frameNumber' is required for ReferencedSegmentationFrame.\");\n    }\n\n    if (options.segmentNumber === undefined) {\n      throw new Error(\"Option 'segmentNumber' is required for ReferencedSegmentationFrame.\");\n    }\n\n    if (options.sourceImage === undefined) {\n      throw new Error(\"Option 'sourceImage' is required for ReferencedSegmentationFrame.\");\n    }\n\n    _this6 = _super10.call(this);\n    var segmentationItem = ImageContentItem({\n      name: new CodedConcept({\n        value: \"121214\",\n        meaning: \"Referenced Segmentation Frame\",\n        schemeDesignator: \"DCM\"\n      }),\n      referencedSOPClassUid: options.sopClassUid,\n      referencedSOPInstanceUid: options.sopInstanceUid,\n      referencedFrameNumber: options.frameNumber,\n      referencedSegmentNumber: options.segmentNumber\n    });\n\n    _this6.push(segmentationItem);\n\n    if (options.sourceImage.constructor !== SourceImageForSegmentation) {\n      throw new Error(\"Option 'sourceImage' must have type SourceImageForSegmentation.\");\n    }\n\n    _this6.push(sourceImage);\n\n    return _this6;\n  }\n\n  return _createClass(ReferencedSegmentationFrame);\n}(ContentSequence$1);\n\nvar ReferencedSegmentation = /*#__PURE__*/function (_ContentSequence2) {\n  _inherits(ReferencedSegmentation, _ContentSequence2);\n\n  var _super11 = _createSuper(ReferencedSegmentation);\n\n  function ReferencedSegmentation(options) {\n    var _this7;\n\n    _classCallCheck(this, ReferencedSegmentation);\n\n    if (options.sopClassUID === undefined) {\n      throw new Error(\"Option 'sopClassUID' is required for ReferencedSegmentation.\");\n    }\n\n    if (options.sopInstanceUID === undefined) {\n      throw new Error(\"Option 'sopInstanceUID' is required for ReferencedSegmentation.\");\n    }\n\n    if (options.frameNumbers === undefined) {\n      throw new Error(\"Option 'frameNumbers' is required for ReferencedSegmentation.\");\n    }\n\n    if (options.segmentNumber === undefined) {\n      throw new Error(\"Option 'segmentNumber' is required for ReferencedSegmentation.\");\n    }\n\n    _this7 = _super11.call(this);\n    var segmentationItem = new ImageContentItem({\n      name: new CodedConcept({\n        value: \"121191\",\n        meaning: \"Referenced Segment\",\n        schemeDesignator: \"DCM\"\n      }),\n      referencedSOPClassUid: options.sopClassUid,\n      referencedSOPInstanceUid: options.sopInstanceUid,\n      referencedFrameNumber: options.frameNumbers,\n      referencedSegmentNumber: options.segmentNumber\n    });\n\n    _this7.push(segmentationItem);\n\n    if (options.sourceImages !== undefined) {\n      options.sourceImages.forEach(function (image) {\n        if (!image || image.constructor !== SourceImageForSegmentation) {\n          throw new Error(\"Items of option 'sourceImages' must have type \" + \"SourceImageForSegmentation.\");\n        }\n\n        _this7.push(image);\n      });\n    } else if (options.sourceSeries !== undefined) {\n      if (options.sourceSeries.constructor !== SourceSeriesForSegmentation) {\n        throw new Error(\"Option 'sourceSeries' must have type SourceSeriesForSegmentation.\");\n      }\n\n      _this7.push(sourceSeries);\n    } else {\n      throw new Error(\"One of the following two options must be provided: \" + \"'sourceImages' or 'sourceSeries'.\");\n    }\n\n    return _this7;\n  }\n\n  return _createClass(ReferencedSegmentation);\n}(ContentSequence$1);\n\nvar contentItems = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tFindingSite: FindingSite,\n\tLongitudinalTemporalOffsetFromEvent: LongitudinalTemporalOffsetFromEvent,\n\tReferencedRealWorldValueMap: ReferencedRealWorldValueMap,\n\tImageRegion: ImageRegion,\n\tImageRegion3D: ImageRegion3D,\n\tReferencedSegmentation: ReferencedSegmentation,\n\tReferencedSegmentationFrame: ReferencedSegmentationFrame,\n\tVolumeSurface: VolumeSurface,\n\tSourceImageForRegion: SourceImageForRegion,\n\tSourceImageForSegmentation: SourceImageForSegmentation,\n\tSourceSeriesForSegmentation: SourceSeriesForSegmentation\n});\n\nvar Template = /*#__PURE__*/function (_ContentSequence) {\n  _inherits(Template, _ContentSequence);\n\n  var _super = _createSuper(Template);\n\n  function Template() {\n    _classCallCheck(this, Template);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _super.call.apply(_super, [this].concat(args));\n  }\n\n  return _createClass(Template);\n}(ContentSequence$1);\n\nvar Measurement = /*#__PURE__*/function (_Template) {\n  _inherits(Measurement, _Template);\n\n  var _super2 = _createSuper(Measurement);\n\n  function Measurement(options) {\n    var _valueItem$ContentSeq;\n\n    var _this;\n\n    _classCallCheck(this, Measurement);\n\n    _this = _super2.call(this);\n    var valueItem = new NumContentItem({\n      name: options.name,\n      value: options.value,\n      unit: options.unit,\n      qualifier: options.qualifier,\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n    valueItem.ContentSequence = new ContentSequence$1();\n\n    if (options.trackingIdentifier === undefined) {\n      throw new Error(\"Option 'trackingIdentifier' is required for Measurement.\");\n    }\n\n    if (options.trackingIdentifier.constructor === TrackingIdentifier) {\n      throw new Error(\"Option 'trackingIdentifier' must have type TrackingIdentifier.\");\n    }\n\n    (_valueItem$ContentSeq = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq, _toConsumableArray(options.trackingIdentifier));\n\n    if (options.method !== undefined) {\n      var methodItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"370129005\",\n          meaning: \"Measurement Method\",\n          schemeDesignator: \"SCT\"\n        }),\n        value: options.method,\n        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n      });\n      valueItem.ContentSequence.push(methodItem);\n    }\n\n    if (options.derivation !== undefined) {\n      var derivationItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121401\",\n          meaning: \"Derivation\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.derivation,\n        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n      });\n      valueItem.ContentSequence.push(derivationItem);\n    }\n\n    if (options.findingSites !== undefined) {\n      if (!(_typeof(options.findingSites) === \"object\" || options.findingSites instanceof Array)) {\n        throw new Error(\"Option 'findingSites' must have type Array.\");\n      }\n\n      options.findingSites.forEach(function (site) {\n        if (!site || site.constructor !== FindingSite) {\n          throw new Error(\"Items of option 'findingSites' must have type FindingSite.\");\n        }\n\n        valueItem.ContentSequence.push(site);\n      });\n    }\n\n    if (options.properties !== undefined) {\n      var _valueItem$ContentSeq2;\n\n      if (options.properties.constructor !== MeasurementProperties) {\n        throw new Error(\"Option 'properties' must have type MeasurementProperties.\");\n      }\n\n      (_valueItem$ContentSeq2 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq2, _toConsumableArray(options.properties));\n    }\n\n    if (options.referencedRegions !== undefined) {\n      if (!(_typeof(options.referencedRegions) === \"object\" || options.referencedRegions instanceof Array)) {\n        throw new Error(\"Option 'referencedRegions' must have type Array.\");\n      }\n\n      options.referencedRegions.forEach(function (region) {\n        if (!region || region.constructor !== ImageRegion && region.constructor !== ImageRegion3D) {\n          throw new Error(\"Items of option 'referencedRegion' must have type \" + \"ImageRegion or ImageRegion3D.\");\n        }\n\n        valueItem.ContentSequence.push(region);\n      });\n    } else if (options.referencedVolume !== undefined) {\n      if (options.referencedVolume.constructor !== VolumeSurface) {\n        throw new Error(\"Option 'referencedVolume' must have type VolumeSurface.\");\n      }\n\n      valueItem.ContentSequence.push(options.referencedVolume);\n    } else if (options.referencedSegmentation !== undefined) {\n      if (options.referencedSegmentation.constructor !== ReferencedSegmentation && options.referencedSegmentation.constructor !== ReferencedSegmentationFrame) {\n        throw new Error(\"Option 'referencedSegmentation' must have type \" + \"ReferencedSegmentation or ReferencedSegmentationFrame.\");\n      }\n\n      valueItem.ContentSequence.push(options.referencedSegmentation);\n    }\n\n    if (options.referencedRealWorldValueMap !== undefined) {\n      if (options.referencedRealWorldValueMap.constructor !== ReferencedRealWorldValueMap) {\n        throw new Error(\"Option 'referencedRealWorldValueMap' must have type \" + \"ReferencedRealWorldValueMap.\");\n      }\n\n      valueItem.ContentSequence.push(options.referencedRealWorldValueMap);\n    }\n\n    if (options.algorithmId !== undefined) {\n      var _valueItem$ContentSeq3;\n\n      if (options.algorithmId.constructor !== AlgorithmIdentification) {\n        throw new Error(\"Option 'algorithmId' must have type AlgorithmIdentification.\");\n      }\n\n      (_valueItem$ContentSeq3 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq3, _toConsumableArray(options.algorithmId));\n    }\n\n    _this.push(valueItem);\n\n    return _this;\n  }\n\n  return _createClass(Measurement);\n}(Template);\n\nvar MeasurementProperties = /*#__PURE__*/function (_Template2) {\n  _inherits(MeasurementProperties, _Template2);\n\n  var _super3 = _createSuper(MeasurementProperties);\n\n  function MeasurementProperties(options) {\n    var _this2;\n\n    _classCallCheck(this, MeasurementProperties);\n\n    _this2 = _super3.call(this);\n\n    if (options.normality !== undefined) {\n      var normalityItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121402\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Normality\"\n        }),\n        value: options.normality,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this2.push(normalityItem);\n    }\n\n    if (options.measurementStatisticalProperties !== undefined) {\n      var _this3;\n\n      if (options.measurementStatisticalProperties.constructor !== MeasurementStatisticalProperties) {\n        throw new Error(\"Option 'measurmentStatisticalProperties' must have type \" + \"MeasurementStatisticalProperties.\");\n      }\n\n      (_this3 = _this2).push.apply(_this3, _toConsumableArray(measurementStatisticalProperties));\n    }\n\n    if (options.normalRangeProperties !== undefined) {\n      var _this4;\n\n      if (options.normalRangeProperties.constructor !== NormalRangeProperties) {\n        throw new Error(\"Option 'normalRangeProperties' must have type NormalRangeProperties.\");\n      }\n\n      (_this4 = _this2).push.apply(_this4, _toConsumableArray(normalRangeProperties));\n    }\n\n    if (options.levelOfSignificance !== undefined) {\n      var levelOfSignificanceItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121403\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Level of Significance\"\n        }),\n        value: options.levelOfSignificance,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this2.push(levelOfSignificanceItem);\n    }\n\n    if (options.selectionStatus !== undefined) {\n      var selectionStatusItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121404\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Selection Status\"\n        }),\n        value: options.selectionStatus,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this2.push(selectionStatusItem);\n    }\n\n    if (options.upperMeasurementUncertainty !== undefined) {\n      var upperMeasurementUncertaintyItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"R-00364\",\n          schemeDesignator: \"SRT\",\n          meaning: \"Range of Upper Measurement Uncertainty\"\n        }),\n        value: options.upperMeasurementUncertainty,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this2.push(upperMeasurementUncertaintyItem);\n    }\n\n    if (options.lowerMeasurementUncertainty !== undefined) {\n      var lowerMeasurementUncertaintyItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"R-00362\",\n          schemeDesignator: \"SRT\",\n          meaning: \"Range of Lower Measurement Uncertainty\"\n        }),\n        value: options.lowerMeasurementUncertainty,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this2.push(lowerMeasurementUncertaintyItem);\n    }\n\n    return _this2;\n  }\n\n  return _createClass(MeasurementProperties);\n}(Template);\n\nvar MeasurementStatisticalProperties = /*#__PURE__*/function (_Template3) {\n  _inherits(MeasurementStatisticalProperties, _Template3);\n\n  var _super4 = _createSuper(MeasurementStatisticalProperties);\n\n  function MeasurementStatisticalProperties(options) {\n    var _this5;\n\n    _classCallCheck(this, MeasurementStatisticalProperties);\n\n    _this5 = _super4.call(this);\n\n    if (options.values === undefined) {\n      throw new Error(\"Option 'values' is required for MeasurementStatisticalProperties.\");\n    }\n\n    if (!(_typeof(options.values) === \"object\" || options.values instanceof Array)) {\n      throw new Error(\"Option 'values' must have type Array.\");\n    }\n\n    options.values.forEach(function (value) {\n      if (!options.concept || options.concept.constructor !== NumContentItem) {\n        throw new Error(\"Items of option 'values' must have type NumContentItem.\");\n      }\n\n      _this5.push(value);\n    });\n\n    if (options.description !== undefined) {\n      var descriptionItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121405\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Population Description\"\n        }),\n        value: options.authority,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this5.push(authorityItem);\n    }\n\n    if (options.authority !== undefined) {\n      var _authorityItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121406\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Population Authority\"\n        }),\n        value: options.authority,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this5.push(_authorityItem);\n    }\n\n    return _this5;\n  }\n\n  return _createClass(MeasurementStatisticalProperties);\n}(Template);\n\nvar NormalRangeProperties = /*#__PURE__*/function (_Template4) {\n  _inherits(NormalRangeProperties, _Template4);\n\n  var _super5 = _createSuper(NormalRangeProperties);\n\n  function NormalRangeProperties(options) {\n    var _this6;\n\n    _classCallCheck(this, NormalRangeProperties);\n\n    _this6 = _super5.call(this);\n\n    if (options.values === undefined) {\n      throw new Error(\"Option 'values' is required for NormalRangeProperties.\");\n    }\n\n    if (!(_typeof(options.values) === \"object\" || options.values instanceof Array)) {\n      throw new Error(\"Option 'values' must have type Array.\");\n    }\n\n    options.values.forEach(function (value) {\n      if (!options.concept || options.concept.constructor !== NumContentItem) {\n        throw new Error(\"Items of option 'values' must have type NumContentItem.\");\n      }\n\n      _this6.push(value);\n    });\n\n    if (options.description !== undefined) {\n      var descriptionItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121407\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Normal Range Description\"\n        }),\n        value: options.authority,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this6.push(authorityItem);\n    }\n\n    if (options.authority !== undefined) {\n      var _authorityItem2 = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121408\",\n          schemeDesignator: \"DCM\",\n          meaning: \"Normal Range Authority\"\n        }),\n        value: options.authority,\n        relationshipType: RelationshipTypes.HAS_PROPERTIES\n      });\n\n      _this6.push(_authorityItem2);\n    }\n\n    return _this6;\n  }\n\n  return _createClass(NormalRangeProperties);\n}(Template);\n\nvar ObservationContext = /*#__PURE__*/function (_Template5) {\n  _inherits(ObservationContext, _Template5);\n\n  var _super6 = _createSuper(ObservationContext);\n\n  function ObservationContext(options) {\n    var _this8;\n\n    var _this7;\n\n    _classCallCheck(this, ObservationContext);\n\n    _this7 = _super6.call(this);\n\n    if (options.observerPersonContext === undefined) {\n      throw new Error(\"Option 'observerPersonContext' is required for ObservationContext.\");\n    }\n\n    if (options.observerPersonContext.constructor !== ObserverContext) {\n      throw new Error(\"Option 'observerPersonContext' must have type ObserverContext\");\n    }\n\n    (_this8 = _this7).push.apply(_this8, _toConsumableArray(options.observerPersonContext));\n\n    if (options.observerDeviceContext !== undefined) {\n      var _this9;\n\n      if (options.observerDeviceContext.constructor !== ObserverContext) {\n        throw new Error(\"Option 'observerDeviceContext' must have type ObserverContext\");\n      }\n\n      (_this9 = _this7).push.apply(_this9, _toConsumableArray(options.observerDeviceContext));\n    }\n\n    if (options.subjectContext !== undefined) {\n      var _this10;\n\n      if (options.subjectContext.constructor !== SubjectContext) {\n        throw new Error(\"Option 'subjectContext' must have type SubjectContext\");\n      }\n\n      (_this10 = _this7).push.apply(_this10, _toConsumableArray(options.subjectContext));\n    }\n\n    return _this7;\n  }\n\n  return _createClass(ObservationContext);\n}(Template);\n\nvar ObserverContext = /*#__PURE__*/function (_Template6) {\n  _inherits(ObserverContext, _Template6);\n\n  var _super7 = _createSuper(ObserverContext);\n\n  function ObserverContext(options) {\n    var _this12;\n\n    var _this11;\n\n    _classCallCheck(this, ObserverContext);\n\n    _this11 = _super7.call(this);\n\n    if (options.observerType === undefined) {\n      throw new Error(\"Option 'observerType' is required for ObserverContext.\");\n    } else {\n      if (options.observerType.constructor !== Code && options.observerType.constructor !== CodedConcept) {\n        throw new Error(\"Option 'observerType' must have type Code or CodedConcept.\");\n      }\n    }\n\n    var observerTypeItem = new CodeContentItem({\n      name: new CodedConcept({\n        value: \"121005\",\n        meaning: \"Observer Type\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.observerType,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this11.push(observerTypeItem);\n\n    if (options.observerIdentifyingAttributes === undefined) {\n      throw new Error(\"Option 'observerIdentifyingAttributes' is required for ObserverContext.\");\n    } // FIXME\n\n\n    var person = new CodedConcept({\n      value: \"121006\",\n      schemeDesignator: \"DCM\",\n      meaning: \"Person\"\n    });\n    var device = new CodedConcept({\n      value: \"121007\",\n      schemeDesignator: \"DCM\",\n      meaning: \"Device\"\n    });\n\n    if (person.equals(options.observerType)) {\n      if (options.observerIdentifyingAttributes.constructor !== PersonObserverIdentifyingAttributes) {\n        throw new Error(\"Option 'observerIdentifyingAttributes' must have type \" + \"PersonObserverIdentifyingAttributes for 'Person' observer type.\");\n      }\n    } else if (device.equals(options.observerType)) {\n      if (options.observerIdentifyingAttributes.constructor !== DeviceObserverIdentifyingAttributes) {\n        throw new Error(\"Option 'observerIdentifyingAttributes' must have type \" + \"DeviceObserverIdentifyingAttributes for 'Device' observer type.\");\n      }\n    } else {\n      throw new Error(\"Option 'oberverType' must be either 'Person' or 'Device'.\");\n    }\n\n    (_this12 = _this11).push.apply(_this12, _toConsumableArray(options.observerIdentifyingAttributes));\n\n    return _this11;\n  }\n\n  return _createClass(ObserverContext);\n}(Template);\n\nvar PersonObserverIdentifyingAttributes = /*#__PURE__*/function (_Template7) {\n  _inherits(PersonObserverIdentifyingAttributes, _Template7);\n\n  var _super8 = _createSuper(PersonObserverIdentifyingAttributes);\n\n  function PersonObserverIdentifyingAttributes(options) {\n    var _this13;\n\n    _classCallCheck(this, PersonObserverIdentifyingAttributes);\n\n    _this13 = _super8.call(this);\n\n    if (options.name === undefined) {\n      throw new Error(\"Option 'name' is required for PersonObserverIdentifyingAttributes.\");\n    }\n\n    var nameItem = new PNameContentItem({\n      name: new CodedConcept({\n        value: \"121008\",\n        meaning: \"Person Observer Name\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.name,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this13.push(nameItem);\n\n    if (options.loginName !== undefined) {\n      var loginNameItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"128774\",\n          meaning: \"Person Observer's Login Name\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.loginName,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this13.push(loginNameItem);\n    }\n\n    if (options.organizationName !== undefined) {\n      var organizationNameItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121009\",\n          meaning: \"Person Observer's Organization Name\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.organizationName,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this13.push(organizationNameItem);\n    }\n\n    if (options.roleInOrganization !== undefined) {\n      var roleInOrganizationItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121010\",\n          meaning: \"Person Observer's Role in the Organization\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.roleInOrganization,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this13.push(roleInOrganizationItem);\n    }\n\n    if (options.roleInProcedure !== undefined) {\n      var roleInProcedureItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121011\",\n          meaning: \"Person Observer's Role in this Procedure\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.roleInProcedure,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this13.push(roleInProcedureItem);\n    }\n\n    return _this13;\n  }\n\n  return _createClass(PersonObserverIdentifyingAttributes);\n}(Template);\n\nvar DeviceObserverIdentifyingAttributes = /*#__PURE__*/function (_Template8) {\n  _inherits(DeviceObserverIdentifyingAttributes, _Template8);\n\n  var _super9 = _createSuper(DeviceObserverIdentifyingAttributes);\n\n  function DeviceObserverIdentifyingAttributes(options) {\n    var _this14;\n\n    _classCallCheck(this, DeviceObserverIdentifyingAttributes);\n\n    _this14 = _super9.call(this);\n\n    if (options.uid === undefined) {\n      throw new Error(\"Option 'uid' is required for DeviceObserverIdentifyingAttributes.\");\n    }\n\n    var deviceObserverItem = new UIDRefContentItem({\n      name: new CodedConcept({\n        value: \"121012\",\n        meaning: \"Device Observer UID\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.uid,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this14.push(deviceObserverItem);\n\n    if (options.manufacturerName !== undefined) {\n      var manufacturerNameItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121013\",\n          meaning: \"Device Observer Manufacturer\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.manufacturerName,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this14.push(manufacturerNameItem);\n    }\n\n    if (options.modelName !== undefined) {\n      var modelNameItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121015\",\n          meaning: \"Device Observer Model Name\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.modelName,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this14.push(modelNameItem);\n    }\n\n    if (options.serialNumber !== undefined) {\n      var serialNumberItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121016\",\n          meaning: \"Device Observer Serial Number\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.serialNumber,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this14.push(serialNumberItem);\n    }\n\n    if (options.physicalLocation !== undefined) {\n      var physicalLocationItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121017\",\n          meaning: \"Device Observer Physical Location During Observation\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.physicalLocation,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this14.push(physicalLocationItem);\n    }\n\n    if (options.roleInProcedure !== undefined) {\n      var roleInProcedureItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"113876\",\n          meaning: \"Device Role in Procedure\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.roleInProcedure,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this14.push(roleInProcedureItem);\n    }\n\n    return _this14;\n  }\n\n  return _createClass(DeviceObserverIdentifyingAttributes);\n}(Template);\n\nvar SubjectContext = /*#__PURE__*/function (_Template9) {\n  _inherits(SubjectContext, _Template9);\n\n  var _super10 = _createSuper(SubjectContext);\n\n  function SubjectContext(options) {\n    var _this16;\n\n    var _this15;\n\n    _classCallCheck(this, SubjectContext);\n\n    _this15 = _super10.call(this);\n\n    if (options.subjectClass === undefined) {\n      throw new Error(\"Option 'subjectClass' is required for SubjectContext.\");\n    }\n\n    if (options.subjectClassSpecificContext === undefined) {\n      throw new Error(\"Option 'subjectClassSpecificContext' is required for SubjectContext.\");\n    }\n\n    var subjectClassItem = new CodeContentItem({\n      name: new CodedConcept({\n        value: \"121024\",\n        meaning: \"Subject Class\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.subjectClass,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this15.push(subjectClassItem);\n\n    var fetus = new CodedConcept({\n      value: \"121026 \",\n      schemeDesignator: \"DCM\",\n      meaning: \"Fetus\"\n    });\n    var specimen = new CodedConcept({\n      value: \"121027\",\n      schemeDesignator: \"DCM\",\n      meaning: \"Specimen\"\n    });\n    var device = new CodedConcept({\n      value: \"121192\",\n      schemeDesignator: \"DCM\",\n      meaning: \"Device Subject\"\n    });\n\n    if (fetus.equals(options.subjectClass)) {\n      if (options.subjectClassSpecificContext.constructor !== SubjectContextFetus) {\n        throw new Error(\"Option 'subjectClass' must have type \" + \"SubjectContextFetus for 'Fetus' subject class.\");\n      }\n    } else if (specimen.equals(options.subjectClass)) {\n      if (options.subjectClassSpecificContext.constructor !== SubjectContextSpecimen) {\n        throw new Error(\"Option 'subjectClass' must have type \" + \"SubjectContextSpecimen for 'Specimen' subject class.\");\n      }\n    } else if (device.equals(options.subjectClass)) {\n      if (options.subjectClassSpecificContext.constructor !== SubjectContextDevice) {\n        throw new Error(\"Option 'subjectClass' must have type \" + \"SubjectContextDevice for 'Device' subject class.\");\n      }\n    } else {\n      throw new Error(\"Option 'subjectClass' must be either 'Fetus', 'Specimen', or 'Device'.\");\n    }\n\n    (_this16 = _this15).push.apply(_this16, _toConsumableArray(options.subjectClassSpecificContext));\n\n    return _this15;\n  }\n\n  return _createClass(SubjectContext);\n}(Template);\n\nvar SubjectContextFetus = /*#__PURE__*/function (_Template10) {\n  _inherits(SubjectContextFetus, _Template10);\n\n  var _super11 = _createSuper(SubjectContextFetus);\n\n  function SubjectContextFetus(options) {\n    var _this17;\n\n    _classCallCheck(this, SubjectContextFetus);\n\n    _this17 = _super11.call(this);\n\n    if (options.subjectID === undefined) {\n      throw new Error(\"Option 'subjectID' is required for SubjectContextFetus.\");\n    }\n\n    var subjectIdItem = new TextContentItem({\n      name: new CodedConcept({\n        value: \"121030\",\n        meaning: \"Subject ID\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.subjectID,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this17.push(subjectIdItem);\n\n    return _this17;\n  }\n\n  return _createClass(SubjectContextFetus);\n}(Template);\n\nvar SubjectContextSpecimen = /*#__PURE__*/function (_Template11) {\n  _inherits(SubjectContextSpecimen, _Template11);\n\n  var _super12 = _createSuper(SubjectContextSpecimen);\n\n  function SubjectContextSpecimen(options) {\n    var _this18;\n\n    _classCallCheck(this, SubjectContextSpecimen);\n\n    _this18 = _super12.call(this);\n\n    if (options.uid === undefined) {\n      throw new Error(\"Option 'uid' is required for SubjectContextSpecimen.\");\n    }\n\n    var specimenUidItem = new UIDRefContentItem({\n      name: new CodedConcept({\n        value: \"121039\",\n        meaning: \"Specimen UID\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.uid,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this18.push(specimenUidItem);\n\n    if (options.identifier !== undefined) {\n      var specimenIdentifierItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121041\",\n          meaning: \"Specimen Identifier\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.identifier,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this18.push(specimenIdentifierItem);\n    }\n\n    if (options.containerIdentifier !== undefined) {\n      var containerIdentifierItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"111700\",\n          meaning: \"Specimen Container Identifier\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.containerIdentifier,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this18.push(containerIdentifierItem);\n    }\n\n    if (options.specimenType !== undefined) {\n      var specimenTypeItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"R-00254\",\n          meaning: \"Specimen Type\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.specimenType,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this18.push(specimenTypeItem);\n    }\n\n    return _this18;\n  }\n\n  return _createClass(SubjectContextSpecimen);\n}(Template);\n\nvar SubjectContextDevice = /*#__PURE__*/function (_Template12) {\n  _inherits(SubjectContextDevice, _Template12);\n\n  var _super13 = _createSuper(SubjectContextDevice);\n\n  function SubjectContextDevice(options) {\n    var _this19;\n\n    _classCallCheck(this, SubjectContextDevice);\n\n    if (options.name === undefined) {\n      throw new Error(\"Option 'name' is required for SubjectContextDevice.\");\n    }\n\n    var deviceNameItem = new TextContentItem({\n      name: new CodedConcept({\n        value: \"121193\",\n        meaning: \"Device Subject Name\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.name,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this19.push(deviceNameItem);\n\n    if (options.uid !== undefined) {\n      var deviceUidItem = new UIDRefContentItem({\n        name: new CodedConcept({\n          value: \"121198\",\n          meaning: \"Device Subject UID\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.uid,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this19.push(deviceUidItem);\n    }\n\n    if (options.manufacturerName !== undefined) {\n      var manufacturerNameItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121194\",\n          meaning: \"Device Subject Manufacturer\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.manufacturerName,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this19.push(manufacturerNameItem);\n    }\n\n    if (options.modelName !== undefined) {\n      var modelNameItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121195\",\n          meaning: \"Device Subject Model Name\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.modelName,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this19.push(modelNameItem);\n    }\n\n    if (options.serialNumber !== undefined) {\n      var serialNumberItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121196\",\n          meaning: \"Device Subject Serial Number\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.serialNumber,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this19.push(serialNumberItem);\n    }\n\n    if (options.physicalLocation !== undefined) {\n      var physicalLocationItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"121197\",\n          meaning: \"Device Subject Physical Location During Observation\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.physicalLocation,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this19.push(physicalLocationItem);\n    }\n\n    return _possibleConstructorReturn(_this19);\n  }\n\n  return _createClass(SubjectContextDevice);\n}(Template);\n\nvar LanguageOfContentItemAndDescendants = /*#__PURE__*/function (_Template13) {\n  _inherits(LanguageOfContentItemAndDescendants, _Template13);\n\n  var _super14 = _createSuper(LanguageOfContentItemAndDescendants);\n\n  function LanguageOfContentItemAndDescendants(options) {\n    var _this20;\n\n    _classCallCheck(this, LanguageOfContentItemAndDescendants);\n\n    _this20 = _super14.call(this);\n\n    if (options.language === undefined) {\n      options.language = new CodedConcept({\n        value: \"en-US\",\n        schemeDesignator: \"RFC5646\",\n        meaning: \"English (United States)\"\n      });\n    }\n\n    var languageItem = new CodeContentItem({\n      name: new CodedConcept({\n        value: \"121049\",\n        meaning: \"Language of Content Item and Descendants\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.language,\n      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n    });\n\n    _this20.push(languageItem);\n\n    return _this20;\n  }\n\n  return _createClass(LanguageOfContentItemAndDescendants);\n}(Template);\n\nvar _MeasurementsAndQualitatitiveEvaluations = /*#__PURE__*/function (_Template14) {\n  _inherits(_MeasurementsAndQualitatitiveEvaluations, _Template14);\n\n  var _super15 = _createSuper(_MeasurementsAndQualitatitiveEvaluations);\n\n  function _MeasurementsAndQualitatitiveEvaluations(options) {\n    var _groupItem$ContentSeq;\n\n    var _this21;\n\n    _classCallCheck(this, _MeasurementsAndQualitatitiveEvaluations);\n\n    _this21 = _super15.call(this);\n    var groupItem = new ContainerContentItem({\n      name: new CodedConcept({\n        value: \"125007\",\n        meaning: \"Measurement Group\",\n        schemeDesignator: \"DCM\"\n      }),\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n    groupItem.ContentSequence = new ContentSequence$1();\n\n    if (options.trackingIdentifier === undefined) {\n      throw new Error(\"Option 'trackingIdentifier' is required for measurements group.\");\n    }\n\n    if (options.trackingIdentifier.constructor !== TrackingIdentifier) {\n      throw new Error(\"Option 'trackingIdentifier' must have type TrackingIdentifier.\");\n    }\n\n    if (options.trackingIdentifier.length !== 2) {\n      throw new Error(\"Option 'trackingIdentifier' must include a human readable tracking \" + \"identifier and a tracking unique identifier.\");\n    }\n\n    (_groupItem$ContentSeq = groupItem.ContentSequence).push.apply(_groupItem$ContentSeq, _toConsumableArray(options.trackingIdentifier));\n\n    if (options.session !== undefined) {\n      var sessionItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"C67447\",\n          meaning: \"Activity Session\",\n          schemeDesignator: \"NCIt\"\n        }),\n        value: options.session,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n      groupItem.ContentSequence.push(sessionItem);\n    }\n\n    if (options.findingType !== undefined) {\n      var findingTypeItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121071\",\n          meaning: \"Finding\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.findingType,\n        relationshipType: RelationshipTypes.CONTAINS\n      });\n      groupItem.ContentSequence.push(findingTypeItem);\n    }\n\n    if (options.timePointContext !== undefined) {\n      var _groupItem$ContentSeq2;\n\n      if (options.timePointContext.constructor !== TimePointContext) {\n        throw new Error(\"Option 'timePointContext' must have type TimePointContext.\");\n      }\n\n      (_groupItem$ContentSeq2 = groupItem.ContentSequence).push.apply(_groupItem$ContentSeq2, _toConsumableArray(timePointContext));\n    }\n\n    if (options.referencedRealWorldValueMap !== undefined) {\n      if (options.referencedRealWorldValueMap.constructor !== ReferencedRealWorldValueMap) {\n        throw new Error(\"Option 'referencedRealWorldValleMap' must have type \" + \"ReferencedRealWorldValueMap.\");\n      }\n\n      groupItem.ContentSequence.push(options.referencedRealWorldValueMap);\n    }\n\n    if (options.measurements !== undefined) {\n      if (!(_typeof(options.measurements) === \"object\" || options.measurements instanceof Array)) {\n        throw new Error(\"Option 'measurements' must have type Array.\");\n      }\n\n      options.measurements.forEach(function (measurement) {\n        console.log(measurement);\n\n        if (!measurement || measurement.constructor !== NumContentItem) {\n          throw new Error(\"Items of option 'measurement' must have type NumContentItem.\");\n        }\n\n        groupItem.ContentSequence.push(measurement);\n      });\n    }\n\n    if (options.qualitativeEvaluations !== undefined) {\n      if (!(_typeof(options.qualitativeEvaluations) === \"object\" || options.qualitativeEvaluations instanceof Array)) {\n        throw new Error(\"Option 'qualitativeEvaluations' must have type Array.\");\n      }\n\n      options.qualitativeEvaluations.forEach(function (evaluation) {\n        if (!evaluation || evaluation.constructor !== CodeContentItem && evaluation.constructor !== TextContentItem) {\n          throw new Error(\"Items of option 'qualitativeEvaluations' must have type \" + \"CodeContentItem or TextContentItem.\");\n        }\n\n        groupItem.ContentSequence.push(evaluation);\n      });\n    }\n\n    _this21.push(groupItem);\n\n    return _this21;\n  }\n\n  return _createClass(_MeasurementsAndQualitatitiveEvaluations);\n}(Template);\n\nvar _ROIMeasurementsAndQualitativeEvaluations = /*#__PURE__*/function (_MeasurementsAndQuali) {\n  _inherits(_ROIMeasurementsAndQualitativeEvaluations, _MeasurementsAndQuali);\n\n  var _super16 = _createSuper(_ROIMeasurementsAndQualitativeEvaluations);\n\n  function _ROIMeasurementsAndQualitativeEvaluations(options) {\n    var _this22;\n\n    _classCallCheck(this, _ROIMeasurementsAndQualitativeEvaluations);\n\n    _this22 = _super16.call(this, {\n      trackingIdentifier: options.trackingIdentifier,\n      timePointContext: options.timePointContext,\n      findingType: options.findingType,\n      session: options.session,\n      measurements: options.measurements,\n      qualitativeEvaluations: options.qualitativeEvaluations\n    });\n    var groupItem = _this22[0];\n    var wereReferencesProvided = [options.referencedRegions !== undefined, options.referencedVolume !== undefined, options.referencedSegmentation !== undefined];\n    var numReferences = wereReferencesProvided.reduce(function (a, b) {\n      return a + b;\n    });\n\n    if (numReferences === 0) {\n      throw new Error(\"One of the following options must be provided: \" + \"'referencedRegions', 'referencedVolume', or \" + \"'referencedSegmentation'.\");\n    } else if (numReferences > 1) {\n      throw new Error(\"Only one of the following options should be provided: \" + \"'referencedRegions', 'referencedVolume', or \" + \"'referencedSegmentation'.\");\n    }\n\n    if (options.referencedRegions !== undefined) {\n      if (!(_typeof(options.referencedRegions) === \"object\" || options.referencedRegions instanceof Array)) {\n        throw new Error(\"Option 'referencedRegions' must have type Array.\");\n      }\n\n      if (options.referencedRegions.length === 0) {\n        throw new Error(\"Option 'referencedRegion' must have non-zero length.\");\n      }\n\n      options.referencedRegions.forEach(function (region) {\n        if (region === undefined || region.constructor !== ImageRegion && region.constructor !== ImageRegion3D) {\n          throw new Error(\"Items of option 'referencedRegion' must have type \" + \"ImageRegion or ImageRegion3D.\");\n        }\n\n        groupItem.ContentSequence.push(region);\n      });\n    } else if (options.referencedVolume !== undefined) {\n      if (options.referencedVolume.constructor !== VolumeSurface) {\n        throw new Error(\"Items of option 'referencedVolume' must have type VolumeSurface.\");\n      }\n\n      groupItem.ContentSequence.push(referencedVolume);\n    } else if (options.referencedSegmentation !== undefined) {\n      if (options.referencedSegmentation.constructor !== ReferencedSegmentation && options.referencedSegmentation.constructor !== ReferencedSegmentationFrame) {\n        throw new Error(\"Option 'referencedSegmentation' must have type \" + \"ReferencedSegmentation or ReferencedSegmentationFrame.\");\n      }\n\n      groupItem.ContentSequence.push(referencedSegmentation);\n    }\n\n    _this22[0] = groupItem;\n    return _this22;\n  }\n\n  return _createClass(_ROIMeasurementsAndQualitativeEvaluations);\n}(_MeasurementsAndQualitatitiveEvaluations);\n\nvar PlanarROIMeasurementsAndQualitativeEvaluations = /*#__PURE__*/function (_ROIMeasurementsAndQu) {\n  _inherits(PlanarROIMeasurementsAndQualitativeEvaluations, _ROIMeasurementsAndQu);\n\n  var _super17 = _createSuper(PlanarROIMeasurementsAndQualitativeEvaluations);\n\n  function PlanarROIMeasurementsAndQualitativeEvaluations(options) {\n    _classCallCheck(this, PlanarROIMeasurementsAndQualitativeEvaluations);\n\n    var wereReferencesProvided = [options.referencedRegion !== undefined, options.referencedSegmentation !== undefined];\n    var numReferences = wereReferencesProvided.reduce(function (a, b) {\n      return a + b;\n    });\n\n    if (numReferences === 0) {\n      throw new Error(\"One of the following options must be provided: \" + \"'referencedRegion', 'referencedSegmentation'.\");\n    } else if (numReferences > 1) {\n      throw new Error(\"Only one of the following options should be provided: \" + \"'referencedRegion', 'referencedSegmentation'.\");\n    }\n\n    return _super17.call(this, {\n      trackingIdentifier: options.trackingIdentifier,\n      referencedRegions: [options.referencedRegion],\n      referencedSegmentation: options.referencedSegmentation,\n      referencedRealWorldValueMap: options.referencedRealWorldValueMap,\n      timePointContext: options.timePointContext,\n      findingType: options.findingType,\n      session: options.session,\n      measurements: options.measurements,\n      qualitativeEvaluations: options.qualitativeEvaluations\n    });\n  }\n\n  return _createClass(PlanarROIMeasurementsAndQualitativeEvaluations);\n}(_ROIMeasurementsAndQualitativeEvaluations);\n\nvar VolumetricROIMeasurementsAndQualitativeEvaluations = /*#__PURE__*/function (_ROIMeasurementsAndQu2) {\n  _inherits(VolumetricROIMeasurementsAndQualitativeEvaluations, _ROIMeasurementsAndQu2);\n\n  var _super18 = _createSuper(VolumetricROIMeasurementsAndQualitativeEvaluations);\n\n  function VolumetricROIMeasurementsAndQualitativeEvaluations(options) {\n    _classCallCheck(this, VolumetricROIMeasurementsAndQualitativeEvaluations);\n\n    return _super18.call(this, {\n      trackingIdentifier: options.trackingIdentifier,\n      referencedRegions: options.referencedRegions,\n      referencedSegmentation: options.referencedSegmentation,\n      referencedRealWorldValueMap: options.referencedRealWorldValueMap,\n      timePointContext: options.timePointContext,\n      findingType: options.findingType,\n      session: options.session,\n      measurements: options.measurements,\n      qualitativeEvaluations: options.qualitativeEvaluations\n    });\n  }\n\n  return _createClass(VolumetricROIMeasurementsAndQualitativeEvaluations);\n}(_ROIMeasurementsAndQualitativeEvaluations);\n\nvar MeasurementsDerivedFromMultipleROIMeasurements = /*#__PURE__*/function (_Template15) {\n  _inherits(MeasurementsDerivedFromMultipleROIMeasurements, _Template15);\n\n  var _super19 = _createSuper(MeasurementsDerivedFromMultipleROIMeasurements);\n\n  function MeasurementsDerivedFromMultipleROIMeasurements(options) {\n    var _this23;\n\n    _classCallCheck(this, MeasurementsDerivedFromMultipleROIMeasurements);\n\n    if (options.derivation === undefined) {\n      throw new Error(\"Option 'derivation' is required for \" + \"MeasurementsDerivedFromMultipleROIMeasurements.\");\n    } // FIXME\n\n\n    var valueItem = new NumContentItem({\n      name: options.derivation\n    });\n    valueItem.ContentSequence = new ContentSequence$1();\n\n    if (options.measurementGroups === undefined) {\n      throw new Error(\"Option 'measurementGroups' is required for \" + \"MeasurementsDerivedFromMultipleROIMeasurements.\");\n    }\n\n    if (!(_typeof(options.measurementGroups) === \"object\" || options.measurementGroups instanceof Array)) {\n      throw new Error(\"Option 'measurementGroups' must have type Array.\");\n    }\n\n    options.measurementGroups.forEach(function (group) {\n      var _valueItem$ContentSeq4;\n\n      if (!group || group.constructor !== PlanarROIMeasurementsAndQualitativeEvaluations && group.constructor !== VolumetricROIMeasurementsAndQualitativeEvaluations) {\n        throw new Error(\"Items of option 'measurementGroups' must have type \" + \"PlanarROIMeasurementsAndQualitativeEvaluations or \" + \"VolumetricROIMeasurementsAndQualitativeEvaluations.\");\n      }\n\n      group[0].RelationshipType = \"R-INFERRED FROM\";\n\n      (_valueItem$ContentSeq4 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq4, _toConsumableArray(group));\n    });\n\n    if (options.measurementProperties !== undefined) {\n      var _valueItem$ContentSeq5;\n\n      if (options.measurementProperties.constructor !== MeasurementProperties) {\n        throw new Error(\"Option 'measurementProperties' must have type MeasurementProperties.\");\n      }\n\n      (_valueItem$ContentSeq5 = valueItem.ContentSequence).push.apply(_valueItem$ContentSeq5, _toConsumableArray(options.measurementProperties));\n    }\n\n    _this23.push(valueItem);\n\n    return _possibleConstructorReturn(_this23);\n  }\n\n  return _createClass(MeasurementsDerivedFromMultipleROIMeasurements);\n}(Template);\n\nvar MeasurementAndQualitativeEvaluationGroup = /*#__PURE__*/function (_MeasurementsAndQuali2) {\n  _inherits(MeasurementAndQualitativeEvaluationGroup, _MeasurementsAndQuali2);\n\n  var _super20 = _createSuper(MeasurementAndQualitativeEvaluationGroup);\n\n  function MeasurementAndQualitativeEvaluationGroup(options) {\n    _classCallCheck(this, MeasurementAndQualitativeEvaluationGroup);\n\n    return _super20.call(this, {\n      trackingIdentifier: options.trackingIdentifier,\n      referencedRealWorldValueMap: options.referencedRealWorldValueMap,\n      timePointContext: options.timePointContext,\n      findingType: options.findingType,\n      session: options.session,\n      measurements: options.measurements,\n      qualitativeEvaluations: options.qualitativeEvaluations\n    });\n  }\n\n  return _createClass(MeasurementAndQualitativeEvaluationGroup);\n}(_MeasurementsAndQualitatitiveEvaluations);\n\nvar ROIMeasurements = /*#__PURE__*/function (_Template16) {\n  _inherits(ROIMeasurements, _Template16);\n\n  var _super21 = _createSuper(ROIMeasurements);\n\n  function ROIMeasurements(options) {\n    var _this24;\n\n    _classCallCheck(this, ROIMeasurements);\n\n    _this24 = _super21.call(this);\n\n    if (options.method !== undefined) {\n      var methodItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"370129005\",\n          meaning: \"Measurement Method\",\n          schemeDesignator: \"SCT\"\n        }),\n        value: options.method,\n        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n      });\n\n      _this24.push(methodItem);\n    }\n\n    if (options.findingSites !== undefined) {\n      if (!(_typeof(options.findingSites) === \"object\" || options.findingSites instanceof Array)) {\n        throw new Error(\"Option 'findingSites' must have type Array.\");\n      }\n\n      options.findingSites.forEach(function (site) {\n        if (!site || site.constructor !== FindingSite) {\n          throw new Error(\"Items of option 'findingSites' must have type FindingSite.\");\n        }\n\n        _this24.push(site);\n      });\n    }\n\n    if (options.measurements === undefined) {\n      throw new Error(\"Options 'measurements' is required ROIMeasurements.\");\n    }\n\n    if (!(_typeof(options.measurements) === \"object\" || options.measurements instanceof Array)) {\n      throw new Error(\"Option 'measurements' must have type Array.\");\n    }\n\n    if (options.measurements.length === 0) {\n      throw new Error(\"Option 'measurements' must have non-zero length.\");\n    }\n\n    options.measurements.forEach(function (measurement) {\n      if (!measurement || measurement.constructor !== Measurement) {\n        throw new Error(\"Items of option 'measurements' must have type Measurement.\");\n      }\n\n      _this24.push(measurement);\n    });\n    return _this24;\n  }\n\n  return _createClass(ROIMeasurements);\n}(Template);\n\nvar MeasurementReport$3 = /*#__PURE__*/function (_Template17) {\n  _inherits(MeasurementReport, _Template17);\n\n  var _super22 = _createSuper(MeasurementReport);\n\n  function MeasurementReport(options) {\n    var _item$ContentSequence, _item$ContentSequence2, _item$ContentSequence3;\n\n    var _this25;\n\n    _classCallCheck(this, MeasurementReport);\n\n    _this25 = _super22.call(this);\n\n    if (options.observationContext === undefined) {\n      throw new Error(\"Option 'observationContext' is required for MeasurementReport.\");\n    }\n\n    if (options.procedureReported === undefined) {\n      throw new Error(\"Option 'procedureReported' is required for MeasurementReport.\");\n    }\n\n    var item = new ContainerContentItem({\n      name: new CodedConcept({\n        value: \"126000\",\n        schemeDesignator: \"DCM\",\n        meaning: \"Imaging Measurement Report\"\n      }),\n      templateID: \"1500\"\n    });\n    item.ContentSequence = new ContentSequence$1();\n\n    if (options.languageOfContentItemAndDescendants === undefined) {\n      throw new Error(\"Option 'languageOfContentItemAndDescendants' is required for \" + \"MeasurementReport.\");\n    }\n\n    if (options.languageOfContentItemAndDescendants.constructor !== LanguageOfContentItemAndDescendants) {\n      throw new Error(\"Option 'languageOfContentItemAndDescendants' must have type \" + \"LanguageOfContentItemAndDescendants.\");\n    }\n\n    (_item$ContentSequence = item.ContentSequence).push.apply(_item$ContentSequence, _toConsumableArray(options.languageOfContentItemAndDescendants));\n\n    (_item$ContentSequence2 = item.ContentSequence).push.apply(_item$ContentSequence2, _toConsumableArray(options.observationContext));\n\n    if (options.procedureReported.constructor === CodedConcept || options.procedureReported.constructor === Code) {\n      options.procedureReported = [options.procedureReported];\n    }\n\n    if (!(_typeof(options.procedureReported) === \"object\" || options.procedureReported instanceof Array)) {\n      throw new Error(\"Option 'procedureReported' must have type Array.\");\n    }\n\n    options.procedureReported.forEach(function (procedure) {\n      var procedureItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"121058\",\n          meaning: \"Procedure reported\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: procedure,\n        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n      });\n      item.ContentSequence.push(procedureItem);\n    });\n    var imageLibraryItem = new ImageLibrary();\n\n    (_item$ContentSequence3 = item.ContentSequence).push.apply(_item$ContentSequence3, _toConsumableArray(imageLibraryItem));\n\n    var wereOptionsProvided = [options.imagingMeasurements !== undefined, options.derivedImagingMeasurements !== undefined, options.qualitativeEvaluations !== undefined];\n    var numOptionsProvided = wereOptionsProvided.reduce(function (a, b) {\n      return a + b;\n    });\n\n    if (numOptionsProvided > 1) {\n      throw new Error(\"Only one of the following options should be provided: \" + \"'imagingMeasurements', 'derivedImagingMeasurement', \" + \"'qualitativeEvaluations'.\");\n    }\n\n    if (options.imagingMeasurements !== undefined) {\n      var containerItem = new ContainerContentItem({\n        name: new CodedConcept({\n          value: \"126010\",\n          meaning: \"Imaging Measurements\",\n          schemeDesignator: \"DCM\"\n        }),\n        relationshipType: RelationshipTypes.CONTAINS\n      });\n      containerItem.ContentSequence = _construct(ContentSequence$1, _toConsumableArray(options.imagingMeasurements));\n      item.ContentSequence.push(containerItem);\n    } else if (options.derivedImagingMeasurements !== undefined) {\n      var _containerItem = new ContainerContentItem({\n        name: new CodedConcept({\n          value: \"126011\",\n          meaning: \"Derived Imaging Measurements\",\n          schemeDesignator: \"DCM\"\n        }),\n        relationshipType: RelationshipTypes.CONTAINS\n      });\n\n      _containerItem.ContentSequence = _construct(ContentSequence$1, _toConsumableArray(options.derivedImagingMeasurements));\n      item.ContentSequence.push(_containerItem);\n    } else if (options.qualitativeEvaluations !== undefined) {\n      var _containerItem2 = new ContainerContentItem({\n        name: new CodedConcept({\n          value: \"C0034375\",\n          meaning: \"Qualitative Evaluations\",\n          schemeDesignator: \"UMLS\"\n        }),\n        relationshipType: RelationshipTypes.CONTAINS\n      });\n\n      _containerItem2.ContentSequence = _construct(ContentSequence$1, _toConsumableArray(options.qualitativeEvaluations));\n      item.ContentSequence.push(_containerItem2);\n    }\n\n    _this25.push(item);\n\n    return _this25;\n  }\n\n  return _createClass(MeasurementReport);\n}(Template);\n\nvar TimePointContext = /*#__PURE__*/function (_Template18) {\n  _inherits(TimePointContext, _Template18);\n\n  var _super23 = _createSuper(TimePointContext);\n\n  function TimePointContext(options) {\n    var _this26;\n\n    _classCallCheck(this, TimePointContext);\n\n    if (options.timePoint === undefined) {\n      throw new Error(\"Option 'timePoint' is required for TimePointContext.\");\n    }\n\n    var timePointItem = new TextContentItem({\n      name: new CodedConcept({\n        value: \"C2348792\",\n        meaning: \"Time Point\",\n        schemeDesignator: \"UMLS\"\n      }),\n      value: options.timePoint,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this26.push(timePointItem);\n\n    if (options.timePointType !== undefined) {\n      var timePointTypeItem = new CodeContentItem({\n        name: new CodedConcept({\n          value: \"126072\",\n          meaning: \"Time Point Type\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.timePointType,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this26.push(timePointTypeItem);\n    }\n\n    if (options.timePointOrder !== undefined) {\n      var timePointOrderItem = new NumContentItem({\n        name: new CodedConcept({\n          value: \"126073\",\n          meaning: \"Time Point Order\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.timePointOrder,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this26.push(timePointOrderItem);\n    }\n\n    if (options.subjectTimePointIdentifier !== undefined) {\n      var subjectTimePointIdentifierItem = new NumContentItem({\n        name: new CodedConcept({\n          value: \"126070\",\n          meaning: \"Subject Time Point Identifier\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.subjectTimePointIdentifier,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this26.push(subjectTimePointIdentifierItem);\n    }\n\n    if (options.protocolTimePointIdentifier !== undefined) {\n      var protocolTimePointIdentifierItem = new NumContentItem({\n        name: new CodedConcept({\n          value: \"126071\",\n          meaning: \"Protocol Time Point Identifier\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.protocolTimePointIdentifier,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this26.push(protocolTimePointIdentifierItem);\n    }\n\n    if (options.temporalOffsetFromEvent !== undefined) {\n      if (options.temporalOffsetFromEvent.constructor !== LongitudinalTemporalOffsetFromEventContentItem) {\n        throw new Error(\"Option 'temporalOffsetFromEvent' must have type \" + \"LongitudinalTemporalOffsetFromEventContentItem.\");\n      }\n\n      _this26.push(temporalOffsetFromEvent);\n    }\n\n    return _possibleConstructorReturn(_this26);\n  }\n\n  return _createClass(TimePointContext);\n}(Template);\n\nvar ImageLibrary = /*#__PURE__*/function (_Template19) {\n  _inherits(ImageLibrary, _Template19);\n\n  var _super24 = _createSuper(ImageLibrary);\n\n  function ImageLibrary(options) {\n    var _this27;\n\n    _classCallCheck(this, ImageLibrary);\n\n    _this27 = _super24.call(this);\n    var libraryItem = new ContainerContentItem({\n      name: new CodedConcept({\n        value: \"111028\",\n        meaning: \"Image Library\",\n        schemeDesignator: \"DCM\"\n      }),\n      relationshipType: RelationshipTypes.CONTAINS\n    });\n\n    _this27.push(libraryItem);\n\n    return _this27;\n  }\n\n  return _createClass(ImageLibrary);\n}(Template);\n\nvar AlgorithmIdentification = /*#__PURE__*/function (_Template20) {\n  _inherits(AlgorithmIdentification, _Template20);\n\n  var _super25 = _createSuper(AlgorithmIdentification);\n\n  function AlgorithmIdentification(options) {\n    var _this28;\n\n    _classCallCheck(this, AlgorithmIdentification);\n\n    _this28 = _super25.call(this);\n\n    if (options.name === undefined) {\n      throw new Error(\"Option 'name' is required for AlgorithmIdentification.\");\n    }\n\n    if (options.version === undefined) {\n      throw new Error(\"Option 'version' is required for AlgorithmIdentification.\");\n    }\n\n    var nameItem = new TextContentItem({\n      name: new CodedConcept({\n        value: \"111001\",\n        meaning: \"Algorithm Name\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.name,\n      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n    });\n\n    _this28.push(nameItem);\n\n    var versionItem = new TextContentItem({\n      name: new CodedConcept({\n        value: \"111003\",\n        meaning: \"Algorithm Version\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.version,\n      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n    });\n\n    _this28.push(versionItem);\n\n    if (options.parameters !== undefined) {\n      if (!(_typeof(options.parameters) === \"object\" || options.parameters instanceof Array)) {\n        throw new Error(\"Option 'parameters' must have type Array.\");\n      }\n\n      options.parameters.forEach(function (parameter) {\n        var parameterItem = new TextContentItem({\n          name: new CodedConcept({\n            value: \"111002\",\n            meaning: \"Algorithm Parameter\",\n            schemeDesignator: \"DCM\"\n          }),\n          value: param,\n          relationshipType: RelationshipTypes.HAS_CONCEPT_MOD\n        });\n\n        _this28.push(parameterItem);\n      });\n    }\n\n    return _this28;\n  }\n\n  return _createClass(AlgorithmIdentification);\n}(Template);\n\nvar TrackingIdentifier = /*#__PURE__*/function (_Template21) {\n  _inherits(TrackingIdentifier, _Template21);\n\n  var _super26 = _createSuper(TrackingIdentifier);\n\n  function TrackingIdentifier(options) {\n    var _this29;\n\n    _classCallCheck(this, TrackingIdentifier);\n\n    _this29 = _super26.call(this);\n\n    if (options.uid === undefined) {\n      throw new Error(\"Option 'uid' is required for TrackingIdentifier.\");\n    }\n\n    if (options.identifier !== undefined) {\n      var trackingIdentifierItem = new TextContentItem({\n        name: new CodedConcept({\n          value: \"112039\",\n          meaning: \"Tracking Identifier\",\n          schemeDesignator: \"DCM\"\n        }),\n        value: options.identifier,\n        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n      });\n\n      _this29.push(trackingIdentifierItem);\n    }\n\n    var trackingUIDItem = new UIDRefContentItem({\n      name: new CodedConcept({\n        value: \"112040\",\n        meaning: \"Tracking Unique Identifier\",\n        schemeDesignator: \"DCM\"\n      }),\n      value: options.uid,\n      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT\n    });\n\n    _this29.push(trackingUIDItem);\n\n    return _this29;\n  }\n\n  return _createClass(TrackingIdentifier);\n}(Template);\n\nvar templates = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tAlgorithmIdentification: AlgorithmIdentification,\n\tDeviceObserverIdentifyingAttributes: DeviceObserverIdentifyingAttributes,\n\tImageLibrary: ImageLibrary,\n\tLanguageOfContentItemAndDescendants: LanguageOfContentItemAndDescendants,\n\tMeasurement: Measurement,\n\tMeasurementAndQualitativeEvaluationGroup: MeasurementAndQualitativeEvaluationGroup,\n\tMeasurementReport: MeasurementReport$3,\n\tMeasurementsDerivedFromMultipleROIMeasurements: MeasurementsDerivedFromMultipleROIMeasurements,\n\tObservationContext: ObservationContext,\n\tObserverContext: ObserverContext,\n\tPersonObserverIdentifyingAttributes: PersonObserverIdentifyingAttributes,\n\tPlanarROIMeasurementsAndQualitativeEvaluations: PlanarROIMeasurementsAndQualitativeEvaluations,\n\tROIMeasurements: ROIMeasurements,\n\tSubjectContext: SubjectContext,\n\tSubjectContextDevice: SubjectContextDevice,\n\tSubjectContextFetus: SubjectContextFetus,\n\tSubjectContextSpecimen: SubjectContextSpecimen,\n\tTimePointContext: TimePointContext,\n\tTrackingIdentifier: TrackingIdentifier,\n\tVolumetricROIMeasurementsAndQualitativeEvaluations: VolumetricROIMeasurementsAndQualitativeEvaluations\n});\n\nvar _attributesToInclude = [// Patient\n\"00080054\", \"00080100\", \"00080102\", \"00080103\", \"00080104\", \"00080105\", \"00080106\", \"00080107\", \"0008010B\", \"0008010D\", \"0008010F\", \"00080117\", \"00080118\", \"00080119\", \"00080120\", \"00080121\", \"00080122\", \"00081120\", \"00081150\", \"00081155\", \"00081160\", \"00081190\", \"00081199\", \"00100010\", \"00100020\", \"00100021\", \"00100022\", \"00100024\", \"00100026\", \"00100027\", \"00100028\", \"00100030\", \"00100032\", \"00100033\", \"00100034\", \"00100035\", \"00100040\", \"00100200\", \"00100212\", \"00100213\", \"00100214\", \"00100215\", \"00100216\", \"00100217\", \"00100218\", \"00100219\", \"00100221\", \"00100222\", \"00100223\", \"00100229\", \"00101001\", \"00101002\", \"00101100\", \"00102160\", \"00102201\", \"00102202\", \"00102292\", \"00102293\", \"00102294\", \"00102295\", \"00102296\", \"00102297\", \"00102298\", \"00102299\", \"00104000\", \"00120062\", \"00120063\", \"00120064\", \"0020000D\", \"00400031\", \"00400032\", \"00400033\", \"00400035\", \"00400036\", \"00400039\", \"0040003A\", \"0040E001\", \"0040E010\", \"0040E020\", \"0040E021\", \"0040E022\", \"0040E023\", \"0040E024\", \"0040E025\", \"0040E030\", \"0040E031\", \"0062000B\", \"00880130\", \"00880140\", // Patient Study\n\"00080100\", \"00080102\", \"00080103\", \"00080104\", \"00080105\", \"00080106\", \"00080107\", \"0008010B\", \"0008010D\", \"0008010F\", \"00080117\", \"00080118\", \"00080119\", \"00080120\", \"00080121\", \"00080122\", \"00081080\", \"00081084\", \"00101010\", \"00101020\", \"00101021\", \"00101022\", \"00101023\", \"00101024\", \"00101030\", \"00102000\", \"00102110\", \"00102180\", \"001021A0\", \"001021B0\", \"001021C0\", \"001021D0\", \"00102203\", \"00380010\", \"00380014\", \"00380060\", \"00380062\", \"00380064\", \"00380500\", \"00400031\", \"00400032\", \"00400033\", // General Study\n\"00080020\", \"00080030\", \"00080050\", \"00080051\", \"00080080\", \"00080081\", \"00080082\", \"00080090\", \"00080096\", \"0008009C\", \"0008009D\", \"00080100\", \"00080102\", \"00080103\", \"00080104\", \"00080105\", \"00080106\", \"00080107\", \"0008010B\", \"0008010D\", \"0008010F\", \"00080117\", \"00080118\", \"00080119\", \"00080120\", \"00080121\", \"00080122\", \"00081030\", \"00081032\", \"00081048\", \"00081049\", \"00081060\", \"00081062\", \"00081110\", \"00081150\", \"00081155\", \"0020000D\", \"00200010\", \"00321034\", \"00400031\", \"00400032\", \"00400033\", \"00401012\", \"00401101\", \"00401102\", \"00401103\", \"00401104\", // Clinical Trial Subject\n\"00120010\", \"00120020\", \"00120021\", \"00120030\", \"00120031\", \"00120040\", \"00120042\", \"00120081\", \"00120082\", // Clinical Trial Study\n\"00120020\", \"00120050\", \"00120051\", \"00120052\", \"00120053\", \"00120083\", \"00120084\", \"00120085\"];\n\nvar Comprehensive3DSR = /*#__PURE__*/_createClass(function Comprehensive3DSR(options) {\n  var _this = this;\n\n  _classCallCheck(this, Comprehensive3DSR);\n\n  if (options.evidence === undefined) {\n    throw new Error(\"Option 'evidence' is required for Comprehensive3DSR.\");\n  }\n\n  if (!(_typeof(options.evidence) === \"object\" || options.evidence instanceof Array)) {\n    throw new Error(\"Option 'evidence' must have type Array.\");\n  }\n\n  if (options.evidence.length === 0) {\n    throw new Error(\"Option 'evidence' must have non-zero length.\");\n  }\n\n  if (options.content === undefined) {\n    throw new Error(\"Option 'content' is required for Comprehensive3DSR.\");\n  }\n\n  if (options.seriesInstanceUID === undefined) {\n    throw new Error(\"Option 'seriesInstanceUID' is required for Comprehensive3DSR.\");\n  }\n\n  if (options.seriesNumber === undefined) {\n    throw new Error(\"Option 'seriesNumber' is required for Comprehensive3DSR.\");\n  }\n\n  if (options.seriesDescription === undefined) {\n    throw new Error(\"Option 'seriesDescription' is required for Comprehensive3DSR.\");\n  }\n\n  if (options.sopInstanceUID === undefined) {\n    throw new Error(\"Option 'sopInstanceUID' is required for Comprehensive3DSR.\");\n  }\n\n  if (options.instanceNumber === undefined) {\n    throw new Error(\"Option 'instanceNumber' is required for Comprehensive3DSR.\");\n  }\n\n  if (options.manufacturer === undefined) {\n    throw new Error(\"Option 'manufacturer' is required for Comprehensive3DSR.\");\n  }\n\n  this.SOPClassUID = \"1.2.840.10008.5.1.4.1.1.88.34\";\n  this.SOPInstanceUID = options.sopInstanceUID;\n  this.Modality = \"SR\";\n  this.SeriesDescription = options.seriesDescription;\n  this.SeriesInstanceUID = options.seriesInstanceUID;\n  this.SeriesNumber = options.seriesNumber;\n  this.InstanceNumber = options.instanceNumber;\n  this.Manufacturer = options.manufacturer;\n\n  if (options.institutionName !== undefined) {\n    this.InstitutionName = options.institutionName;\n\n    if (options.institutionalDepartmentName !== undefined) {\n      this.InstitutionalDepartmentName = options.institutionDepartmentName;\n    }\n  }\n\n  if (options.isComplete) {\n    this.CompletionFlag = \"COMPLETE\";\n  } else {\n    this.CompletionFlag = \"PARTIAL\";\n  }\n\n  if (options.isVerified) {\n    if (options.verifyingObserverName === undefined) {\n      throw new Error(\"Verifying Observer Name must be specified if SR document \" + \"has been verified.\");\n    }\n\n    if (options.verifyingOrganization === undefined) {\n      throw new Error(\"Verifying Organization must be specified if SR document \" + \"has been verified.\");\n    }\n\n    this.VerificationFlag = \"VERIFIED\";\n    var ovserver_item = {};\n    ovserver_item.VerifyingObserverName = options.verifyingObserverName;\n    ovserver_item.VerifyingOrganization = options.verifyingOrganization;\n    ovserver_item.VerificationDateTime = DicomMetaDictionary.dateTime();\n    this.VerifyingObserverSequence = [observer_item];\n  } else {\n    this.VerificationFlag = \"UNVERIFIED\";\n  }\n\n  if (options.isFinal) {\n    this.PreliminaryFlag = \"FINAL\";\n  } else {\n    this.PreliminaryFlag = \"PRELIMINARY\";\n  }\n\n  this.ContentDate = DicomMetaDictionary.date();\n  this.ContentTime = DicomMetaDictionary.time();\n  Object.keys(options.content).forEach(function (keyword) {\n    _this[keyword] = options.content[keyword];\n  });\n  var evidenceCollection = {};\n  options.evidence.forEach(function (evidence) {\n    if (evidence.StudyInstanceUID !== options.evidence[0].StudyInstanceUID) {\n      throw new Error(\"Referenced data sets must all belong to the same study.\");\n    }\n\n    if (!(evidence.SeriesInstanceUID in evidenceCollection)) {\n      evidenceCollection[evidence.SeriesInstanceUID] = [];\n    }\n\n    var instanceItem = {};\n    instanceItem.ReferencedSOPClassUID = evidence.SOPClassUID;\n    instanceItem.ReferencedSOPInstanceUID = evidence.SOPInstanceUID;\n    evidenceCollection[evidence.SeriesInstanceUID].push(instanceItem);\n  });\n  var evidenceStudyItem = {};\n  evidenceStudyItem.StudyInstanceUID = options.evidence[0].StudyInstanceUID;\n  evidenceStudyItem.ReferencedSeriesSequence = [];\n  Object.keys(evidenceCollection).forEach(function (seriesInstanceUID) {\n    var seriesItem = {};\n    seriesItem.SeriesInstanceUID = seriesInstanceUID;\n    seriesItem.ReferencedSOPSequence = evidenceCollection[seriesInstanceUID];\n    evidenceStudyItem.ReferencedSeriesSequence.push(seriesItem);\n  });\n\n  if (options.requestedProcedures !== undefined) {\n    if (!(_typeof(options.requestedProcedures) === \"object\" || options.requestedProcedures instanceof Array)) {\n      throw new Error(\"Option 'requestedProcedures' must have type Array.\");\n    }\n\n    this.ReferencedRequestSequence = _construct(ContentSequence, _toConsumableArray(options.requestedProcedures));\n    this.CurrentRequestedProcedureEvidenceSequence = [evidenceStudyItem];\n  } else {\n    this.PertinentOtherEvidenceSequence = [evidenceStudyItem];\n  }\n\n  if (options.previousVersions !== undefined) {\n    var preCollection = {};\n    options.previousVersions.forEach(function (version) {\n      if (version.StudyInstanceUID != options.evidence[0].StudyInstanceUID) {\n        throw new Error(\"Previous version data sets must belong to the same study.\");\n      }\n\n      var instanceItem = {};\n      instanceItem.ReferencedSOPClassUID = version.SOPClassUID;\n      instanceItem.ReferencedSOPInstanceUID = version.SOPInstanceUID;\n      preCollection[version.SeriesInstanceUID].push(instanceItem);\n    });\n    var preStudyItem = {};\n    preStudyItem.StudyInstanceUID = options.previousVersions[0].StudyInstanceUID;\n    preStudyItem.ReferencedSeriesSequence = [];\n    Object.keys(preCollection).forEach(function (seriesInstanceUID) {\n      var seriesItem = {};\n      seriesItem.SeriesInstanceUID = seriesInstanceUID;\n      seriesItem.ReferencedSOPSequence = preCollection[seriesInstanceUID];\n      preStudyItem.ReferencedSeriesSequence.push(seriesItem);\n    });\n    this.PredecessorDocumentsSequence = [preStudyItem];\n  }\n\n  if (options.performedProcedureCodes !== undefined) {\n    if (!(_typeof(options.performedProcedureCodes) === \"object\" || options.performedProcedureCodes instanceof Array)) {\n      throw new Error(\"Option 'performedProcedureCodes' must have type Array.\");\n    }\n\n    this.PerformedProcedureCodeSequence = _construct(ContentSequence, _toConsumableArray(options.performedProcedureCodes));\n  } else {\n    this.PerformedProcedureCodeSequence = [];\n  }\n\n  this.ReferencedPerformedProcedureStepSequence = [];\n\n  _attributesToInclude.forEach(function (tag) {\n    var key = DicomMetaDictionary.punctuateTag(tag);\n    var element = DicomMetaDictionary.dictionary[key];\n\n    if (element !== undefined) {\n      var keyword = element.name;\n      var value = options.evidence[0][keyword];\n\n      if (value !== undefined) {\n        _this[keyword] = value;\n      }\n    }\n  });\n});\n\nvar documents = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tComprehensive3DSR: Comprehensive3DSR\n});\n\nvar sr = {\n  coding: coding,\n  contentItems: contentItems,\n  documents: documents,\n  templates: templates,\n  valueTypes: valueTypes\n};\n\nvar tagNamesToEmpty = [// please override these in specificReplaceDefaults to have useful values\n\"PatientID\", \"PatientName\", // 0/3: those that appear missing in CTP\n\"SeriesDate\", \"AccessionNumber\", // (valuable, but sometimes manually filled)\n\"SeriesDescription\", // cat 1/3: CTP: set to empty explicitely using @empty\n\"StudyTime\", \"ContentTime\", \"ReferringPhysicianName\", \"PatientBirthDate\", \"PatientSex\", \"ClinicalTrialSiteID\", \"ClinicalTrialSiteName\", \"ClinicalTrialSubjectID\", \"ClinicalTrialSubjectReadingID\", \"ClinicalTrialTimePointID\", \"ClinicalTrialTimePointDescription\", \"ContrastBolusAgent\", \"StudyID\", // cat 2/3: CTP: set to increment dates\n\"InstanceCreationDate\", \"StudyDate\", \"ContentDate\", \"DateOfSecondaryCapture\", \"DateOfLastCalibration\", \"DateOfLastDetectorCalibration\", \"FrameAcquisitionDatetime\", \"FrameReferenceDatetime\", \"StudyVerifiedDate\", \"StudyReadDate\", \"ScheduledStudyStartDate\", \"ScheduledStudyStopDate\", \"StudyArrivalDate\", \"StudyCompletionDate\", \"ScheduledAdmissionDate\", \"ScheduledDischargeDate\", \"DischargeDate\", \"SPSStartDate\", \"SPSEndDate\", \"PPSStartDate\", \"PPSEndDate\", \"IssueDateOfImagingServiceRequest\", \"VerificationDateTime\", \"ObservationDateTime\", \"DateTime\", \"Date\", \"RefDatetime\", // cat 3/3: CTP: set to remove using @remove\n\"AcquisitionDate\", \"OverlayDate\", \"CurveDate\", \"AcquisitionDatetime\", \"SeriesTime\", \"AcquisitionTime\", \"OverlayTime\", \"CurveTime\", \"InstitutionName\", \"InstitutionAddress\", \"ReferringPhysicianAddress\", \"ReferringPhysicianPhoneNumbers\", \"ReferringPhysiciansIDSeq\", \"TimezoneOffsetFromUTC\", \"StationName\", \"StudyDescription\", \"InstitutionalDepartmentName\", \"PhysicianOfRecord\", \"PhysicianOfRecordIdSeq\", \"PerformingPhysicianName\", \"PerformingPhysicianIdSeq\", \"NameOfPhysicianReadingStudy\", \"PhysicianReadingStudyIdSeq\", \"OperatorName\", \"OperatorsIdentificationSeq\", \"AdmittingDiagnosisDescription\", \"AdmittingDiagnosisCodeSeq\", \"RefStudySeq\", \"RefPPSSeq\", \"RefPatientSeq\", \"RefImageSeq\", \"DerivationDescription\", \"SourceImageSeq\", \"IdentifyingComments\", \"IssuerOfPatientID\", \"PatientBirthTime\", \"PatientInsurancePlanCodeSeq\", \"PatientPrimaryLanguageCodeSeq\", \"PatientPrimaryLanguageModifierCodeSeq\", \"OtherPatientIDs\", \"OtherPatientNames\", \"OtherPatientIDsSeq\", \"PatientBirthName\", \"PatientAge\", \"PatientSize\", \"PatientWeight\", \"PatientAddress\", \"InsurancePlanIdentification\", \"PatientMotherBirthName\", \"MilitaryRank\", \"BranchOfService\", \"MedicalRecordLocator\", \"MedicalAlerts\", \"ContrastAllergies\", \"CountryOfResidence\", \"RegionOfResidence\", \"PatientPhoneNumbers\", \"EthnicGroup\", \"Occupation\", \"SmokingStatus\", \"AdditionalPatientHistory\", \"PregnancyStatus\", \"LastMenstrualDate\", \"PatientReligiousPreference\", \"PatientSexNeutered\", \"ResponsiblePerson\", \"ResponsibleOrganization\", \"PatientComments\", \"DeviceSerialNumber\", \"PlateID\", \"GeneratorID\", \"CassetteID\", \"GantryID\", // we keep - should be SoftwareVersions anyway\n// \"SoftwareVersion\",\n\"ProtocolName\", \"AcquisitionDeviceProcessingDescription\", \"AcquisitionComments\", \"DetectorID\", \"AcquisitionProtocolDescription\", \"ContributionDescription\", \"ModifyingDeviceID\", \"ModifyingDeviceManufacturer\", \"ModifiedImageDescription\", \"ImageComments\", \"ImagePresentationComments\", \"StudyIDIssuer\", \"ScheduledStudyLocation\", \"ScheduledStudyLocationAET\", \"ReasonforStudy\", \"RequestingPhysician\", \"RequestingService\", \"RequestedProcedureDescription\", \"RequestedContrastAgent\", \"StudyComments\", \"AdmissionID\", \"IssuerOfAdmissionID\", \"ScheduledPatientInstitutionResidence\", \"AdmittingDate\", \"AdmittingTime\", \"DischargeDiagnosisDescription\", \"SpecialNeeds\", \"ServiceEpisodeID\", \"IssuerOfServiceEpisodeId\", \"ServiceEpisodeDescription\", \"CurrentPatientLocation\", \"PatientInstitutionResidence\", \"PatientState\", \"ReferencedPatientAliasSeq\", \"VisitComments\", \"ScheduledStationAET\", \"ScheduledPerformingPhysicianName\", \"SPSDescription\", \"ScheduledStationName\", \"SPSLocation\", \"PreMedication\", \"PerformedStationAET\", \"PerformedStationName\", \"PerformedLocation\", \"PerformedStationNameCodeSeq\", \"PPSID\", \"PPSDescription\", \"RequestAttributesSeq\", \"PPSComments\", \"AcquisitionContextSeq\", \"PatientTransportArrangements\", \"RequestedProcedureLocation\", \"NamesOfIntendedRecipientsOfResults\", \"IntendedRecipientsOfResultsIDSequence\", \"PersonAddress\", \"PersonTelephoneNumbers\", \"RequestedProcedureComments\", \"ReasonForTheImagingServiceRequest\", \"OrderEnteredBy\", \"OrderEntererLocation\", \"OrderCallbackPhoneNumber\", \"ImagingServiceRequestComments\", \"ConfidentialityPatientData\", \"ScheduledStationNameCodeSeq\", \"ScheduledStationGeographicLocCodeSeq\", \"PerformedStationGeoLocCodeSeq\", \"ScheduledHumanPerformersSeq\", \"ActualHumanPerformersSequence\", \"HumanPerformersOrganization\", \"HumanPerformersName\", \"VerifyingOrganization\", \"VerifyingObserverName\", \"AuthorObserverSequence\", \"ParticipantSequence\", \"CustodialOrganizationSeq\", \"VerifyingObserverIdentificationCodeSeq\", \"PersonName\", \"ContentSeq\", \"OverlayData\", \"OverlayComments\", \"IconImageSequence\", \"TopicSubject\", \"TopicAuthor\", \"TopicKeyWords\", \"TextString\", \"Arbitrary\", \"TextComments\", \"ResultsIDIssuer\", \"InterpretationRecorder\", \"InterpretationTranscriber\", \"InterpretationText\", \"InterpretationAuthor\", \"InterpretationApproverSequence\", \"PhysicianApprovingInterpretation\", \"InterpretationDiagnosisDescription\", \"ResultsDistributionListSeq\", \"DistributionName\", \"DistributionAddress\", \"InterpretationIdIssuer\", \"Impressions\", \"ResultComments\", \"DigitalSignaturesSeq\", \"DataSetTrailingPadding\"];\nfunction getTagsNameToEmpty() {\n  return [].concat(tagNamesToEmpty);\n}\nfunction cleanTags(dict) {\n  var tagNamesToReplace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  var customTagNamesToEmpty = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n\n  if (tagNamesToReplace == undefined) {\n    tagNamesToReplace = {\n      \"00100010\": \"ANON^PATIENT\",\n      \"00100020\": \"ANON^ID\"\n    };\n  }\n\n  var tags = customTagNamesToEmpty != undefined ? customTagNamesToEmpty : tagNamesToEmpty;\n  tags.forEach(function (tag) {\n    var tagInfo = DicomMetaDictionary.nameMap[tag];\n\n    if (tagInfo && tagInfo.version != \"PrivateTag\") {\n      var tagNumber = tagInfo.tag,\n          tagString = Tag.fromPString(tagNumber).toCleanString();\n\n      if (dict[tagString]) {\n        var newValue;\n\n        if (tagString in tagNamesToReplace) {\n          newValue = [tagNamesToReplace[tagString]];\n        } else {\n          newValue = [];\n        }\n\n        dict[tagString].Value = newValue;\n      }\n    }\n  });\n}\n\n// Data\nvar data = {\n  BitArray: BitArray,\n  ReadBufferStream: ReadBufferStream,\n  DeflatedReadBufferStream: DeflatedReadBufferStream,\n  WriteBufferStream: WriteBufferStream,\n  DicomDict: DicomDict,\n  DicomMessage: DicomMessage,\n  DicomMetaDictionary: DicomMetaDictionary,\n  Tag: Tag,\n  ValueRepresentation: ValueRepresentation,\n  Colors: Colors,\n  datasetToDict: datasetToDict,\n  datasetToBuffer: datasetToBuffer,\n  datasetToBlob: datasetToBlob\n};\nvar derivations = {\n  DerivedDataset: DerivedDataset,\n  DerivedPixels: DerivedPixels,\n  DerivedImage: DerivedImage,\n  Segmentation: Segmentation,\n  StructuredReport: StructuredReport,\n  ParametricMap: ParametricMap\n};\nvar normalizers = {\n  Normalizer: Normalizer,\n  ImageNormalizer: ImageNormalizer,\n  MRImageNormalizer: MRImageNormalizer,\n  EnhancedMRImageNormalizer: EnhancedMRImageNormalizer,\n  EnhancedUSVolumeNormalizer: EnhancedUSVolumeNormalizer,\n  CTImageNormalizer: CTImageNormalizer,\n  PETImageNormalizer: PETImageNormalizer,\n  SEGImageNormalizer: SEGImageNormalizer,\n  DSRNormalizer: DSRNormalizer\n};\nvar anonymizer = {\n  cleanTags: cleanTags,\n  getTagsNameToEmpty: getTagsNameToEmpty\n};\nvar dcmjs = {\n  DICOMWEB: DICOMWEB,\n  adapters: adapters,\n  data: data,\n  derivations: derivations,\n  normalizers: normalizers,\n  sr: sr,\n  utilities: utilities,\n  log: log,\n  anonymizer: anonymizer\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dcmjs);\n\n\n\n//# sourceURL=webpack://$/./node_modules/dcmjs/build/dcmjs.es.js?");

/***/ }),

/***/ "./node_modules/dompurify/dist/purify.js":
/*!***********************************************!*\
  !*** ./node_modules/dompurify/dist/purify.js ***!
  \***********************************************/
/***/ (function(module) {

eval("/*! @license DOMPurify 3.0.3 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.0.3/LICENSE */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n})(this, (function () { 'use strict';\n\n  const {\n    entries,\n    setPrototypeOf,\n    isFrozen,\n    getPrototypeOf,\n    getOwnPropertyDescriptor\n  } = Object;\n  let {\n    freeze,\n    seal,\n    create\n  } = Object; // eslint-disable-line import/no-mutable-exports\n\n  let {\n    apply,\n    construct\n  } = typeof Reflect !== 'undefined' && Reflect;\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new Func(...args);\n    };\n  }\n\n  const arrayForEach = unapply(Array.prototype.forEach);\n  const arrayPop = unapply(Array.prototype.pop);\n  const arrayPush = unapply(Array.prototype.push);\n  const stringToLowerCase = unapply(String.prototype.toLowerCase);\n  const stringToString = unapply(String.prototype.toString);\n  const stringMatch = unapply(String.prototype.match);\n  const stringReplace = unapply(String.prototype.replace);\n  const stringIndexOf = unapply(String.prototype.indexOf);\n  const stringTrim = unapply(String.prototype.trim);\n  const regExpTest = unapply(RegExp.prototype.test);\n  const typeErrorCreate = unconstruct(TypeError);\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return apply(func, thisArg, args);\n    };\n  }\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return construct(func, args);\n    };\n  }\n  /* Add properties to a lookup table */\n\n  function addToSet(set, array, transformCaseFunc) {\n    var _transformCaseFunc;\n\n    transformCaseFunc = (_transformCaseFunc = transformCaseFunc) !== null && _transformCaseFunc !== void 0 ? _transformCaseFunc : stringToLowerCase;\n\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    let l = array.length;\n\n    while (l--) {\n      let element = array[l];\n\n      if (typeof element === 'string') {\n        const lcElement = transformCaseFunc(element);\n\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n  /* Shallow clone an object */\n\n  function clone(object) {\n    const newObject = create(null);\n\n    for (const [property, value] of entries(object)) {\n      newObject[property] = value;\n    }\n\n    return newObject;\n  }\n  /* This method automatically checks if the prop is function\n   * or getter and behaves accordingly. */\n\n  function lookupGetter(object, prop) {\n    while (object !== null) {\n      const desc = getOwnPropertyDescriptor(object, prop);\n\n      if (desc) {\n        if (desc.get) {\n          return unapply(desc.get);\n        }\n\n        if (typeof desc.value === 'function') {\n          return unapply(desc.value);\n        }\n      }\n\n      object = getPrototypeOf(object);\n    }\n\n    function fallbackValue(element) {\n      console.warn('fallback value for', element);\n      return null;\n    }\n\n    return fallbackValue;\n  }\n\n  const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\n  const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);\n  const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']); // List of SVG elements that are disallowed by default.\n  // We still need to know them so that we can do namespace\n  // checks properly in case one wants to add them to\n  // allow-list.\n\n  const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);\n  const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']); // Similarly to SVG, we want to know all MathML elements,\n  // even those that we disallow by default.\n\n  const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);\n  const text = freeze(['#text']);\n\n  const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', 'slot']);\n  const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n\n  const MUSTACHE_EXPR = seal(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\n  const ERB_EXPR = seal(/<%[\\w\\W]*|[\\w\\W]*%>/gm);\n  const TMPLIT_EXPR = seal(/\\${[\\w\\W]*}/gm);\n  const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\n  const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\n  const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  const ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g // eslint-disable-line no-control-regex\n  );\n  const DOCTYPE_NAME = seal(/^html$/i);\n\n  var EXPRESSIONS = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    MUSTACHE_EXPR: MUSTACHE_EXPR,\n    ERB_EXPR: ERB_EXPR,\n    TMPLIT_EXPR: TMPLIT_EXPR,\n    DATA_ATTR: DATA_ATTR,\n    ARIA_ATTR: ARIA_ATTR,\n    IS_ALLOWED_URI: IS_ALLOWED_URI,\n    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE: ATTR_WHITESPACE,\n    DOCTYPE_NAME: DOCTYPE_NAME\n  });\n\n  const getGlobal = () => typeof window === 'undefined' ? null : window;\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {HTMLScriptElement} purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported or creating the policy failed).\n   */\n\n\n  const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {\n    if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    } // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n\n\n    let suffix = null;\n    const ATTR_NAME = 'data-tt-policy-suffix';\n\n    if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {\n      suffix = purifyHostElement.getAttribute(ATTR_NAME);\n    }\n\n    const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML(html) {\n          return html;\n        },\n\n        createScriptURL(scriptUrl) {\n          return scriptUrl;\n        }\n\n      });\n    } catch (_) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    const DOMPurify = root => createDOMPurify(root);\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n\n\n    DOMPurify.version = '3.0.3';\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n\n    const originalDocument = window.document;\n    const currentScript = originalDocument.currentScript;\n    let {\n      document\n    } = window;\n    const {\n      DocumentFragment,\n      HTMLTemplateElement,\n      Node,\n      Element,\n      NodeFilter,\n      NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n      HTMLFormElement,\n      DOMParser,\n      trustedTypes\n    } = window;\n    const ElementPrototype = Element.prototype;\n    const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');\n    const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');\n    const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');\n    const getParentNode = lookupGetter(ElementPrototype, 'parentNode'); // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n\n    if (typeof HTMLTemplateElement === 'function') {\n      const template = document.createElement('template');\n\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    let trustedTypesPolicy;\n    let emptyHTML = '';\n    const {\n      implementation,\n      createNodeIterator,\n      createDocumentFragment,\n      getElementsByTagName\n    } = document;\n    const {\n      importNode\n    } = originalDocument;\n    let hooks = {};\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n\n    DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;\n    const {\n      MUSTACHE_EXPR,\n      ERB_EXPR,\n      TMPLIT_EXPR,\n      DATA_ATTR,\n      ARIA_ATTR,\n      IS_SCRIPT_OR_DATA,\n      ATTR_WHITESPACE\n    } = EXPRESSIONS;\n    let {\n      IS_ALLOWED_URI: IS_ALLOWED_URI$1\n    } = EXPRESSIONS;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    let ALLOWED_TAGS = null;\n    const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);\n    /* Allowed attribute names */\n\n    let ALLOWED_ATTR = null;\n    const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);\n    /*\n     * Configure how DOMPUrify should handle custom elements and their attributes as well as customized built-in elements.\n     * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)\n     * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)\n     * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.\n     */\n\n    let CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {\n      tagNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      attributeNameCheck: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: null\n      },\n      allowCustomizedBuiltInElements: {\n        writable: true,\n        configurable: false,\n        enumerable: true,\n        value: false\n      }\n    }));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n    let FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n    let FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n\n    let ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n\n    let ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n\n    let ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Decide if self-closing tags in attributes are allowed.\n     * Usually removed due to a mXSS issue in jQuery 3.0 */\n\n    let ALLOW_SELF_CLOSE_IN_ATTR = true;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n\n    let SAFE_FOR_TEMPLATES = false;\n    /* Decide if document with <html>... should be returned */\n\n    let WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n\n    let SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n\n    let FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n\n    let RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n    let RETURN_DOM_FRAGMENT = false;\n    /* Try to return a Trusted Type object instead of a string, return a string in\n     * case Trusted Types are not supported  */\n\n    let RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks?\n     * This sanitizes markups named with colliding, clobberable built-in DOM APIs.\n     */\n\n    let SANITIZE_DOM = true;\n    /* Achieve full DOM Clobbering protection by isolating the namespace of named\n     * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.\n     *\n     * HTML/DOM spec rules that enable DOM Clobbering:\n     *   - Named Access on Window (Â§7.3.3)\n     *   - DOM Tree Accessors (Â§3.1.5)\n     *   - Form Element Parent-Child Relations (Â§4.10.3)\n     *   - Iframe srcdoc / Nested WindowProxies (Â§4.8.5)\n     *   - HTMLCollection (Â§4.2.10.2)\n     *\n     * Namespace isolation is implemented by prefixing `id` and `name` attributes\n     * with a constant string, i.e., `user-content-`\n     */\n\n    let SANITIZE_NAMED_PROPS = false;\n    const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';\n    /* Keep element content when removing element? */\n\n    let KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n\n    let IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n\n    let USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n\n    let FORBID_CONTENTS = null;\n    const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n\n    let DATA_URI_TAGS = null;\n    const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);\n    /* Attributes safe for values like \"javascript:\" */\n\n    let URI_SAFE_ATTRIBUTES = null;\n    const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);\n    const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\n    const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n    const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\n    /* Document namespace */\n\n    let NAMESPACE = HTML_NAMESPACE;\n    let IS_EMPTY_INPUT = false;\n    /* Allowed XHTML+XML namespaces */\n\n    let ALLOWED_NAMESPACES = null;\n    const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);\n    /* Parsing of strict XHTML documents */\n\n    let PARSER_MEDIA_TYPE;\n    const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];\n    const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';\n    let transformCaseFunc;\n    /* Keep a reference to config to pass to hooks */\n\n    let CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n\n    /* ______________________________________________ */\n\n    const formElement = document.createElement('form');\n\n    const isRegexOrFunction = function isRegexOrFunction(testValue) {\n      return testValue instanceof RegExp || testValue instanceof Function;\n    };\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n\n\n    const _parseConfig = function _parseConfig(cfg) {\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n\n\n      if (!cfg || typeof cfg !== 'object') {\n        cfg = {};\n      }\n      /* Shield configuration object from prototype pollution */\n\n\n      cfg = clone(cfg);\n      PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes\n      SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE; // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.\n\n      transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;\n      /* Set configuration parameters */\n\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;\n      ALLOWED_NAMESPACES = 'ALLOWED_NAMESPACES' in cfg ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), // eslint-disable-line indent\n      cfg.ADD_URI_SAFE_ATTR, // eslint-disable-line indent\n      transformCaseFunc // eslint-disable-line indent\n      ) // eslint-disable-line indent\n      : DEFAULT_URI_SAFE_ATTRIBUTES;\n      DATA_URI_TAGS = 'ADD_DATA_URI_TAGS' in cfg ? addToSet(clone(DEFAULT_DATA_URI_TAGS), // eslint-disable-line indent\n      cfg.ADD_DATA_URI_TAGS, // eslint-disable-line indent\n      transformCaseFunc // eslint-disable-line indent\n      ) // eslint-disable-line indent\n      : DEFAULT_DATA_URI_TAGS;\n      FORBID_CONTENTS = 'FORBID_CONTENTS' in cfg ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n      ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true\n\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n      SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false\n\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n      IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n      NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;\n      CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;\n      }\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {\n        CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;\n      }\n\n      if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {\n        CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;\n      }\n\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n\n\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [...text]);\n        ALLOWED_ATTR = [];\n\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html$1);\n          addToSet(ALLOWED_ATTR, html);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg$1);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl$1);\n          addToSet(ALLOWED_ATTR, mathMl);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n\n\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);\n      }\n\n      if (cfg.FORBID_CONTENTS) {\n        if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {\n          FORBID_CONTENTS = clone(FORBID_CONTENTS);\n        }\n\n        addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n\n\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      }\n\n      if (cfg.TRUSTED_TYPES_POLICY) {\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createHTML\" hook.');\n        }\n\n        if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {\n          throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a \"createScriptURL\" hook.');\n        } // Overwrite existing TrustedTypes policy.\n\n\n        trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY; // Sign local variables required by `sanitize`.\n\n        emptyHTML = trustedTypesPolicy.createHTML('');\n      } else {\n        // Uninitialized policy, attempt to initialize the internal dompurify policy.\n        if (trustedTypesPolicy === undefined) {\n          trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);\n        } // If creating the internal policy succeeded sign internal variables.\n\n\n        if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {\n          emptyHTML = trustedTypesPolicy.createHTML('');\n        }\n      } // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n\n\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n\n    const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);\n    const HTML_INTEGRATION_POINTS = addToSet({}, ['foreignobject', 'desc', 'title', 'annotation-xml']); // Certain elements are allowed in both SVG and HTML\n    // namespace. We need to specify them explicitly\n    // so that they don't get erroneously deleted from\n    // HTML namespace.\n\n    const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);\n    /* Keep track of all possible SVG and MathML tags\n     * so that we can perform the namespace checks\n     * correctly. */\n\n    const ALL_SVG_TAGS = addToSet({}, svg$1);\n    addToSet(ALL_SVG_TAGS, svgFilters);\n    addToSet(ALL_SVG_TAGS, svgDisallowed);\n    const ALL_MATHML_TAGS = addToSet({}, mathMl$1);\n    addToSet(ALL_MATHML_TAGS, mathMlDisallowed);\n    /**\n     *\n     *\n     * @param  {Element} element a DOM element whose namespace is being checked\n     * @returns {boolean} Return false if the element has a\n     *  namespace that a spec-compliant parser would never\n     *  return. Return true otherwise.\n     */\n\n    const _checkValidNamespace = function _checkValidNamespace(element) {\n      let parent = getParentNode(element); // In JSDOM, if we're inside shadow DOM, then parentNode\n      // can be null. We just simulate parent in this case.\n\n      if (!parent || !parent.tagName) {\n        parent = {\n          namespaceURI: NAMESPACE,\n          tagName: 'template'\n        };\n      }\n\n      const tagName = stringToLowerCase(element.tagName);\n      const parentTagName = stringToLowerCase(parent.tagName);\n\n      if (!ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return false;\n      }\n\n      if (element.namespaceURI === SVG_NAMESPACE) {\n        // The only way to switch from HTML namespace to SVG\n        // is via <svg>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'svg';\n        } // The only way to switch from MathML to SVG is via`\n        // svg if parent is either <annotation-xml> or MathML\n        // text integration points.\n\n\n        if (parent.namespaceURI === MATHML_NAMESPACE) {\n          return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);\n        } // We only allow elements that are defined in SVG\n        // spec. All others are disallowed in SVG namespace.\n\n\n        return Boolean(ALL_SVG_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === MATHML_NAMESPACE) {\n        // The only way to switch from HTML namespace to MathML\n        // is via <math>. If it happens via any other tag, then\n        // it should be killed.\n        if (parent.namespaceURI === HTML_NAMESPACE) {\n          return tagName === 'math';\n        } // The only way to switch from SVG to MathML is via\n        // <math> and HTML integration points\n\n\n        if (parent.namespaceURI === SVG_NAMESPACE) {\n          return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];\n        } // We only allow elements that are defined in MathML\n        // spec. All others are disallowed in MathML namespace.\n\n\n        return Boolean(ALL_MATHML_TAGS[tagName]);\n      }\n\n      if (element.namespaceURI === HTML_NAMESPACE) {\n        // The only way to switch from SVG to HTML is via\n        // HTML integration points, and from MathML to HTML\n        // is via MathML text integration points\n        if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        }\n\n        if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {\n          return false;\n        } // We disallow tags that are specific for MathML\n        // or SVG and should never appear in HTML namespace\n\n\n        return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);\n      } // For XHTML and XML documents that support custom namespaces\n\n\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {\n        return true;\n      } // The code should never reach this place (this means\n      // that the element somehow got namespace that is not\n      // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).\n      // Return false just in case.\n\n\n      return false;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n\n\n    const _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n\n      try {\n        // eslint-disable-next-line unicorn/prefer-dom-node-remove\n        node.parentNode.removeChild(node);\n      } catch (_) {\n        node.remove();\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n\n\n    const _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (_) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name); // We void attribute values for unremovable \"is\"\" attributes\n\n      if (name === 'is' && !ALLOWED_ATTR[name]) {\n        if (RETURN_DOM || RETURN_DOM_FRAGMENT) {\n          try {\n            _forceRemove(node);\n          } catch (_) {}\n        } else {\n          try {\n            node.setAttribute(name, '');\n          } catch (_) {}\n        }\n      }\n    };\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n\n\n    const _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      let doc;\n      let leadingWhitespace;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        const matches = stringMatch(dirty, /^[\\r\\n\\t ]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n\n      if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {\n        // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)\n        dirty = '<html xmlns=\"http://www.w3.org/1999/xhtml\"><head></head><body>' + dirty + '</body></html>';\n      }\n\n      const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /*\n       * Use the DOMParser API by default, fallback later if needs be\n       * DOMParser not work for svg when has multiple root element.\n       */\n\n      if (NAMESPACE === HTML_NAMESPACE) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);\n        } catch (_) {}\n      }\n      /* Use createHTMLDocument in case DOMParser is not available */\n\n\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createDocument(NAMESPACE, 'template', null);\n\n        try {\n          doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;\n        } catch (_) {// Syntax error if dirtyPayload is invalid xml\n        }\n      }\n\n      const body = doc.body || doc.documentElement;\n\n      if (dirty && leadingWhitespace) {\n        body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n\n\n      if (NAMESPACE === HTML_NAMESPACE) {\n        return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n      }\n\n      return WHOLE_DOCUMENT ? doc.documentElement : body;\n    };\n    /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */\n\n\n    const _createIterator = function _createIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, // eslint-disable-next-line no-bitwise\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, null, false);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n\n\n    const _isClobbered = function _isClobbered(elm) {\n      return elm instanceof HTMLFormElement && (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string' || typeof elm.insertBefore !== 'function' || typeof elm.hasChildNodes !== 'function');\n    };\n    /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n\n\n    const _isNode = function _isNode(object) {\n      return typeof Node === 'object' ? object instanceof Node : object && typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string';\n    };\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n\n\n    const _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      arrayForEach(hooks[entryPoint], hook => {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n\n\n    const _sanitizeElements = function _sanitizeElements(currentNode) {\n      let content;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeElements', currentNode, null);\n      /* Check if element is clobbered or can clobber */\n\n\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Now let's check the element's type and name */\n\n\n      const tagName = transformCaseFunc(currentNode.nodeName);\n      /* Execute a hook if present */\n\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Detect mXSS attempts abusing namespace confusion */\n\n\n      if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\\w]/g, currentNode.innerHTML) && regExpTest(/<[/\\w]/g, currentNode.textContent)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n\n\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Check if we have a custom element to handle */\n        if (!FORBID_TAGS[tagName] && _basicCustomElementTest(tagName)) {\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) return false;\n          if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) return false;\n        }\n        /* Keep content except for bad-listed elements */\n\n\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {\n          const parentNode = getParentNode(currentNode) || currentNode.parentNode;\n          const childNodes = getChildNodes(currentNode) || currentNode.childNodes;\n\n          if (childNodes && parentNode) {\n            const childCount = childNodes.length;\n\n            for (let i = childCount - 1; i >= 0; --i) {\n              parentNode.insertBefore(cloneNode(childNodes[i], true), getNextSibling(currentNode));\n            }\n          }\n        }\n\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Check whether element has a valid namespace */\n\n\n      if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Make sure that older browsers don't get noscript mXSS */\n\n\n      if ((tagName === 'noscript' || tagName === 'noembed') && regExpTest(/<\\/no(script|embed)/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Sanitize element content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        content = stringReplace(content, MUSTACHE_EXPR, ' ');\n        content = stringReplace(content, ERB_EXPR, ' ');\n        content = stringReplace(content, TMPLIT_EXPR, ' ');\n\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n\n\n    const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        if ( // First condition does a very basic check if a) it's basically a valid custom element tagname AND\n        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n        _basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND\n        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n        lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {\n          return false;\n        }\n        /* Check value is safe. First, is attr inert? If so, is safe */\n\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {\n        return false;\n      } else ;\n\n      return true;\n    };\n    /**\n     * _basicCustomElementCheck\n     * checks if at least one dash is included in tagName, and it's not the first char\n     * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name\n     * @param {string} tagName name of the tag of the node to sanitize\n     */\n\n\n    const _basicCustomElementTest = function _basicCustomElementTest(tagName) {\n      return tagName.indexOf('-') > 0;\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n\n\n    const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      let attr;\n      let value;\n      let lcName;\n      let l;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      const {\n        attributes\n      } = currentNode;\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      const hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n\n      while (l--) {\n        attr = attributes[l];\n        const {\n          name,\n          namespaceURI\n        } = attr;\n        value = name === 'value' ? attr.value : stringTrim(attr.value);\n        lcName = transformCaseFunc(name);\n        /* Execute a hook if present */\n\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n        value = hookEvent.attrValue;\n        /* Did the hooks approve of the attribute? */\n\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n\n\n        _removeAttribute(name, currentNode);\n        /* Did the hooks approve of the attribute? */\n\n\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n\n\n        if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n\n\n        if (SAFE_FOR_TEMPLATES) {\n          value = stringReplace(value, MUSTACHE_EXPR, ' ');\n          value = stringReplace(value, ERB_EXPR, ' ');\n          value = stringReplace(value, TMPLIT_EXPR, ' ');\n        }\n        /* Is `value` valid for this attribute? */\n\n\n        const lcTag = transformCaseFunc(currentNode.nodeName);\n\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Full DOM Clobbering protection via namespace isolation,\n         * Prefix id and name attributes with `user-content-`\n         */\n\n\n        if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {\n          // Remove the attribute with this value\n          _removeAttribute(name, currentNode); // Prefix the value and later re-create the attribute with the sanitized value\n\n\n          value = SANITIZE_NAMED_PROPS_PREFIX + value;\n        }\n        /* Handle attributes that require Trusted Types */\n\n\n        if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {\n          if (namespaceURI) ; else {\n            switch (trustedTypes.getAttributeType(lcTag, lcName)) {\n              case 'TrustedHTML':\n                {\n                  value = trustedTypesPolicy.createHTML(value);\n                  break;\n                }\n\n              case 'TrustedScriptURL':\n                {\n                  value = trustedTypesPolicy.createScriptURL(value);\n                  break;\n                }\n            }\n          }\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n\n\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          arrayPop(DOMPurify.removed);\n        } catch (_) {}\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n\n\n    const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      let shadowNode;\n\n      const shadowIterator = _createIterator(fragment);\n      /* Execute a hook if present */\n\n\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n        /* Deep shadow DOM detected */\n\n\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(shadowNode);\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */\n    // eslint-disable-next-line complexity\n\n\n    DOMPurify.sanitize = function (dirty) {\n      let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let body;\n      let importedNode;\n      let currentNode;\n      let returnNode;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n\n      IS_EMPTY_INPUT = !dirty;\n\n      if (IS_EMPTY_INPUT) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n\n\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        if (typeof dirty.toString === 'function') {\n          dirty = dirty.toString();\n\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        } else {\n          throw typeErrorCreate('toString is not a function');\n        }\n      }\n      /* Return dirty HTML if DOMPurify cannot run */\n\n\n      if (!DOMPurify.isSupported) {\n        return dirty;\n      }\n      /* Assign config vars */\n\n\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n\n\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n\n      if (IN_PLACE) {\n        /* Do some early pre-sanitization to avoid unsafe root nodes */\n        if (dirty.nodeName) {\n          const tagName = transformCaseFunc(dirty.nodeName);\n\n          if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n            throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');\n          }\n        }\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!---->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-dom-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes\n        dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n\n\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n\n        if (!body) {\n          return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n\n\n      const nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n\n\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Sanitize tags and elements */\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n        /* Shadow DOM detected, sanitize it */\n\n\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(currentNode);\n      }\n      /* If we sanitized `dirty` in-place, return it. */\n\n\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n\n\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-dom-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmod) {\n          /*\n            AdoptNode() is not used because internal state is not reset\n            (e.g. the past names map of a HTMLFormElement), this is safe\n            in theory but we would rather not risk another attack vector.\n            The state that is cloned by importNode() is explicitly defined\n            by the specs.\n          */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Serialize doctype if allowed */\n\n      if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {\n        serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\\n' + serializedHTML;\n      }\n      /* Sanitize final string template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES) {\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR, ' ');\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR, ' ');\n        serializedHTML = stringReplace(serializedHTML, TMPLIT_EXPR, ' ');\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n\n\n    DOMPurify.setConfig = function (cfg) {\n      _parseConfig(cfg);\n\n      SET_CONFIG = true;\n    };\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n\n\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n\n\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      const lcTag = transformCaseFunc(tag);\n      const lcName = transformCaseFunc(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n\n\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     * @return {Function} removed(popped) hook\n     */\n\n\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        return arrayPop(hooks[entryPoint]);\n      }\n    };\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n\n\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */\n\n\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n\n  return purify;\n\n}));\n\n\n//# sourceURL=webpack://$/./node_modules/dompurify/dist/purify.js?");

/***/ }),

/***/ "./src/viewer/Style.css":
/*!******************************!*\
  !*** ./src/viewer/Style.css ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!./Style.css */ \"./node_modules/css-loader/dist/cjs.js!./src/viewer/Style.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_Style_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://$/./src/viewer/Style.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://$/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://$/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://$/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://$/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://$/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://$/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/constants/Constants.ts":
/*!************************************!*\
  !*** ./src/constants/Constants.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//SOP:\nvar SOP_CLASS_UIDS = {\n    Sop12LeadECGWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.1.1',\n    GeneralECGWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.1.2',\n    AmbulatoryECGWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.1.3',\n    HemodynamicWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.2.1',\n    CardiacElectrophysiologyWaveformStorage: '1.2.840.10008.5.1.4.1.1.9.2.1',\n};\nexports[\"default\"] = { SOP_CLASS_UIDS: SOP_CLASS_UIDS };\n\n\n//# sourceURL=webpack://$/./src/constants/Constants.ts?");

/***/ }),

/***/ "./src/draw/DrawECGCanvas.ts":
/*!***********************************!*\
  !*** ./src/draw/DrawECGCanvas.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar GenericCanvas_1 = __webpack_require__(/*! ./GenericCanvas */ \"./src/draw/GenericCanvas.ts\");\n//Global variable for pan and drag:\n//The global variable is necessary since we have to remove an event listener that we call from 2 places in the same class.\nvar pan = {\n    start: { x: null, y: null, },\n    offset: { x: 0, y: 0, },\n    globaloffset: { x: 0, y: 0, },\n};\n/**\n * Draw grid canvas template.\n */\nvar DrawECGCanvas = /** @class */ (function (_super) {\n    __extends(DrawECGCanvas, _super);\n    function DrawECGCanvas(id_canvas, dataMg) {\n        var _this = _super.call(this, id_canvas, dataMg) || this;\n        _this.margin = 20; //Margin to draw elements.\n        _this.changeValues = 0.05; //Value of change up down, left o right graph.\n        _this.scale = 1;\n        _this.scaleFactor = 0.8;\n        //Reset values pan:\n        pan.start.x = null;\n        pan.start.y = null;\n        pan.offset.x = 0;\n        pan.offset.y = 0;\n        pan.globaloffset.x = 0;\n        pan.globaloffset.y = 0;\n        //Event buttons:\n        _this.buttonsEvents();\n        return _this;\n    }\n    //--------------------------------------------------------\n    //------------------ DRAW AND EVENTS ---------------------\n    //--------------------------------------------------------\n    //#region DRAW AND EVENTS:\n    /**\n     * Draw grid and views.\n     * We don't put requestAnimationFrame since it only renders when we zoom, redraw or move, that's why I don't put the method to be loading all the time without need.\n     */\n    DrawECGCanvas.prototype.draw = function () {\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        //Zoom:\n        this.ctx.scale(this.scale, this.scale);\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        //Pan:\n        this.ctx.translate(pan.offset.x, pan.offset.y);\n        //Draw:\n        this.drawGrid();\n        this.drawECG();\n    };\n    /**\n     * Load view no compatible:\n     */\n    DrawECGCanvas.prototype.drawNoCompatible = function () {\n        this.ctx.font = \"3rem Arial\";\n        this.ctx.fillText(\"ECG NO COMPATIBLE\", this.canvas.width / 2, this.canvas.height / 2);\n    };\n    /**\n     * Events buttons.\n     */\n    DrawECGCanvas.prototype.buttonsEvents = function () {\n        var _this = this;\n        //AMPLITUDE mm/mV:\n        var buttonAmUp = document.getElementById('amplitudeUp');\n        buttonAmUp.addEventListener('click', function () { return _this.changeAmplitude(true); });\n        var buttonAmDown = document.getElementById('amplitudeDown');\n        buttonAmDown.addEventListener('click', function () { return _this.changeAmplitude(false); });\n        //TEMPO mm/s\n        var buttonTempoUp = document.getElementById('timeLeft');\n        buttonTempoUp.addEventListener('click', function () { return _this.changeTempo(true); });\n        var buttonTempoDown = document.getElementById('timeRight');\n        buttonTempoDown.addEventListener('click', function () { return _this.changeTempo(false); });\n        //Zoom:\n        var buttonZoomMax = document.getElementById(\"plus\");\n        buttonZoomMax.addEventListener(\"click\", function () { return _this.changeZoom(false); });\n        var buttonZoomMin = document.getElementById(\"minus\");\n        buttonZoomMin.addEventListener(\"click\", function () { return _this.changeZoom(true); });\n        //Drag/Pan:\n        this.canvas.addEventListener('mousedown', function (e) { return _this.startPan(e); });\n        this.canvas.addEventListener('mouseleave', function () { return _this.endPan(); });\n        this.canvas.addEventListener('mouseup', function () { return _this.endPan(); });\n    };\n    /**\n     * Start pan.\n     * @param e event.\n     */\n    DrawECGCanvas.prototype.startPan = function (e) {\n        var _this = this;\n        this.canvas.addEventListener(\"mousemove\", this.trackMouse);\n        this.canvas.addEventListener(\"mousemove\", function () { return _this.draw(); });\n        pan.start.x = e.clientX;\n        pan.start.y = e.clientY;\n    };\n    /**\n     * End pan.\n     */\n    DrawECGCanvas.prototype.endPan = function () {\n        this.canvas.removeEventListener(\"mousemove\", this.trackMouse);\n        pan.start.x = null;\n        pan.start.y = null;\n        pan.globaloffset.x = pan.offset.x;\n        pan.globaloffset.y = pan.offset.y;\n    };\n    /**\n     * Track mose x & y.\n     * @param e event.\n     */\n    DrawECGCanvas.prototype.trackMouse = function (e) {\n        var offsetX = e.clientX - pan.start.x;\n        var offsetY = e.clientY - pan.start.y;\n        pan.offset.x = pan.globaloffset.x + offsetX;\n        pan.offset.y = pan.globaloffset.y + offsetY;\n    };\n    /**\n     * Change zoom, scale canvas, and adjust line stroke.\n     * @param min minimize or maximize\n     */\n    DrawECGCanvas.prototype.changeZoom = function (min) {\n        //Zoom:\n        if (min) {\n            this.scale *= this.scaleFactor;\n            if (this.configuration.CURVE_WIDTH < 1.5 && this.scale < 3.80) {\n                this.configuration.CURVE_WIDTH += 0.2;\n            }\n        }\n        else {\n            this.scale /= this.scaleFactor;\n            if (this.configuration.CURVE_WIDTH > 0.5) {\n                this.configuration.CURVE_WIDTH -= 0.2;\n            }\n        }\n        //Max undefinded and min zoom = zoom base:\n        if (this.scale <= 1) {\n            this.scale = 1;\n        }\n        else {\n            this.draw();\n        }\n    };\n    /**\n     * Change amplitude\n     * @param up up or down.\n     */\n    DrawECGCanvas.prototype.changeAmplitude = function (up) {\n        var ampli;\n        if (up) {\n            ampli = this.configuration.AMPLITUDE + this.changeValues;\n        }\n        else {\n            ampli = this.configuration.AMPLITUDE - this.changeValues;\n        }\n        ampli = Math.round(ampli * 100) / 100;\n        //Max 1.0 = 100mm/mV | min 0.05 = 5mm/mV\n        if (ampli <= 1.0 && ampli >= this.changeValues) {\n            //Change amplitude:\n            this.amplitude = ampli;\n            this.draw();\n            //Update text:\n            var text = document.getElementById('textAmplitude');\n            text.innerText = \" \" + Math.round(ampli * 100) + \"mm/mV \";\n        }\n    };\n    /**\n     * Change tempo.\n     * @param left left or right\n     */\n    DrawECGCanvas.prototype.changeTempo = function (left) {\n        var time;\n        if (left) {\n            time = this.configuration.TIME - this.changeValues;\n        }\n        else {\n            time = this.configuration.TIME + this.changeValues;\n        }\n        time = Math.round(time * 100) / 100;\n        //Max 1.0 = 100mm/ss | min 0.5 = 5mm/ss\n        if (time <= 1.0 && time >= this.changeValues) {\n            //Change amplitude:\n            this.time = time;\n            this.draw();\n            //Update text:\n            var text = document.getElementById('textTime');\n            text.innerText = \" \" + Math.round(time * 100) + \"mm/s \";\n        }\n    };\n    //#endregion\n    //--------------------------------------------------------\n    //----------------   DRAW GRID   -------------------------\n    //--------------------------------------------------------\n    //#region DRAW GRID\n    /**\n     * Draw the grid\n     */\n    DrawECGCanvas.prototype.drawGrid = function () {\n        var w = this.width - 1;\n        var h = this.height - 1;\n        var bs = this.blockSize;\n        var cs = this.cellSize;\n        var lw = this.ctx.lineWidth;\n        var ss = this.ctx.strokeStyle;\n        this.ctx.strokeStyle = this.configuration.GRID_COLOR;\n        for (var y = h; y >= 0; y -= cs) {\n            this.ctx.beginPath();\n            this.ctx.lineWidth =\n                (h - y) % bs\n                    ? this.configuration.CELL_WIDTH\n                    : this.configuration.BLOCK_WIDTH;\n            this.drawLine(0, y, w, y);\n            this.ctx.closePath();\n            this.ctx.stroke();\n        }\n        for (var x = 0; x <= w; x += cs) {\n            this.ctx.beginPath();\n            this.ctx.lineWidth =\n                x % bs ? this.configuration.CELL_WIDTH : this.configuration.BLOCK_WIDTH;\n            this.drawLine(x, 0, x, h);\n            this.ctx.closePath();\n            this.ctx.stroke();\n        }\n        this.ctx.lineWidth = lw;\n        this.ctx.strokeStyle = ss;\n        //Draw indicators:\n        this.drawECGIndicators();\n    };\n    //Draw I, II, III, aVR, aVL, aVF, V1, V2, V3, V4, V5, V6\n    DrawECGCanvas.prototype.drawECGIndicators = function () {\n        var gridWidth = this.canvas.width / this.configuration.COLUMNS;\n        var gridHeight = this.canvas.height / this.configuration.ROWS;\n        var marginWidth = 10;\n        this.ctx.font = \"small-caps 800 25px Times New Roman\";\n        //Inicialize array:\n        this.positionsDraw = new Array();\n        //COLUMNS:\n        for (var e = 0; e < this.configuration.COLUMNS; e++) {\n            var middleHeight = gridHeight / 2;\n            //ROWS:\n            for (var i = 0; i < this.configuration.ROWS; i++) {\n                this.ctx.fillText(this.configuration.columnsText[e][i], marginWidth, middleHeight - this.margin);\n                //Save positions for drawECG:\n                var position = {\n                    name: this.configuration.columnsText[e][i],\n                    width: marginWidth,\n                    height: middleHeight,\n                };\n                this.positionsDraw.push(position);\n                middleHeight += gridHeight;\n            }\n            marginWidth += gridWidth;\n        }\n    };\n    //#endregion\n    //--------------------------------------------------------\n    //----------------    DRAW ECG   -------------------------\n    //--------------------------------------------------------\n    //#region DRAW ECG\n    /**\n     * Draw lines.\n     */\n    DrawECGCanvas.prototype.drawECG = function () {\n        var _loop_1 = function (ileads) {\n            var code = this_1.dataMg.channelDefinitionSequence[ileads].ChannelLabel;\n            //No exist ChannelLabel code: \n            if (code == undefined) {\n                var codeMeaning = this_1.dataMg.channelDefinitionSequence[ileads].ChannelSourceSequence[0].CodeMeaning;\n                if (codeMeaning.split(\" \").length === 2 || codeMeaning.split(\" \").length === 3) { //3 text + Bethoven:\n                    code = codeMeaning.split(\" \")[1];\n                }\n            }\n            else {\n                if (code.split(\" \").length === 2 || code.split(\" \").length === 3) { //3 text + Bethoven:\n                    code = code.split(\" \")[1];\n                }\n                else if (code.split(\"_\").length === 2 || code.split(\"_\").length === 3) { //3 text + Bethoven:\n                    code = code.split(\"_\")[1];\n                }\n            }\n            var objPosition = this_1.positionsDraw.find(function (obj) {\n                return obj.name === code;\n            });\n            //Variables:\n            var data = [];\n            var time = 0;\n            var i = 0;\n            var positionMaxPointFrec = 0;\n            //Reference to draw:\n            var startY = objPosition.height;\n            var startX = objPosition.width + this_1.margin; //Margin left and right to draw:\n            var latestPosition = startY;\n            //Load data:\n            this_1.dataMg.leads[ileads].signal.forEach(function (element) {\n                data.push(element);\n            });\n            //Colum calculator margins left and right:\n            var space = this_1.canvas.width / 2 - (startX + this_1.margin);\n            if (startX != 10 + this_1.margin) {\n                space = (this_1.canvas.width / 2) - (this_1.margin + 10);\n            }\n            //Line options:\n            this_1.ctx.lineWidth = this_1.configuration.CURVE_WIDTH;\n            this_1.ctx.lineCap = 'round';\n            //Draw line:\n            while (i < data.length && time < space) {\n                //10mV/s:\n                var point = ((data[i] * objPosition.height) * this_1.configuration.AMPLITUDE); //Rescalate. 10mV/s Each square is 1 mm.\n                //Draw line:\n                this_1.ctx.beginPath();\n                this_1.drawLine(startX + time, latestPosition, startX + time, startY - point);\n                this_1.ctx.stroke();\n                //Positions:\n                latestPosition = startY - point;\n                //Duration / time / 100\n                //25mm/s Each square is 1 mm\n                time += (this_1.dataMg.duration / this_1.configuration.TIME) / 100;\n                i++;\n            }\n        };\n        var this_1 = this;\n        //CHANNELS:\n        for (var ileads = 0; ileads < this.dataMg.leads.length; ileads++) {\n            _loop_1(ileads);\n        }\n        ;\n        //Clear data:\n        this.positionsDraw = null;\n    };\n    return DrawECGCanvas;\n}(GenericCanvas_1.default));\nexports[\"default\"] = DrawECGCanvas;\n\n\n//# sourceURL=webpack://$/./src/draw/DrawECGCanvas.ts?");

/***/ }),

/***/ "./src/draw/GenericCanvas.ts":
/*!***********************************!*\
  !*** ./src/draw/GenericCanvas.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Generic class canvas.\n */\nvar GenericCanvas = /** @class */ (function () {\n    /**\n     * Constructor.\n     * @param id_canvas ID Canvas view.\n     * @param dataMg data Dicom.\n     */\n    function GenericCanvas(id_canvas, dataMg) {\n        //Configuration:\n        this.configuration = {\n            //GRID:\n            CELL_WIDTH: 0.1,\n            CELL_SIZE: 6,\n            BLOCK_WIDTH: 0.2,\n            BLOCK_SIZE: 0,\n            //ROWS and COLUMNS canvas separation I, II, III, aVR, aVL, aVF, V1, V2, V3, V4, V5, V6\n            ROWS: 6,\n            COLUMNS: 2,\n            columnsText: [\n                [\"I\", \"II\", \"III\", \"aVR\", \"aVL\", \"aVF\"],\n                [\"V1\", \"V2\", \"V3\", \"V4\", \"V5\", \"V6\"], // Colum 2\n            ],\n            //LINE ECG:\n            CURVE_WIDTH: 1.5,\n            SAMPLING_RATE: 125,\n            FREQUENCY: 250,\n            TIME: 0.25,\n            AMPLITUDE: 0.10,\n            //DESING:\n            GRID_COLOR: \"#F08080\",\n            LINE_COLOR: \"#000033\",\n            BACKGROUND_COLOR: \"#F9F8F2\",\n            HEIGHT_USER_INFO: 100, //Start grid draw.\n        };\n        this.dataMg = dataMg;\n        //Canvas ECG:\n        this.canvas = document.getElementById(id_canvas);\n        this.ctx = this.canvas.getContext(\"2d\");\n        //Canvas resize:\n        var restHeight = document.getElementById('divTableBody').clientHeight + document.getElementById('toolsECG').clientHeight;\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight - restHeight; //Rest height information and buttons.\n        this.canvas.style.width = \"100%\";\n        this.canvas.style.height = \"85%\"; //Aprox infoECG 15%\n        //Color canvas:\n        this.canvas.style.backgroundColor = this.configuration.BACKGROUND_COLOR;\n        //Block size:\n        this.configuration.BLOCK_SIZE = this.configuration.CELL_SIZE * 5;\n        //Frequency data dcm:\n        this.configuration.FREQUENCY = dataMg.samplingFrequency;\n    }\n    /**\n     * Draw a line from point (x1, y1) to point (x2, y2)\n     * @param x1 moveTo(x1).\n     * @param y1 moveTo(y1).\n     * @param x2 lineTo(x2).\n     * @param y2 lineTo(y2).\n     */\n    GenericCanvas.prototype.drawLine = function (x1, y1, x2, y2) {\n        this.ctx.moveTo(x1, y1);\n        this.ctx.lineTo(x2, y2);\n    };\n    Object.defineProperty(GenericCanvas.prototype, \"cellSize\", {\n        //GET Methods:\n        /**\n         * Returns the cell size\n         * @return the cell size\n         */\n        get: function () {\n            return this.configuration.CELL_SIZE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"blockSize\", {\n        /**\n         * Returns the block size\n         * @return the block size\n         */\n        get: function () {\n            return 5 * this.configuration.CELL_SIZE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"cellsPerPeriod\", {\n        /**\n         * Returns the number of cells per period\n         * @return the number of cells per period\n         */\n        get: function () {\n            return Math.floor(this.width / this.cellSize);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"samplesPerCell\", {\n        /**\n         * Returns the number of samples per cell\n         * @return the number of samples per cell\n         */\n        get: function () {\n            return 0.04 * this.samplingRate;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"samplingRate\", {\n        /**\n         * Returns the number of samples per second\n         * @return the number of samples per second\n         */\n        get: function () {\n            return this.configuration.SAMPLING_RATE;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"samplesPerPeriod\", {\n        /**\n         * Returns the number of samples per period\n         * @return the number of samples per period\n         */\n        get: function () {\n            return Math.floor(0.04 * this.samplingRate * (this.width / this.cellSize));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"width\", {\n        /**\n         * Returns the width of this electrocardiogram\n         * @return the width of this electrocardiogram\n         */\n        get: function () {\n            return this.ctx.canvas.width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"height\", {\n        /**\n         * Returns the height of this electrocardiogram\n         * @return the height of this electrocardiogram\n         */\n        get: function () {\n            return this.ctx.canvas.height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"period\", {\n        /**\n         * Returns the period (seconds) of this electrocardiogram\n         * @return the period of this electrocardiogram\n         */\n        get: function () {\n            return (0.04 * this.width) / this.cellSize;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"time\", {\n        /**\n         * Change time.\n         */\n        set: function (time) {\n            this.configuration.TIME = time;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(GenericCanvas.prototype, \"amplitude\", {\n        /**\n         * Change amplitude.\n         */\n        set: function (ampli) {\n            this.configuration.AMPLITUDE = ampli;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return GenericCanvas;\n}());\nexports[\"default\"] = GenericCanvas;\n\n\n//# sourceURL=webpack://$/./src/draw/GenericCanvas.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Constants = exports.DicomECGViewer = exports.ReadECG = void 0;\nvar ReadECG_1 = __webpack_require__(/*! ./utils/ReadECG */ \"./src/utils/ReadECG.ts\"); //Development\nexports.ReadECG = ReadECG_1.default;\nvar Constants_1 = __webpack_require__(/*! ./constants/Constants */ \"./src/constants/Constants.ts\");\nexports.Constants = Constants_1.default;\nvar DicomECGViewer_1 = __webpack_require__(/*! ./viewer/DicomECGViewer */ \"./src/viewer/DicomECGViewer.ts\");\nexports.DicomECGViewer = DicomECGViewer_1.default;\n\n\n//# sourceURL=webpack://$/./src/index.ts?");

/***/ }),

/***/ "./src/utils/ReadECG.ts":
/*!******************************!*\
  !*** ./src/utils/ReadECG.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar dcmjs = __webpack_require__(/*! dcmjs */ \"./node_modules/dcmjs/build/dcmjs.es.js\");\nvar _a = dcmjs.data, DicomMetaDictionary = _a.DicomMetaDictionary, DicomMessage = _a.DicomMessage, ReadBufferStream = _a.ReadBufferStream, WriteBufferStream = _a.WriteBufferStream;\nvar RenderingDefaults = {\n    DefaultSpeed: 25.0,\n    DefaultAmplitude: 10.0, //10mm/mV\n};\n/**\n * ReadECG.\n * --> https://dicom.nema.org/medical/dicom/current/output/html/part16.html\n * --> https://dicom.nema.org/medical/dicom/2017e/output/chtml/part06/chapter_6.html\n * Thanks to the author PantelisGeorgiadis in his project https://github.com/PantelisGeorgiadis/dcmjs-ecg since it is an adaptation of what has been done.\n */\nvar DicomEcg = /** @class */ (function () {\n    /**\n     * Creates an instance of DicomEcg.\n     * @constructor\n     * @param {Object|ArrayBuffer} [elementsOrBuffer] - Dataset elements as object or encoded as a DICOM dataset buffer.\n     * @param {string} [transferSyntaxUid] - Dataset transfer syntax.\n     * @param {Object} [opts] - Rendering options.\n     */\n    function DicomEcg(elementsOrBuffer, transferSyntaxUid, opts) {\n        //Load options:\n        this._setOpts(opts);\n        this.transferSyntaxUid = transferSyntaxUid || '1.2.840.10008.1.2';\n        if (elementsOrBuffer instanceof ArrayBuffer) {\n            if (transferSyntaxUid) {\n                this.elements = this._fromElementsBuffer(elementsOrBuffer, transferSyntaxUid);\n            }\n            else {\n                var ret = this._fromP10Buffer(elementsOrBuffer);\n                this.elements = ret.elements;\n                this.transferSyntaxUid = ret.transferSyntaxUid;\n            }\n            return;\n        }\n        this.elements = elementsOrBuffer || {};\n    }\n    /**\n     * Gets element value.\n     * @method\n     * @param {string} tag - Element tag.\n     * @returns {string|undefined} Element value or undefined if element doesn't exist.\n     */\n    DicomEcg.prototype.getElement = function (tag) {\n        return this.elements[tag];\n    };\n    /**\n     * Sets element value.\n     * @method\n     * @param {string} tag - Element tag.\n     * @param {string} value - Element value.\n     */\n    DicomEcg.prototype.setElement = function (tag, value) {\n        this.elements[tag] = value;\n    };\n    /**\n     * Gets all elements.\n     * @method\n     * @returns {Object} Elements.\n     */\n    DicomEcg.prototype.getElements = function () {\n        return this.elements;\n    };\n    /**\n     * Gets DICOM transfer syntax UID.\n     * @method\n     * @returns {string} Transfer syntax UID.\n     */\n    DicomEcg.prototype.getTransferSyntaxUid = function () {\n        return this.transferSyntaxUid;\n    };\n    /**\n     * Sets DICOM transfer syntax UID.\n     * @method\n     * @param {string} transferSyntaxUid - Transfer Syntax UID.\n     */\n    DicomEcg.prototype.setTransferSyntaxUid = function (transferSyntaxUid) {\n        this.transferSyntaxUid = transferSyntaxUid;\n    };\n    /**\n     * Gets elements encoded in a DICOM dataset buffer.\n     * @method\n     * @returns {ArrayBuffer} DICOM dataset.\n     */\n    DicomEcg.prototype.getDenaturalizedDataset = function () {\n        var denaturalizedDataset = DicomMetaDictionary.denaturalizeDataset(this.getElements());\n        var stream = new WriteBufferStream();\n        DicomMessage.write(denaturalizedDataset, stream, this.transferSyntaxUid, {});\n        return stream.getBuffer();\n    };\n    /**\n     * Load options.\n     * @method\n     * @private\n     */\n    DicomEcg.prototype._setOpts = function (opts) {\n        this.opts = opts || {};\n        this.opts.speed = opts.speed || RenderingDefaults.DefaultSpeed;\n        this.opts.amplitude = opts.amplitude || RenderingDefaults.DefaultAmplitude;\n        this.opts.applyLowPassFilter = opts.applyLowPassFilter || false;\n        if (opts.millimeterPerSecond) {\n            this.opts.speed = opts.millimeterPerSecond;\n        }\n        if (opts.millimeterPerMillivolt) {\n            this.opts.amplitude = opts.millimeterPerMillivolt;\n        }\n    };\n    /**\n     * Gets Waveform DICOM dataset buffer.\n     * @method\n     * @returns {Waveform} DICOM Waveform.\n     */\n    DicomEcg.prototype.getWaveform = function () {\n        // Extract waveform\n        var waveform = this._extractWaveform();\n        return waveform;\n    };\n    /**\n     * Gets Waveform Information DICOM dataset buffer.\n     * @method\n     * @returns {WaveformInfo} DICOM Waveform.\n     */\n    DicomEcg.prototype.getInfo = function () {\n        var waveform = this.getWaveform();\n        // Extract waveform info\n        var info = this._extractInformation(waveform);\n        // Extract annotation\n        var annotation = this._extractAnnotation();\n        if (annotation.length > 0) {\n            info.push({ key: 'Annotation', value: annotation });\n        }\n        // Additional info\n        info.push({ key: 'Sampling Frequency', value: waveform.samplingFrequency, unit: 'Hz' });\n        info.push({\n            key: 'Duration',\n            value: waveform.samples / waveform.samplingFrequency,\n            unit: 'sec',\n        });\n        info.push({ key: 'Speed', value: this.opts.speed, unit: 'mm/sec' });\n        info.push({ key: 'Amplitude', value: this.opts.amplitude, unit: 'mm/mV' });\n        return info;\n    };\n    /**\n     * Gets the ECG description.\n     * @method\n     * @returns {string} DICOM ECG description.\n     */\n    DicomEcg.prototype.toString = function () {\n        var str = [];\n        str.push('DICOM ECG:');\n        str.push('='.repeat(50));\n        str.push(JSON.stringify(this.getElements()));\n        return str.join('\\n');\n    };\n    /**\n     * Loads a dataset from p10 buffer.\n     * @method\n     * @private\n     * @param {ArrayBuffer} arrayBuffer - DICOM P10 array buffer.\n     * @returns {Object} Dataset elements and transfer syntax UID.\n     */\n    DicomEcg.prototype._fromP10Buffer = function (arrayBuffer) {\n        var dicomDict = DicomMessage.readFile(arrayBuffer, { ignoreErrors: true });\n        var meta = DicomMetaDictionary.naturalizeDataset(dicomDict.meta);\n        var transferSyntaxUid = meta.TransferSyntaxUID;\n        var elements = DicomMetaDictionary.naturalizeDataset(dicomDict.dict);\n        return { elements: elements, transferSyntaxUid: transferSyntaxUid };\n    };\n    /**\n     * Loads a dataset from elements only buffer.\n     * @method\n     * @private\n     * @param {ArrayBuffer} arrayBuffer - Elements array buffer.\n     * @param {string} transferSyntaxUid - Transfer Syntax UID.\n     * @returns {Object} Dataset elements.\n     */\n    DicomEcg.prototype._fromElementsBuffer = function (arrayBuffer, transferSyntaxUid) {\n        var stream = new ReadBufferStream(arrayBuffer);\n        // Use the proper syntax length (based on transfer syntax UID)\n        // since dcmjs doesn't do that internally.\n        var syntaxLengthTypeToDecode = transferSyntaxUid === '1.2.840.10008.1.2' ? '1.2.840.10008.1.2' : '1.2.840.10008.1.2.1';\n        var denaturalizedDataset = DicomMessage._read(stream, syntaxLengthTypeToDecode, {\n            ignoreErrors: true,\n        });\n        return DicomMetaDictionary.naturalizeDataset(denaturalizedDataset);\n    };\n    /**\n     * Extracts waveform.\n     * @method\n     * @private\n     * @returns {Object} Waveform.\n     * @throws Error if WaveformSequence is empty and sample interpretation\n     * or bits allocated values are not supported.\n     */\n    DicomEcg.prototype._extractWaveform = function () {\n        var waveformSequence = this.getElement('WaveformSequence');\n        if (waveformSequence === undefined ||\n            !Array.isArray(waveformSequence) ||\n            waveformSequence.length === 0) {\n            throw new Error('WaveformSequence is empty');\n        }\n        var waveformSequenceItem = waveformSequence.find(function (o) { return o; });\n        if (waveformSequenceItem.WaveformSampleInterpretation !== 'SS') {\n            throw new Error(\"Waveform sample interpretation is not supported [\".concat(waveformSequenceItem.WaveformSampleInterpretation, \"]\"));\n        }\n        if (waveformSequenceItem.WaveformBitsAllocated !== 16) {\n            throw new Error(\"Waveform bits allocated is not supported [\".concat(waveformSequenceItem.WaveformBitsAllocated, \"]\"));\n        }\n        var waveform = {\n            leads: '',\n            minMax: 0,\n            channelDefinitionSequence: waveformSequenceItem.ChannelDefinitionSequence,\n            waveformData: waveformSequenceItem.WaveformData,\n            channels: waveformSequenceItem.NumberOfWaveformChannels,\n            samples: waveformSequenceItem.NumberOfWaveformSamples,\n            samplingFrequency: waveformSequenceItem.SamplingFrequency,\n            duration: waveformSequenceItem.NumberOfWaveformSamples / waveformSequenceItem.SamplingFrequency,\n        };\n        this._calculateLeads(waveform);\n        this._sortLeads(waveform);\n        return waveform;\n    };\n    /**\n     * Calculates waveform leads.\n     * @method\n     * @private\n     * @param {Object} waveform - Waveform.\n     * @throws Error if waveform bits stored definition value is not supported.\n     */\n    DicomEcg.prototype._calculateLeads = function (waveform) {\n        var channelDefinitionSequence = waveform.channelDefinitionSequence;\n        if (channelDefinitionSequence === undefined ||\n            !Array.isArray(channelDefinitionSequence) ||\n            channelDefinitionSequence.length === 0) {\n            throw new Error('ChannelDefinitionSequence is empty');\n        }\n        if (waveform.channels !== channelDefinitionSequence.length) {\n        }\n        var channels = channelDefinitionSequence.length;\n        var factor = new Array(channels).fill(1.0);\n        var baseline = new Array(channels).fill(0.0);\n        var units = [];\n        var sources = [];\n        channelDefinitionSequence.forEach(function (channelDefinitionSequenceItem, i) {\n            if (channelDefinitionSequenceItem !== undefined) {\n                if (channelDefinitionSequenceItem.WaveformBitsStored !== 16) {\n                    throw new Error(\"Waveform bits stored definition is not supported [\".concat(channelDefinitionSequenceItem.WaveformBitsStored, \"]\"));\n                }\n                if (channelDefinitionSequenceItem.ChannelSensitivity !== undefined &&\n                    channelDefinitionSequenceItem.ChannelSensitivityCorrectionFactor !== undefined) {\n                    factor[i] =\n                        channelDefinitionSequenceItem.ChannelSensitivity *\n                            channelDefinitionSequenceItem.ChannelSensitivityCorrectionFactor;\n                }\n                if (channelDefinitionSequenceItem.ChannelBaseline !== undefined) {\n                    baseline[i] = channelDefinitionSequenceItem.ChannelBaseline;\n                }\n                var channelSensitivityUnitsSequence = channelDefinitionSequenceItem.ChannelSensitivityUnitsSequence;\n                if (channelSensitivityUnitsSequence !== undefined &&\n                    Array.isArray(channelSensitivityUnitsSequence) &&\n                    channelSensitivityUnitsSequence.length > 0) {\n                    var channelSensitivityUnitsSequenceFirstItem = channelSensitivityUnitsSequence[0];\n                    if (channelSensitivityUnitsSequenceFirstItem.CodeValue !== undefined) {\n                        units.push(channelSensitivityUnitsSequenceFirstItem.CodeValue);\n                    }\n                }\n                var channelSourceSequence = channelDefinitionSequenceItem.ChannelSourceSequence;\n                if (channelSourceSequence !== undefined &&\n                    Array.isArray(channelSourceSequence) &&\n                    channelSourceSequence.length !== 0) {\n                    channelSourceSequence.forEach(function (channelSourceSequenceItem) {\n                        var title = channelSourceSequenceItem.CodeMeaning !== undefined\n                            ? channelSourceSequenceItem.CodeMeaning\n                            : '';\n                        var codeValue = channelSourceSequenceItem.CodeValue;\n                        var schemeDesignator = channelSourceSequenceItem.CodingSchemeDesignator;\n                        if (!title && codeValue !== undefined && schemeDesignator !== undefined) {\n                            codeValue = codeValue.replace(/[^0-9-:.]/g, '');\n                            var mdcScpEcgCodeTitles = [\n                                { mdcCode: '2:1', scpEcgCode: '5.6.3-9-1', title: 'I' },\n                                { mdcCode: '2:2', scpEcgCode: '5.6.3-9-2', title: 'II' },\n                                { mdcCode: '2:61', scpEcgCode: '5.6.3-9-61', title: 'III' },\n                                { mdcCode: '2:62', scpEcgCode: '5.6.3-9-62', title: 'aVR' },\n                                { mdcCode: '2:63', scpEcgCode: '5.6.3-9-63', title: 'aVL' },\n                                { mdcCode: '2:64', scpEcgCode: '5.6.3-9-64', title: 'aVF' },\n                                { mdcCode: '2:3', scpEcgCode: '5.6.3-9-3', title: 'V1' },\n                                { mdcCode: '2:4', scpEcgCode: '5.6.3-9-4', title: 'V2' },\n                                { mdcCode: '2:5', scpEcgCode: '5.6.3-9-5', title: 'V3' },\n                                { mdcCode: '2:6', scpEcgCode: '5.6.3-9-6', title: 'V4' },\n                                { mdcCode: '2:7', scpEcgCode: '5.6.3-9-7', title: 'V5' },\n                                { mdcCode: '2:8', scpEcgCode: '5.6.3-9-8', title: 'V6' },\n                            ];\n                            if (schemeDesignator === 'MDC') {\n                                var mdcCodeTitle = mdcScpEcgCodeTitles.find(function (i) { return i.mdcCode === codeValue; });\n                                if (mdcCodeTitle !== undefined) {\n                                    title = mdcCodeTitle.title;\n                                }\n                            }\n                            else if (schemeDesignator === 'SCPECG') {\n                                var scpEcgCodeTitle = mdcScpEcgCodeTitles.find(function (i) { return i.scpEcgCode === codeValue; });\n                                if (scpEcgCodeTitle !== undefined) {\n                                    title = scpEcgCodeTitle.title;\n                                }\n                            }\n                        }\n                        title = title ? title.replace(/[^a-zA-Z0-9_ ]/g, '') : '';\n                        sources.push(title\n                            .replace(/lead/i, '')\n                            .replace(/\\(?einthoven\\)?/i, '')\n                            .trim());\n                    });\n                }\n            }\n        });\n        waveform.leads = [];\n        var waveformDataBuffer = new Uint8Array(waveform.waveformData.find(function (o) { return o; }));\n        var waveformData = new Int16Array(new Uint16Array(waveformDataBuffer.buffer, waveformDataBuffer.byteOffset, waveformDataBuffer.byteLength / Uint16Array.BYTES_PER_ELEMENT));\n        // Split to channels\n        var signals = waveformData.reduce(function (rows, key, index) {\n            return (index % channels === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows;\n        }, []);\n        // Transpose\n        signals = signals[0].map(function (x, i) { return signals.map(function (x) { return x[i]; }); });\n        // Apply baseline and factor\n        for (var i = 0; i < channels; i++) {\n            for (var j = 0; j < signals[i].length; j++) {\n                signals[i][j] = (signals[i][j] + baseline[i]) * factor[i];\n            }\n        }\n        // Filter 40hz:\n        if (this.opts.applyLowPassFilter === true) {\n            var cutoffFrequency = 40.0;\n            for (var i = 0; i < channels; i++) {\n                this._lowPassFilter(signals[i], cutoffFrequency, waveform.samplingFrequency);\n            }\n        }\n        // Convert to millivolts\n        if (units.length === channels) {\n            var millivolts = { uV: 1000.0, mV: 1.0, mmHg: 200.0 };\n            for (var i = 0; i < channels; i++) {\n                for (var j = 0; j < signals[i].length; j++) {\n                    signals[i][j] = signals[i][j] / millivolts[units[i]];\n                }\n            }\n        }\n        // Find min/max and assign signal and source\n        for (var i = 0; i < channels; i++) {\n            waveform.leads.push({\n                min: Math.min.apply(Math, signals[i]),\n                max: Math.max.apply(Math, signals[i]),\n                signal: signals[i],\n                source: sources[i],\n            });\n        }\n        waveform.min = Math.min.apply(Math, waveform.leads.map(function (lead) { return lead.min; }));\n        waveform.max = Math.max.apply(Math, waveform.leads.map(function (lead) { return lead.max; }));\n        waveform.minMax = Math.max(Math.abs(Math.min.apply(Math, waveform.leads.map(function (lead) { return lead.min; }))), Math.abs(Math.max.apply(Math, waveform.leads.map(function (lead) { return lead.max; }))));\n    };\n    /**\n     * Sorts waveform leads based on source.\n     * @method\n     * @private\n     * @param {Object} waveform - Waveform.\n     */\n    DicomEcg.prototype._sortLeads = function (waveform) {\n        var order = ['I', 'II', 'III', 'aVR', 'aVL', 'aVF', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6'];\n        waveform.leads.sort(function (a, b) {\n            var index1 = order.indexOf(a.source);\n            var index2 = order.indexOf(b.source);\n            return (index1 > -1 ? index1 : Infinity) - (index2 > -1 ? index2 : Infinity);\n        });\n    };\n    /**\n     * Applies a low-pass filter to sample data.\n     * @method\n     * @private\n     * @param {Array<number>} samples - The sample data to filter.\n     * @param {number} cutoff - Cut off frequency.\n     * @param {number} sampleRate - Samples rate.\n     */\n    DicomEcg.prototype._lowPassFilter = function (samples, cutoff, sampleRate) {\n        var rc = 1.0 / (cutoff * 2.0 * Math.PI);\n        var dt = 1.0 / sampleRate;\n        var alpha = dt / (rc + dt);\n        var lastValue = samples[0];\n        for (var i = 0; i < samples.length; i++) {\n            lastValue = lastValue + alpha * (samples[i] - lastValue);\n            samples[i] = lastValue;\n        }\n    };\n    /**\n     * Extracts waveform information.\n     * @method\n     * @param {Object} waveform - Waveform.\n     * @private\n     * @returns {Array<Object>} Array of waveform information.\n     */\n    DicomEcg.prototype._extractInformation = function (waveform) {\n        var waveformAnnotationSequence = this.getElement('WaveformAnnotationSequence');\n        if (waveformAnnotationSequence === undefined ||\n            !Array.isArray(waveformAnnotationSequence) ||\n            waveformAnnotationSequence.length === 0) {\n            return [];\n        }\n        var info = [];\n        waveformAnnotationSequence.forEach(function (waveformAnnotationSequenceItem) {\n            var conceptNameCodeSequence = waveformAnnotationSequenceItem.ConceptNameCodeSequence;\n            if (conceptNameCodeSequence !== undefined &&\n                Array.isArray(conceptNameCodeSequence) &&\n                conceptNameCodeSequence.length !== 0) {\n                conceptNameCodeSequence.forEach(function (conceptNameCodeSequenceItem) {\n                    var keyUnitInfo = [\n                        { key: 'QT Interval', unit: 'ms' },\n                        { key: 'QTc Interval', unit: 'ms' },\n                        { key: 'RR Interval', unit: 'ms' },\n                        { key: 'VRate', unit: 'BPM' },\n                        { key: 'QRS Duration', unit: 'ms' },\n                        { key: 'QRS Axis', unit: 'Â°' },\n                        { key: 'T Axis', unit: 'Â°' },\n                        { key: 'P Axis', unit: 'Â°' },\n                        { key: 'PR Interval', unit: 'ms' },\n                    ].find(function (i) { return i.key === conceptNameCodeSequenceItem.CodeMeaning; });\n                    if (waveformAnnotationSequenceItem.NumericValue !== undefined &&\n                        keyUnitInfo !== undefined) {\n                        info.push({\n                            key: conceptNameCodeSequenceItem.CodeMeaning,\n                            value: waveformAnnotationSequenceItem.NumericValue,\n                            unit: keyUnitInfo.unit,\n                        });\n                    }\n                });\n            }\n        });\n        var rrInterval = info.find(function (i) { return i.key === 'RR Interval'; });\n        if (!info.find(function (i) { return i.key === 'VRate'; }) && rrInterval) {\n            info.push({\n                key: 'VRate',\n                value: Math.trunc(((60.0 / waveform.duration) * waveform.samples) / rrInterval.value),\n                unit: 'BPM',\n            });\n        }\n        return info;\n    };\n    /**\n     * Extracts waveform annotation.\n     * @method\n     * @private\n     * @returns {Array<string>} Array of waveform annotation.\n     */\n    DicomEcg.prototype._extractAnnotation = function () {\n        var waveformAnnotationSequence = this.getElement('WaveformAnnotationSequence');\n        if (waveformAnnotationSequence === undefined ||\n            !Array.isArray(waveformAnnotationSequence) ||\n            waveformAnnotationSequence.length === 0) {\n            return [];\n        }\n        var annotations = [];\n        waveformAnnotationSequence.forEach(function (waveformAnnotationSequenceItem) {\n            if (waveformAnnotationSequenceItem.UnformattedTextValue !== undefined) {\n                annotations.push(waveformAnnotationSequenceItem.UnformattedTextValue);\n            }\n        });\n        return annotations;\n    };\n    return DicomEcg;\n}());\nexports[\"default\"] = DicomEcg;\n\n\n//# sourceURL=webpack://$/./src/utils/ReadECG.ts?");

/***/ }),

/***/ "./src/viewer/DicomECGViewer.ts":
/*!**************************************!*\
  !*** ./src/viewer/DicomECGViewer.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar DrawECGCanvas_1 = __webpack_require__(/*! ../draw/DrawECGCanvas */ \"./src/draw/DrawECGCanvas.ts\");\nvar ReadECG_1 = __webpack_require__(/*! ../utils/ReadECG */ \"./src/utils/ReadECG.ts\"); //Development\n__webpack_require__(/*! ./Style.css */ \"./src/viewer/Style.css\");\nvar DOMPurify = __webpack_require__(/*! dompurify */ \"./node_modules/dompurify/dist/purify.js\");\n/**\n * Principal Class to render ECG viewer.\n */\nvar DicomECGViewer = /** @class */ (function () {\n    /**\n     * Create Viewer\n     * @param {*} dataDICOMarrayBuffer DICOM DCM ECG Array Buffer.\n     * @param {*} idView Draw ID View.\n     * @param {*} nameView Identifier of the view you want to put, in case you have several views, default 0.\n     */\n    function DicomECGViewer(dataDICOMarrayBuffer, idView, nameView) {\n        this.dataDICOMarrayBuffer = dataDICOMarrayBuffer;\n        //Sanitize string for posivility attacks XSS:\n        this.idView = DOMPurify.sanitize(idView);\n        this.nameView = DOMPurify.sanitize(nameView);\n    }\n    /**\n     * Development new read and render.\n     */\n    DicomECGViewer.prototype.loadCanvas = function () {\n        //Optiones default:\n        var opts = {\n            speed: 25,\n            amplitude: 10,\n            applyLowPassFilter: true,\n        };\n        var readECG = new ReadECG_1.default(this.dataDICOMarrayBuffer, '', opts);\n        //Correct data:\n        if (readECG != null) {\n            var waveform = readECG.getWaveform();\n            var waveinformation = readECG.getInfo();\n            //Load canvas structure:\n            if (waveform != null && waveinformation != null) {\n                //Duration:\n                var duration = waveinformation.find(function (o) { return o.key === 'Duration'; });\n                var durationText = '';\n                if (duration != undefined) {\n                    durationText = duration.value + duration.unit;\n                }\n                //BPM:\n                var bpm = waveinformation.find(function (o) { return o.key === 'VRate'; });\n                var bpmText = '';\n                if (bpm != undefined) {\n                    bpmText = bpm.value;\n                }\n                var information = {\n                    Name: readECG.elements.PatientName,\n                    Sex: readECG.elements.Sex,\n                    Size: readECG.elements.PatientSize,\n                    Id: readECG.elements.PatientID,\n                    Age: readECG.elements.PatientAge,\n                    Weight: readECG.elements.PatientWeight,\n                    Date: readECG.elements.StudyDate,\n                    Birth: readECG.elements.PatientBirthDate,\n                    Duration: durationText,\n                    BPM: bpmText\n                };\n                //Load information:\n                this.loadCanvasDOM(information);\n                //Draw ECG:\n                var ecgCanvas = new DrawECGCanvas_1.default(this.idView + this.nameView, waveform);\n                ecgCanvas.draw();\n            }\n        }\n        else {\n            //ecgCanvas.drawNoCompatible();\n        }\n    };\n    /**\n    * Create struct of view.\n    */\n    DicomECGViewer.prototype.loadCanvasDOM = function (information) {\n        var view = \"\";\n        document.getElementById(this.idView).innerHTML = view;\n        view =\n            '<div id=\"infoECG\">' +\n                '<div id=\"divTableBody\">' +\n                '<div class=\"divTableRow\">' +\n                '<div class=\"divTableCell\">NAME: <i>' + information.Name + \"</i></div>\" +\n                '<div class=\"divTableCell\">SEX: <i>' + information.Sex + \"</i></div>\" +\n                '<div class=\"divTableCell\">PATIENT SIZE: <i>' + information.Size + \"</i></div>\" +\n                '<div class=\"divTableCell\">BPM: <i>' + information.BPM + \"</i></div>\" +\n                \"</div>\" +\n                '<div class=\"divTableRow\">' +\n                '<div class=\"divTableCell\">PATIENT ID: <i>' + information.Id + \"</i></div>\" +\n                '<div class=\"divTableCell\">PATIENT AGE: <i>' + information.Age + \"</i></div>\" +\n                '<div class=\"divTableCell\">PATIENT WEIGHT: <i>' + information.Weight + \"</i></div>\" +\n                \"</div>\" +\n                '<div class=\"divTableRow\">' +\n                '<div class=\"divTableCell\">DATE: <i>' + information.Date + \"</i></div>\" +\n                '<div class=\"divTableCell\">BIRTH: <i>' + information.Birth + \"</i></div>\" +\n                '<div class=\"divTableCell\">DURATION: <i>' + information.Duration + \"</i></div>\" +\n                \"</div>\" +\n                \"</div>\" +\n                '<div id=\"toolsECG\">' +\n                '<div class=\"divTools\">' +\n                '<b>TIME: </b><i id=\"textTime\"> 25mm/s </i>' +\n                '<button id=\"timeLeft\">&#8592</button>' +\n                '<button id=\"timeRight\">&#8594</button>' +\n                '</div>' +\n                '<div class=\"divTools\">' +\n                '<b>AMPLITUDE: </b><i id=\"textAmplitude\"> 10mm/mV </i>' +\n                '<button id=\"amplitudeDown\">&#8595</button>' +\n                '<button id=\"amplitudeUp\">&#8593</button>' +\n                '</div>' +\n                '</div>' +\n                '</div>' +\n                '<canvas id=\"' + this.idView + this.nameView + '\" style=\"border-top: 2px solid #000000;\"></canvas>' +\n                '<div id=\"zoomButons\">' +\n                '<button id=\"plus\">+</button>' +\n                '<button id=\"minus\">-</button>' +\n                '</div>';\n        document.getElementById(this.idView).innerHTML = view;\n    };\n    return DicomECGViewer;\n}());\nexports[\"default\"] = DicomECGViewer;\n\n\n//# sourceURL=webpack://$/./src/viewer/DicomECGViewer.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});